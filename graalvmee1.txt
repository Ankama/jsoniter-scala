[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 18, 2018 8:15:22 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:991:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1077:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d8(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d10(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d15(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e5(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "l"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT.jar ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmee1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41975.079 ops/s
[info] # Warmup Iteration   2: 508672.714 ops/s
[info] # Warmup Iteration   3: 968648.023 ops/s
[info] # Warmup Iteration   4: 1076290.892 ops/s
[info] # Warmup Iteration   5: 1036651.808 ops/s
[info] Iteration   1: 1092904.396 ops/s
[info]                  ·gc.alloc.rate:                   2441.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              3516.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2868.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1086382.419 ops/s
[info]                  ·gc.alloc.rate:                   2458.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              3561.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3838.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1077375.445 ops/s
[info]                  ·gc.alloc.rate:               2426.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          3544.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2651.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3872.316 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1067472.218 ops/s
[info]                  ·gc.alloc.rate:               2404.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          3545.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2940.149 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1097841.230 ops/s
[info]                  ·gc.alloc.rate:                   2511.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3827.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   1084395.142 ±(99.9%) 46877.358 ops/s [Average]
[info]   (min, avg, max) = (1067472.218, 1084395.142, 1097841.230), stdev = 12173.901
[info]   CI (99.9%): [1037517.783, 1131272.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2448.485 ±(99.9%) 155.430 MB/sec [Average]
[info]   (min, avg, max) = (2404.506, 2448.485, 2511.455), stdev = 40.365
[info]   CI (99.9%): [2293.056, 2603.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3553.491 ±(99.9%) 118.481 B/op [Average]
[info]   (min, avg, max) = (3516.473, 3553.491, 3600.457), stdev = 30.769
[info]   CI (99.9%): [3435.010, 3671.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2391.236 ±(99.9%) 1400.386 MB/sec [Average]
[info]   (min, avg, max) = (1991.752, 2391.236, 2669.880), stdev = 363.676
[info]   CI (99.9%): [990.850, 3791.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3469.282 ±(99.9%) 1989.759 B/op [Average]
[info]   (min, avg, max) = (2868.259, 3469.282, 3872.316), stdev = 516.734
[info]   CI (99.9%): [1479.524, 5459.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.944 ±(99.9%) 7.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.944, 4.405), stdev = 1.939
[info]   CI (99.9%): [≈ 0, 8.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.359 ±(99.9%) 10.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.359, 6.344), stdev = 2.792
[info]   CI (99.9%): [≈ 0, 12.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41195.895 ops/s
[info] # Warmup Iteration   2: 1184609.326 ops/s
[info] # Warmup Iteration   3: 1745971.267 ops/s
[info] # Warmup Iteration   4: 1991451.462 ops/s
[info] # Warmup Iteration   5: 1932822.412 ops/s
[info] Iteration   1: 1927489.919 ops/s
[info]                  ·gc.alloc.rate:               1259.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          1027.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1084.058 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1917571.288 ops/s
[info]                  ·gc.alloc.rate:                   1251.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1026.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1091.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1990372.492 ops/s
[info]                  ·gc.alloc.rate:               1280.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          1012.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 527.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1991607.257 ops/s
[info]                  ·gc.alloc.rate:                   1287.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1017.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1054.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1992317.922 ops/s
[info]                  ·gc.alloc.rate:                   1285.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              1015.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1055.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1963871.776 ±(99.9%) 145970.678 ops/s [Average]
[info]   (min, avg, max) = (1917571.288, 1963871.776, 1992317.922), stdev = 37908.122
[info]   CI (99.9%): [1817901.098, 2109842.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1272.814 ±(99.9%) 63.960 MB/sec [Average]
[info]   (min, avg, max) = (1251.113, 1272.814, 1287.775), stdev = 16.610
[info]   CI (99.9%): [1208.853, 1336.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1019.965 ±(99.9%) 26.289 B/op [Average]
[info]   (min, avg, max) = (1012.769, 1019.965, 1027.646), stdev = 6.827
[info]   CI (99.9%): [993.676, 1046.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.290 ±(99.9%) 1146.963 MB/sec [Average]
[info]   (min, avg, max) = (666.492, 1199.290, 1336.568), stdev = 297.863
[info]   CI (99.9%): [52.327, 2346.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   962.641 ±(99.9%) 939.921 B/op [Average]
[info]   (min, avg, max) = (527.007, 962.641, 1091.834), stdev = 244.094
[info]   CI (99.9%): [22.720, 1902.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.312), stdev = 0.580
[info]   CI (99.9%): [≈ 0, 2.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.217 ±(99.9%) 1.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 1.036), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 1.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1214133.865 ops/s
[info] # Warmup Iteration   2: 4937911.944 ops/s
[info] # Warmup Iteration   3: 5715734.852 ops/s
[info] # Warmup Iteration   4: 5746823.073 ops/s
[info] # Warmup Iteration   5: 5728606.196 ops/s
[info] Iteration   1: 5773728.244 ops/s
[info]                  ·gc.alloc.rate:      381.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5705146.565 ops/s
[info]                  ·gc.alloc.rate:               411.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          113.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141.136 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5712254.361 ops/s
[info]                  ·gc.alloc.rate:               391.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          107.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184.365 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5722713.384 ops/s
[info]                  ·gc.alloc.rate:      378.211 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5726518.246 ops/s
[info]                  ·gc.alloc.rate:                   395.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              108.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5728072.160 ±(99.9%) 103527.819 ops/s [Average]
[info]   (min, avg, max) = (5705146.565, 5728072.160, 5773728.244), stdev = 26885.846
[info]   CI (99.9%): [5624544.341, 5831599.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   391.491 ±(99.9%) 50.050 MB/sec [Average]
[info]   (min, avg, max) = (378.211, 391.491, 411.090), stdev = 12.998
[info]   CI (99.9%): [341.441, 441.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.556 ±(99.9%) 14.933 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.556, 113.351), stdev = 3.878
[info]   CI (99.9%): [92.622, 122.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.073 ±(99.9%) 1324.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.073, 669.280), stdev = 343.885
[info]   CI (99.9%): [≈ 0, 1694.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   101.882 ±(99.9%) 364.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.882, 184.365), stdev = 94.647
[info]   CI (99.9%): [≈ 0, 466.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:51:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469.710 ops/s
[info] # Warmup Iteration   2: 182448.367 ops/s
[info] # Warmup Iteration   3: 438322.785 ops/s
[info] # Warmup Iteration   4: 463774.584 ops/s
[info] # Warmup Iteration   5: 461229.124 ops/s
[info] Iteration   1: 465180.866 ops/s
[info]                  ·gc.alloc.rate:                   2458.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              8313.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6782.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.628 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 466917.307 ops/s
[info]                  ·gc.alloc.rate:                   2464.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              8306.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9008.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 468298.180 ops/s
[info]                  ·gc.alloc.rate:               2457.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          8257.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6737.599 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 467800.553 ops/s
[info]                  ·gc.alloc.rate:               2481.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          8348.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9009.309 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 468439.910 ops/s
[info]                  ·gc.alloc.rate:               2511.965 MB/sec
[info]                  ·gc.alloc.rate.norm:          8439.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9024.090 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   467327.363 ±(99.9%) 5158.911 ops/s [Average]
[info]   (min, avg, max) = (465180.866, 467327.363, 468439.910), stdev = 1339.753
[info]   CI (99.9%): [462168.452, 472486.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2474.574 ±(99.9%) 88.699 MB/sec [Average]
[info]   (min, avg, max) = (2457.129, 2474.574, 2511.965), stdev = 23.035
[info]   CI (99.9%): [2385.875, 2563.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8333.065 ±(99.9%) 260.926 B/op [Average]
[info]   (min, avg, max) = (8257.877, 8333.065, 8439.718), stdev = 67.762
[info]   CI (99.9%): [8072.138, 8593.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2409.359 ±(99.9%) 1420.759 MB/sec [Average]
[info]   (min, avg, max) = (2004.771, 2409.359, 2685.895), stdev = 368.967
[info]   CI (99.9%): [988.599, 3830.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8112.509 ±(99.9%) 4754.148 B/op [Average]
[info]   (min, avg, max) = (6737.599, 8112.509, 9024.090), stdev = 1234.637
[info]   CI (99.9%): [3358.361, 12866.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.569 ±(99.9%) 4.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.569, 2.551), stdev = 1.116
[info]   CI (99.9%): [≈ 0, 4.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.922 ±(99.9%) 14.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.922, 8.628), stdev = 3.773
[info]   CI (99.9%): [≈ 0, 16.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32313.003 ops/s
[info] # Warmup Iteration   2: 756800.075 ops/s
[info] # Warmup Iteration   3: 981530.287 ops/s
[info] # Warmup Iteration   4: 1091701.322 ops/s
[info] # Warmup Iteration   5: 1081752.541 ops/s
[info] Iteration   1: 1095732.398 ops/s
[info]                  ·gc.alloc.rate:                   2894.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              4156.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2650.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3806.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.370 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 1117884.919 ops/s
[info]                  ·gc.alloc.rate:                   2960.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              4167.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3301.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4648.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 1124688.495 ops/s
[info]                  ·gc.alloc.rate:                   2977.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              4165.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2633.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3685.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1122331.720 ops/s
[info]                  ·gc.alloc.rate:                   3024.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3305.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4633.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1108075.205 ops/s
[info]                  ·gc.alloc.rate:                   2962.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              4206.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3774.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   1113742.547 ±(99.9%) 45854.652 ops/s [Average]
[info]   (min, avg, max) = (1095732.398, 1113742.547, 1124688.495), stdev = 11908.308
[info]   CI (99.9%): [1067887.895, 1159597.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2963.729 ±(99.9%) 179.934 MB/sec [Average]
[info]   (min, avg, max) = (2894.301, 2963.729, 3024.740), stdev = 46.728
[info]   CI (99.9%): [2783.795, 3143.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4187.390 ±(99.9%) 135.779 B/op [Average]
[info]   (min, avg, max) = (4156.653, 4187.390, 4240.326), stdev = 35.261
[info]   CI (99.9%): [4051.611, 4323.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2909.770 ±(99.9%) 1384.180 MB/sec [Average]
[info]   (min, avg, max) = (2633.463, 2909.770, 3305.488), stdev = 359.467
[info]   CI (99.9%): [1525.590, 4293.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4109.561 ±(99.9%) 1875.879 B/op [Average]
[info]   (min, avg, max) = (3685.020, 4109.561, 4648.025), stdev = 487.160
[info]   CI (99.9%): [2233.681, 5985.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.482 ±(99.9%) 7.669 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.482, 3.739), stdev = 1.992
[info]   CI (99.9%): [≈ 0, 9.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.107 ±(99.9%) 10.913 B/op [Average]
[info]   (min, avg, max) = (0.029, 2.107, 5.370), stdev = 2.834
[info]   CI (99.9%): [≈ 0, 13.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.400, 19.000), stdev = 5.595
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143906.001 ops/s
[info] # Warmup Iteration   2: 2430350.802 ops/s
[info] # Warmup Iteration   3: 2805444.850 ops/s
[info] # Warmup Iteration   4: 3006717.375 ops/s
[info] # Warmup Iteration   5: 3003939.905 ops/s
[info] Iteration   1: 3024284.137 ops/s
[info]                  ·gc.alloc.rate:               1212.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          631.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 688.845 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3010267.599 ops/s
[info]                  ·gc.alloc.rate:                   1213.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              634.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2961162.801 ops/s
[info]                  ·gc.alloc.rate:               1187.213 MB/sec
[info]                  ·gc.alloc.rate.norm:          630.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 707.072 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3025410.696 ops/s
[info]                  ·gc.alloc.rate:                   1184.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              616.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2999995.436 ops/s
[info]                  ·gc.alloc.rate:                   1187.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              623.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     700.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   3004224.134 ±(99.9%) 101147.371 ops/s [Average]
[info]   (min, avg, max) = (2961162.801, 3004224.134, 3025410.696), stdev = 26267.651
[info]   CI (99.9%): [2903076.763, 3105371.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1197.065 ±(99.9%) 56.023 MB/sec [Average]
[info]   (min, avg, max) = (1184.346, 1197.065, 1213.031), stdev = 14.549
[info]   CI (99.9%): [1141.042, 1253.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   627.104 ±(99.9%) 28.399 B/op [Average]
[info]   (min, avg, max) = (616.104, 627.104, 634.201), stdev = 7.375
[info]   CI (99.9%): [598.705, 655.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1196.494 ±(99.9%) 1140.994 MB/sec [Average]
[info]   (min, avg, max) = (666.485, 1196.494, 1334.719), stdev = 296.312
[info]   CI (99.9%): [55.500, 2337.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   627.321 ±(99.9%) 604.613 B/op [Average]
[info]   (min, avg, max) = (346.710, 627.321, 707.072), stdev = 157.016
[info]   CI (99.9%): [22.708, 1231.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 1.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.686), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.360), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2448019.752 ops/s
[info] # Warmup Iteration   2: 17467959.828 ops/s
[info] # Warmup Iteration   3: 20189024.018 ops/s
[info] # Warmup Iteration   4: 20624939.159 ops/s
[info] # Warmup Iteration   5: 20511894.812 ops/s
[info] Iteration   1: 19520697.183 ops/s
[info]                  ·gc.alloc.rate:               1006.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 20018209.505 ops/s
[info]                  ·gc.alloc.rate:                   1062.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 19312849.683 ops/s
[info]                  ·gc.alloc.rate:               999.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54.557 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 20019384.351 ops/s
[info]                  ·gc.alloc.rate:                   1070.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              84.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 20533196.229 ops/s
[info]                  ·gc.alloc.rate:                   1066.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              81.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   19880867.390 ±(99.9%) 1842634.123 ops/s [Average]
[info]   (min, avg, max) = (19312849.683, 19880867.390, 20533196.229), stdev = 478526.230
[info]   CI (99.9%): [18038233.267, 21723501.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1041.275 ±(99.9%) 134.071 MB/sec [Average]
[info]   (min, avg, max) = (999.913, 1041.275, 1070.055), stdev = 34.818
[info]   CI (99.9%): [907.204, 1175.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.410 ±(99.9%) 5.109 B/op [Average]
[info]   (min, avg, max) = (81.158, 82.410, 84.123), stdev = 1.327
[info]   CI (99.9%): [77.301, 87.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.113 ±(99.9%) 1412.011 MB/sec [Average]
[info]   (min, avg, max) = (668.559, 937.113, 1339.281), stdev = 366.695
[info]   CI (99.9%): [≈ 0, 2349.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   74.051 ±(99.9%) 109.694 B/op [Average]
[info]   (min, avg, max) = (51.342, 74.051, 105.289), stdev = 28.487
[info]   CI (99.9%): [≈ 0, 183.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2732159.965 ops/s
[info] # Warmup Iteration   2: 18138039.392 ops/s
[info] # Warmup Iteration   3: 19308122.758 ops/s
[info] # Warmup Iteration   4: 19277711.523 ops/s
[info] # Warmup Iteration   5: 19298012.553 ops/s
[info] Iteration   1: 19276861.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19280481.464 ops/s
[info]                  ·gc.alloc.rate:      0.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.053 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19275235.299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19312140.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19329880.042 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   19294919.800 ±(99.9%) 95120.368 ops/s [Average]
[info]   (min, avg, max) = (19275235.299, 19294919.800, 19329880.042), stdev = 24702.458
[info]   CI (99.9%): [19199799.432, 19390040.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.129 ±(99.9%) 1.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.129, 0.645), stdev = 0.289
[info]   CI (99.9%): [≈ 0, 1.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.011 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3059.895 ops/s
[info] # Warmup Iteration   2: 356117.087 ops/s
[info] # Warmup Iteration   3: 1032320.482 ops/s
[info] # Warmup Iteration   4: 1107295.217 ops/s
[info] # Warmup Iteration   5: 1102049.841 ops/s
[info] Iteration   1: 1111052.370 ops/s
[info]                  ·gc.alloc.rate:                   2549.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              3611.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3784.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.214 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1110123.554 ops/s
[info]                  ·gc.alloc.rate:                   2528.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              3584.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3789.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1115169.721 ops/s
[info]                  ·gc.alloc.rate:               2536.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          3579.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2834.083 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1102969.021 ops/s
[info]                  ·gc.alloc.rate:               2535.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          3618.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3828.762 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1113027.576 ops/s
[info]                  ·gc.alloc.rate:               2585.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          3655.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3805.506 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   1110468.448 ±(99.9%) 17787.352 ops/s [Average]
[info]   (min, avg, max) = (1102969.021, 1110468.448, 1115169.721), stdev = 4619.319
[info]   CI (99.9%): [1092681.096, 1128255.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2547.274 ±(99.9%) 88.451 MB/sec [Average]
[info]   (min, avg, max) = (2528.243, 2547.274, 2585.976), stdev = 22.971
[info]   CI (99.9%): [2458.822, 2635.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3610.015 ±(99.9%) 118.178 B/op [Average]
[info]   (min, avg, max) = (3579.766, 3610.015, 3655.889), stdev = 30.690
[info]   CI (99.9%): [3491.837, 3728.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2545.698 ±(99.9%) 1157.099 MB/sec [Average]
[info]   (min, avg, max) = (2008.348, 2545.698, 2691.807), stdev = 300.495
[info]   CI (99.9%): [1388.600, 3702.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3608.635 ±(99.9%) 1668.578 B/op [Average]
[info]   (min, avg, max) = (2834.083, 3608.635, 3828.762), stdev = 433.324
[info]   CI (99.9%): [1940.057, 5277.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.487 ±(99.9%) 3.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.487, 2.269), stdev = 0.999
[info]   CI (99.9%): [≈ 0, 4.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.690 ±(99.9%) 5.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 3.214), stdev = 1.415
[info]   CI (99.9%): [≈ 0, 6.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125101.394 ops/s
[info] # Warmup Iteration   2: 1297664.511 ops/s
[info] # Warmup Iteration   3: 3302649.504 ops/s
[info] # Warmup Iteration   4: 4010797.685 ops/s
[info] # Warmup Iteration   5: 4041339.399 ops/s
[info] Iteration   1: 4088841.396 ops/s
[info]                  ·gc.alloc.rate:                   3722.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3326.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1280.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4053955.149 ops/s
[info]                  ·gc.alloc.rate:                   3692.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              1433.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1295.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4099454.119 ops/s
[info]                  ·gc.alloc.rate:                   3785.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              1453.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4022.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1544.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4089965.127 ops/s
[info]                  ·gc.alloc.rate:                   3751.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              1443.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3369.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1296.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4071076.790 ops/s
[info]                  ·gc.alloc.rate:                   3761.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              1454.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4057.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1568.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   4080658.516 ±(99.9%) 69730.858 ops/s [Average]
[info]   (min, avg, max) = (4053955.149, 4080658.516, 4099454.119), stdev = 18108.882
[info]   CI (99.9%): [4010927.658, 4150389.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3742.848 ±(99.9%) 139.719 MB/sec [Average]
[info]   (min, avg, max) = (3692.161, 3742.848, 3785.996), stdev = 36.285
[info]   CI (99.9%): [3603.130, 3882.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1443.450 ±(99.9%) 40.417 B/op [Average]
[info]   (min, avg, max) = (1432.647, 1443.450, 1454.220), stdev = 10.496
[info]   CI (99.9%): [1403.033, 1483.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3622.395 ±(99.9%) 1470.088 MB/sec [Average]
[info]   (min, avg, max) = (3326.413, 3622.395, 4057.154), stdev = 381.777
[info]   CI (99.9%): [2152.307, 5092.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1396.921 ±(99.9%) 562.365 B/op [Average]
[info]   (min, avg, max) = (1280.128, 1396.921, 1568.481), stdev = 146.044
[info]   CI (99.9%): [834.556, 1959.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.014, 0.024), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.709 ops/s
[info] # Warmup Iteration   2: 9758916.499 ops/s
[info] # Warmup Iteration   3: 10809935.266 ops/s
[info] # Warmup Iteration   4: 11610699.481 ops/s
[info] # Warmup Iteration   5: 11593164.128 ops/s
[info] Iteration   1: 11109968.466 ops/s
[info]                  ·gc.alloc.rate:               1403.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          198.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 188.367 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 10706536.704 ops/s
[info]                  ·gc.alloc.rate:                   1410.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 11622560.370 ops/s
[info]                  ·gc.alloc.rate:                   1457.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11768487.828 ops/s
[info]                  ·gc.alloc.rate:                   1464.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              195.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11677076.871 ops/s
[info]                  ·gc.alloc.rate:                   1451.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              195.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11376926.048 ±(99.9%) 1748162.220 ops/s [Average]
[info]   (min, avg, max) = (10706536.704, 11376926.048, 11768487.828), stdev = 453992.177
[info]   CI (99.9%): [9628763.828, 13125088.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1437.567 ±(99.9%) 109.253 MB/sec [Average]
[info]   (min, avg, max) = (1403.671, 1437.567, 1464.344), stdev = 28.373
[info]   CI (99.9%): [1328.314, 1546.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   198.959 ±(99.9%) 18.458 B/op [Average]
[info]   (min, avg, max) = (195.669, 198.959, 207.221), stdev = 4.793
[info]   CI (99.9%): [180.501, 217.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1464.041 ±(99.9%) 1145.699 MB/sec [Average]
[info]   (min, avg, max) = (1328.494, 1464.041, 1996.273), stdev = 297.534
[info]   CI (99.9%): [318.342, 2609.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   203.866 ±(99.9%) 193.211 B/op [Average]
[info]   (min, avg, max) = (178.002, 203.866, 293.327), stdev = 50.176
[info]   CI (99.9%): [10.655, 397.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.041 ±(99.9%) 7.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.041, 4.729), stdev = 2.066
[info]   CI (99.9%): [≈ 0, 8.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.142 ±(99.9%) 1.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.640), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42454.773 ops/s
[info] # Warmup Iteration   2: 2863979.359 ops/s
[info] # Warmup Iteration   3: 3426703.838 ops/s
[info] # Warmup Iteration   4: 3841187.188 ops/s
[info] # Warmup Iteration   5: 3859495.573 ops/s
[info] Iteration   1: 3893618.724 ops/s
[info]                  ·gc.alloc.rate:                   2339.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3870146.252 ops/s
[info]                  ·gc.alloc.rate:                   2336.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3816132.335 ops/s
[info]                  ·gc.alloc.rate:                   2314.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              954.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1109.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3832940.586 ops/s
[info]                  ·gc.alloc.rate:               2327.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          955.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 830.293 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3836528.090 ops/s
[info]                  ·gc.alloc.rate:               2343.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          961.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 830.855 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3849873.197 ±(99.9%) 120665.917 ops/s [Average]
[info]   (min, avg, max) = (3816132.335, 3849873.197, 3893618.724), stdev = 31336.555
[info]   CI (99.9%): [3729207.280, 3970539.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2332.248 ±(99.9%) 44.669 MB/sec [Average]
[info]   (min, avg, max) = (2314.465, 2332.248, 2343.304), stdev = 11.600
[info]   CI (99.9%): [2287.579, 2376.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   953.354 ±(99.9%) 22.406 B/op [Average]
[info]   (min, avg, max) = (945.697, 953.354, 961.046), stdev = 5.819
[info]   CI (99.9%): [930.948, 975.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2151.769 ±(99.9%) 1157.382 MB/sec [Average]
[info]   (min, avg, max) = (2008.265, 2151.769, 2689.299), stdev = 300.568
[info]   CI (99.9%): [994.387, 3309.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   880.100 ±(99.9%) 493.915 B/op [Average]
[info]   (min, avg, max) = (811.847, 880.100, 1109.099), stdev = 128.268
[info]   CI (99.9%): [386.186, 1374.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 1.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.749), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.303), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3352087.541 ops/s
[info] # Warmup Iteration   2: 13635914.025 ops/s
[info] # Warmup Iteration   3: 15211424.238 ops/s
[info] # Warmup Iteration   4: 15242565.030 ops/s
[info] # Warmup Iteration   5: 15185136.646 ops/s
[info] Iteration   1: 14756837.270 ops/s
[info]                  ·gc.alloc.rate:                   1942.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 15156725.383 ops/s
[info]                  ·gc.alloc.rate:                   1968.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14729451.255 ops/s
[info]                  ·gc.alloc.rate:               1965.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          209.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 214.382 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 15202730.973 ops/s
[info]                  ·gc.alloc.rate:                   1973.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15294106.678 ops/s
[info]                  ·gc.alloc.rate:                   1997.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   15027970.312 ±(99.9%) 1019829.208 ops/s [Average]
[info]   (min, avg, max) = (14729451.255, 15027970.312, 15294106.678), stdev = 264846.407
[info]   CI (99.9%): [14008141.104, 16047799.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1969.380 ±(99.9%) 75.670 MB/sec [Average]
[info]   (min, avg, max) = (1942.609, 1969.380, 1997.502), stdev = 19.651
[info]   CI (99.9%): [1893.710, 2045.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.272 ±(99.9%) 9.132 B/op [Average]
[info]   (min, avg, max) = (204.308, 206.272, 209.964), stdev = 2.372
[info]   CI (99.9%): [197.140, 215.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2009.747 ±(99.9%) 11.148 MB/sec [Average]
[info]   (min, avg, max) = (2006.474, 2009.747, 2013.112), stdev = 2.895
[info]   CI (99.9%): [1998.599, 2020.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   210.524 ±(99.9%) 14.412 B/op [Average]
[info]   (min, avg, max) = (206.851, 210.524, 214.706), stdev = 3.743
[info]   CI (99.9%): [196.112, 224.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.452 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.665), stdev = 1.156
[info]   CI (99.9%): [≈ 0, 5.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.284), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15032.697 ops/s
[info] # Warmup Iteration   2: 710176.420 ops/s
[info] # Warmup Iteration   3: 1716826.283 ops/s
[info] # Warmup Iteration   4: 1772165.678 ops/s
[info] # Warmup Iteration   5: 1794578.760 ops/s
[info] Iteration   1: 1780233.015 ops/s
[info]                  ·gc.alloc.rate:                   3093.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              2734.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2956.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1790741.173 ops/s
[info]                  ·gc.alloc.rate:                   3097.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              2722.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2353.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1789982.678 ops/s
[info]                  ·gc.alloc.rate:                   3094.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              2720.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2952.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1785396.485 ops/s
[info]                  ·gc.alloc.rate:                   3091.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              2724.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2967.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1794618.022 ops/s
[info]                  ·gc.alloc.rate:                   3145.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              2758.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2370.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1788194.275 ±(99.9%) 21279.720 ops/s [Average]
[info]   (min, avg, max) = (1780233.015, 1788194.275, 1794618.022), stdev = 5526.276
[info]   CI (99.9%): [1766914.554, 1809473.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3104.516 ±(99.9%) 88.156 MB/sec [Average]
[info]   (min, avg, max) = (3091.842, 3104.516, 3145.319), stdev = 22.894
[info]   CI (99.9%): [3016.360, 3192.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   2732.073 ±(99.9%) 60.766 B/op [Average]
[info]   (min, avg, max) = (2720.191, 2732.073, 2758.392), stdev = 15.781
[info]   CI (99.9%): [2671.307, 2792.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3090.298 ±(99.9%) 1405.650 MB/sec [Average]
[info]   (min, avg, max) = (2678.038, 3090.298, 3366.802), stdev = 365.043
[info]   CI (99.9%): [1684.648, 4495.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2720.149 ±(99.9%) 1258.852 B/op [Average]
[info]   (min, avg, max) = (2353.594, 2720.149, 2967.126), stdev = 326.920
[info]   CI (99.9%): [1461.296, 3979.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.538 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.333), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.476 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.074, 0.294), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152703.770 ops/s
[info] # Warmup Iteration   2: 1906022.558 ops/s
[info] # Warmup Iteration   3: 4470363.008 ops/s
[info] # Warmup Iteration   4: 5087766.207 ops/s
[info] # Warmup Iteration   5: 5032804.763 ops/s
[info] Iteration   1: 5112545.563 ops/s
[info]                  ·gc.alloc.rate:                   2552.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              785.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2630.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.213 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 5139103.263 ops/s
[info]                  ·gc.alloc.rate:                   2561.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              783.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     604.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5126210.882 ops/s
[info]                  ·gc.alloc.rate:                   2567.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              788.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2623.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5128754.836 ops/s
[info]                  ·gc.alloc.rate:                   2594.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              796.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2628.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     806.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5145353.119 ops/s
[info]                  ·gc.alloc.rate:               2617.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          800.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2640.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 807.717 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   5130393.533 ±(99.9%) 48645.481 ops/s [Average]
[info]   (min, avg, max) = (5112545.563, 5130393.533, 5145353.119), stdev = 12633.077
[info]   CI (99.9%): [5081748.052, 5179039.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2578.290 ±(99.9%) 102.885 MB/sec [Average]
[info]   (min, avg, max) = (2552.080, 2578.290, 2617.014), stdev = 26.719
[info]   CI (99.9%): [2475.405, 2681.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   790.856 ±(99.9%) 27.357 B/op [Average]
[info]   (min, avg, max) = (783.992, 790.856, 800.489), stdev = 7.105
[info]   CI (99.9%): [763.499, 818.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2499.438 ±(99.9%) 1131.131 MB/sec [Average]
[info]   (min, avg, max) = (1974.076, 2499.438, 2640.642), stdev = 293.751
[info]   CI (99.9%): [1368.307, 3630.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   766.760 ±(99.9%) 349.790 B/op [Average]
[info]   (min, avg, max) = (604.286, 766.760, 809.713), stdev = 90.839
[info]   CI (99.9%): [416.970, 1116.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.429 ±(99.9%) 7.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.429, 3.939), stdev = 1.949
[info]   CI (99.9%): [≈ 0, 8.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.439 ±(99.9%) 2.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.439, 1.213), stdev = 0.599
[info]   CI (99.9%): [≈ 0, 2.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 18.000), stdev = 5.413
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.674 ops/s
[info] # Warmup Iteration   2: 18019809.639 ops/s
[info] # Warmup Iteration   3: 24406018.688 ops/s
[info] # Warmup Iteration   4: 22982902.540 ops/s
[info] # Warmup Iteration   5: 24081145.265 ops/s
[info] Iteration   1: 24070224.260 ops/s
[info]                  ·gc.alloc.rate:                   757.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23573388.096 ops/s
[info]                  ·gc.alloc.rate:               739.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44.341 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 23635751.266 ops/s
[info]                  ·gc.alloc.rate:               788.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          52.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88.536 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 23430583.993 ops/s
[info]                  ·gc.alloc.rate:               729.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44.702 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 24051437.753 ops/s
[info]                  ·gc.alloc.rate:               747.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   23752277.074 ±(99.9%) 1122073.766 ops/s [Average]
[info]   (min, avg, max) = (23430583.993, 23752277.074, 24070224.260), stdev = 291398.994
[info]   CI (99.9%): [22630203.308, 24874350.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   752.509 ±(99.9%) 86.611 MB/sec [Average]
[info]   (min, avg, max) = (729.781, 752.509, 788.338), stdev = 22.492
[info]   CI (99.9%): [665.898, 839.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.868 ±(99.9%) 5.732 B/op [Average]
[info]   (min, avg, max) = (48.887, 49.868, 52.491), stdev = 1.489
[info]   CI (99.9%): [44.137, 55.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   797.735 ±(99.9%) 1145.046 MB/sec [Average]
[info]   (min, avg, max) = (664.151, 797.735, 1329.676), stdev = 297.365
[info]   CI (99.9%): [≈ 0, 1942.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   52.910 ±(99.9%) 76.715 B/op [Average]
[info]   (min, avg, max) = (43.425, 52.910, 88.536), stdev = 19.923
[info]   CI (99.9%): [≈ 0, 129.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 410716.786 ops/s
[info] # Warmup Iteration   2: 8230891.072 ops/s
[info] # Warmup Iteration   3: 11058291.532 ops/s
[info] # Warmup Iteration   4: 11193289.157 ops/s
[info] # Warmup Iteration   5: 11245966.782 ops/s
[info] Iteration   1: 11170215.841 ops/s
[info]                  ·gc.alloc.rate:               359.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93.015 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 10905661.755 ops/s
[info]                  ·gc.alloc.rate:      332.634 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10921747.159 ops/s
[info]                  ·gc.alloc.rate:               355.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          51.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.130 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 10989248.912 ops/s
[info]                  ·gc.alloc.rate:      335.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10956321.771 ops/s
[info]                  ·gc.alloc.rate:                   347.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   10988639.088 ±(99.9%) 410119.186 ops/s [Average]
[info]   (min, avg, max) = (10905661.755, 10988639.088, 11170215.841), stdev = 106506.650
[info]   CI (99.9%): [10578519.902, 11398758.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   346.078 ±(99.9%) 46.035 MB/sec [Average]
[info]   (min, avg, max) = (332.634, 346.078, 359.714), stdev = 11.955
[info]   CI (99.9%): [300.043, 392.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   49.563 ±(99.9%) 5.747 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.563, 51.205), stdev = 1.492
[info]   CI (99.9%): [43.815, 55.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.160 ±(99.9%) 1392.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.160, 660.459), stdev = 361.643
[info]   CI (99.9%): [≈ 0, 1788.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   56.604 ±(99.9%) 198.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.604, 95.130), stdev = 51.679
[info]   CI (99.9%): [≈ 0, 255.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3788384.918 ops/s
[info] # Warmup Iteration   2: 31304892.320 ops/s
[info] # Warmup Iteration   3: 34044141.047 ops/s
[info] # Warmup Iteration   4: 35092356.545 ops/s
[info] # Warmup Iteration   5: 34962051.475 ops/s
[info] Iteration   1: 35083734.546 ops/s
[info]                  ·gc.alloc.rate:               1083.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29.989 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34751515.930 ops/s
[info]                  ·gc.alloc.rate:                   1101.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34716895.137 ops/s
[info]                  ·gc.alloc.rate:               1111.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60.702 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 35035342.242 ops/s
[info]                  ·gc.alloc.rate:                   1096.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34776809.970 ops/s
[info]                  ·gc.alloc.rate:                   1098.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   34872859.565 ±(99.9%) 664566.880 ops/s [Average]
[info]   (min, avg, max) = (34716895.137, 34872859.565, 35083734.546), stdev = 172585.908
[info]   CI (99.9%): [34208292.684, 35537426.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1098.151 ±(99.9%) 39.031 MB/sec [Average]
[info]   (min, avg, max) = (1083.507, 1098.151, 1111.639), stdev = 10.136
[info]   CI (99.9%): [1059.120, 1137.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.560 ±(99.9%) 2.612 B/op [Average]
[info]   (min, avg, max) = (48.599, 49.560, 50.390), stdev = 0.678
[info]   CI (99.9%): [46.949, 52.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.030 ±(99.9%) 1412.373 MB/sec [Average]
[info]   (min, avg, max) = (668.593, 1071.030, 1339.960), stdev = 366.789
[info]   CI (99.9%): [≈ 0, 2483.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48.400 ±(99.9%) 64.543 B/op [Average]
[info]   (min, avg, max) = (29.989, 48.400, 60.702), stdev = 16.762
[info]   CI (99.9%): [≈ 0, 112.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 6.815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.966), stdev = 1.770
[info]   CI (99.9%): [≈ 0, 7.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.179), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5961325.155 ops/s
[info] # Warmup Iteration   2: 31787740.391 ops/s
[info] # Warmup Iteration   3: 38504972.193 ops/s
[info] # Warmup Iteration   4: 38506817.064 ops/s
[info] # Warmup Iteration   5: 38481073.557 ops/s
[info] Iteration   1: 38543691.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38520364.042 ops/s
[info]                  ·gc.alloc.rate:      0.087 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38356696.235 ops/s
[info]                  ·gc.alloc.rate:      2.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38363233.415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38407558.626 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   38438308.749 ±(99.9%) 339430.811 ops/s [Average]
[info]   (min, avg, max) = (38356696.235, 38438308.749, 38543691.425), stdev = 88149.104
[info]   CI (99.9%): [38098877.938, 38777739.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.424 ±(99.9%) 3.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.424, 2.033), stdev = 0.900
[info]   CI (99.9%): [≈ 0, 3.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.017 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5545.168 ops/s
[info] # Warmup Iteration   2: 936747.636 ops/s
[info] # Warmup Iteration   3: 2073377.576 ops/s
[info] # Warmup Iteration   4: 2345582.472 ops/s
[info] # Warmup Iteration   5: 2337600.057 ops/s
[info] Iteration   1: 2359312.648 ops/s
[info]                  ·gc.alloc.rate:                   3331.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              2222.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2231.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2310908.988 ops/s
[info]                  ·gc.alloc.rate:                   3276.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              2231.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2284.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2330340.953 ops/s
[info]                  ·gc.alloc.rate:                   3344.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              2258.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2274.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2355447.880 ops/s
[info]                  ·gc.alloc.rate:                   3378.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              2257.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2256.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2353881.117 ops/s
[info]                  ·gc.alloc.rate:                   3350.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              2240.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1810.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   2341978.317 ±(99.9%) 79948.777 ops/s [Average]
[info]   (min, avg, max) = (2310908.988, 2341978.317, 2359312.648), stdev = 20762.444
[info]   CI (99.9%): [2262029.540, 2421927.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3336.373 ±(99.9%) 145.037 MB/sec [Average]
[info]   (min, avg, max) = (3276.559, 3336.373, 3378.972), stdev = 37.666
[info]   CI (99.9%): [3191.336, 3481.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2241.948 ±(99.9%) 61.378 B/op [Average]
[info]   (min, avg, max) = (2222.354, 2241.948, 2258.274), stdev = 15.940
[info]   CI (99.9%): [2180.570, 2303.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3230.785 ±(99.9%) 1125.036 MB/sec [Average]
[info]   (min, avg, max) = (2708.571, 3230.785, 3376.893), stdev = 292.168
[info]   CI (99.9%): [2105.748, 4355.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2171.570 ±(99.9%) 779.954 B/op [Average]
[info]   (min, avg, max) = (1810.991, 2171.570, 2284.526), stdev = 202.551
[info]   CI (99.9%): [1391.616, 2951.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.379 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.250), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.050, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47087.887 ops/s
[info] # Warmup Iteration   2: 313338.219 ops/s
[info] # Warmup Iteration   3: 375242.602 ops/s
[info] # Warmup Iteration   4: 375095.076 ops/s
[info] # Warmup Iteration   5: 375093.760 ops/s
[info] Iteration   1: 374478.961 ops/s
[info]                  ·gc.alloc.rate:                   2226.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11131.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.174 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 377038.872 ops/s
[info]                  ·gc.alloc.rate:                   2212.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              9233.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8297.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 378568.278 ops/s
[info]                  ·gc.alloc.rate:                   2230.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              9273.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8253.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 377902.629 ops/s
[info]                  ·gc.alloc.rate:                   2240.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              9330.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2647.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11025.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 378613.651 ops/s
[info]                  ·gc.alloc.rate:                   2257.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              9382.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8275.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   377320.478 ±(99.9%) 6591.724 ops/s [Average]
[info]   (min, avg, max) = (374478.961, 377320.478, 378613.651), stdev = 1711.850
[info]   CI (99.9%): [370728.754, 383912.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2233.427 ±(99.9%) 64.659 MB/sec [Average]
[info]   (min, avg, max) = (2212.278, 2233.427, 2257.138), stdev = 16.792
[info]   CI (99.9%): [2168.768, 2298.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9314.687 ±(99.9%) 232.780 B/op [Average]
[info]   (min, avg, max) = (9233.269, 9314.687, 9382.630), stdev = 60.452
[info]   CI (99.9%): [9081.907, 9547.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2252.266 ±(99.9%) 1393.510 MB/sec [Average]
[info]   (min, avg, max) = (1985.064, 2252.266, 2649.460), stdev = 361.890
[info]   CI (99.9%): [858.756, 3645.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9396.530 ±(99.9%) 5913.456 B/op [Average]
[info]   (min, avg, max) = (8253.146, 9396.530, 11131.327), stdev = 1535.706
[info]   CI (99.9%): [3483.074, 15309.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.005 ±(99.9%) 3.525 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.005, 1.881), stdev = 0.915
[info]   CI (99.9%): [≈ 0, 4.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.201 ±(99.9%) 14.738 B/op [Average]
[info]   (min, avg, max) = (0.087, 4.201, 7.851), stdev = 3.827
[info]   CI (99.9%): [≈ 0, 18.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 15.000), stdev = 4.438
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68271.481 ops/s
[info] # Warmup Iteration   2: 469826.520 ops/s
[info] # Warmup Iteration   3: 861454.786 ops/s
[info] # Warmup Iteration   4: 925008.404 ops/s
[info] # Warmup Iteration   5: 919460.995 ops/s
[info] Iteration   1: 923642.573 ops/s
[info]                  ·gc.alloc.rate:                   785.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1339.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 908913.080 ops/s
[info]                  ·gc.alloc.rate:               769.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          1332.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1144.866 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 906943.647 ops/s
[info]                  ·gc.alloc.rate:                   775.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1147.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 923155.777 ops/s
[info]                  ·gc.alloc.rate:               789.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          1345.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1129.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 914954.847 ops/s
[info]                  ·gc.alloc.rate:                   771.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1326.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   915521.985 ±(99.9%) 29938.966 ops/s [Average]
[info]   (min, avg, max) = (906943.647, 915521.985, 923642.573), stdev = 7775.054
[info]   CI (99.9%): [885583.019, 945460.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   778.184 ±(99.9%) 34.144 MB/sec [Average]
[info]   (min, avg, max) = (769.248, 778.184, 789.131), stdev = 8.867
[info]   CI (99.9%): [744.040, 812.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1337.598 ±(99.9%) 30.593 B/op [Average]
[info]   (min, avg, max) = (1326.978, 1337.598, 1345.126), stdev = 7.945
[info]   CI (99.9%): [1307.005, 1368.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   661.702 ±(99.9%) 3.148 MB/sec [Average]
[info]   (min, avg, max) = (660.859, 661.702, 662.594), stdev = 0.818
[info]   CI (99.9%): [658.553, 664.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1137.452 ±(99.9%) 36.062 B/op [Average]
[info]   (min, avg, max) = (1126.064, 1137.452, 1147.322), stdev = 9.365
[info]   CI (99.9%): [1101.390, 1173.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.072), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 643754.481 ops/s
[info] # Warmup Iteration   2: 1609168.550 ops/s
[info] # Warmup Iteration   3: 1671512.696 ops/s
[info] # Warmup Iteration   4: 1671704.563 ops/s
[info] # Warmup Iteration   5: 1709296.728 ops/s
[info] Iteration   1: 1722739.398 ops/s
[info]                  ·gc.alloc.rate:               1167.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          1066.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 611.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1716010.988 ops/s
[info]                  ·gc.alloc.rate:                   1179.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              1081.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1709761.075 ops/s
[info]                  ·gc.alloc.rate:                   1169.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1076.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1703295.768 ops/s
[info]                  ·gc.alloc.rate:                   1194.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              1103.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1724213.731 ops/s
[info]                  ·gc.alloc.rate:                   1161.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              1060.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     612.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1715204.192 ±(99.9%) 33900.984 ops/s [Average]
[info]   (min, avg, max) = (1703295.768, 1715204.192, 1724213.731), stdev = 8803.978
[info]   CI (99.9%): [1681303.208, 1749105.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1174.455 ±(99.9%) 49.451 MB/sec [Average]
[info]   (min, avg, max) = (1161.939, 1174.455, 1194.520), stdev = 12.842
[info]   CI (99.9%): [1125.004, 1223.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1077.701 ±(99.9%) 64.496 B/op [Average]
[info]   (min, avg, max) = (1060.477, 1077.701, 1103.740), stdev = 16.750
[info]   CI (99.9%): [1013.205, 1142.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.660 ±(99.9%) 1414.177 MB/sec [Average]
[info]   (min, avg, max) = (669.799, 1072.660, 1341.622), stdev = 367.257
[info]   CI (99.9%): [≈ 0, 2486.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   985.449 ±(99.9%) 1312.383 B/op [Average]
[info]   (min, avg, max) = (611.923, 985.449, 1239.663), stdev = 340.822
[info]   CI (99.9%): [≈ 0, 2297.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.806 ±(99.9%) 5.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 3.052), stdev = 1.314
[info]   CI (99.9%): [≈ 0, 5.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.743 ±(99.9%) 4.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.743, 2.820), stdev = 1.214
[info]   CI (99.9%): [≈ 0, 5.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.000, 7.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11486.792 ops/s
[info] # Warmup Iteration   2: 159359.711 ops/s
[info] # Warmup Iteration   3: 204474.836 ops/s
[info] # Warmup Iteration   4: 213710.288 ops/s
[info] # Warmup Iteration   5: 219140.012 ops/s
[info] Iteration   1: 219236.433 ops/s
[info]                  ·gc.alloc.rate:                   4010.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              28788.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3976.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28549.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.909 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 214480.775 ops/s
[info]                  ·gc.alloc.rate:                   4006.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              29388.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3992.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29285.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 217527.937 ops/s
[info]                  ·gc.alloc.rate:                   4023.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              29089.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4013.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29017.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 220109.776 ops/s
[info]                  ·gc.alloc.rate:                   4054.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              28991.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24065.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 219856.830 ops/s
[info]                  ·gc.alloc.rate:                   4078.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              29196.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4054.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29024.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.447 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   218242.350 ±(99.9%) 8977.423 ops/s [Average]
[info]   (min, avg, max) = (214480.775, 218242.350, 220109.776), stdev = 2331.408
[info]   CI (99.9%): [209264.927, 227219.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4034.622 ±(99.9%) 119.169 MB/sec [Average]
[info]   (min, avg, max) = (4006.217, 4034.622, 4078.438), stdev = 30.948
[info]   CI (99.9%): [3915.453, 4153.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   29090.901 ±(99.9%) 862.219 B/op [Average]
[info]   (min, avg, max) = (28788.719, 29090.901, 29388.064), stdev = 223.915
[info]   CI (99.9%): [28228.682, 29953.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3880.577 ±(99.9%) 1114.456 MB/sec [Average]
[info]   (min, avg, max) = (3365.481, 3880.577, 4054.388), stdev = 289.421
[info]   CI (99.9%): [2766.121, 4995.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27988.466 ±(99.9%) 8505.812 B/op [Average]
[info]   (min, avg, max) = (24065.640, 27988.466, 29285.845), stdev = 2208.932
[info]   CI (99.9%): [19482.653, 36494.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.341 ±(99.9%) 2.537 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.341, 1.520), stdev = 0.659
[info]   CI (99.9%): [≈ 0, 2.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.452 ±(99.9%) 18.210 B/op [Average]
[info]   (min, avg, max) = (0.149, 2.452, 10.909), stdev = 4.729
[info]   CI (99.9%): [≈ 0, 20.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102910.992 ops/s
[info] # Warmup Iteration   2: 373908.004 ops/s
[info] # Warmup Iteration   3: 445809.149 ops/s
[info] # Warmup Iteration   4: 452953.326 ops/s
[info] # Warmup Iteration   5: 453325.898 ops/s
[info] Iteration   1: 450395.325 ops/s
[info]                  ·gc.alloc.rate:                   1482.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              5180.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4669.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 453690.054 ops/s
[info]                  ·gc.alloc.rate:                   1481.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              5137.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4640.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 453476.910 ops/s
[info]                  ·gc.alloc.rate:                   1475.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              5121.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4642.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.604 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 455064.563 ops/s
[info]                  ·gc.alloc.rate:                   1505.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              5205.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6916.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 455098.561 ops/s
[info]                  ·gc.alloc.rate:                   1490.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              5154.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4607.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   453545.083 ±(99.9%) 7373.946 ops/s [Average]
[info]   (min, avg, max) = (450395.325, 453545.083, 455098.561), stdev = 1914.990
[info]   CI (99.9%): [446171.136, 460919.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1487.090 ±(99.9%) 44.075 MB/sec [Average]
[info]   (min, avg, max) = (1475.868, 1487.090, 1505.287), stdev = 11.446
[info]   CI (99.9%): [1443.014, 1531.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5160.133 ±(99.9%) 128.876 B/op [Average]
[info]   (min, avg, max) = (5121.971, 5160.133, 5205.987), stdev = 33.469
[info]   CI (99.9%): [5031.256, 5289.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.840 ±(99.9%) 1143.191 MB/sec [Average]
[info]   (min, avg, max) = (1332.393, 1468.840, 1999.905), stdev = 296.883
[info]   CI (99.9%): [325.649, 2612.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5095.355 ±(99.9%) 3921.298 B/op [Average]
[info]   (min, avg, max) = (4607.667, 5095.355, 6916.610), stdev = 1018.349
[info]   CI (99.9%): [1174.057, 9016.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.881 ±(99.9%) 7.163 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.881, 4.208), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.058 ±(99.9%) 24.859 B/op [Average]
[info]   (min, avg, max) = (0.036, 3.058, 14.604), stdev = 6.456
[info]   CI (99.9%): [≈ 0, 27.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301581.313 ops/s
[info] # Warmup Iteration   2: 1004717.816 ops/s
[info] # Warmup Iteration   3: 997787.617 ops/s
[info] # Warmup Iteration   4: 1011345.509 ops/s
[info] # Warmup Iteration   5: 1024073.216 ops/s
[info] Iteration   1: 1020346.837 ops/s
[info]                  ·gc.alloc.rate:               492.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          759.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1016.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1019940.219 ops/s
[info]                  ·gc.alloc.rate:               489.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          755.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1017.134 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1022609.833 ops/s
[info]                  ·gc.alloc.rate:               489.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          753.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1016.557 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 997918.156 ops/s
[info]                  ·gc.alloc.rate:      461.589 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1021948.218 ops/s
[info]                  ·gc.alloc.rate:                   494.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1017.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   1016552.653 ±(99.9%) 40336.183 ops/s [Average]
[info]   (min, avg, max) = (997918.156, 1016552.653, 1022609.833), stdev = 10475.179
[info]   CI (99.9%): [976216.470, 1056888.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   485.508 ±(99.9%) 52.006 MB/sec [Average]
[info]   (min, avg, max) = (461.589, 485.508, 494.086), stdev = 13.506
[info]   CI (99.9%): [433.502, 537.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   751.585 ±(99.9%) 51.997 B/op [Average]
[info]   (min, avg, max) = (728.000, 751.585, 760.913), stdev = 13.503
[info]   CI (99.9%): [699.588, 803.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   527.846 ±(99.9%) 1136.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 527.846, 660.488), stdev = 295.075
[info]   CI (99.9%): [≈ 0, 1664.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   813.516 ±(99.9%) 1751.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 813.516, 1017.153), stdev = 454.769
[info]   CI (99.9%): [≈ 0, 2564.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1481471.398 ops/s
[info] # Warmup Iteration   2: 2409609.045 ops/s
[info] # Warmup Iteration   3: 2794642.416 ops/s
[info] # Warmup Iteration   4: 2802314.260 ops/s
[info] # Warmup Iteration   5: 2805765.490 ops/s
[info] Iteration   1: 2804295.134 ops/s
[info]                  ·gc.alloc.rate:               1339.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 752.041 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 2711536.908 ops/s
[info]                  ·gc.alloc.rate:                   1311.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              761.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2775848.963 ops/s
[info]                  ·gc.alloc.rate:                   1323.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     760.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2818413.075 ops/s
[info]                  ·gc.alloc.rate:                   1331.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     748.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2798628.470 ops/s
[info]                  ·gc.alloc.rate:                   1334.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2781744.510 ±(99.9%) 162253.899 ops/s [Average]
[info]   (min, avg, max) = (2711536.908, 2781744.510, 2818413.075), stdev = 42136.822
[info]   CI (99.9%): [2619490.611, 2943998.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1328.266 ±(99.9%) 42.497 MB/sec [Average]
[info]   (min, avg, max) = (1311.395, 1328.266, 1339.639), stdev = 11.036
[info]   CI (99.9%): [1285.770, 1370.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   751.540 ±(99.9%) 24.123 B/op [Average]
[info]   (min, avg, max) = (743.534, 751.540, 761.082), stdev = 6.265
[info]   CI (99.9%): [727.417, 775.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1340.020 ±(99.9%) 5.056 MB/sec [Average]
[info]   (min, avg, max) = (1337.827, 1340.020, 1341.199), stdev = 1.313
[info]   CI (99.9%): [1334.964, 1345.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   758.265 ±(99.9%) 46.008 B/op [Average]
[info]   (min, avg, max) = (748.445, 758.265, 778.136), stdev = 11.948
[info]   CI (99.9%): [712.256, 804.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 4.968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 2.977), stdev = 1.290
[info]   CI (99.9%): [≈ 0, 5.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.461 ±(99.9%) 2.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 1.688), stdev = 0.731
[info]   CI (99.9%): [≈ 0, 3.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1644408.727 ops/s
[info] # Warmup Iteration   2: 2762267.082 ops/s
[info] # Warmup Iteration   3: 2801315.701 ops/s
[info] # Warmup Iteration   4: 2788952.352 ops/s
[info] # Warmup Iteration   5: 2811077.876 ops/s
[info] Iteration   1: 2812464.801 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2801039.407 ops/s
[info]                  ·gc.alloc.rate:      1.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.815 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2812054.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2809842.188 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2813124.087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2809704.933 ±(99.9%) 19247.119 ops/s [Average]
[info]   (min, avg, max) = (2801039.407, 2809704.933, 2813124.087), stdev = 4998.416
[info]   CI (99.9%): [2790457.814, 2828952.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.290 ±(99.9%) 2.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.290, 1.451), stdev = 0.649
[info]   CI (99.9%): [≈ 0, 2.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.163 ±(99.9%) 1.404 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.163, 0.815), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64930.492 ops/s
[info] # Warmup Iteration   2: 527109.698 ops/s
[info] # Warmup Iteration   3: 560479.971 ops/s
[info] # Warmup Iteration   4: 618946.550 ops/s
[info] # Warmup Iteration   5: 680005.838 ops/s
[info] Iteration   1: 681888.536 ops/s
[info]                  ·gc.alloc.rate:                   941.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              2172.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1528.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 690573.161 ops/s
[info]                  ·gc.alloc.rate:               953.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          2172.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1509.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 683502.402 ops/s
[info]                  ·gc.alloc.rate:               966.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          2226.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3050.148 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 687059.247 ops/s
[info]                  ·gc.alloc.rate:                   945.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              2166.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1517.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 690902.532 ops/s
[info]                  ·gc.alloc.rate:                   978.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              2230.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3019.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   686785.176 ±(99.9%) 15656.816 ops/s [Average]
[info]   (min, avg, max) = (681888.536, 686785.176, 690902.532), stdev = 4066.025
[info]   CI (99.9%): [671128.360, 702441.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   957.227 ±(99.9%) 59.981 MB/sec [Average]
[info]   (min, avg, max) = (941.077, 957.227, 978.937), stdev = 15.577
[info]   CI (99.9%): [897.247, 1017.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2193.515 ±(99.9%) 122.738 B/op [Average]
[info]   (min, avg, max) = (2166.517, 2193.515, 2230.097), stdev = 31.875
[info]   CI (99.9%): [2070.778, 2316.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   927.422 ±(99.9%) 1397.951 MB/sec [Average]
[info]   (min, avg, max) = (662.133, 927.422, 1325.607), stdev = 363.044
[info]   CI (99.9%): [≈ 0, 2325.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2124.959 ±(99.9%) 3199.274 B/op [Average]
[info]   (min, avg, max) = (1509.037, 2124.959, 3050.148), stdev = 830.841
[info]   CI (99.9%): [≈ 0, 5324.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 1.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.666), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.323 ±(99.9%) 2.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.323, 1.518), stdev = 0.668
[info]   CI (99.9%): [≈ 0, 2.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 9.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3850.152 ops/s
[info] # Warmup Iteration   2: 13500.488 ops/s
[info] # Warmup Iteration   3: 17306.803 ops/s
[info] # Warmup Iteration   4: 22096.372 ops/s
[info] # Warmup Iteration   5: 22067.329 ops/s
[info] Iteration   1: 21869.481 ops/s
[info]                  ·gc.alloc.rate:                   1724.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              124090.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1939.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139551.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 20015.778 ops/s
[info]                  ·gc.alloc.rate:                   2150.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              169124.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1945.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152999.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 21456.291 ops/s
[info]                  ·gc.alloc.rate:                   1944.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              142625.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1939.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142292.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      11.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 21847.599 ops/s
[info]                  ·gc.alloc.rate:                   1746.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              125769.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1934.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139355.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      11.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 21997.300 ops/s
[info]                  ·gc.alloc.rate:                   1733.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              124017.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92179.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   21437.290 ±(99.9%) 3157.652 ops/s [Average]
[info]   (min, avg, max) = (20015.778, 21437.290, 21997.300), stdev = 820.032
[info]   CI (99.9%): [18279.638, 24594.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1859.983 ±(99.9%) 717.869 MB/sec [Average]
[info]   (min, avg, max) = (1724.433, 1859.983, 2150.968), stdev = 186.428
[info]   CI (99.9%): [1142.113, 2577.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   137125.492 ±(99.9%) 75183.781 B/op [Average]
[info]   (min, avg, max) = (124017.649, 137125.492, 169124.861), stdev = 19524.989
[info]   CI (99.9%): [61941.711, 212309.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1809.734 ±(99.9%) 1121.655 MB/sec [Average]
[info]   (min, avg, max) = (1288.705, 1809.734, 1945.878), stdev = 291.290
[info]   CI (99.9%): [688.079, 2931.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133275.617 ±(99.9%) 91032.854 B/op [Average]
[info]   (min, avg, max) = (92179.363, 133275.617, 152999.176), stdev = 23640.943
[info]   CI (99.9%): [42242.762, 224308.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   5.415 ±(99.9%) 22.747 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 5.415, 11.915), stdev = 5.907
[info]   CI (99.9%): [≈ 0, 28.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   393.720 ±(99.9%) 1652.886 B/op [Average]
[info]   (min, avg, max) = (2.979, 393.720, 873.952), stdev = 429.249
[info]   CI (99.9%): [≈ 0, 2046.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.200, 24.000), stdev = 9.121
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13426.594 ops/s
[info] # Warmup Iteration   2: 34409.622 ops/s
[info] # Warmup Iteration   3: 45703.653 ops/s
[info] # Warmup Iteration   4: 43444.574 ops/s
[info] # Warmup Iteration   5: 40564.053 ops/s
[info] Iteration   1: 42413.207 ops/s
[info]                  ·gc.alloc.rate:                   1165.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              43242.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49215.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42230.823 ops/s
[info]                  ·gc.alloc.rate:               1167.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          43509.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49478.229 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 42464.551 ops/s
[info]                  ·gc.alloc.rate:                   1149.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              42614.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24615.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.772 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42114.638 ops/s
[info]                  ·gc.alloc.rate:                   1168.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              43666.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49712.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42611.245 ops/s
[info]                  ·gc.alloc.rate:                   1176.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              43468.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49232.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   42366.893 ±(99.9%) 754.416 ops/s [Average]
[info]   (min, avg, max) = (42114.638, 42366.893, 42611.245), stdev = 195.919
[info]   CI (99.9%): [41612.477, 43121.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1165.640 ±(99.9%) 37.993 MB/sec [Average]
[info]   (min, avg, max) = (1149.820, 1165.640, 1176.892), stdev = 9.867
[info]   CI (99.9%): [1127.647, 1203.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43300.459 ±(99.9%) 1587.988 B/op [Average]
[info]   (min, avg, max) = (42614.522, 43300.459, 43666.788), stdev = 412.396
[info]   CI (99.9%): [41712.470, 44888.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1196.308 ±(99.9%) 1145.490 MB/sec [Average]
[info]   (min, avg, max) = (664.179, 1196.308, 1332.952), stdev = 297.480
[info]   CI (99.9%): [50.819, 2341.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44450.985 ±(99.9%) 42704.064 B/op [Average]
[info]   (min, avg, max) = (24615.735, 44450.985, 49712.888), stdev = 11090.110
[info]   CI (99.9%): [1746.921, 87155.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.470 ±(99.9%) 2.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.470, 1.612), stdev = 0.704
[info]   CI (99.9%): [≈ 0, 3.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.427 ±(99.9%) 100.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.427, 59.834), stdev = 26.105
[info]   CI (99.9%): [≈ 0, 117.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16279.369 ops/s
[info] # Warmup Iteration   2: 36384.313 ops/s
[info] # Warmup Iteration   3: 42774.548 ops/s
[info] # Warmup Iteration   4: 43377.828 ops/s
[info] # Warmup Iteration   5: 46238.865 ops/s
[info] Iteration   1: 47308.408 ops/s
[info]                  ·gc.alloc.rate:                   688.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              22886.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21496.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 47700.101 ops/s
[info]                  ·gc.alloc.rate:                   671.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              22168.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21319.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 47608.383 ops/s
[info]                  ·gc.alloc.rate:               669.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          22119.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21426.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 47531.812 ops/s
[info]                  ·gc.alloc.rate:               666.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          22062.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21461.630 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 45157.617 ops/s
[info]                  ·gc.alloc.rate:               900.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          31367.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22682.078 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   47061.264 ±(99.9%) 4135.553 ops/s [Average]
[info]   (min, avg, max) = (45157.617, 47061.264, 47700.101), stdev = 1073.990
[info]   CI (99.9%): [42925.711, 51196.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   719.098 ±(99.9%) 390.783 MB/sec [Average]
[info]   (min, avg, max) = (666.309, 719.098, 900.012), stdev = 101.485
[info]   CI (99.9%): [328.314, 1109.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24120.973 ±(99.9%) 15651.153 B/op [Average]
[info]   (min, avg, max) = (22062.560, 24120.973, 31367.065), stdev = 4064.555
[info]   CI (99.9%): [8469.820, 39772.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   647.929 ±(99.9%) 7.223 MB/sec [Average]
[info]   (min, avg, max) = (646.236, 647.929, 650.815), stdev = 1.876
[info]   CI (99.9%): [640.706, 655.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21677.320 ±(99.9%) 2177.832 B/op [Average]
[info]   (min, avg, max) = (21319.668, 21677.320, 22682.078), stdev = 565.576
[info]   CI (99.9%): [19499.488, 23855.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.188 ±(99.9%) 1.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.904), stdev = 0.401
[info]   CI (99.9%): [≈ 0, 1.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.247 ±(99.9%) 51.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.247, 30.084), stdev = 13.335
[info]   CI (99.9%): [≈ 0, 57.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3239.807 ops/s
[info] # Warmup Iteration   2: 18486.383 ops/s
[info] # Warmup Iteration   3: 40075.623 ops/s
[info] # Warmup Iteration   4: 40155.512 ops/s
[info] # Warmup Iteration   5: 37939.643 ops/s
[info] Iteration   1: 38739.462 ops/s
[info]                  ·gc.alloc.rate:                   1679.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              68241.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53990.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38949.311 ops/s
[info]                  ·gc.alloc.rate:                   1708.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              69025.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80737.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 38850.958 ops/s
[info]                  ·gc.alloc.rate:                   1682.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              68147.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54103.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38697.630 ops/s
[info]                  ·gc.alloc.rate:                   1696.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              69016.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81586.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 39425.956 ops/s
[info]                  ·gc.alloc.rate:                   1710.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              68296.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53451.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   38932.663 ±(99.9%) 1127.354 ops/s [Average]
[info]   (min, avg, max) = (38697.630, 38932.663, 39425.956), stdev = 292.770
[info]   CI (99.9%): [37805.309, 40060.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1695.647 ±(99.9%) 55.069 MB/sec [Average]
[info]   (min, avg, max) = (1679.831, 1695.647, 1710.829), stdev = 14.301
[info]   CI (99.9%): [1640.578, 1750.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68545.361 ±(99.9%) 1683.724 B/op [Average]
[info]   (min, avg, max) = (68147.528, 68545.361, 69025.280), stdev = 437.258
[info]   CI (99.9%): [66861.637, 70229.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.554 ±(99.9%) 1407.994 MB/sec [Average]
[info]   (min, avg, max) = (1329.021, 1601.554, 2006.051), stdev = 365.652
[info]   CI (99.9%): [193.560, 3009.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64773.626 ±(99.9%) 57625.696 B/op [Average]
[info]   (min, avg, max) = (53451.289, 64773.626, 81586.013), stdev = 14965.210
[info]   CI (99.9%): [7147.929, 122399.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.261 ±(99.9%) 1.954 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.261, 1.168), stdev = 0.507
[info]   CI (99.9%): [≈ 0, 2.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.553 ±(99.9%) 79.153 B/op [Average]
[info]   (min, avg, max) = (0.846, 10.553, 47.304), stdev = 20.556
[info]   CI (99.9%): [≈ 0, 89.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7680.188 ops/s
[info] # Warmup Iteration   2: 22736.294 ops/s
[info] # Warmup Iteration   3: 34472.051 ops/s
[info] # Warmup Iteration   4: 35576.164 ops/s
[info] # Warmup Iteration   5: 30881.297 ops/s
[info] Iteration   1: 35859.015 ops/s
[info]                  ·gc.alloc.rate:                   2341.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              102780.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87505.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 35777.618 ops/s
[info]                  ·gc.alloc.rate:                   2366.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              104119.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116980.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 35952.984 ops/s
[info]                  ·gc.alloc.rate:                   2350.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              102901.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87425.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 35970.292 ops/s
[info]                  ·gc.alloc.rate:                   2357.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              103110.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116696.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133.983 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 35842.305 ops/s
[info]                  ·gc.alloc.rate:                   2357.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              103507.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87810.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   35880.443 ±(99.9%) 309.382 ops/s [Average]
[info]   (min, avg, max) = (35777.618, 35880.443, 35970.292), stdev = 80.345
[info]   CI (99.9%): [35571.061, 36189.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2354.819 ±(99.9%) 35.915 MB/sec [Average]
[info]   (min, avg, max) = (2341.703, 2354.819, 2366.918), stdev = 9.327
[info]   CI (99.9%): [2318.904, 2390.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   103284.005 ±(99.9%) 2090.561 B/op [Average]
[info]   (min, avg, max) = (102780.901, 103284.005, 104119.999), stdev = 542.912
[info]   CI (99.9%): [101193.444, 105374.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2263.602 ±(99.9%) 1406.409 MB/sec [Average]
[info]   (min, avg, max) = (1993.678, 2263.602, 2668.090), stdev = 365.240
[info]   CI (99.9%): [857.194, 3670.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   99283.567 ±(99.9%) 61711.455 B/op [Average]
[info]   (min, avg, max) = (87425.075, 99283.567, 116980.560), stdev = 16026.269
[info]   CI (99.9%): [37572.112, 160995.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.987 ±(99.9%) 4.857 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.987, 3.063), stdev = 1.261
[info]   CI (99.9%): [≈ 0, 5.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   43.211 ±(99.9%) 212.409 B/op [Average]
[info]   (min, avg, max) = (2.734, 43.211, 133.983), stdev = 55.162
[info]   CI (99.9%): [≈ 0, 255.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 12.000), stdev = 2.702
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5266.763 ops/s
[info] # Warmup Iteration   2: 23524.401 ops/s
[info] # Warmup Iteration   3: 34130.879 ops/s
[info] # Warmup Iteration   4: 33819.406 ops/s
[info] # Warmup Iteration   5: 31091.883 ops/s
[info] Iteration   1: 33881.362 ops/s
[info]                  ·gc.alloc.rate:                   1897.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              88123.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91623.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 34685.531 ops/s
[info]                  ·gc.alloc.rate:                   1886.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              85598.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89436.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.757 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 34661.184 ops/s
[info]                  ·gc.alloc.rate:                   1903.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              86416.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89801.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 35205.810 ops/s
[info]                  ·gc.alloc.rate:                   1920.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              85866.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88726.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 35396.816 ops/s
[info]                  ·gc.alloc.rate:                   1926.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              85676.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88482.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   34766.141 ±(99.9%) 2271.070 ops/s [Average]
[info]   (min, avg, max) = (33881.362, 34766.141, 35396.816), stdev = 589.790
[info]   CI (99.9%): [32495.071, 37037.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1906.938 ±(99.9%) 64.410 MB/sec [Average]
[info]   (min, avg, max) = (1886.543, 1906.938, 1926.966), stdev = 16.727
[info]   CI (99.9%): [1842.528, 1971.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86336.096 ±(99.9%) 4039.304 B/op [Average]
[info]   (min, avg, max) = (85598.620, 86336.096, 88123.478), stdev = 1048.994
[info]   CI (99.9%): [82296.792, 90375.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1979.252 ±(99.9%) 31.173 MB/sec [Average]
[info]   (min, avg, max) = (1971.131, 1979.252, 1990.077), stdev = 8.096
[info]   CI (99.9%): [1948.079, 2010.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   89613.859 ±(99.9%) 4783.248 B/op [Average]
[info]   (min, avg, max) = (88482.115, 89613.859, 91623.146), stdev = 1242.194
[info]   CI (99.9%): [84830.611, 94397.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.327 ±(99.9%) 6.721 MB/sec [Average]
[info]   (min, avg, max) = (0.052, 1.327, 4.066), stdev = 1.745
[info]   CI (99.9%): [≈ 0, 8.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.023 ±(99.9%) 311.726 B/op [Average]
[info]   (min, avg, max) = (2.318, 61.023, 188.851), stdev = 80.954
[info]   CI (99.9%): [≈ 0, 372.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 16.000), stdev = 2.793
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8275.963 ops/s
[info] # Warmup Iteration   2: 25697.250 ops/s
[info] # Warmup Iteration   3: 39591.192 ops/s
[info] # Warmup Iteration   4: 38389.566 ops/s
[info] # Warmup Iteration   5: 38971.558 ops/s
[info] Iteration   1: 39171.627 ops/s
[info]                  ·gc.alloc.rate:                   2203.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              88544.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1958.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78687.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.273 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 40562.077 ops/s
[info]                  ·gc.alloc.rate:                   2097.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              81389.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1960.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76066.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 39782.982 ops/s
[info]                  ·gc.alloc.rate:                   2064.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              81686.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77727.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 40225.271 ops/s
[info]                  ·gc.alloc.rate:                   2068.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              80930.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77134.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.258 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 40646.604 ops/s
[info]                  ·gc.alloc.rate:                   2085.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              80732.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76722.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   40077.712 ±(99.9%) 2348.480 ops/s [Average]
[info]   (min, avg, max) = (39171.627, 40077.712, 40646.604), stdev = 609.893
[info]   CI (99.9%): [37729.233, 42426.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2104.085 ±(99.9%) 220.671 MB/sec [Average]
[info]   (min, avg, max) = (2064.876, 2104.085, 2203.819), stdev = 57.308
[info]   CI (99.9%): [1883.414, 2324.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82656.786 ±(99.9%) 12755.336 B/op [Average]
[info]   (min, avg, max) = (80732.340, 82656.786, 88544.258), stdev = 3312.520
[info]   CI (99.9%): [69901.450, 95412.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1967.438 ±(99.9%) 36.560 MB/sec [Average]
[info]   (min, avg, max) = (1958.486, 1967.438, 1981.918), stdev = 9.495
[info]   CI (99.9%): [1930.878, 2003.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   77267.622 ±(99.9%) 3842.944 B/op [Average]
[info]   (min, avg, max) = (76066.927, 77267.622, 78687.361), stdev = 998.000
[info]   CI (99.9%): [73424.678, 81110.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.848 ±(99.9%) 6.763 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.848, 3.989), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 7.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34.001 ±(99.9%) 271.838 B/op [Average]
[info]   (min, avg, max) = (0.824, 34.001, 160.273), stdev = 70.595
[info]   CI (99.9%): [≈ 0, 305.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9203.261 ops/s
[info] # Warmup Iteration   2: 30185.781 ops/s
[info] # Warmup Iteration   3: 41628.311 ops/s
[info] # Warmup Iteration   4: 39740.395 ops/s
[info] # Warmup Iteration   5: 39341.261 ops/s
[info] Iteration   1: 41280.588 ops/s
[info]                  ·gc.alloc.rate:                   2083.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              79421.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75734.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 41490.507 ops/s
[info]                  ·gc.alloc.rate:                   2088.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              79233.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75226.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.845 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42301.757 ops/s
[info]                  ·gc.alloc.rate:                   2159.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              80349.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2644.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98396.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.775 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 42383.527 ops/s
[info]                  ·gc.alloc.rate:                   2130.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              79128.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73850.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.411 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42285.444 ops/s
[info]                  ·gc.alloc.rate:               2136.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          79519.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74244.794 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   41948.365 ±(99.9%) 2004.032 ops/s [Average]
[info]   (min, avg, max) = (41280.588, 41948.365, 42383.527), stdev = 520.441
[info]   CI (99.9%): [39944.332, 43952.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2119.943 ±(99.9%) 125.980 MB/sec [Average]
[info]   (min, avg, max) = (2083.490, 2119.943, 2159.846), stdev = 32.717
[info]   CI (99.9%): [1993.963, 2245.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   79530.523 ±(99.9%) 1859.708 B/op [Average]
[info]   (min, avg, max) = (79128.216, 79530.523, 80349.612), stdev = 482.960
[info]   CI (99.9%): [77670.815, 81390.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   2119.721 ±(99.9%) 1130.706 MB/sec [Average]
[info]   (min, avg, max) = (1983.262, 2119.721, 2644.948), stdev = 293.641
[info]   CI (99.9%): [989.015, 3250.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   79490.571 ±(99.9%) 40798.534 B/op [Average]
[info]   (min, avg, max) = (73850.522, 79490.571, 98396.169), stdev = 10595.250
[info]   CI (99.9%): [38692.036, 120289.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1.075 ±(99.9%) 8.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.075, 4.897), stdev = 2.140
[info]   CI (99.9%): [≈ 0, 9.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   40.942 ±(99.9%) 314.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.942, 186.678), stdev = 81.606
[info]   CI (99.9%): [≈ 0, 355.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1977.870 ops/s
[info] # Warmup Iteration   2: 5621.544 ops/s
[info] # Warmup Iteration   3: 8776.922 ops/s
[info] # Warmup Iteration   4: 9592.459 ops/s
[info] # Warmup Iteration   5: 9521.443 ops/s
[info] Iteration   1: 9584.320 ops/s
[info]                  ·gc.alloc.rate:                   1314.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              215852.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219405.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9359.155 ops/s
[info]                  ·gc.alloc.rate:               1287.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          216520.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 224814.874 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 9623.099 ops/s
[info]                  ·gc.alloc.rate:                   1290.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              211042.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109378.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9533.060 ops/s
[info]                  ·gc.alloc.rate:                   1293.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              213471.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220822.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 677.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 9532.932 ops/s
[info]                  ·gc.alloc.rate:                   1288.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              212686.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220162.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9526.513 ±(99.9%) 388.720 ops/s [Average]
[info]   (min, avg, max) = (9359.155, 9526.513, 9623.099), stdev = 100.949
[info]   CI (99.9%): [9137.793, 9915.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1294.880 ±(99.9%) 43.130 MB/sec [Average]
[info]   (min, avg, max) = (1287.619, 1294.880, 1314.548), stdev = 11.201
[info]   CI (99.9%): [1251.750, 1338.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   213914.591 ±(99.9%) 8715.995 B/op [Average]
[info]   (min, avg, max) = (211042.767, 213914.591, 216520.045), stdev = 2263.516
[info]   CI (99.9%): [205198.595, 222630.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.671 ±(99.9%) 1148.745 MB/sec [Average]
[info]   (min, avg, max) = (669.017, 1202.671, 1337.558), stdev = 298.325
[info]   CI (99.9%): [53.926, 2351.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   198916.836 ±(99.9%) 192905.389 B/op [Average]
[info]   (min, avg, max) = (109378.733, 198916.836, 224814.874), stdev = 50096.917
[info]   CI (99.9%): [6011.447, 391822.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.962 ±(99.9%) 6.836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.962, 4.103), stdev = 1.775
[info]   CI (99.9%): [≈ 0, 7.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   158.754 ±(99.9%) 1128.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 158.754, 677.444), stdev = 293.104
[info]   CI (99.9%): [≈ 0, 1287.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 10.000), stdev = 2.588
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4334.999 ops/s
[info] # Warmup Iteration   2: 15211.472 ops/s
[info] # Warmup Iteration   3: 15463.317 ops/s
[info] # Warmup Iteration   4: 22481.029 ops/s
[info] # Warmup Iteration   5: 20032.964 ops/s
[info] Iteration   1: 22394.434 ops/s
[info]                  ·gc.alloc.rate:                   1763.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              123900.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1210.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85020.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 20287.075 ops/s
[info]                  ·gc.alloc.rate:                   1944.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              150826.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2441.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189353.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.285 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         40.000 ms
[info] Iteration   3: 20930.996 ops/s
[info]                  ·gc.alloc.rate:                   2038.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              153264.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1847.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138948.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 815.171 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   4: 22264.182 ops/s
[info]                  ·gc.alloc.rate:                   1923.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              135985.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1849.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130760.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 22314.964 ops/s
[info]                  ·gc.alloc.rate:                   1942.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              136967.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1844.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130091.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   21638.330 ±(99.9%) 3727.092 ops/s [Average]
[info]   (min, avg, max) = (20287.075, 21638.330, 22394.434), stdev = 967.914
[info]   CI (99.9%): [17911.238, 25365.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1922.576 ±(99.9%) 382.600 MB/sec [Average]
[info]   (min, avg, max) = (1763.769, 1922.576, 2038.294), stdev = 99.360
[info]   CI (99.9%): [1539.976, 2305.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140188.955 ±(99.9%) 46268.070 B/op [Average]
[info]   (min, avg, max) = (123900.411, 140188.955, 153264.991), stdev = 12015.671
[info]   CI (99.9%): [93920.884, 186457.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1838.880 ±(99.9%) 1677.050 MB/sec [Average]
[info]   (min, avg, max) = (1210.305, 1838.880, 2441.694), stdev = 435.525
[info]   CI (99.9%): [161.830, 3515.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   134834.869 ±(99.9%) 142912.033 B/op [Average]
[info]   (min, avg, max) = (85020.941, 134834.869, 189353.497), stdev = 37113.801
[info]   CI (99.9%): [≈ 0, 277746.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   5.225 ±(99.9%) 14.194 MB/sec [Average]
[info]   (min, avg, max) = (1.035, 5.225, 10.841), stdev = 3.686
[info]   CI (99.9%): [≈ 0, 19.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   380.072 ±(99.9%) 1069.320 B/op [Average]
[info]   (min, avg, max) = (80.285, 380.072, 815.171), stdev = 277.699
[info]   CI (99.9%): [≈ 0, 1449.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   108.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 21.600, 40.000), stdev = 12.621
[info]   CI (99.9%): [108.000, 108.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15862.202 ops/s
[info] # Warmup Iteration   2: 43807.967 ops/s
[info] # Warmup Iteration   3: 52812.363 ops/s
[info] # Warmup Iteration   4: 45933.980 ops/s
[info] # Warmup Iteration   5: 50075.317 ops/s
[info] Iteration   1: 50144.260 ops/s
[info]                  ·gc.alloc.rate:                   1408.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              44208.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1286.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40374.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 49793.850 ops/s
[info]                  ·gc.alloc.rate:                   1406.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              44439.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1279.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40446.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 49948.101 ops/s
[info]                  ·gc.alloc.rate:                   1404.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              44253.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1276.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40216.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 49987.984 ops/s
[info]                  ·gc.alloc.rate:                   1404.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              44233.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1276.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40195.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 50213.697 ops/s
[info]                  ·gc.alloc.rate:                   1404.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              44032.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1279.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40119.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   50017.579 ±(99.9%) 639.334 ops/s [Average]
[info]   (min, avg, max) = (49793.850, 50017.579, 50213.697), stdev = 166.033
[info]   CI (99.9%): [49378.244, 50656.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1405.771 ±(99.9%) 6.224 MB/sec [Average]
[info]   (min, avg, max) = (1404.685, 1405.771, 1408.502), stdev = 1.616
[info]   CI (99.9%): [1399.546, 1411.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44233.338 ±(99.9%) 557.180 B/op [Average]
[info]   (min, avg, max) = (44032.386, 44233.338, 44439.063), stdev = 144.698
[info]   CI (99.9%): [43676.158, 44790.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1279.834 ±(99.9%) 15.316 MB/sec [Average]
[info]   (min, avg, max) = (1276.544, 1279.834, 1286.339), stdev = 3.977
[info]   CI (99.9%): [1264.518, 1295.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40270.548 ±(99.9%) 520.003 B/op [Average]
[info]   (min, avg, max) = (40119.448, 40270.548, 40446.458), stdev = 135.043
[info]   CI (99.9%): [39750.545, 40790.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 2.001 MB/sec [Average]
[info]   (min, avg, max) = (0.024, 0.375, 1.205), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.785 ±(99.9%) 63.017 B/op [Average]
[info]   (min, avg, max) = (0.747, 11.785, 37.950), stdev = 16.365
[info]   CI (99.9%): [≈ 0, 74.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   73.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 14.600, 16.000), stdev = 1.140
[info]   CI (99.9%): [73.000, 73.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37039.963 ops/s
[info] # Warmup Iteration   2: 56392.519 ops/s
[info] # Warmup Iteration   3: 58398.994 ops/s
[info] # Warmup Iteration   4: 69110.275 ops/s
[info] # Warmup Iteration   5: 67781.030 ops/s
[info] Iteration   1: 68636.882 ops/s
[info]                  ·gc.alloc.rate:               782.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          17934.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15321.170 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 66423.417 ops/s
[info]                  ·gc.alloc.rate:                   767.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              18189.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31664.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 68968.071 ops/s
[info]                  ·gc.alloc.rate:               788.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          17987.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15247.868 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 68936.623 ops/s
[info]                  ·gc.alloc.rate:               784.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          17911.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15262.108 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 69124.199 ops/s
[info]                  ·gc.alloc.rate:               789.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          17974.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15220.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   68417.839 ±(99.9%) 4346.512 ops/s [Average]
[info]   (min, avg, max) = (66423.417, 68417.839, 69124.199), stdev = 1128.775
[info]   CI (99.9%): [64071.327, 72764.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   782.500 ±(99.9%) 33.646 MB/sec [Average]
[info]   (min, avg, max) = (767.695, 782.500, 789.465), stdev = 8.738
[info]   CI (99.9%): [748.854, 816.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17999.573 ±(99.9%) 424.906 B/op [Average]
[info]   (min, avg, max) = (17911.598, 17999.573, 18189.286), stdev = 110.347
[info]   CI (99.9%): [17574.667, 18424.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.018 ±(99.9%) 1150.320 MB/sec [Average]
[info]   (min, avg, max) = (668.219, 802.018, 1336.410), stdev = 298.735
[info]   CI (99.9%): [≈ 0, 1952.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18543.074 ±(99.9%) 28244.268 B/op [Average]
[info]   (min, avg, max) = (15220.164, 18543.074, 31664.059), stdev = 7334.947
[info]   CI (99.9%): [≈ 0, 46787.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.197 ±(99.9%) 1.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.987), stdev = 0.441
[info]   CI (99.9%): [≈ 0, 1.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1819.149 ops/s
[info] # Warmup Iteration   2: 24842.547 ops/s
[info] # Warmup Iteration   3: 42322.775 ops/s
[info] # Warmup Iteration   4: 42630.729 ops/s
[info] # Warmup Iteration   5: 41445.018 ops/s
[info] Iteration   1: 42745.413 ops/s
[info]                  ·gc.alloc.rate:                   2433.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              89619.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73703.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 42632.530 ops/s
[info]                  ·gc.alloc.rate:                   2449.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              90427.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98519.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42884.831 ops/s
[info]                  ·gc.alloc.rate:                   2447.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              89816.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73562.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.764 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42701.674 ops/s
[info]                  ·gc.alloc.rate:                   2462.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              90770.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98746.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 42825.055 ops/s
[info]                  ·gc.alloc.rate:                   2458.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              90262.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98577.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.764 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   42757.901 ±(99.9%) 383.406 ops/s [Average]
[info]   (min, avg, max) = (42632.530, 42757.901, 42884.831), stdev = 99.569
[info]   CI (99.9%): [42374.495, 43141.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2450.565 ±(99.9%) 43.116 MB/sec [Average]
[info]   (min, avg, max) = (2433.974, 2450.565, 2462.834), stdev = 11.197
[info]   CI (99.9%): [2407.449, 2493.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90179.338 ±(99.9%) 1788.648 B/op [Average]
[info]   (min, avg, max) = (89619.319, 90179.338, 90770.517), stdev = 464.506
[info]   CI (99.9%): [88390.690, 91967.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.944 ±(99.9%) 1422.819 MB/sec [Average]
[info]   (min, avg, max) = (2001.715, 2407.944, 2685.229), stdev = 369.502
[info]   CI (99.9%): [985.125, 3830.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88621.984 ±(99.9%) 52689.929 B/op [Average]
[info]   (min, avg, max) = (73562.407, 88621.984, 98746.697), stdev = 13683.407
[info]   CI (99.9%): [35932.055, 141311.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.200 ±(99.9%) 1.155 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.200, 0.729), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.360 ±(99.9%) 42.544 B/op [Average]
[info]   (min, avg, max) = (0.764, 7.360, 26.826), stdev = 11.049
[info]   CI (99.9%): [≈ 0, 49.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9603.105 ops/s
[info] # Warmup Iteration   2: 23210.422 ops/s
[info] # Warmup Iteration   3: 39847.415 ops/s
[info] # Warmup Iteration   4: 38644.578 ops/s
[info] # Warmup Iteration   5: 40610.705 ops/s
[info] Iteration   1: 43344.222 ops/s
[info]                  ·gc.alloc.rate:                   1893.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              68722.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72128.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.512 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 43762.340 ops/s
[info]                  ·gc.alloc.rate:               1895.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          68165.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47745.304 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 43142.598 ops/s
[info]                  ·gc.alloc.rate:                   1874.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              68363.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72817.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 43254.826 ops/s
[info]                  ·gc.alloc.rate:                   1870.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              68067.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72725.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.757 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 43243.247 ops/s
[info]                  ·gc.alloc.rate:                   1868.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              67993.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72951.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   43349.447 ±(99.9%) 930.403 ops/s [Average]
[info]   (min, avg, max) = (43142.598, 43349.447, 43762.340), stdev = 241.623
[info]   CI (99.9%): [42419.044, 44279.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1880.493 ±(99.9%) 50.544 MB/sec [Average]
[info]   (min, avg, max) = (1868.197, 1880.493, 1895.856), stdev = 13.126
[info]   CI (99.9%): [1829.949, 1931.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68262.440 ±(99.9%) 1126.005 B/op [Average]
[info]   (min, avg, max) = (67993.256, 68262.440, 68722.710), stdev = 292.420
[info]   CI (99.9%): [67136.435, 69388.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1862.947 ±(99.9%) 1151.918 MB/sec [Average]
[info]   (min, avg, max) = (1327.927, 1862.947, 2004.439), stdev = 299.149
[info]   CI (99.9%): [711.030, 3014.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67673.699 ±(99.9%) 42914.491 B/op [Average]
[info]   (min, avg, max) = (47745.304, 67673.699, 72951.796), stdev = 11144.757
[info]   CI (99.9%): [24759.208, 110588.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.324 ±(99.9%) 2.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.324, 1.412), stdev = 0.611
[info]   CI (99.9%): [≈ 0, 2.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.814 ±(99.9%) 85.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.814, 51.497), stdev = 22.277
[info]   CI (99.9%): [≈ 0, 97.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21435.302 ops/s
[info] # Warmup Iteration   2: 40020.344 ops/s
[info] # Warmup Iteration   3: 51987.878 ops/s
[info] # Warmup Iteration   4: 53210.194 ops/s
[info] # Warmup Iteration   5: 56492.602 ops/s
[info] Iteration   1: 54297.346 ops/s
[info]                  ·gc.alloc.rate:                   1716.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              49745.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58275.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 56442.668 ops/s
[info]                  ·gc.alloc.rate:                   1760.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              49086.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37354.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 55954.070 ops/s
[info]                  ·gc.alloc.rate:                   1772.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              49854.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56415.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56747.274 ops/s
[info]                  ·gc.alloc.rate:                   1785.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              49501.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55512.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 56825.102 ops/s
[info]                  ·gc.alloc.rate:               1773.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          49126.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37009.650 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   56053.292 ±(99.9%) 4002.682 ops/s [Average]
[info]   (min, avg, max) = (54297.346, 56053.292, 56825.102), stdev = 1039.484
[info]   CI (99.9%): [52050.610, 60055.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1761.977 ±(99.9%) 102.619 MB/sec [Average]
[info]   (min, avg, max) = (1716.917, 1761.977, 1785.474), stdev = 26.650
[info]   CI (99.9%): [1659.358, 1864.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49462.858 ±(99.9%) 1347.122 B/op [Average]
[info]   (min, avg, max) = (49086.732, 49462.858, 49854.622), stdev = 349.843
[info]   CI (99.9%): [48115.737, 50809.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1739.221 ±(99.9%) 1409.901 MB/sec [Average]
[info]   (min, avg, max) = (1336.265, 1739.221, 2011.326), stdev = 366.147
[info]   CI (99.9%): [329.321, 3149.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48913.705 ±(99.9%) 41418.295 B/op [Average]
[info]   (min, avg, max) = (37009.650, 48913.705, 58275.677), stdev = 10756.200
[info]   CI (99.9%): [7495.410, 90331.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.806 ±(99.9%) 4.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 2.491), stdev = 1.090
[info]   CI (99.9%): [≈ 0, 5.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23.031 ±(99.9%) 121.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.031, 72.184), stdev = 31.449
[info]   CI (99.9%): [≈ 0, 144.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 12.000), stdev = 3.847
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18776.132 ops/s
[info] # Warmup Iteration   2: 45557.996 ops/s
[info] # Warmup Iteration   3: 55457.997 ops/s
[info] # Warmup Iteration   4: 57665.677 ops/s
[info] # Warmup Iteration   5: 57247.067 ops/s
[info] Iteration   1: 57671.350 ops/s
[info]                  ·gc.alloc.rate:                   1703.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              46485.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36376.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 57005.394 ops/s
[info]                  ·gc.alloc.rate:                   1691.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              46689.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55231.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 58001.736 ops/s
[info]                  ·gc.alloc.rate:                   1709.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              46370.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36134.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 58008.807 ops/s
[info]                  ·gc.alloc.rate:                   1709.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              46375.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54166.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 57481.660 ops/s
[info]                  ·gc.alloc.rate:                   1693.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              46366.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36442.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   57633.790 ±(99.9%) 1605.606 ops/s [Average]
[info]   (min, avg, max) = (57005.394, 57633.790, 58008.807), stdev = 416.971
[info]   CI (99.9%): [56028.184, 59239.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1701.480 ±(99.9%) 33.196 MB/sec [Average]
[info]   (min, avg, max) = (1691.175, 1701.480, 1709.553), stdev = 8.621
[info]   CI (99.9%): [1668.284, 1734.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   46457.589 ±(99.9%) 534.845 B/op [Average]
[info]   (min, avg, max) = (46366.504, 46457.589, 46689.628), stdev = 138.898
[info]   CI (99.9%): [45922.744, 46992.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1598.716 ±(99.9%) 1405.476 MB/sec [Average]
[info]   (min, avg, max) = (1331.217, 1598.716, 2000.585), stdev = 364.998
[info]   CI (99.9%): [193.240, 3004.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   43670.220 ±(99.9%) 38797.955 B/op [Average]
[info]   (min, avg, max) = (36134.107, 43670.220, 55231.771), stdev = 10075.706
[info]   CI (99.9%): [4872.265, 82468.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.521 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.841, 3.864), stdev = 1.694
[info]   CI (99.9%): [≈ 0, 7.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   23.190 ±(99.9%) 180.087 B/op [Average]
[info]   (min, avg, max) = (0.565, 23.190, 106.689), stdev = 46.768
[info]   CI (99.9%): [≈ 0, 203.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49219.507 ops/s
[info] # Warmup Iteration   2: 366006.938 ops/s
[info] # Warmup Iteration   3: 365089.400 ops/s
[info] # Warmup Iteration   4: 403516.338 ops/s
[info] # Warmup Iteration   5: 396668.720 ops/s
[info] Iteration   1: 414593.016 ops/s
[info]                  ·gc.alloc.rate:                   2236.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              8491.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7609.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 414184.481 ops/s
[info]                  ·gc.alloc.rate:                   2255.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              8570.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10120.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 415243.928 ops/s
[info]                  ·gc.alloc.rate:               2245.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          8512.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7566.908 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 410665.897 ops/s
[info]                  ·gc.alloc.rate:               2234.807 MB/sec
[info]                  ·gc.alloc.rate.norm:          8564.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7662.663 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   5: 416032.099 ops/s
[info]                  ·gc.alloc.rate:               2276.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          8613.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7581.449 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   414143.884 ±(99.9%) 7955.848 ops/s [Average]
[info]   (min, avg, max) = (410665.897, 414143.884, 416032.099), stdev = 2066.108
[info]   CI (99.9%): [406188.036, 422099.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2250.089 ±(99.9%) 66.119 MB/sec [Average]
[info]   (min, avg, max) = (2234.807, 2250.089, 2276.949), stdev = 17.171
[info]   CI (99.9%): [2183.971, 2316.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8550.714 ±(99.9%) 187.892 B/op [Average]
[info]   (min, avg, max) = (8491.838, 8550.714, 8613.888), stdev = 48.795
[info]   CI (99.9%): [8362.823, 8738.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2133.605 ±(99.9%) 1141.214 MB/sec [Average]
[info]   (min, avg, max) = (1996.429, 2133.605, 2663.733), stdev = 296.370
[info]   CI (99.9%): [992.391, 3274.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8108.069 ±(99.9%) 4333.419 B/op [Average]
[info]   (min, avg, max) = (7566.908, 8108.069, 10120.139), stdev = 1125.375
[info]   CI (99.9%): [3774.650, 12441.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.947 ±(99.9%) 7.586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.947, 4.465), stdev = 1.970
[info]   CI (99.9%): [≈ 0, 8.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.596 ±(99.9%) 28.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.596, 16.951), stdev = 7.479
[info]   CI (99.9%): [≈ 0, 32.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 11.000), stdev = 3.114
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.789 ops/s
[info] # Warmup Iteration   2: 1458689.549 ops/s
[info] # Warmup Iteration   3: 1852002.362 ops/s
[info] # Warmup Iteration   4: 1753140.433 ops/s
[info] # Warmup Iteration   5: 1915948.001 ops/s
[info] Iteration   1: 1917364.212 ops/s
[info]                  ·gc.alloc.rate:                   626.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              514.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1900943.047 ops/s
[info]                  ·gc.alloc.rate:               618.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          511.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.875 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1923568.094 ops/s
[info]                  ·gc.alloc.rate:      606.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1877585.790 ops/s
[info]                  ·gc.alloc.rate:                   604.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              506.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     556.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1867038.401 ops/s
[info]                  ·gc.alloc.rate:               614.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          517.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 560.424 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1897299.909 ±(99.9%) 94522.751 ops/s [Average]
[info]   (min, avg, max) = (1867038.401, 1897299.909, 1923568.094), stdev = 24547.258
[info]   CI (99.9%): [1802777.158, 1991822.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   613.970 ±(99.9%) 34.797 MB/sec [Average]
[info]   (min, avg, max) = (604.269, 613.970, 626.493), stdev = 9.037
[info]   CI (99.9%): [579.173, 648.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   509.271 ±(99.9%) 32.549 B/op [Average]
[info]   (min, avg, max) = (496.000, 509.271, 517.667), stdev = 8.453
[info]   CI (99.9%): [476.722, 541.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.428 ±(99.9%) 1143.939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.428, 664.911), stdev = 297.077
[info]   CI (99.9%): [≈ 0, 1675.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   442.379 ±(99.9%) 952.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 442.379, 560.424), stdev = 247.370
[info]   CI (99.9%): [≈ 0, 1394.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69241.195 ops/s
[info] # Warmup Iteration   2: 925572.121 ops/s
[info] # Warmup Iteration   3: 975104.953 ops/s
[info] # Warmup Iteration   4: 827649.693 ops/s
[info] # Warmup Iteration   5: 826728.946 ops/s
[info] Iteration   1: 828095.299 ops/s
[info]                  ·gc.alloc.rate:               320.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          609.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1255.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 829406.298 ops/s
[info]                  ·gc.alloc.rate:      303.612 MB/sec
[info]                  ·gc.alloc.rate.norm: 576.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 825391.325 ops/s
[info]                  ·gc.alloc.rate:               319.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          609.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1261.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 829490.114 ops/s
[info]                  ·gc.alloc.rate:      303.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 576.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 827719.611 ops/s
[info]                  ·gc.alloc.rate:               324.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          617.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1257.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   828020.529 ±(99.9%) 6411.320 ops/s [Average]
[info]   (min, avg, max) = (825391.325, 828020.529, 829490.114), stdev = 1664.999
[info]   CI (99.9%): [821609.210, 834431.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   314.393 ±(99.9%) 38.711 MB/sec [Average]
[info]   (min, avg, max) = (303.565, 314.393, 324.693), stdev = 10.053
[info]   CI (99.9%): [275.682, 353.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   597.546 ±(99.9%) 76.765 B/op [Average]
[info]   (min, avg, max) = (576.001, 597.546, 617.221), stdev = 19.936
[info]   CI (99.9%): [520.781, 674.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.732 ±(99.9%) 1394.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.732, 661.650), stdev = 362.166
[info]   CI (99.9%): [≈ 0, 1791.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   754.879 ±(99.9%) 2653.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 754.879, 1261.357), stdev = 689.110
[info]   CI (99.9%): [≈ 0, 3408.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 911502.756 ops/s
[info] # Warmup Iteration   2: 1966944.628 ops/s
[info] # Warmup Iteration   3: 2183099.256 ops/s
[info] # Warmup Iteration   4: 2174965.983 ops/s
[info] # Warmup Iteration   5: 2174390.723 ops/s
[info] Iteration   1: 2169554.732 ops/s
[info]                  ·gc.alloc.rate:               429.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          311.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2171381.663 ops/s
[info]                  ·gc.alloc.rate:      419.505 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2168542.775 ops/s
[info]                  ·gc.alloc.rate:               433.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          314.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 485.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2162256.473 ops/s
[info]                  ·gc.alloc.rate:                   430.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              313.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2166104.545 ops/s
[info]                  ·gc.alloc.rate:      418.393 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   2167568.037 ±(99.9%) 13586.190 ops/s [Average]
[info]   (min, avg, max) = (2162256.473, 2167568.037, 2171381.663), stdev = 3528.290
[info]   CI (99.9%): [2153981.847, 2181154.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   426.189 ±(99.9%) 26.202 MB/sec [Average]
[info]   (min, avg, max) = (418.393, 426.189, 433.474), stdev = 6.805
[info]   CI (99.9%): [399.987, 452.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   309.379 ±(99.9%) 19.415 B/op [Average]
[info]   (min, avg, max) = (304.000, 309.379, 314.457), stdev = 5.042
[info]   CI (99.9%): [289.964, 328.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.840 ±(99.9%) 1323.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.840, 668.772), stdev = 343.644
[info]   CI (99.9%): [≈ 0, 1693.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   268.572 ±(99.9%) 961.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 268.572, 486.566), stdev = 249.605
[info]   CI (99.9%): [≈ 0, 1229.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7291.236 ops/s
[info] # Warmup Iteration   2: 103365.857 ops/s
[info] # Warmup Iteration   3: 142275.360 ops/s
[info] # Warmup Iteration   4: 172075.431 ops/s
[info] # Warmup Iteration   5: 177942.848 ops/s
[info] Iteration   1: 172372.587 ops/s
[info]                  ·gc.alloc.rate:                   4499.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              41061.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4031.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36792.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 171497.532 ops/s
[info]                  ·gc.alloc.rate:                   4528.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              41556.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4723.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43346.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 170251.781 ops/s
[info]                  ·gc.alloc.rate:                   4485.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              41467.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4062.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37557.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 171673.695 ops/s
[info]                  ·gc.alloc.rate:                   4534.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              41570.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4752.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43568.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 172031.419 ops/s
[info]                  ·gc.alloc.rate:                   4517.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              41329.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37322.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.571 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   171565.403 ±(99.9%) 3110.841 ops/s [Average]
[info]   (min, avg, max) = (170251.781, 171565.403, 172372.587), stdev = 807.876
[info]   CI (99.9%): [168454.561, 174676.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4513.080 ±(99.9%) 78.115 MB/sec [Average]
[info]   (min, avg, max) = (4485.806, 4513.080, 4534.467), stdev = 20.286
[info]   CI (99.9%): [4434.965, 4591.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41397.128 ±(99.9%) 812.418 B/op [Average]
[info]   (min, avg, max) = (41061.151, 41397.128, 41570.842), stdev = 210.982
[info]   CI (99.9%): [40584.710, 42209.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4329.922 ±(99.9%) 1436.189 MB/sec [Average]
[info]   (min, avg, max) = (4031.528, 4329.922, 4752.371), stdev = 372.974
[info]   CI (99.9%): [2893.733, 5766.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39717.430 ±(99.9%) 13194.066 B/op [Average]
[info]   (min, avg, max) = (36792.460, 39717.430, 43568.523), stdev = 3426.457
[info]   CI (99.9%): [26523.364, 52911.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.382 ±(99.9%) 0.731 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.382, 0.571), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 1.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 11.000), stdev = 1.095
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130710.655 ops/s
[info] # Warmup Iteration   2: 430558.137 ops/s
[info] # Warmup Iteration   3: 473219.204 ops/s
[info] # Warmup Iteration   4: 479144.356 ops/s
[info] # Warmup Iteration   5: 482857.035 ops/s
[info] Iteration   1: 478239.876 ops/s
[info]                  ·gc.alloc.rate:               1588.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          5226.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1989.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6546.256 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 483322.224 ops/s
[info]                  ·gc.alloc.rate:                   1569.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              5111.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4325.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 474910.820 ops/s
[info]                  ·gc.alloc.rate:               1567.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          5191.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4408.527 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 484314.254 ops/s
[info]                  ·gc.alloc.rate:                   1583.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              5146.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4331.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 480735.009 ops/s
[info]                  ·gc.alloc.rate:                   1599.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              5234.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6565.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   480304.437 ±(99.9%) 14754.120 ops/s [Average]
[info]   (min, avg, max) = (474910.820, 480304.437, 484314.254), stdev = 3831.598
[info]   CI (99.9%): [465550.317, 495058.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1581.676 ±(99.9%) 50.794 MB/sec [Average]
[info]   (min, avg, max) = (1567.229, 1581.676, 1599.055), stdev = 13.191
[info]   CI (99.9%): [1530.882, 1632.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5182.074 ±(99.9%) 203.400 B/op [Average]
[info]   (min, avg, max) = (5111.350, 5182.074, 5234.859), stdev = 52.822
[info]   CI (99.9%): [4978.673, 5385.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1597.465 ±(99.9%) 1405.734 MB/sec [Average]
[info]   (min, avg, max) = (1328.571, 1597.465, 2005.461), stdev = 365.065
[info]   CI (99.9%): [191.731, 3003.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5235.423 ±(99.9%) 4643.056 B/op [Average]
[info]   (min, avg, max) = (4325.501, 5235.423, 6565.322), stdev = 1205.787
[info]   CI (99.9%): [592.367, 9878.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.122 ±(99.9%) 0.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.338), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.777 ops/s
[info] # Warmup Iteration   2: 2538619.513 ops/s
[info] # Warmup Iteration   3: 2670965.573 ops/s
[info] # Warmup Iteration   4: 2602774.760 ops/s
[info] # Warmup Iteration   5: 2643140.055 ops/s
[info] Iteration   1: 2627049.977 ops/s
[info]                  ·gc.alloc.rate:               1239.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 397.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2652073.014 ops/s
[info]                  ·gc.alloc.rate:               1274.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          756.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 788.679 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2705856.672 ops/s
[info]                  ·gc.alloc.rate:                   1281.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2657248.404 ops/s
[info]                  ·gc.alloc.rate:                   1258.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     789.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2649880.937 ops/s
[info]                  ·gc.alloc.rate:                   1266.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   2658421.801 ±(99.9%) 111417.579 ops/s [Average]
[info]   (min, avg, max) = (2627049.977, 2658421.801, 2705856.672), stdev = 28934.792
[info]   CI (99.9%): [2547004.222, 2769839.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1264.023 ±(99.9%) 63.315 MB/sec [Average]
[info]   (min, avg, max) = (1239.106, 1264.023, 1281.609), stdev = 16.443
[info]   CI (99.9%): [1200.709, 1327.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   748.191 ±(99.9%) 22.303 B/op [Average]
[info]   (min, avg, max) = (742.325, 748.191, 756.402), stdev = 5.792
[info]   CI (99.9%): [725.888, 770.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1197.564 ±(99.9%) 1148.838 MB/sec [Average]
[info]   (min, avg, max) = (663.866, 1197.564, 1333.039), stdev = 298.350
[info]   CI (99.9%): [48.725, 2346.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   707.968 ±(99.9%) 668.371 B/op [Average]
[info]   (min, avg, max) = (397.709, 707.968, 790.528), stdev = 173.574
[info]   CI (99.9%): [39.597, 1376.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.991 ±(99.9%) 8.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.991, 4.851), stdev = 2.158
[info]   CI (99.9%): [≈ 0, 9.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.586 ±(99.9%) 4.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 2.871), stdev = 1.278
[info]   CI (99.9%): [≈ 0, 5.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 420404.470 ops/s
[info] # Warmup Iteration   2: 1127077.614 ops/s
[info] # Warmup Iteration   3: 1174401.228 ops/s
[info] # Warmup Iteration   4: 1177531.147 ops/s
[info] # Warmup Iteration   5: 1153687.579 ops/s
[info] Iteration   1: 1185124.109 ops/s
[info]                  ·gc.alloc.rate:               562.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 878.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1131809.110 ops/s
[info]                  ·gc.alloc.rate:               584.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          813.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 921.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1181516.744 ops/s
[info]                  ·gc.alloc.rate:      546.563 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1177302.043 ops/s
[info]                  ·gc.alloc.rate:               561.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1177350.875 ops/s
[info]                  ·gc.alloc.rate:               568.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          760.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 887.378 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1170620.576 ±(99.9%) 84480.788 ops/s [Average]
[info]   (min, avg, max) = (1131809.110, 1170620.576, 1185124.109), stdev = 21939.392
[info]   CI (99.9%): [1086139.788, 1255101.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   564.933 ±(99.9%) 53.147 MB/sec [Average]
[info]   (min, avg, max) = (546.563, 564.933, 584.835), stdev = 13.802
[info]   CI (99.9%): [511.785, 618.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   759.952 ±(99.9%) 123.259 B/op [Average]
[info]   (min, avg, max) = (728.000, 759.952, 813.209), stdev = 32.010
[info]   CI (99.9%): [636.693, 883.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.081 ±(99.9%) 1141.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.081, 663.809), stdev = 296.325
[info]   CI (99.9%): [≈ 0, 1671.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   714.550 ±(99.9%) 1539.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 714.550, 921.277), stdev = 399.789
[info]   CI (99.9%): [≈ 0, 2253.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1652904.568 ops/s
[info] # Warmup Iteration   2: 2768226.254 ops/s
[info] # Warmup Iteration   3: 3005502.691 ops/s
[info] # Warmup Iteration   4: 3013366.406 ops/s
[info] # Warmup Iteration   5: 2984104.036 ops/s
[info] Iteration   1: 3010218.420 ops/s
[info]                  ·gc.alloc.rate:                   1435.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     701.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2981396.340 ops/s
[info]                  ·gc.alloc.rate:                   1431.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              755.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3019944.993 ops/s
[info]                  ·gc.alloc.rate:                   1437.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3031437.110 ops/s
[info]                  ·gc.alloc.rate:                   1428.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     695.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3025158.412 ops/s
[info]                  ·gc.alloc.rate:               1457.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          758.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 695.895 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   3013631.055 ±(99.9%) 75567.951 ops/s [Average]
[info]   (min, avg, max) = (2981396.340, 3013631.055, 3031437.110), stdev = 19624.757
[info]   CI (99.9%): [2938063.104, 3089199.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1438.210 ±(99.9%) 43.454 MB/sec [Average]
[info]   (min, avg, max) = (1428.922, 1438.210, 1457.457), stdev = 11.285
[info]   CI (99.9%): [1394.756, 1481.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   751.049 ±(99.9%) 23.810 B/op [Average]
[info]   (min, avg, max) = (742.033, 751.049, 758.077), stdev = 6.183
[info]   CI (99.9%): [727.239, 774.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1340.412 ±(99.9%) 7.801 MB/sec [Average]
[info]   (min, avg, max) = (1337.907, 1340.412, 1342.355), stdev = 2.026
[info]   CI (99.9%): [1332.611, 1348.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   699.992 ±(99.9%) 20.144 B/op [Average]
[info]   (min, avg, max) = (695.164, 699.992, 708.235), stdev = 5.231
[info]   CI (99.9%): [679.847, 720.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 5.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.323), stdev = 1.438
[info]   CI (99.9%): [≈ 0, 6.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.409 ±(99.9%) 2.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.409, 1.732), stdev = 0.750
[info]   CI (99.9%): [≈ 0, 3.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1793454.731 ops/s
[info] # Warmup Iteration   2: 2891531.559 ops/s
[info] # Warmup Iteration   3: 3235937.365 ops/s
[info] # Warmup Iteration   4: 3234130.067 ops/s
[info] # Warmup Iteration   5: 3076363.615 ops/s
[info] Iteration   1: 3233462.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3233966.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3234646.258 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3235507.564 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3235373.789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3234591.168 ±(99.9%) 3401.220 ops/s [Average]
[info]   (min, avg, max) = (3233462.103, 3234591.168, 3235507.564), stdev = 883.286
[info]   CI (99.9%): [3231189.947, 3237992.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25404.311 ops/s
[info] # Warmup Iteration   2: 638804.470 ops/s
[info] # Warmup Iteration   3: 685609.820 ops/s
[info] # Warmup Iteration   4: 986617.384 ops/s
[info] # Warmup Iteration   5: 973056.496 ops/s
[info] Iteration   1: 974178.642 ops/s
[info]                  ·gc.alloc.rate:                   1043.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              1686.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2131.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 984856.556 ops/s
[info]                  ·gc.alloc.rate:               1042.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          1665.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1054.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 966915.193 ops/s
[info]                  ·gc.alloc.rate:               1048.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          1707.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2150.766 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 960568.732 ops/s
[info]                  ·gc.alloc.rate:                   1024.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              1678.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1083.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 956292.894 ops/s
[info]                  ·gc.alloc.rate:                   1034.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1702.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2178.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   968562.403 ±(99.9%) 43658.327 ops/s [Average]
[info]   (min, avg, max) = (956292.894, 968562.403, 984856.556), stdev = 11337.929
[info]   CI (99.9%): [924904.077, 1012220.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1038.850 ±(99.9%) 35.927 MB/sec [Average]
[info]   (min, avg, max) = (1024.827, 1038.850, 1048.780), stdev = 9.330
[info]   CI (99.9%): [1002.922, 1074.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1688.100 ±(99.9%) 66.447 B/op [Average]
[info]   (min, avg, max) = (1665.267, 1688.100, 1707.115), stdev = 17.256
[info]   CI (99.9%): [1621.653, 1754.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1057.221 ±(99.9%) 1393.621 MB/sec [Average]
[info]   (min, avg, max) = (660.247, 1057.221, 1323.627), stdev = 361.919
[info]   CI (99.9%): [≈ 0, 2450.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1719.904 ±(99.9%) 2288.755 B/op [Average]
[info]   (min, avg, max) = (1054.990, 1719.904, 2178.490), stdev = 594.382
[info]   CI (99.9%): [≈ 0, 4008.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.972 ±(99.9%) 8.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.972, 4.798), stdev = 2.139
[info]   CI (99.9%): [≈ 0, 9.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.600 ±(99.9%) 13.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.600, 7.897), stdev = 3.521
[info]   CI (99.9%): [≈ 0, 15.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.302
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27539.615 ops/s
[info] # Warmup Iteration   2: 187181.428 ops/s
[info] # Warmup Iteration   3: 205777.744 ops/s
[info] # Warmup Iteration   4: 233381.059 ops/s
[info] # Warmup Iteration   5: 239843.993 ops/s
[info] Iteration   1: 241391.097 ops/s
[info]                  ·gc.alloc.rate:                   2989.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              19483.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17339.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.307 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 242779.338 ops/s
[info]                  ·gc.alloc.rate:                   2997.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              19427.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17248.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 238239.916 ops/s
[info]                  ·gc.alloc.rate:                   2969.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              19617.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22050.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 242568.756 ops/s
[info]                  ·gc.alloc.rate:               3036.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          19693.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17400.774 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 241286.649 ops/s
[info]                  ·gc.alloc.rate:                   3035.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              19789.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21910.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   241253.151 ±(99.9%) 6984.382 ops/s [Average]
[info]   (min, avg, max) = (238239.916, 241253.151, 242779.338), stdev = 1813.822
[info]   CI (99.9%): [234268.769, 248237.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   3005.697 ±(99.9%) 113.624 MB/sec [Average]
[info]   (min, avg, max) = (2969.624, 3005.697, 3036.636), stdev = 29.508
[info]   CI (99.9%): [2892.073, 3119.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19602.296 ±(99.9%) 571.249 B/op [Average]
[info]   (min, avg, max) = (19427.520, 19602.296, 19789.129), stdev = 148.351
[info]   CI (99.9%): [19031.047, 20173.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2940.673 ±(99.9%) 1437.414 MB/sec [Average]
[info]   (min, avg, max) = (2660.016, 2940.673, 3360.827), stdev = 373.292
[info]   CI (99.9%): [1503.259, 4378.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19189.831 ±(99.9%) 9813.369 B/op [Average]
[info]   (min, avg, max) = (17248.532, 19189.831, 22050.338), stdev = 2548.501
[info]   CI (99.9%): [9376.463, 29003.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.354), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.543 ±(99.9%) 3.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.543, 2.307), stdev = 0.988
[info]   CI (99.9%): [≈ 0, 4.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 11.000), stdev = 2.449
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95873.490 ops/s
[info] # Warmup Iteration   2: 371754.274 ops/s
[info] # Warmup Iteration   3: 434302.808 ops/s
[info] # Warmup Iteration   4: 425089.150 ops/s
[info] # Warmup Iteration   5: 424670.107 ops/s
[info] Iteration   1: 421023.689 ops/s
[info]                  ·gc.alloc.rate:      286.773 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 425255.322 ops/s
[info]                  ·gc.alloc.rate:      289.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 425124.226 ops/s
[info]                  ·gc.alloc.rate:               303.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          1124.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2442.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 427943.944 ops/s
[info]                  ·gc.alloc.rate:      291.946 MB/sec
[info]                  ·gc.alloc.rate.norm: 1073.589 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 424991.844 ops/s
[info]                  ·gc.alloc.rate:               302.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          1121.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2443.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   424867.805 ±(99.9%) 9524.248 ops/s [Average]
[info]   (min, avg, max) = (421023.689, 424867.805, 427943.944), stdev = 2473.417
[info]   CI (99.9%): [415343.557, 434392.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   294.990 ±(99.9%) 30.043 MB/sec [Average]
[info]   (min, avg, max) = (286.773, 294.990, 303.768), stdev = 7.802
[info]   CI (99.9%): [264.947, 325.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1092.695 ±(99.9%) 106.421 B/op [Average]
[info]   (min, avg, max) = (1072.001, 1092.695, 1124.389), stdev = 27.637
[info]   CI (99.9%): [986.273, 1199.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   263.941 ±(99.9%) 1391.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 263.941, 659.934), stdev = 361.417
[info]   CI (99.9%): [≈ 0, 1655.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   977.254 ±(99.9%) 5152.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 977.254, 2443.540), stdev = 1338.160
[info]   CI (99.9%): [≈ 0, 6130.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603041.714 ops/s
[info] # Warmup Iteration   2: 1246590.993 ops/s
[info] # Warmup Iteration   3: 1295230.376 ops/s
[info] # Warmup Iteration   4: 1326245.752 ops/s
[info] # Warmup Iteration   5: 1312555.720 ops/s
[info] Iteration   1: 1304032.674 ops/s
[info]                  ·gc.alloc.rate:      251.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1300519.794 ops/s
[info]                  ·gc.alloc.rate:                   266.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     619.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1305694.441 ops/s
[info]                  ·gc.alloc.rate:      252.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1297642.015 ops/s
[info]                  ·gc.alloc.rate:                   263.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     620.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1307338.308 ops/s
[info]                  ·gc.alloc.rate:      252.513 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1303045.446 ±(99.9%) 15159.566 ops/s [Average]
[info]   (min, avg, max) = (1297642.015, 1303045.446, 1307338.308), stdev = 3936.891
[info]   CI (99.9%): [1287885.881, 1318205.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   257.458 ±(99.9%) 27.806 MB/sec [Average]
[info]   (min, avg, max) = (251.925, 257.458, 266.654), stdev = 7.221
[info]   CI (99.9%): [229.652, 285.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.946 ±(99.9%) 36.781 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.946, 322.612), stdev = 9.552
[info]   CI (99.9%): [274.165, 347.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.664 ±(99.9%) 1079.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.664, 511.737), stdev = 280.248
[info]   CI (99.9%): [≈ 0, 1283.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   247.921 ±(99.9%) 1307.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 247.921, 620.482), stdev = 339.481
[info]   CI (99.9%): [≈ 0, 1555.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6482.318 ops/s
[info] # Warmup Iteration   2: 93671.263 ops/s
[info] # Warmup Iteration   3: 111727.859 ops/s
[info] # Warmup Iteration   4: 123958.284 ops/s
[info] # Warmup Iteration   5: 125370.990 ops/s
[info] Iteration   1: 124570.739 ops/s
[info]                  ·gc.alloc.rate:                   4045.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              51090.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50902.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 125176.837 ops/s
[info]                  ·gc.alloc.rate:                   4090.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              51424.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42385.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 124754.705 ops/s
[info]                  ·gc.alloc.rate:                   4105.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              51780.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4059.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51201.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 124120.666 ops/s
[info]                  ·gc.alloc.rate:                   4086.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              51809.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51597.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 125822.945 ops/s
[info]                  ·gc.alloc.rate:                   4140.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              51781.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4077.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50994.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   124889.179 ±(99.9%) 2484.162 ops/s [Average]
[info]   (min, avg, max) = (124120.666, 124889.179, 125822.945), stdev = 645.129
[info]   CI (99.9%): [122405.016, 127373.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4093.396 ±(99.9%) 131.999 MB/sec [Average]
[info]   (min, avg, max) = (4045.481, 4093.396, 4140.299), stdev = 34.280
[info]   CI (99.9%): [3961.397, 4225.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51577.321 ±(99.9%) 1212.781 B/op [Average]
[info]   (min, avg, max) = (51090.612, 51577.321, 51809.112), stdev = 314.955
[info]   CI (99.9%): [50364.540, 52790.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3921.531 ±(99.9%) 1186.865 MB/sec [Average]
[info]   (min, avg, max) = (3371.070, 3921.531, 4077.377), stdev = 308.225
[info]   CI (99.9%): [2734.667, 5108.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49416.359 ±(99.9%) 15169.527 B/op [Average]
[info]   (min, avg, max) = (42385.447, 49416.359, 51597.281), stdev = 3939.478
[info]   CI (99.9%): [34246.833, 64585.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.472 ±(99.9%) 0.837 B/op [Average]
[info]   (min, avg, max) = (0.262, 0.472, 0.781), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.200, 9.000), stdev = 1.304
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48638.366 ops/s
[info] # Warmup Iteration   2: 304276.048 ops/s
[info] # Warmup Iteration   3: 356859.345 ops/s
[info] # Warmup Iteration   4: 345245.466 ops/s
[info] # Warmup Iteration   5: 342698.758 ops/s
[info] Iteration   1: 339456.555 ops/s
[info]                  ·gc.alloc.rate:                   1867.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              8657.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9211.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 340572.994 ops/s
[info]                  ·gc.alloc.rate:                   1872.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              8652.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9209.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.802 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 345010.529 ops/s
[info]                  ·gc.alloc.rate:                   1867.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              8518.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6071.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 341281.229 ops/s
[info]                  ·gc.alloc.rate:                   1861.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              8582.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9217.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 345343.829 ops/s
[info]                  ·gc.alloc.rate:               1882.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          8578.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9136.439 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   342333.027 ±(99.9%) 10316.571 ops/s [Average]
[info]   (min, avg, max) = (339456.555, 342333.027, 345343.829), stdev = 2679.181
[info]   CI (99.9%): [332016.456, 352649.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1870.357 ±(99.9%) 30.807 MB/sec [Average]
[info]   (min, avg, max) = (1861.145, 1870.357, 1882.744), stdev = 8.000
[info]   CI (99.9%): [1839.550, 1901.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8598.003 ±(99.9%) 222.901 B/op [Average]
[info]   (min, avg, max) = (8518.846, 8598.003, 8657.571), stdev = 57.887
[info]   CI (99.9%): [8375.102, 8820.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1863.023 ±(99.9%) 1144.777 MB/sec [Average]
[info]   (min, avg, max) = (1331.343, 1863.023, 2005.084), stdev = 297.295
[info]   CI (99.9%): [718.246, 3007.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8569.127 ±(99.9%) 5377.773 B/op [Average]
[info]   (min, avg, max) = (6071.532, 8569.127, 9217.329), stdev = 1396.590
[info]   CI (99.9%): [3191.354, 13946.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.270 ±(99.9%) 1.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 1.039), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.247 ±(99.9%) 7.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.247, 4.802), stdev = 2.030
[info]   CI (99.9%): [≈ 0, 9.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 572564.231 ops/s
[info] # Warmup Iteration   2: 2097413.346 ops/s
[info] # Warmup Iteration   3: 2289841.827 ops/s
[info] # Warmup Iteration   4: 2279562.332 ops/s
[info] # Warmup Iteration   5: 2219501.821 ops/s
[info] Iteration   1: 2300734.923 ops/s
[info]                  ·gc.alloc.rate:                   635.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              434.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2278882.699 ops/s
[info]                  ·gc.alloc.rate:               637.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 459.362 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2300394.417 ops/s
[info]                  ·gc.alloc.rate:               637.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2297147.907 ops/s
[info]                  ·gc.alloc.rate:      618.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2295054.000 ops/s
[info]                  ·gc.alloc.rate:               631.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456.825 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2294442.789 ±(99.9%) 34699.648 ops/s [Average]
[info]   (min, avg, max) = (2278882.699, 2294442.789, 2300734.923), stdev = 9011.388
[info]   CI (99.9%): [2259743.141, 2329142.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   632.170 ±(99.9%) 29.856 MB/sec [Average]
[info]   (min, avg, max) = (618.861, 632.170, 637.164), stdev = 7.753
[info]   CI (99.9%): [602.314, 662.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   433.590 ±(99.9%) 22.647 B/op [Average]
[info]   (min, avg, max) = (424.000, 433.590, 439.870), stdev = 5.881
[info]   CI (99.9%): [410.943, 456.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.264 ±(99.9%) 1145.741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.264, 666.130), stdev = 297.545
[info]   CI (99.9%): [≈ 0, 1678.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   365.163 ±(99.9%) 786.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 365.163, 459.362), stdev = 204.141
[info]   CI (99.9%): [≈ 0, 1151.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 2.074
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1688255.199 ops/s
[info] # Warmup Iteration   2: 2832102.916 ops/s
[info] # Warmup Iteration   3: 3096015.777 ops/s
[info] # Warmup Iteration   4: 3207913.586 ops/s
[info] # Warmup Iteration   5: 3263225.181 ops/s
[info] Iteration   1: 3286807.235 ops/s
[info]                  ·gc.alloc.rate:               907.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3230836.448 ops/s
[info]                  ·gc.alloc.rate:                   931.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              453.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3265764.081 ops/s
[info]                  ·gc.alloc.rate:               899.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 322.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3248526.529 ops/s
[info]                  ·gc.alloc.rate:               893.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 324.341 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3204035.018 ops/s
[info]                  ·gc.alloc.rate:                   906.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   3247193.862 ±(99.9%) 122467.719 ops/s [Average]
[info]   (min, avg, max) = (3204035.018, 3247193.862, 3286807.235), stdev = 31804.478
[info]   CI (99.9%): [3124726.143, 3369661.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   907.993 ±(99.9%) 55.816 MB/sec [Average]
[info]   (min, avg, max) = (893.887, 907.993, 931.895), stdev = 14.495
[info]   CI (99.9%): [852.177, 963.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.121 ±(99.9%) 35.348 B/op [Average]
[info]   (min, avg, max) = (433.079, 440.121, 453.944), stdev = 9.180
[info]   CI (99.9%): [404.773, 475.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.032 ±(99.9%) 1412.577 MB/sec [Average]
[info]   (min, avg, max) = (668.794, 937.032, 1339.790), stdev = 366.842
[info]   CI (99.9%): [≈ 0, 2349.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   455.368 ±(99.9%) 701.414 B/op [Average]
[info]   (min, avg, max) = (320.246, 455.368, 658.020), stdev = 182.155
[info]   CI (99.9%): [≈ 0, 1156.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1811083.927 ops/s
[info] # Warmup Iteration   2: 3107059.661 ops/s
[info] # Warmup Iteration   3: 3402501.397 ops/s
[info] # Warmup Iteration   4: 3400436.892 ops/s
[info] # Warmup Iteration   5: 3402185.336 ops/s
[info] Iteration   1: 3335554.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3403317.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3413509.034 ops/s
[info]                  ·gc.alloc.rate:      0.221 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.102 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3410386.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3402917.810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3393136.958 ±(99.9%) 125185.038 ops/s [Average]
[info]   (min, avg, max) = (3335554.197, 3393136.958, 3413509.034), stdev = 32510.157
[info]   CI (99.9%): [3267951.921, 3518321.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.045 ±(99.9%) 0.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.045, 0.221), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.021 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.021, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6461.103 ops/s
[info] # Warmup Iteration   2: 22985.212 ops/s
[info] # Warmup Iteration   3: 55102.259 ops/s
[info] # Warmup Iteration   4: 51518.618 ops/s
[info] # Warmup Iteration   5: 57334.725 ops/s
[info] Iteration   1: 58455.363 ops/s
[info]                  ·gc.alloc.rate:                   2047.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              55115.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53822.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 58895.087 ops/s
[info]                  ·gc.alloc.rate:                   2073.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              55389.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53281.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 58586.875 ops/s
[info]                  ·gc.alloc.rate:                   2045.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              54952.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53490.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.559 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 58531.254 ops/s
[info]                  ·gc.alloc.rate:                   2039.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              54848.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53581.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 58485.634 ops/s
[info]                  ·gc.alloc.rate:                   2050.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              55168.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53714.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.560 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   58590.842 ±(99.9%) 682.214 ops/s [Average]
[info]   (min, avg, max) = (58455.363, 58590.842, 58895.087), stdev = 177.169
[info]   CI (99.9%): [57908.629, 59273.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2051.125 ±(99.9%) 49.454 MB/sec [Average]
[info]   (min, avg, max) = (2039.557, 2051.125, 2073.033), stdev = 12.843
[info]   CI (99.9%): [2001.671, 2100.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55094.790 ±(99.9%) 802.746 B/op [Average]
[info]   (min, avg, max) = (54848.571, 55094.790, 55389.793), stdev = 208.471
[info]   CI (99.9%): [54292.044, 55897.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1994.629 ±(99.9%) 12.177 MB/sec [Average]
[info]   (min, avg, max) = (1991.226, 1994.629, 1999.223), stdev = 3.162
[info]   CI (99.9%): [1982.452, 2006.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53578.046 ±(99.9%) 803.390 B/op [Average]
[info]   (min, avg, max) = (53281.518, 53578.046, 53822.334), stdev = 208.638
[info]   CI (99.9%): [52774.657, 54381.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.994 ±(99.9%) 6.290 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.994, 3.844), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.711 ±(99.9%) 169.364 B/op [Average]
[info]   (min, avg, max) = (0.559, 26.711, 103.476), stdev = 43.983
[info]   CI (99.9%): [≈ 0, 196.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41537.825 ops/s
[info] # Warmup Iteration   2: 265812.898 ops/s
[info] # Warmup Iteration   3: 296773.264 ops/s
[info] # Warmup Iteration   4: 316087.100 ops/s
[info] # Warmup Iteration   5: 323494.566 ops/s
[info] Iteration   1: 323734.612 ops/s
[info]                  ·gc.alloc.rate:                   3446.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              16755.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3329.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16186.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 324518.511 ops/s
[info]                  ·gc.alloc.rate:                   3452.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              16745.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3333.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16168.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 323360.570 ops/s
[info]                  ·gc.alloc.rate:               3494.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          17008.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3345.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16281.461 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 318351.728 ops/s
[info]                  ·gc.alloc.rate:                   3444.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              17022.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16613.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 324442.914 ops/s
[info]                  ·gc.alloc.rate:                   3507.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              17009.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16361.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   322881.667 ±(99.9%) 9928.757 ops/s [Average]
[info]   (min, avg, max) = (318351.728, 322881.667, 324518.511), stdev = 2578.467
[info]   CI (99.9%): [312952.910, 332810.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3469.194 ±(99.9%) 113.969 MB/sec [Average]
[info]   (min, avg, max) = (3444.422, 3469.194, 3507.227), stdev = 29.597
[info]   CI (99.9%): [3355.225, 3583.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16908.228 ±(99.9%) 554.841 B/op [Average]
[info]   (min, avg, max) = (16745.346, 16908.228, 17022.228), stdev = 144.090
[info]   CI (99.9%): [16353.387, 17463.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3348.834 ±(99.9%) 71.854 MB/sec [Average]
[info]   (min, avg, max) = (3329.473, 3348.834, 3373.592), stdev = 18.660
[info]   CI (99.9%): [3276.980, 3420.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16322.206 ±(99.9%) 695.186 B/op [Average]
[info]   (min, avg, max) = (16168.247, 16322.206, 16613.850), stdev = 180.537
[info]   CI (99.9%): [15627.021, 17017.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 2.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.730), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 3.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.783 ±(99.9%) 14.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.783, 8.408), stdev = 3.704
[info]   CI (99.9%): [≈ 0, 16.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81433.265 ops/s
[info] # Warmup Iteration   2: 524704.269 ops/s
[info] # Warmup Iteration   3: 604758.959 ops/s
[info] # Warmup Iteration   4: 691968.029 ops/s
[info] # Warmup Iteration   5: 706001.687 ops/s
[info] Iteration   1: 692658.933 ops/s
[info]                  ·gc.alloc.rate:                   1875.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              4262.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4527.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 706604.486 ops/s
[info]                  ·gc.alloc.rate:                   1904.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2965.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 703019.313 ops/s
[info]                  ·gc.alloc.rate:               1909.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          4272.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4483.726 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 692320.929 ops/s
[info]                  ·gc.alloc.rate:                   1879.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              4273.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4571.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 704954.678 ops/s
[info]                  ·gc.alloc.rate:               1927.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          4301.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4501.236 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   699911.668 ±(99.9%) 26546.043 ops/s [Average]
[info]   (min, avg, max) = (692320.929, 699911.668, 706604.486), stdev = 6893.923
[info]   CI (99.9%): [673365.624, 726457.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1899.292 ±(99.9%) 82.189 MB/sec [Average]
[info]   (min, avg, max) = (1875.963, 1899.292, 1927.342), stdev = 21.344
[info]   CI (99.9%): [1817.104, 1981.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4270.120 ±(99.9%) 84.807 B/op [Average]
[info]   (min, avg, max) = (4240.453, 4270.120, 4301.602), stdev = 22.024
[info]   CI (99.9%): [4185.312, 4354.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1871.155 ±(99.9%) 1161.348 MB/sec [Average]
[info]   (min, avg, max) = (1331.880, 1871.155, 2016.788), stdev = 301.598
[info]   CI (99.9%): [709.807, 3032.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4210.029 ±(99.9%) 2680.906 B/op [Average]
[info]   (min, avg, max) = (2965.985, 4210.029, 4571.201), stdev = 696.223
[info]   CI (99.9%): [1529.123, 6890.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.047), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:36:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1107524.728 ops/s
[info] # Warmup Iteration   2: 2632684.724 ops/s
[info] # Warmup Iteration   3: 2933477.870 ops/s
[info] # Warmup Iteration   4: 2955140.961 ops/s
[info] # Warmup Iteration   5: 2941818.691 ops/s
[info] Iteration   1: 2934350.475 ops/s
[info]                  ·gc.alloc.rate:                   1042.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2938161.607 ops/s
[info]                  ·gc.alloc.rate:               1034.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 358.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2891281.153 ops/s
[info]                  ·gc.alloc.rate:               1048.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          570.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 729.582 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2947303.745 ops/s
[info]                  ·gc.alloc.rate:               1036.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 358.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2946446.440 ops/s
[info]                  ·gc.alloc.rate:                   1046.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2931508.684 ±(99.9%) 89132.465 ops/s [Average]
[info]   (min, avg, max) = (2891281.153, 2931508.684, 2947303.745), stdev = 23147.418
[info]   CI (99.9%): [2842376.219, 3020641.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1041.748 ±(99.9%) 23.033 MB/sec [Average]
[info]   (min, avg, max) = (1034.873, 1041.748, 1048.366), stdev = 5.982
[info]   CI (99.9%): [1018.715, 1064.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.051 ±(99.9%) 26.419 B/op [Average]
[info]   (min, avg, max) = (553.254, 559.051, 570.470), stdev = 6.861
[info]   CI (99.9%): [532.631, 585.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.583 ±(99.9%) 1411.078 MB/sec [Average]
[info]   (min, avg, max) = (669.708, 1071.583, 1341.447), stdev = 366.453
[info]   CI (99.9%): [≈ 0, 2482.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   575.575 ±(99.9%) 763.976 B/op [Average]
[info]   (min, avg, max) = (358.033, 575.575, 729.582), stdev = 198.402
[info]   CI (99.9%): [≈ 0, 1339.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.619 ±(99.9%) 5.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.619, 3.074), stdev = 1.372
[info]   CI (99.9%): [≈ 0, 5.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.331 ±(99.9%) 2.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.331, 1.642), stdev = 0.733
[info]   CI (99.9%): [≈ 0, 3.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3585.758 ops/s
[info] # Warmup Iteration   2: 87239.078 ops/s
[info] # Warmup Iteration   3: 119860.037 ops/s
[info] # Warmup Iteration   4: 132720.121 ops/s
[info] # Warmup Iteration   5: 135153.884 ops/s
[info] Iteration   1: 134773.104 ops/s
[info]                  ·gc.alloc.rate:                   4320.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              50450.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4020.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46945.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 134695.127 ops/s
[info]                  ·gc.alloc.rate:                   4345.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              50761.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4711.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55036.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 135475.199 ops/s
[info]                  ·gc.alloc.rate:                   4395.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              51066.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47107.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.484 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 134713.316 ops/s
[info]                  ·gc.alloc.rate:                   4373.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              51083.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47504.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 135149.421 ops/s
[info]                  ·gc.alloc.rate:                   4388.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              51083.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4076.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47453.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   134961.233 ±(99.9%) 1316.059 ops/s [Average]
[info]   (min, avg, max) = (134695.127, 134961.233, 135475.199), stdev = 341.776
[info]   CI (99.9%): [133645.174, 136277.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4364.819 ±(99.9%) 120.485 MB/sec [Average]
[info]   (min, avg, max) = (4320.721, 4364.819, 4395.887), stdev = 31.290
[info]   CI (99.9%): [4244.333, 4485.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50889.061 ±(99.9%) 1081.177 B/op [Average]
[info]   (min, avg, max) = (50450.655, 50889.061, 51083.596), stdev = 280.778
[info]   CI (99.9%): [49807.884, 51970.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4186.160 ±(99.9%) 1134.028 MB/sec [Average]
[info]   (min, avg, max) = (4020.493, 4186.160, 4711.613), stdev = 294.504
[info]   CI (99.9%): [3052.132, 5320.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48809.371 ±(99.9%) 13435.359 B/op [Average]
[info]   (min, avg, max) = (46945.068, 48809.371, 55036.832), stdev = 3489.120
[info]   CI (99.9%): [35374.012, 62244.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.534 ±(99.9%) 0.782 B/op [Average]
[info]   (min, avg, max) = (0.243, 0.534, 0.729), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 1.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 12.000), stdev = 1.304
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83486.521 ops/s
[info] # Warmup Iteration   2: 303626.727 ops/s
[info] # Warmup Iteration   3: 297411.574 ops/s
[info] # Warmup Iteration   4: 330101.916 ops/s
[info] # Warmup Iteration   5: 332209.798 ops/s
[info] Iteration   1: 333605.334 ops/s
[info]                  ·gc.alloc.rate:                   2620.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              12361.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12589.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 335376.055 ops/s
[info]                  ·gc.alloc.rate:                   2622.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              12306.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9387.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 333368.368 ops/s
[info]                  ·gc.alloc.rate:                   2646.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              12493.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12608.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 334261.050 ops/s
[info]                  ·gc.alloc.rate:                   2667.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              12558.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12614.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 334161.556 ops/s
[info]                  ·gc.alloc.rate:                   2667.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              12563.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12663.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   334154.472 ±(99.9%) 2997.069 ops/s [Average]
[info]   (min, avg, max) = (333368.368, 334154.472, 335376.055), stdev = 778.329
[info]   CI (99.9%): [331157.403, 337151.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2644.922 ±(99.9%) 89.388 MB/sec [Average]
[info]   (min, avg, max) = (2620.148, 2644.922, 2667.930), stdev = 23.214
[info]   CI (99.9%): [2555.533, 2734.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12456.738 ±(99.9%) 450.285 B/op [Average]
[info]   (min, avg, max) = (12306.959, 12456.738, 12563.631), stdev = 116.937
[info]   CI (99.9%): [12006.453, 12907.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2541.680 ±(99.9%) 1165.750 MB/sec [Average]
[info]   (min, avg, max) = (2000.309, 2541.680, 2689.089), stdev = 302.742
[info]   CI (99.9%): [1375.930, 3707.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11972.704 ±(99.9%) 5565.973 B/op [Average]
[info]   (min, avg, max) = (9387.433, 11972.704, 12663.272), stdev = 1445.465
[info]   CI (99.9%): [6406.731, 17538.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.333 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.229), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.353 ±(99.9%) 1.573 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.353, 1.080), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407189.934 ops/s
[info] # Warmup Iteration   2: 1843354.148 ops/s
[info] # Warmup Iteration   3: 2073786.631 ops/s
[info] # Warmup Iteration   4: 2136780.027 ops/s
[info] # Warmup Iteration   5: 2142504.645 ops/s
[info] Iteration   1: 2130414.535 ops/s
[info]                  ·gc.alloc.rate:               741.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 489.414 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2146086.605 ops/s
[info]                  ·gc.alloc.rate:               745.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 486.817 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2144719.093 ops/s
[info]                  ·gc.alloc.rate:                   747.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              548.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     487.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2124001.077 ops/s
[info]                  ·gc.alloc.rate:               743.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 492.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2122988.923 ops/s
[info]                  ·gc.alloc.rate:                   760.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   2133642.047 ±(99.9%) 42810.700 ops/s [Average]
[info]   (min, avg, max) = (2122988.923, 2133642.047, 2146086.605), stdev = 11117.803
[info]   CI (99.9%): [2090831.347, 2176452.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   747.647 ±(99.9%) 29.908 MB/sec [Average]
[info]   (min, avg, max) = (741.175, 747.647, 760.821), stdev = 7.767
[info]   CI (99.9%): [717.740, 777.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   551.474 ±(99.9%) 27.684 B/op [Average]
[info]   (min, avg, max) = (546.489, 551.474, 564.032), stdev = 7.189
[info]   CI (99.9%): [523.791, 579.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.972 ±(99.9%) 1147.368 MB/sec [Average]
[info]   (min, avg, max) = (662.573, 796.972, 1329.991), stdev = 297.968
[info]   CI (99.9%): [≈ 0, 1944.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   588.348 ±(99.9%) 855.985 B/op [Average]
[info]   (min, avg, max) = (486.817, 588.348, 985.984), stdev = 222.297
[info]   CI (99.9%): [≈ 0, 1444.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1342387.153 ops/s
[info] # Warmup Iteration   2: 2685400.535 ops/s
[info] # Warmup Iteration   3: 2708764.268 ops/s
[info] # Warmup Iteration   4: 2850743.710 ops/s
[info] # Warmup Iteration   5: 2842201.437 ops/s
[info] Iteration   1: 2786957.933 ops/s
[info]                  ·gc.alloc.rate:                   973.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     377.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2790996.395 ops/s
[info]                  ·gc.alloc.rate:               990.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          558.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 755.050 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 2799083.259 ops/s
[info]                  ·gc.alloc.rate:                   969.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              545.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2850930.721 ops/s
[info]                  ·gc.alloc.rate:               987.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          545.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2834860.638 ops/s
[info]                  ·gc.alloc.rate:                   1015.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              563.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2812565.789 ±(99.9%) 110126.193 ops/s [Average]
[info]   (min, avg, max) = (2786957.933, 2812565.789, 2850930.721), stdev = 28599.423
[info]   CI (99.9%): [2702439.596, 2922691.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   987.410 ±(99.9%) 68.549 MB/sec [Average]
[info]   (min, avg, max) = (969.845, 987.410, 1015.128), stdev = 17.802
[info]   CI (99.9%): [918.860, 1055.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   552.452 ±(99.9%) 31.458 B/op [Average]
[info]   (min, avg, max) = (545.118, 552.452, 563.499), stdev = 8.169
[info]   CI (99.9%): [520.994, 583.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.014 ±(99.9%) 1413.744 MB/sec [Average]
[info]   (min, avg, max) = (669.121, 938.014, 1341.102), stdev = 367.145
[info]   CI (99.9%): [≈ 0, 2351.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   524.827 ±(99.9%) 790.852 B/op [Average]
[info]   (min, avg, max) = (369.957, 524.827, 755.050), stdev = 205.382
[info]   CI (99.9%): [≈ 0, 1315.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1788928.247 ops/s
[info] # Warmup Iteration   2: 2899513.935 ops/s
[info] # Warmup Iteration   3: 2945316.766 ops/s
[info] # Warmup Iteration   4: 2945635.926 ops/s
[info] # Warmup Iteration   5: 2945581.078 ops/s
[info] Iteration   1: 2948647.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2947786.578 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2943244.105 ops/s
[info]                  ·gc.alloc.rate:      0.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2936937.746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2943433.874 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.453 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2944009.967 ±(99.9%) 17927.687 ops/s [Average]
[info]   (min, avg, max) = (2936937.746, 2944009.967, 2948647.530), stdev = 4655.763
[info]   CI (99.9%): [2926082.280, 2961937.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.195 ±(99.9%) 1.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.195, 0.848), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.104 ±(99.9%) 0.760 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.104, 0.453), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66740.301 ops/s
[info] # Warmup Iteration   2: 565626.565 ops/s
[info] # Warmup Iteration   3: 784958.706 ops/s
[info] # Warmup Iteration   4: 797916.340 ops/s
[info] # Warmup Iteration   5: 801595.691 ops/s
[info] Iteration   1: 797452.240 ops/s
[info]                  ·gc.alloc.rate:                   4877.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              9623.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4712.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9298.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 800059.598 ops/s
[info]                  ·gc.alloc.rate:                   4893.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              9625.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4732.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9307.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 797382.055 ops/s
[info]                  ·gc.alloc.rate:                   4878.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              9628.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4748.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9370.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 797498.011 ops/s
[info]                  ·gc.alloc.rate:                   4879.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              9630.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9387.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 794768.087 ops/s
[info]                  ·gc.alloc.rate:                   4864.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              9632.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9432.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   797431.998 ±(99.9%) 7205.945 ops/s [Average]
[info]   (min, avg, max) = (794768.087, 797431.998, 800059.598), stdev = 1871.361
[info]   CI (99.9%): [790226.053, 804637.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4878.676 ±(99.9%) 40.567 MB/sec [Average]
[info]   (min, avg, max) = (4864.090, 4878.676, 4893.778), stdev = 10.535
[info]   CI (99.9%): [4838.110, 4919.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9628.014 ±(99.9%) 13.080 B/op [Average]
[info]   (min, avg, max) = (9623.996, 9628.014, 9632.199), stdev = 3.397
[info]   CI (99.9%): [9614.934, 9641.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   4742.380 ±(99.9%) 78.995 MB/sec [Average]
[info]   (min, avg, max) = (4712.067, 4742.380, 4762.993), stdev = 20.515
[info]   CI (99.9%): [4663.385, 4821.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9359.117 ±(99.9%) 216.427 B/op [Average]
[info]   (min, avg, max) = (9298.206, 9359.117, 9432.001), stdev = 56.205
[info]   CI (99.9%): [9142.690, 9575.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.112 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.082, 0.123), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4863.917 ops/s
[info] # Warmup Iteration   2: 18054.483 ops/s
[info] # Warmup Iteration   3: 29254.071 ops/s
[info] # Warmup Iteration   4: 29657.372 ops/s
[info] # Warmup Iteration   5: 29144.484 ops/s
[info] Iteration   1: 29086.030 ops/s
[info]                  ·gc.alloc.rate:                   1842.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              99694.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108422.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.915 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 28910.209 ops/s
[info]                  ·gc.alloc.rate:                   1800.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              98016.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109049.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 29055.148 ops/s
[info]                  ·gc.alloc.rate:                   1748.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              94683.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72166.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 29528.072 ops/s
[info]                  ·gc.alloc.rate:                   1776.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              94682.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106338.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29135.365 ops/s
[info]                  ·gc.alloc.rate:                   1730.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              93466.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71891.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   29142.965 ±(99.9%) 889.603 ops/s [Average]
[info]   (min, avg, max) = (28910.209, 29142.965, 29528.072), stdev = 231.027
[info]   CI (99.9%): [28253.362, 30032.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1779.817 ±(99.9%) 169.161 MB/sec [Average]
[info]   (min, avg, max) = (1730.863, 1779.817, 1842.368), stdev = 43.931
[info]   CI (99.9%): [1610.656, 1948.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   96108.830 ±(99.9%) 10105.481 B/op [Average]
[info]   (min, avg, max) = (93466.282, 96108.830, 99694.948), stdev = 2624.361
[info]   CI (99.9%): [86003.349, 106214.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1733.264 ±(99.9%) 1410.213 MB/sec [Average]
[info]   (min, avg, max) = (1331.324, 1733.264, 2003.653), stdev = 366.228
[info]   CI (99.9%): [323.051, 3143.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93573.598 ±(99.9%) 75832.623 B/op [Average]
[info]   (min, avg, max) = (71891.251, 93573.598, 109049.873), stdev = 19693.491
[info]   CI (99.9%): [17740.975, 169406.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.222 ±(99.9%) 6.827 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.222, 4.229), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 8.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.373 ±(99.9%) 371.669 B/op [Average]
[info]   (min, avg, max) = (2.249, 66.373, 230.201), stdev = 96.521
[info]   CI (99.9%): [≈ 0, 438.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 5.595
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.643 ops/s
[info] # Warmup Iteration   2: 75056.657 ops/s
[info] # Warmup Iteration   3: 99811.376 ops/s
[info] # Warmup Iteration   4: 104565.856 ops/s
[info] # Warmup Iteration   5: 95779.707 ops/s
[info] Iteration   1: 103662.964 ops/s
[info]                  ·gc.alloc.rate:                   846.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              12842.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1269.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19266.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 100905.721 ops/s
[info]                  ·gc.alloc.rate:               940.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          14658.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      637.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9943.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 104263.196 ops/s
[info]                  ·gc.alloc.rate:                   830.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              12542.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          637.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9623.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 99240.832 ops/s
[info]                  ·gc.alloc.rate:                   977.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              15502.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1280.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20304.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 103963.200 ops/s
[info]                  ·gc.alloc.rate:               826.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          12504.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      642.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9731.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   102407.183 ±(99.9%) 8550.495 ops/s [Average]
[info]   (min, avg, max) = (99240.832, 102407.183, 104263.196), stdev = 2220.536
[info]   CI (99.9%): [93856.688, 110957.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   884.151 ±(99.9%) 269.016 MB/sec [Average]
[info]   (min, avg, max) = (826.070, 884.151, 977.499), stdev = 69.863
[info]   CI (99.9%): [615.134, 1153.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   13610.004 ±(99.9%) 5318.063 B/op [Average]
[info]   (min, avg, max) = (12504.428, 13610.004, 15502.175), stdev = 1381.084
[info]   CI (99.9%): [8291.941, 18928.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   893.534 ±(99.9%) 1340.058 MB/sec [Average]
[info]   (min, avg, max) = (637.513, 893.534, 1280.299), stdev = 348.009
[info]   CI (99.9%): [≈ 0, 2233.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   13773.682 ±(99.9%) 21183.312 B/op [Average]
[info]   (min, avg, max) = (9623.100, 13773.682, 20304.289), stdev = 5501.239
[info]   CI (99.9%): [≈ 0, 34956.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.664 ±(99.9%) 5.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.082), stdev = 1.354
[info]   CI (99.9%): [≈ 0, 5.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   10.098 ±(99.9%) 79.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.098, 46.779), stdev = 20.542
[info]   CI (99.9%): [≈ 0, 89.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.200, 16.000), stdev = 4.382
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14955.056 ops/s
[info] # Warmup Iteration   2: 43035.164 ops/s
[info] # Warmup Iteration   3: 60631.250 ops/s
[info] # Warmup Iteration   4: 75661.521 ops/s
[info] # Warmup Iteration   5: 81288.437 ops/s
[info] Iteration   1: 78223.679 ops/s
[info]                  ·gc.alloc.rate:                   1566.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              31505.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26618.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 81576.900 ops/s
[info]                  ·gc.alloc.rate:                   1488.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              28698.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25241.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 73252.682 ops/s
[info]                  ·gc.alloc.rate:                   1386.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              29779.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1296.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27851.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   4: 75634.333 ops/s
[info]                  ·gc.alloc.rate:                   1165.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              24261.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1273.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26503.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 74823.140 ops/s
[info]                  ·gc.alloc.rate:                   1144.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              24063.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1277.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26859.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   76702.147 ±(99.9%) 12573.396 ops/s [Average]
[info]   (min, avg, max) = (73252.682, 76702.147, 81576.900), stdev = 3265.271
[info]   CI (99.9%): [64128.751, 89275.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1350.293 ±(99.9%) 729.620 MB/sec [Average]
[info]   (min, avg, max) = (1144.203, 1350.293, 1566.681), stdev = 189.480
[info]   CI (99.9%): [620.673, 2079.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27661.818 ±(99.9%) 12892.617 B/op [Average]
[info]   (min, avg, max) = (24063.564, 27661.818, 31505.835), stdev = 3348.172
[info]   CI (99.9%): [14769.201, 40554.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1296.011 ±(99.9%) 81.407 MB/sec [Average]
[info]   (min, avg, max) = (1273.653, 1296.011, 1323.650), stdev = 21.141
[info]   CI (99.9%): [1214.604, 1377.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26614.806 ±(99.9%) 3595.480 B/op [Average]
[info]   (min, avg, max) = (25241.497, 26614.806, 27851.346), stdev = 933.735
[info]   CI (99.9%): [23019.326, 30210.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.093 ±(99.9%) 2.873 MB/sec [Average]
[info]   (min, avg, max) = (0.050, 1.093, 2.008), stdev = 0.746
[info]   CI (99.9%): [≈ 0, 3.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.564 ±(99.9%) 60.945 B/op [Average]
[info]   (min, avg, max) = (1.058, 22.564, 41.780), stdev = 15.827
[info]   CI (99.9%): [≈ 0, 83.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   96.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (17.000, 19.200, 23.000), stdev = 2.280
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43487.985 ops/s
[info] # Warmup Iteration   2: 91883.330 ops/s
[info] # Warmup Iteration   3: 123193.115 ops/s
[info] # Warmup Iteration   4: 128429.809 ops/s
[info] # Warmup Iteration   5: 127832.254 ops/s
[info] Iteration   1: 141599.169 ops/s
[info]                  ·gc.alloc.rate:                   854.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              9495.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          624.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6937.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 140086.438 ops/s
[info]                  ·gc.alloc.rate:               854.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          9598.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      624.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7012.760 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 139667.674 ops/s
[info]                  ·gc.alloc.rate:                   859.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              9686.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1253.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14126.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   4: 139339.499 ops/s
[info]                  ·gc.alloc.rate:                   846.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              9560.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          629.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7110.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 139382.723 ops/s
[info]                  ·gc.alloc.rate:               837.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          9460.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:      629.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7107.842 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   140015.101 ±(99.9%) 3597.523 ops/s [Average]
[info]   (min, avg, max) = (139339.499, 140015.101, 141599.169), stdev = 934.265
[info]   CI (99.9%): [136417.577, 143612.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   850.609 ±(99.9%) 32.869 MB/sec [Average]
[info]   (min, avg, max) = (837.865, 850.609, 859.745), stdev = 8.536
[info]   CI (99.9%): [817.740, 883.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9560.309 ±(99.9%) 341.855 B/op [Average]
[info]   (min, avg, max) = (9460.810, 9560.309, 9686.846), stdev = 88.779
[info]   CI (99.9%): [9218.454, 9902.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   752.290 ±(99.9%) 1079.630 MB/sec [Average]
[info]   (min, avg, max) = (624.170, 752.290, 1253.820), stdev = 280.377
[info]   CI (99.9%): [≈ 0, 1831.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8459.034 ±(99.9%) 12203.740 B/op [Average]
[info]   (min, avg, max) = (6937.494, 8459.034, 14126.937), stdev = 3169.272
[info]   CI (99.9%): [≈ 0, 20662.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 5.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.987), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 5.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.711 ±(99.9%) 57.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.711, 33.202), stdev = 14.809
[info]   CI (99.9%): [≈ 0, 63.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 13.200, 23.000), stdev = 5.495
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3273.389 ops/s
[info] # Warmup Iteration   2: 25395.916 ops/s
[info] # Warmup Iteration   3: 47026.601 ops/s
[info] # Warmup Iteration   4: 49673.222 ops/s
[info] # Warmup Iteration   5: 50881.275 ops/s
[info] Iteration   1: 51068.021 ops/s
[info]                  ·gc.alloc.rate:                   2088.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              64374.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61270.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 50352.804 ops/s
[info]                  ·gc.alloc.rate:                   2105.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              65798.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62268.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 49744.073 ops/s
[info]                  ·gc.alloc.rate:               2038.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          64472.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63280.862 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 50949.532 ops/s
[info]                  ·gc.alloc.rate:                   2078.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              64200.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61970.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 51076.928 ops/s
[info]                  ·gc.alloc.rate:                   2068.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              63730.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62018.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.924 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   50638.271 ±(99.9%) 2241.218 ops/s [Average]
[info]   (min, avg, max) = (49744.073, 50638.271, 51076.928), stdev = 582.037
[info]   CI (99.9%): [48397.053, 52879.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2075.872 ±(99.9%) 96.537 MB/sec [Average]
[info]   (min, avg, max) = (2038.232, 2075.872, 2105.353), stdev = 25.070
[info]   CI (99.9%): [1979.335, 2172.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64515.466 ±(99.9%) 2972.553 B/op [Average]
[info]   (min, avg, max) = (63730.846, 64515.466, 65798.922), stdev = 771.962
[info]   CI (99.9%): [61542.914, 67488.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2000.049 ±(99.9%) 38.762 MB/sec [Average]
[info]   (min, avg, max) = (1988.146, 2000.049, 2012.965), stdev = 10.066
[info]   CI (99.9%): [1961.288, 2038.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62161.863 ±(99.9%) 2799.517 B/op [Average]
[info]   (min, avg, max) = (61270.951, 62161.863, 63280.862), stdev = 727.026
[info]   CI (99.9%): [59362.346, 64961.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.418 ±(99.9%) 4.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.418, 2.572), stdev = 1.059
[info]   CI (99.9%): [≈ 0, 5.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10248.330 ops/s
[info] # Warmup Iteration   2: 27351.859 ops/s
[info] # Warmup Iteration   3: 39706.188 ops/s
[info] # Warmup Iteration   4: 41336.885 ops/s
[info] # Warmup Iteration   5: 44127.488 ops/s
[info] Iteration   1: 44018.236 ops/s
[info]                  ·gc.alloc.rate:                   705.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              25227.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23626.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 43840.898 ops/s
[info]                  ·gc.alloc.rate:               712.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          25591.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23747.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 43946.141 ops/s
[info]                  ·gc.alloc.rate:                   713.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              25545.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23689.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43699.717 ops/s
[info]                  ·gc.alloc.rate:               702.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          25301.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23847.085 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 43009.030 ops/s
[info]                  ·gc.alloc.rate:                   700.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              25633.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24230.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   43702.804 ±(99.9%) 1563.086 ops/s [Average]
[info]   (min, avg, max) = (43009.030, 43702.804, 44018.236), stdev = 405.929
[info]   CI (99.9%): [42139.718, 45265.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   707.084 ±(99.9%) 22.382 MB/sec [Average]
[info]   (min, avg, max) = (700.792, 707.084, 713.381), stdev = 5.812
[info]   CI (99.9%): [684.702, 729.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25459.831 ±(99.9%) 703.746 B/op [Average]
[info]   (min, avg, max) = (25227.970, 25459.831, 25633.669), stdev = 182.761
[info]   CI (99.9%): [24756.085, 26163.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.737 ±(99.9%) 2.099 MB/sec [Average]
[info]   (min, avg, max) = (661.048, 661.737, 662.422), stdev = 0.545
[info]   CI (99.9%): [659.638, 663.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23828.139 ±(99.9%) 919.935 B/op [Average]
[info]   (min, avg, max) = (23626.661, 23828.139, 24230.160), stdev = 238.904
[info]   CI (99.9%): [22908.204, 24748.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.357 ±(99.9%) 1.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 0.762), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10980.218 ops/s
[info] # Warmup Iteration   2: 34277.137 ops/s
[info] # Warmup Iteration   3: 37684.707 ops/s
[info] # Warmup Iteration   4: 41522.193 ops/s
[info] # Warmup Iteration   5: 45359.399 ops/s
[info] Iteration   1: 44324.816 ops/s
[info]                  ·gc.alloc.rate:               561.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          19942.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23558.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 44845.959 ops/s
[info]                  ·gc.alloc.rate:                   579.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              20324.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23284.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 43369.712 ops/s
[info]                  ·gc.alloc.rate:               557.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          20246.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24076.854 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 45165.829 ops/s
[info]                  ·gc.alloc.rate:               476.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          16600.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23142.813 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 43524.008 ops/s
[info]                  ·gc.alloc.rate:      614.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 22210.333 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   44246.065 ±(99.9%) 3045.054 ops/s [Average]
[info]   (min, avg, max) = (43369.712, 44246.065, 45165.829), stdev = 790.791
[info]   CI (99.9%): [41201.011, 47291.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   557.892 ±(99.9%) 195.194 MB/sec [Average]
[info]   (min, avg, max) = (476.451, 557.892, 614.294), stdev = 50.691
[info]   CI (99.9%): [362.699, 753.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19864.954 ±(99.9%) 7825.253 B/op [Average]
[info]   (min, avg, max) = (16600.673, 19864.954, 22210.333), stdev = 2032.193
[info]   CI (99.9%): [12039.701, 27690.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.931 ±(99.9%) 1142.869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.931, 664.215), stdev = 296.799
[info]   CI (99.9%): [≈ 0, 1673.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18812.480 ±(99.9%) 40518.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18812.480, 24076.854), stdev = 10522.547
[info]   CI (99.9%): [≈ 0, 59331.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.166 ±(99.9%) 1.431 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.166, 0.831), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 1.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.834 ±(99.9%) 50.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.834, 29.168), stdev = 13.044
[info]   CI (99.9%): [≈ 0, 56.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9785.147 ops/s
[info] # Warmup Iteration   2: 40352.947 ops/s
[info] # Warmup Iteration   3: 48325.691 ops/s
[info] # Warmup Iteration   4: 47617.616 ops/s
[info] # Warmup Iteration   5: 49152.015 ops/s
[info] Iteration   1: 49692.544 ops/s
[info]                  ·gc.alloc.rate:      499.805 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 49240.351 ops/s
[info]                  ·gc.alloc.rate:               509.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          16274.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21313.905 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 49099.610 ops/s
[info]                  ·gc.alloc.rate:                   515.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              16534.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21374.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 49448.526 ops/s
[info]                  ·gc.alloc.rate:               516.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          16434.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21222.544 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 47414.135 ops/s
[info]                  ·gc.alloc.rate:               637.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          21164.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22133.239 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   48979.033 ±(99.9%) 3476.927 ops/s [Average]
[info]   (min, avg, max) = (47414.135, 48979.033, 49692.544), stdev = 902.947
[info]   CI (99.9%): [45502.106, 52455.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   535.852 ±(99.9%) 221.099 MB/sec [Average]
[info]   (min, avg, max) = (499.805, 535.852, 637.870), stdev = 57.419
[info]   CI (99.9%): [314.753, 756.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17246.387 ±(99.9%) 8499.055 B/op [Average]
[info]   (min, avg, max) = (15824.009, 17246.387, 21164.610), stdev = 2207.178
[info]   CI (99.9%): [8747.332, 25745.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.566 ±(99.9%) 1148.541 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.566, 667.133), stdev = 298.272
[info]   CI (99.9%): [≈ 0, 1682.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17208.872 ±(99.9%) 37069.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17208.872, 22133.239), stdev = 9626.908
[info]   CI (99.9%): [≈ 0, 54278.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.334), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:32:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10583.510 ops/s
[info] # Warmup Iteration   2: 39589.527 ops/s
[info] # Warmup Iteration   3: 47344.442 ops/s
[info] # Warmup Iteration   4: 48047.362 ops/s
[info] # Warmup Iteration   5: 49903.539 ops/s
[info] Iteration   1: 49750.192 ops/s
[info]                  ·gc.alloc.rate:               567.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          17962.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21010.718 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 50534.281 ops/s
[info]                  ·gc.alloc.rate:               562.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          17508.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20684.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 49898.950 ops/s
[info]                  ·gc.alloc.rate:      530.487 MB/sec
[info]                  ·gc.alloc.rate.norm: 16731.653 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 50586.012 ops/s
[info]                  ·gc.alloc.rate:                   554.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              17247.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20643.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.972 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 49597.620 ops/s
[info]                  ·gc.alloc.rate:               473.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          15008.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21053.960 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   50073.411 ±(99.9%) 1760.848 ops/s [Average]
[info]   (min, avg, max) = (49597.620, 50073.411, 50586.012), stdev = 457.287
[info]   CI (99.9%): [48312.563, 51834.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   537.684 ±(99.9%) 149.300 MB/sec [Average]
[info]   (min, avg, max) = (473.192, 537.684, 567.938), stdev = 38.773
[info]   CI (99.9%): [388.384, 686.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16891.537 ±(99.9%) 4401.023 B/op [Average]
[info]   (min, avg, max) = (15008.287, 16891.537, 17962.006), stdev = 1142.932
[info]   CI (99.9%): [12490.514, 21292.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   531.228 ±(99.9%) 1143.508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.228, 664.335), stdev = 296.965
[info]   CI (99.9%): [≈ 0, 1674.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   16678.538 ±(99.9%) 35908.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16678.538, 21053.960), stdev = 9325.429
[info]   CI (99.9%): [≈ 0, 52587.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.186 ±(99.9%) 1.604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.932), stdev = 0.417
[info]   CI (99.9%): [≈ 0, 1.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.794 ±(99.9%) 49.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.794, 28.972), stdev = 12.957
[info]   CI (99.9%): [≈ 0, 55.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3781.710 ops/s
[info] # Warmup Iteration   2: 8603.806 ops/s
[info] # Warmup Iteration   3: 14650.983 ops/s
[info] # Warmup Iteration   4: 17818.874 ops/s
[info] # Warmup Iteration   5: 17805.453 ops/s
[info] Iteration   1: 17418.195 ops/s
[info]                  ·gc.alloc.rate:                   1350.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              122015.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120320.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 17740.980 ops/s
[info]                  ·gc.alloc.rate:               1281.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          113666.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118189.360 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 17257.217 ops/s
[info]                  ·gc.alloc.rate:                   1665.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              151894.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121557.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 16159.509 ops/s
[info]                  ·gc.alloc.rate:                   1746.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              170049.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192107.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 18166.237 ops/s
[info]                  ·gc.alloc.rate:                   1288.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              111635.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113953.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   17348.427 ±(99.9%) 2887.741 ops/s [Average]
[info]   (min, avg, max) = (16159.509, 17348.427, 18166.237), stdev = 749.937
[info]   CI (99.9%): [14460.686, 20236.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1466.579 ±(99.9%) 854.647 MB/sec [Average]
[info]   (min, avg, max) = (1281.354, 1466.579, 1746.048), stdev = 221.949
[info]   CI (99.9%): [611.932, 2321.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   133852.341 ±(99.9%) 99613.679 B/op [Average]
[info]   (min, avg, max) = (111635.190, 133852.341, 170049.545), stdev = 25869.356
[info]   CI (99.9%): [34238.663, 233466.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1457.132 ±(99.9%) 1109.789 MB/sec [Average]
[info]   (min, avg, max) = (1315.718, 1457.132, 1972.532), stdev = 288.209
[info]   CI (99.9%): [347.343, 2566.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133225.448 ±(99.9%) 127234.950 B/op [Average]
[info]   (min, avg, max) = (113953.069, 133225.448, 192107.012), stdev = 33042.512
[info]   CI (99.9%): [5990.498, 260460.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.636 ±(99.9%) 4.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.636, 2.698), stdev = 1.078
[info]   CI (99.9%): [≈ 0, 5.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   149.859 ±(99.9%) 384.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 149.859, 246.040), stdev = 99.734
[info]   CI (99.9%): [≈ 0, 533.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.000, 17.000), stdev = 3.317
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4060.348 ops/s
[info] # Warmup Iteration   2: 12970.441 ops/s
[info] # Warmup Iteration   3: 14662.823 ops/s
[info] # Warmup Iteration   4: 16850.241 ops/s
[info] # Warmup Iteration   5: 16725.118 ops/s
[info] Iteration   1: 16890.279 ops/s
[info]                  ·gc.alloc.rate:                   1071.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              99539.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1243.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115483.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 16792.939 ops/s
[info]                  ·gc.alloc.rate:               1049.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          98374.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      628.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58871.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 15344.959 ops/s
[info]                  ·gc.alloc.rate:               1517.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          155555.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1889.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193755.638 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     44.000 ms
[info] Iteration   4: 15199.933 ops/s
[info]                  ·gc.alloc.rate:                   1496.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              154905.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1222.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126494.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         35.000 ms
[info] Iteration   5: 16507.375 ops/s
[info]                  ·gc.alloc.rate:                   1082.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              103156.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1216.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115972.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 694.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16147.097 ±(99.9%) 3128.147 ops/s [Average]
[info]   (min, avg, max) = (15199.933, 16147.097, 16890.279), stdev = 812.370
[info]   CI (99.9%): [13018.950, 19275.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1243.506 ±(99.9%) 927.894 MB/sec [Average]
[info]   (min, avg, max) = (1049.639, 1243.506, 1517.314), stdev = 240.971
[info]   CI (99.9%): [315.611, 2171.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   122306.219 ±(99.9%) 115936.821 B/op [Average]
[info]   (min, avg, max) = (98374.027, 122306.219, 155555.807), stdev = 30108.424
[info]   CI (99.9%): [6369.399, 238243.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1240.043 ±(99.9%) 1719.501 MB/sec [Average]
[info]   (min, avg, max) = (628.153, 1240.043, 1889.921), stdev = 446.549
[info]   CI (99.9%): [≈ 0, 2959.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   122115.276 ±(99.9%) 185001.343 B/op [Average]
[info]   (min, avg, max) = (58871.587, 122115.276, 193755.638), stdev = 48044.261
[info]   CI (99.9%): [≈ 0, 307116.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.584 ±(99.9%) 12.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.584, 7.281), stdev = 3.196
[info]   CI (99.9%): [≈ 0, 13.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   151.999 ±(99.9%) 1171.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151.999, 694.038), stdev = 304.231
[info]   CI (99.9%): [≈ 0, 1323.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   140.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 28.000, 44.000), stdev = 12.550
[info]   CI (99.9%): [140.000, 140.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75978.762 ops/s
[info] # Warmup Iteration   2: 141074.481 ops/s
[info] # Warmup Iteration   3: 163271.778 ops/s
[info] # Warmup Iteration   4: 163765.882 ops/s
[info] # Warmup Iteration   5: 160590.460 ops/s
[info] Iteration   1: 163702.217 ops/s
[info]                  ·gc.alloc.rate:      426.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 162418.060 ops/s
[info]                  ·gc.alloc.rate:               434.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          4208.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6481.219 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 162947.641 ops/s
[info]                  ·gc.alloc.rate:               441.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          4263.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6460.180 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 164048.568 ops/s
[info]                  ·gc.alloc.rate:      426.944 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 165174.633 ops/s
[info]                  ·gc.alloc.rate:               451.988 MB/sec
[info]                  ·gc.alloc.rate.norm:          4306.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6379.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   163658.224 ±(99.9%) 4082.742 ops/s [Average]
[info]   (min, avg, max) = (162418.060, 163658.224, 165174.633), stdev = 1060.275
[info]   CI (99.9%): [159575.482, 167740.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   436.163 ±(99.9%) 41.681 MB/sec [Average]
[info]   (min, avg, max) = (426.068, 436.163, 451.988), stdev = 10.824
[info]   CI (99.9%): [394.482, 477.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4194.228 ±(99.9%) 370.257 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4194.228, 4306.716), stdev = 96.155
[info]   CI (99.9%): [3823.970, 4564.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.450 ±(99.9%) 1411.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.450, 669.486), stdev = 366.472
[info]   CI (99.9%): [≈ 0, 1812.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3864.105 ±(99.9%) 13583.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3864.105, 6481.219), stdev = 3527.635
[info]   CI (99.9%): [≈ 0, 17447.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:31:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1725.206 ops/s
[info] # Warmup Iteration   2: 9531.007 ops/s
[info] # Warmup Iteration   3: 12670.809 ops/s
[info] # Warmup Iteration   4: 16480.726 ops/s
[info] # Warmup Iteration   5: 16343.305 ops/s
[info] Iteration   1: 16538.236 ops/s
[info]                  ·gc.alloc.rate:               1484.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          141222.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1304.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124059.200 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16768.240 ops/s
[info]                  ·gc.alloc.rate:               1507.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          141463.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1301.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122170.264 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 16171.506 ops/s
[info]                  ·gc.alloc.rate:                   1676.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              163094.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1954.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190214.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15079.529 ops/s
[info]                  ·gc.alloc.rate:                   1519.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              158539.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136399.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 15618.032 ops/s
[info]                  ·gc.alloc.rate:                   1402.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              141235.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132238.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16035.109 ±(99.9%) 2651.294 ops/s [Average]
[info]   (min, avg, max) = (15079.529, 16035.109, 16768.240), stdev = 688.533
[info]   CI (99.9%): [13383.814, 18686.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1517.963 ±(99.9%) 383.619 MB/sec [Average]
[info]   (min, avg, max) = (1402.161, 1517.963, 1676.229), stdev = 99.625
[info]   CI (99.9%): [1134.344, 1901.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   149111.150 ±(99.9%) 41614.261 B/op [Average]
[info]   (min, avg, max) = (141222.463, 149111.150, 163094.764), stdev = 10807.091
[info]   CI (99.9%): [107496.889, 190725.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1436.201 ±(99.9%) 1116.765 MB/sec [Average]
[info]   (min, avg, max) = (1301.701, 1436.201, 1954.951), stdev = 290.020
[info]   CI (99.9%): [319.436, 2552.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   141016.165 ±(99.9%) 108255.617 B/op [Average]
[info]   (min, avg, max) = (122170.264, 141016.165, 190214.046), stdev = 28113.640
[info]   CI (99.9%): [32760.548, 249271.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.950 ±(99.9%) 6.917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.950, 4.130), stdev = 1.796
[info]   CI (99.9%): [≈ 0, 7.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   96.138 ±(99.9%) 696.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.138, 416.051), stdev = 180.839
[info]   CI (99.9%): [≈ 0, 792.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18198.098 ops/s
[info] # Warmup Iteration   2: 56406.355 ops/s
[info] # Warmup Iteration   3: 63434.710 ops/s
[info] # Warmup Iteration   4: 65163.966 ops/s
[info] # Warmup Iteration   5: 71299.541 ops/s
[info] Iteration   1: 71326.184 ops/s
[info]                  ·gc.alloc.rate:               1651.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          36451.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29442.738 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 70609.845 ops/s
[info]                  ·gc.alloc.rate:                   1665.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              37108.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44634.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 72039.082 ops/s
[info]                  ·gc.alloc.rate:                   1661.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              36279.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29107.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71856.766 ops/s
[info]                  ·gc.alloc.rate:                   1680.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              36798.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43685.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71957.568 ops/s
[info]                  ·gc.alloc.rate:                   1667.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              36460.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29096.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   71557.889 ±(99.9%) 2304.839 ops/s [Average]
[info]   (min, avg, max) = (70609.845, 71557.889, 72039.082), stdev = 598.559
[info]   CI (99.9%): [69253.051, 73862.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1665.072 ±(99.9%) 39.439 MB/sec [Average]
[info]   (min, avg, max) = (1651.945, 1665.072, 1680.172), stdev = 10.242
[info]   CI (99.9%): [1625.632, 1704.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36619.638 ±(99.9%) 1277.647 B/op [Average]
[info]   (min, avg, max) = (36279.541, 36619.638, 37108.604), stdev = 331.801
[info]   CI (99.9%): [35341.991, 37897.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1598.956 ±(99.9%) 1405.155 MB/sec [Average]
[info]   (min, avg, max) = (1330.342, 1598.956, 2002.750), stdev = 364.914
[info]   CI (99.9%): [193.801, 3004.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35193.275 ±(99.9%) 31550.328 B/op [Average]
[info]   (min, avg, max) = (29096.352, 35193.275, 44634.788), stdev = 8193.520
[info]   CI (99.9%): [3642.947, 66743.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 7.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.164), stdev = 1.835
[info]   CI (99.9%): [≈ 0, 7.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.653 ±(99.9%) 157.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.653, 92.804), stdev = 40.905
[info]   CI (99.9%): [≈ 0, 177.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.240
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24911.546 ops/s
[info] # Warmup Iteration   2: 83082.639 ops/s
[info] # Warmup Iteration   3: 103704.326 ops/s
[info] # Warmup Iteration   4: 107412.899 ops/s
[info] # Warmup Iteration   5: 108716.403 ops/s
[info] Iteration   1: 108181.476 ops/s
[info]                  ·gc.alloc.rate:                   1440.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              20950.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19295.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 108920.418 ops/s
[info]                  ·gc.alloc.rate:                   1446.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              20895.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19193.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 108399.779 ops/s
[info]                  ·gc.alloc.rate:                   1447.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              21014.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19314.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 108964.374 ops/s
[info]                  ·gc.alloc.rate:                   1452.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              20972.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19165.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 109649.380 ops/s
[info]                  ·gc.alloc.rate:                   1459.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              20945.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19027.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   108823.085 ±(99.9%) 2197.778 ops/s [Average]
[info]   (min, avg, max) = (108181.476, 108823.085, 109649.380), stdev = 570.756
[info]   CI (99.9%): [106625.307, 111020.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1449.180 ±(99.9%) 27.134 MB/sec [Average]
[info]   (min, avg, max) = (1440.629, 1449.180, 1459.369), stdev = 7.047
[info]   CI (99.9%): [1422.046, 1476.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20955.712 ±(99.9%) 167.300 B/op [Average]
[info]   (min, avg, max) = (20895.416, 20955.712, 21014.683), stdev = 43.447
[info]   CI (99.9%): [20788.412, 21123.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.682 ±(99.9%) 6.770 MB/sec [Average]
[info]   (min, avg, max) = (1325.733, 1327.682, 1330.338), stdev = 1.758
[info]   CI (99.9%): [1320.912, 1334.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19199.214 ±(99.9%) 444.526 B/op [Average]
[info]   (min, avg, max) = (19027.120, 19199.214, 19314.550), stdev = 115.442
[info]   CI (99.9%): [18754.688, 19643.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.937 ±(99.9%) 7.297 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.937, 4.324), stdev = 1.895
[info]   CI (99.9%): [≈ 0, 8.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.599 ±(99.9%) 105.961 B/op [Average]
[info]   (min, avg, max) = (0.113, 13.599, 62.785), stdev = 27.518
[info]   CI (99.9%): [≈ 0, 119.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.507
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120846.377 ops/s
[info] # Warmup Iteration   2: 231861.135 ops/s
[info] # Warmup Iteration   3: 246567.269 ops/s
[info] # Warmup Iteration   4: 245641.254 ops/s
[info] # Warmup Iteration   5: 244027.006 ops/s
[info] Iteration   1: 243153.513 ops/s
[info]                  ·gc.alloc.rate:               417.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          2703.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3311.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 244820.509 ops/s
[info]                  ·gc.alloc.rate:      388.321 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 243761.172 ops/s
[info]                  ·gc.alloc.rate:                   406.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              2625.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4314.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 241877.967 ops/s
[info]                  ·gc.alloc.rate:               405.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          2638.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4347.610 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 245409.413 ops/s
[info]                  ·gc.alloc.rate:      389.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   243804.515 ±(99.9%) 5358.212 ops/s [Average]
[info]   (min, avg, max) = (241877.967, 243804.515, 245409.413), stdev = 1391.511
[info]   CI (99.9%): [238446.302, 249162.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   401.553 ±(99.9%) 48.398 MB/sec [Average]
[info]   (min, avg, max) = (388.321, 401.553, 417.799), stdev = 12.569
[info]   CI (99.9%): [353.155, 449.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2591.890 ±(99.9%) 356.093 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2591.890, 2703.925), stdev = 92.476
[info]   CI (99.9%): [2235.796, 2947.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.695 ±(99.9%) 1322.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.695, 668.460), stdev = 343.493
[info]   CI (99.9%): [≈ 0, 1692.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2394.664 ±(99.9%) 8568.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2394.664, 4347.610), stdev = 2225.303
[info]   CI (99.9%): [≈ 0, 10963.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.269), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89241.936 ops/s
[info] # Warmup Iteration   2: 242448.303 ops/s
[info] # Warmup Iteration   3: 289350.193 ops/s
[info] # Warmup Iteration   4: 288986.139 ops/s
[info] # Warmup Iteration   5: 289067.243 ops/s
[info] Iteration   1: 289118.825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 288880.273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 288976.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 288015.897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 289132.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   288824.664 ±(99.9%) 1786.736 ops/s [Average]
[info]   (min, avg, max) = (288015.897, 288824.664, 289132.114), stdev = 464.010
[info]   CI (99.9%): [287037.928, 290611.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21009.552 ops/s
[info] # Warmup Iteration   2: 73293.988 ops/s
[info] # Warmup Iteration   3: 85824.971 ops/s
[info] # Warmup Iteration   4: 89232.949 ops/s
[info] # Warmup Iteration   5: 78675.427 ops/s
[info] Iteration   1: 91973.949 ops/s
[info]                  ·gc.alloc.rate:                   1982.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              33906.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2387.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40822.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         70.000 ms
[info] Iteration   2: 98543.785 ops/s
[info]                  ·gc.alloc.rate:                   1677.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              26723.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26985.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      18.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         48.000 ms
[info] Iteration   3: 102005.405 ops/s
[info]                  ·gc.alloc.rate:                   1717.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              26488.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1155.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17816.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   4: 100917.933 ops/s
[info]                  ·gc.alloc.rate:                   1753.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              27334.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1758.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27421.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         34.000 ms
[info] Iteration   5: 102848.497 ops/s
[info]                  ·gc.alloc.rate:                   1747.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              26739.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1771.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27115.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   99257.914 ±(99.9%) 16868.588 ops/s [Average]
[info]   (min, avg, max) = (91973.949, 99257.914, 102848.497), stdev = 4380.719
[info]   CI (99.9%): [82389.325, 116126.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1775.696 ±(99.9%) 460.235 MB/sec [Average]
[info]   (min, avg, max) = (1677.859, 1775.696, 1982.730), stdev = 119.522
[info]   CI (99.9%): [1315.461, 2235.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28238.620 ±(99.9%) 12260.547 B/op [Average]
[info]   (min, avg, max) = (26488.336, 28238.620, 33906.906), stdev = 3184.025
[info]   CI (99.9%): [15978.073, 40499.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1753.432 ±(99.9%) 1682.085 MB/sec [Average]
[info]   (min, avg, max) = (1155.213, 1753.432, 2387.117), stdev = 436.832
[info]   CI (99.9%): [71.348, 3435.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28032.215 ±(99.9%) 31650.903 B/op [Average]
[info]   (min, avg, max) = (17816.984, 28032.215, 40822.390), stdev = 8219.639
[info]   CI (99.9%): [≈ 0, 59683.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   7.816 ±(99.9%) 28.565 MB/sec [Average]
[info]   (min, avg, max) = (0.833, 7.816, 18.810), stdev = 7.418
[info]   CI (99.9%): [≈ 0, 36.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   125.304 ±(99.9%) 454.806 B/op [Average]
[info]   (min, avg, max) = (12.842, 125.304, 299.584), stdev = 118.112
[info]   CI (99.9%): [≈ 0, 580.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   200.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (21.000, 40.000, 70.000), stdev = 19.558
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14575.767 ops/s
[info] # Warmup Iteration   2: 84203.897 ops/s
[info] # Warmup Iteration   3: 125916.368 ops/s
[info] # Warmup Iteration   4: 132085.574 ops/s
[info] # Warmup Iteration   5: 131188.764 ops/s
[info] Iteration   1: 132000.685 ops/s
[info]                  ·gc.alloc.rate:                   1643.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              19593.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15884.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 132088.520 ops/s
[info]                  ·gc.alloc.rate:                   1678.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              20005.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23787.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 132950.189 ops/s
[info]                  ·gc.alloc.rate:                   1661.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              19663.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15708.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 132777.338 ops/s
[info]                  ·gc.alloc.rate:                   1667.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              19770.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23569.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.455 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 133101.395 ops/s
[info]                  ·gc.alloc.rate:               1678.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          19848.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15674.606 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   132583.625 ±(99.9%) 1949.172 ops/s [Average]
[info]   (min, avg, max) = (132000.685, 132583.625, 133101.395), stdev = 506.194
[info]   CI (99.9%): [130634.454, 134532.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1666.137 ±(99.9%) 56.111 MB/sec [Average]
[info]   (min, avg, max) = (1643.653, 1666.137, 1678.975), stdev = 14.572
[info]   CI (99.9%): [1610.026, 1722.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19776.317 ±(99.9%) 620.123 B/op [Average]
[info]   (min, avg, max) = (19593.543, 19776.317, 20005.220), stdev = 161.044
[info]   CI (99.9%): [19156.194, 20396.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1594.062 ±(99.9%) 1400.393 MB/sec [Average]
[info]   (min, avg, max) = (1325.588, 1594.062, 1996.404), stdev = 363.678
[info]   CI (99.9%): [193.670, 2994.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18925.002 ±(99.9%) 16715.093 B/op [Average]
[info]   (min, avg, max) = (15674.606, 18925.002, 23787.438), stdev = 4340.857
[info]   CI (99.9%): [2209.908, 35640.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.023 ±(99.9%) 8.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.023, 4.738), stdev = 2.080
[info]   CI (99.9%): [≈ 0, 9.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.181 ±(99.9%) 95.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.181, 56.459), stdev = 24.790
[info]   CI (99.9%): [≈ 0, 107.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 3.847
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16011.340 ops/s
[info] # Warmup Iteration   2: 108503.194 ops/s
[info] # Warmup Iteration   3: 142070.300 ops/s
[info] # Warmup Iteration   4: 161539.434 ops/s
[info] # Warmup Iteration   5: 161226.058 ops/s
[info] Iteration   1: 161630.203 ops/s
[info]                  ·gc.alloc.rate:                   965.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              9400.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6395.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 160824.879 ops/s
[info]                  ·gc.alloc.rate:               973.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          9524.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12865.583 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 159850.055 ops/s
[info]                  ·gc.alloc.rate:                   950.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              9355.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6476.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 157611.923 ops/s
[info]                  ·gc.alloc.rate:               945.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          9440.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6582.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 160608.111 ops/s
[info]                  ·gc.alloc.rate:                   978.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              9584.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12935.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   160105.034 ±(99.9%) 5896.020 ops/s [Average]
[info]   (min, avg, max) = (157611.923, 160105.034, 161630.203), stdev = 1531.178
[info]   CI (99.9%): [154209.014, 166001.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   962.533 ±(99.9%) 54.807 MB/sec [Average]
[info]   (min, avg, max) = (945.372, 962.533, 978.001), stdev = 14.233
[info]   CI (99.9%): [907.726, 1017.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9461.262 ±(99.9%) 357.132 B/op [Average]
[info]   (min, avg, max) = (9355.922, 9461.262, 9584.435), stdev = 92.746
[info]   CI (99.9%): [9104.130, 9818.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.744 ±(99.9%) 1390.818 MB/sec [Average]
[info]   (min, avg, max) = (656.862, 921.744, 1319.906), stdev = 361.191
[info]   CI (99.9%): [≈ 0, 2312.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9051.105 ±(99.9%) 13533.342 B/op [Average]
[info]   (min, avg, max) = (6395.813, 9051.105, 12935.107), stdev = 3514.566
[info]   CI (99.9%): [≈ 0, 22584.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.163 ±(99.9%) 0.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.163, 0.408), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71343.695 ops/s
[info] # Warmup Iteration   2: 213008.131 ops/s
[info] # Warmup Iteration   3: 225742.219 ops/s
[info] # Warmup Iteration   4: 223581.229 ops/s
[info] # Warmup Iteration   5: 228640.703 ops/s
[info] Iteration   1: 225427.418 ops/s
[info]                  ·gc.alloc.rate:                   156.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1091.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3571.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 222281.271 ops/s
[info]                  ·gc.alloc.rate:      144.654 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 223309.336 ops/s
[info]                  ·gc.alloc.rate:      145.390 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.517 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 223331.672 ops/s
[info]                  ·gc.alloc.rate:      152.563 MB/sec
[info]                  ·gc.alloc.rate.norm: 1074.696 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 227306.171 ops/s
[info]                  ·gc.alloc.rate:               153.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          1062.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3542.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   224331.174 ±(99.9%) 7772.583 ops/s [Average]
[info]   (min, avg, max) = (222281.271, 224331.174, 227306.171), stdev = 2018.515
[info]   CI (99.9%): [216558.590, 232103.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   150.514 ±(99.9%) 20.101 MB/sec [Average]
[info]   (min, avg, max) = (144.654, 150.514, 156.447), stdev = 5.220
[info]   CI (99.9%): [130.413, 170.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1055.573 ±(99.9%) 116.966 B/op [Average]
[info]   (min, avg, max) = (1024.002, 1055.573, 1091.774), stdev = 30.376
[info]   CI (99.9%): [938.607, 1172.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.690 ±(99.9%) 1079.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.690, 511.816), stdev = 280.284
[info]   CI (99.9%): [≈ 0, 1283.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1422.814 ±(99.9%) 7502.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1422.814, 3571.726), stdev = 1948.297
[info]   CI (99.9%): [≈ 0, 8925.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.017), stdev = 0.455
[info]   CI (99.9%): [≈ 0, 1.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1139.518 ops/s
[info] # Warmup Iteration   2: 52673.917 ops/s
[info] # Warmup Iteration   3: 85734.216 ops/s
[info] # Warmup Iteration   4: 83099.537 ops/s
[info] # Warmup Iteration   5: 88802.855 ops/s
[info] Iteration   1: 90767.741 ops/s
[info]                  ·gc.alloc.rate:                   2876.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              49882.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46306.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.497 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 89758.133 ops/s
[info]                  ·gc.alloc.rate:                   2828.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              49575.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46832.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.825 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 90769.387 ops/s
[info]                  ·gc.alloc.rate:               2882.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          49978.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46420.882 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 87787.590 ops/s
[info]                  ·gc.alloc.rate:                   2817.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              50505.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60196.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.746 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 90837.168 ops/s
[info]                  ·gc.alloc.rate:                   2912.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              50455.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46709.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   89984.004 ±(99.9%) 5033.240 ops/s [Average]
[info]   (min, avg, max) = (87787.590, 89984.004, 90837.168), stdev = 1307.116
[info]   CI (99.9%): [84950.764, 95017.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2863.461 ±(99.9%) 153.688 MB/sec [Average]
[info]   (min, avg, max) = (2817.073, 2863.461, 2912.504), stdev = 39.912
[info]   CI (99.9%): [2709.772, 3017.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50079.424 ±(99.9%) 1523.914 B/op [Average]
[info]   (min, avg, max) = (49575.058, 50079.424, 50505.591), stdev = 395.756
[info]   CI (99.9%): [48555.510, 51603.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2814.737 ±(99.9%) 1169.210 MB/sec [Average]
[info]   (min, avg, max) = (2670.533, 2814.737, 3357.590), stdev = 303.640
[info]   CI (99.9%): [1645.527, 3983.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49293.097 ±(99.9%) 23483.942 B/op [Average]
[info]   (min, avg, max) = (46306.909, 49293.097, 60196.207), stdev = 6098.705
[info]   CI (99.9%): [25809.155, 72777.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.375), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.958 ±(99.9%) 10.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.958, 6.497), stdev = 2.620
[info]   CI (99.9%): [≈ 0, 12.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52437.749 ops/s
[info] # Warmup Iteration   2: 221473.500 ops/s
[info] # Warmup Iteration   3: 215086.938 ops/s
[info] # Warmup Iteration   4: 233152.913 ops/s
[info] # Warmup Iteration   5: 236476.528 ops/s
[info] Iteration   1: 232840.997 ops/s
[info]                  ·gc.alloc.rate:                   1538.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              10396.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13525.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 233746.405 ops/s
[info]                  ·gc.alloc.rate:                   1518.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              10220.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8993.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 238551.074 ops/s
[info]                  ·gc.alloc.rate:                   1536.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              10140.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8807.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 236929.334 ops/s
[info]                  ·gc.alloc.rate:                   1525.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              10133.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8850.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 237459.806 ops/s
[info]                  ·gc.alloc.rate:                   1553.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              10292.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13232.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   235905.523 ±(99.9%) 9532.976 ops/s [Average]
[info]   (min, avg, max) = (232840.997, 235905.523, 238551.074), stdev = 2475.684
[info]   CI (99.9%): [226372.547, 245438.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1534.493 ±(99.9%) 52.324 MB/sec [Average]
[info]   (min, avg, max) = (1518.118, 1534.493, 1553.628), stdev = 13.588
[info]   CI (99.9%): [1482.169, 1586.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10236.605 ±(99.9%) 426.733 B/op [Average]
[info]   (min, avg, max) = (10133.046, 10236.605, 10396.680), stdev = 110.821
[info]   CI (99.9%): [9809.872, 10663.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1600.357 ±(99.9%) 1402.499 MB/sec [Average]
[info]   (min, avg, max) = (1332.256, 1600.357, 2001.373), stdev = 364.225
[info]   CI (99.9%): [197.858, 3002.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10681.799 ±(99.9%) 9492.961 B/op [Average]
[info]   (min, avg, max) = (8807.722, 10681.799, 13525.481), stdev = 2465.292
[info]   CI (99.9%): [1188.838, 20174.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.881 ±(99.9%) 5.405 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.881, 3.303), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.905 ±(99.9%) 36.394 B/op [Average]
[info]   (min, avg, max) = (0.138, 5.905, 22.234), stdev = 9.451
[info]   CI (99.9%): [≈ 0, 42.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:28:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177127.576 ops/s
[info] # Warmup Iteration   2: 643516.934 ops/s
[info] # Warmup Iteration   3: 770266.352 ops/s
[info] # Warmup Iteration   4: 775185.652 ops/s
[info] # Warmup Iteration   5: 773135.349 ops/s
[info] Iteration   1: 774311.292 ops/s
[info]                  ·gc.alloc.rate:               611.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          1242.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1349.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 773726.921 ops/s
[info]                  ·gc.alloc.rate:               610.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          1242.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1350.322 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 773186.307 ops/s
[info]                  ·gc.alloc.rate:                   606.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1235.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1353.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 767315.786 ops/s
[info]                  ·gc.alloc.rate:                   606.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1243.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1363.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 768330.820 ops/s
[info]                  ·gc.alloc.rate:               614.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          1259.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1363.169 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   771374.225 ±(99.9%) 12651.348 ops/s [Average]
[info]   (min, avg, max) = (767315.786, 771374.225, 774311.292), stdev = 3285.515
[info]   CI (99.9%): [758722.878, 784025.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   610.001 ±(99.9%) 13.391 MB/sec [Average]
[info]   (min, avg, max) = (606.338, 610.001, 614.815), stdev = 3.477
[info]   CI (99.9%): [596.611, 623.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1244.472 ±(99.9%) 34.537 B/op [Average]
[info]   (min, avg, max) = (1235.163, 1244.472, 1259.414), stdev = 8.969
[info]   CI (99.9%): [1209.936, 1279.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.627 ±(99.9%) 2.608 MB/sec [Average]
[info]   (min, avg, max) = (663.839, 664.627, 665.465), stdev = 0.677
[info]   CI (99.9%): [662.019, 667.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1355.918 ±(99.9%) 26.806 B/op [Average]
[info]   (min, avg, max) = (1349.260, 1355.918, 1363.572), stdev = 6.962
[info]   CI (99.9%): [1329.111, 1382.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.043), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368290.868 ops/s
[info] # Warmup Iteration   2: 587573.125 ops/s
[info] # Warmup Iteration   3: 698832.840 ops/s
[info] # Warmup Iteration   4: 685406.717 ops/s
[info] # Warmup Iteration   5: 686677.027 ops/s
[info] Iteration   1: 689763.827 ops/s
[info]                  ·gc.alloc.rate:               586.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          1337.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1525.290 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 697950.615 ops/s
[info]                  ·gc.alloc.rate:      548.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 1236.394 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 684205.281 ops/s
[info]                  ·gc.alloc.rate:               535.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          1230.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1537.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 691575.451 ops/s
[info]                  ·gc.alloc.rate:                   555.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1263.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1522.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 697871.356 ops/s
[info]                  ·gc.alloc.rate:               551.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          1242.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1508.312 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   692273.306 ±(99.9%) 22407.267 ops/s [Average]
[info]   (min, avg, max) = (684205.281, 692273.306, 697950.615), stdev = 5819.096
[info]   CI (99.9%): [669866.039, 714680.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   555.230 ±(99.9%) 72.957 MB/sec [Average]
[info]   (min, avg, max) = (535.150, 555.230, 586.352), stdev = 18.947
[info]   CI (99.9%): [482.273, 628.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1262.110 ±(99.9%) 169.404 B/op [Average]
[info]   (min, avg, max) = (1230.731, 1262.110, 1337.666), stdev = 43.994
[info]   CI (99.9%): [1092.706, 1431.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.035 ±(99.9%) 1151.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.035, 669.069), stdev = 299.094
[info]   CI (99.9%): [≈ 0, 1686.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1218.676 ±(99.9%) 2623.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1218.676, 1537.683), stdev = 681.341
[info]   CI (99.9%): [≈ 0, 3842.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443702.294 ops/s
[info] # Warmup Iteration   2: 606127.452 ops/s
[info] # Warmup Iteration   3: 684371.198 ops/s
[info] # Warmup Iteration   4: 684413.921 ops/s
[info] # Warmup Iteration   5: 684320.271 ops/s
[info] Iteration   1: 683211.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 683161.415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 684632.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 684057.951 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 684142.586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   683841.052 ±(99.9%) 2452.284 ops/s [Average]
[info]   (min, avg, max) = (683161.415, 683841.052, 684632.093), stdev = 636.850
[info]   CI (99.9%): [681388.768, 686293.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57090.294 ops/s
[info] # Warmup Iteration   2: 470049.823 ops/s
[info] # Warmup Iteration   3: 570190.009 ops/s
[info] # Warmup Iteration   4: 617988.002 ops/s
[info] # Warmup Iteration   5: 612364.643 ops/s
[info] Iteration   1: 620027.114 ops/s
[info]                  ·gc.alloc.rate:                   1532.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3383.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 615086.938 ops/s
[info]                  ·gc.alloc.rate:                   1528.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              3910.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5126.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 616851.231 ops/s
[info]                  ·gc.alloc.rate:                   1512.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              3857.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3412.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 618544.102 ops/s
[info]                  ·gc.alloc.rate:                   1539.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              3917.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3401.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 621896.821 ops/s
[info]                  ·gc.alloc.rate:                   1534.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              3884.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3382.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   618481.241 ±(99.9%) 10231.068 ops/s [Average]
[info]   (min, avg, max) = (615086.938, 618481.241, 621896.821), stdev = 2656.976
[info]   CI (99.9%): [608250.173, 628712.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1529.530 ±(99.9%) 40.365 MB/sec [Average]
[info]   (min, avg, max) = (1512.173, 1529.530, 1539.573), stdev = 10.483
[info]   CI (99.9%): [1489.165, 1569.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3891.456 ±(99.9%) 91.797 B/op [Average]
[info]   (min, avg, max) = (3857.089, 3891.456, 3917.081), stdev = 23.839
[info]   CI (99.9%): [3799.659, 3983.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.731 ±(99.9%) 1149.535 MB/sec [Average]
[info]   (min, avg, max) = (1333.494, 1469.731, 2003.751), stdev = 298.530
[info]   CI (99.9%): [320.197, 2619.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3741.241 ±(99.9%) 2981.707 B/op [Average]
[info]   (min, avg, max) = (3382.623, 3741.241, 5126.242), stdev = 774.340
[info]   CI (99.9%): [759.533, 6722.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.504 ±(99.9%) 3.895 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.504, 2.312), stdev = 1.012
[info]   CI (99.9%): [≈ 0, 4.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.285 ±(99.9%) 9.936 B/op [Average]
[info]   (min, avg, max) = (0.053, 1.285, 5.897), stdev = 2.580
[info]   CI (99.9%): [≈ 0, 11.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6589.928 ops/s
[info] # Warmup Iteration   2: 30049.600 ops/s
[info] # Warmup Iteration   3: 39807.934 ops/s
[info] # Warmup Iteration   4: 40124.500 ops/s
[info] # Warmup Iteration   5: 38838.021 ops/s
[info] Iteration   1: 42147.095 ops/s
[info]                  ·gc.alloc.rate:                   1952.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              72891.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73977.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280.460 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 41542.933 ops/s
[info]                  ·gc.alloc.rate:                   1926.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              72988.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74903.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42540.805 ops/s
[info]                  ·gc.alloc.rate:                   1979.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              73223.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73148.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42251.555 ops/s
[info]                  ·gc.alloc.rate:                   1955.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              72852.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73772.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42639.214 ops/s
[info]                  ·gc.alloc.rate:                   1942.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              71681.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48878.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   42224.320 ±(99.9%) 1659.906 ops/s [Average]
[info]   (min, avg, max) = (41542.933, 42224.320, 42639.214), stdev = 431.072
[info]   CI (99.9%): [40564.415, 43884.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1951.256 ±(99.9%) 74.693 MB/sec [Average]
[info]   (min, avg, max) = (1926.645, 1951.256, 1979.440), stdev = 19.398
[info]   CI (99.9%): [1876.562, 2025.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72727.379 ±(99.9%) 2319.385 B/op [Average]
[info]   (min, avg, max) = (71681.121, 72727.379, 73223.199), stdev = 602.337
[info]   CI (99.9%): [70407.994, 75046.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1848.159 ±(99.9%) 1127.622 MB/sec [Average]
[info]   (min, avg, max) = (1324.321, 1848.159, 1981.310), stdev = 292.840
[info]   CI (99.9%): [720.537, 2975.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   68936.261 ±(99.9%) 43243.855 B/op [Average]
[info]   (min, avg, max) = (48878.472, 68936.261, 74903.694), stdev = 11230.292
[info]   CI (99.9%): [25692.406, 112180.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.685 ±(99.9%) 12.555 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 1.685, 7.511), stdev = 3.261
[info]   CI (99.9%): [≈ 0, 14.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   62.965 ±(99.9%) 468.750 B/op [Average]
[info]   (min, avg, max) = (3.842, 62.965, 280.460), stdev = 121.733
[info]   CI (99.9%): [≈ 0, 531.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.843 ops/s
[info] # Warmup Iteration   2: 249669.656 ops/s
[info] # Warmup Iteration   3: 284663.481 ops/s
[info] # Warmup Iteration   4: 303802.044 ops/s
[info] # Warmup Iteration   5: 304085.039 ops/s
[info] Iteration   1: 303524.021 ops/s
[info]                  ·gc.alloc.rate:               326.608 MB/sec
[info]                  ·gc.alloc.rate.norm:          1693.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2652.830 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 303245.336 ops/s
[info]                  ·gc.alloc.rate:      314.569 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 302681.842 ops/s
[info]                  ·gc.alloc.rate:               324.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          1689.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3446.415 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 301654.075 ops/s
[info]                  ·gc.alloc.rate:      312.821 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 301055.344 ops/s
[info]                  ·gc.alloc.rate:                   333.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              1743.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3465.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   302432.124 ±(99.9%) 4046.291 ops/s [Average]
[info]   (min, avg, max) = (301055.344, 302432.124, 303524.021), stdev = 1050.809
[info]   CI (99.9%): [298385.833, 306478.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   322.468 ±(99.9%) 33.334 MB/sec [Average]
[info]   (min, avg, max) = (312.821, 322.468, 333.490), stdev = 8.657
[info]   CI (99.9%): [289.134, 355.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1678.014 ±(99.9%) 181.418 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1678.014, 1743.441), stdev = 47.114
[info]   CI (99.9%): [1496.595, 1859.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.451 ±(99.9%) 1313.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.451, 662.839), stdev = 341.069
[info]   CI (99.9%): [≈ 0, 1680.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1912.868 ±(99.9%) 6841.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1912.868, 3465.095), stdev = 1776.714
[info]   CI (99.9%): [≈ 0, 8754.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25794.781 ops/s
[info] # Warmup Iteration   2: 101940.876 ops/s
[info] # Warmup Iteration   3: 126871.595 ops/s
[info] # Warmup Iteration   4: 127092.368 ops/s
[info] # Warmup Iteration   5: 127803.463 ops/s
[info] Iteration   1: 127493.132 ops/s
[info]                  ·gc.alloc.rate:               1187.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          14660.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16355.605 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 126900.311 ops/s
[info]                  ·gc.alloc.rate:                   1175.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              14583.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16433.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 127713.741 ops/s
[info]                  ·gc.alloc.rate:               1172.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          14440.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8167.886 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 127389.725 ops/s
[info]                  ·gc.alloc.rate:               1183.597 MB/sec
[info]                  ·gc.alloc.rate.norm:          14622.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16385.286 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 127580.938 ops/s
[info]                  ·gc.alloc.rate:               1191.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          14702.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16385.027 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   127415.569 ±(99.9%) 1199.938 ops/s [Average]
[info]   (min, avg, max) = (126900.311, 127415.569, 127713.741), stdev = 311.620
[info]   CI (99.9%): [126215.631, 128615.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1182.261 ±(99.9%) 31.360 MB/sec [Average]
[info]   (min, avg, max) = (1172.167, 1182.261, 1191.846), stdev = 8.144
[info]   CI (99.9%): [1150.902, 1213.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14602.192 ±(99.9%) 386.697 B/op [Average]
[info]   (min, avg, max) = (14440.834, 14602.192, 14702.610), stdev = 100.424
[info]   CI (99.9%): [14215.495, 14988.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1193.516 ±(99.9%) 1142.007 MB/sec [Average]
[info]   (min, avg, max) = (662.990, 1193.516, 1328.229), stdev = 296.576
[info]   CI (99.9%): [51.508, 2335.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14745.372 ±(99.9%) 14158.937 B/op [Average]
[info]   (min, avg, max) = (8167.886, 14745.372, 16433.055), stdev = 3677.031
[info]   CI (99.9%): [586.434, 28904.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.103 ±(99.9%) 0.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.516), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226896.598 ops/s
[info] # Warmup Iteration   2: 527197.425 ops/s
[info] # Warmup Iteration   3: 531513.059 ops/s
[info] # Warmup Iteration   4: 549836.887 ops/s
[info] # Warmup Iteration   5: 549503.843 ops/s
[info] Iteration   1: 551969.208 ops/s
[info]                  ·gc.alloc.rate:               370.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          1057.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1458.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 533747.083 ops/s
[info]                  ·gc.alloc.rate:      424.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 1250.995 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 543852.259 ops/s
[info]                  ·gc.alloc.rate:               366.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          1059.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1932.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 556924.851 ops/s
[info]                  ·gc.alloc.rate:      362.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 551065.606 ops/s
[info]                  ·gc.alloc.rate:                   371.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1061.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1907.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   547511.801 ±(99.9%) 34653.828 ops/s [Average]
[info]   (min, avg, max) = (533747.083, 547511.801, 556924.851), stdev = 8999.489
[info]   CI (99.9%): [512857.973, 582165.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   379.071 ±(99.9%) 98.554 MB/sec [Average]
[info]   (min, avg, max) = (362.452, 379.071, 424.362), stdev = 25.594
[info]   CI (99.9%): [280.517, 477.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1090.541 ±(99.9%) 350.397 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1090.541, 1250.995), stdev = 90.997
[info]   CI (99.9%): [740.144, 1440.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.501 ±(99.9%) 1321.901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.501, 668.059), stdev = 343.293
[info]   CI (99.9%): [≈ 0, 1691.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1059.726 ±(99.9%) 3795.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1059.726, 1932.586), stdev = 985.584
[info]   CI (99.9%): [≈ 0, 4854.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3403.476 ops/s
[info] # Warmup Iteration   2: 21067.073 ops/s
[info] # Warmup Iteration   3: 50321.159 ops/s
[info] # Warmup Iteration   4: 51681.548 ops/s
[info] # Warmup Iteration   5: 47239.211 ops/s
[info] Iteration   1: 54718.798 ops/s
[info]                  ·gc.alloc.rate:                   2360.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              68081.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2644.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76260.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 55168.737 ops/s
[info]                  ·gc.alloc.rate:                   2358.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              67282.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56725.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 54787.676 ops/s
[info]                  ·gc.alloc.rate:                   2339.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              67363.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2647.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76244.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.794 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 55214.192 ops/s
[info]                  ·gc.alloc.rate:                   2355.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              67216.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56809.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.370 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 54468.172 ops/s
[info]                  ·gc.alloc.rate:                   2337.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              67549.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77079.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.649 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   54871.515 ±(99.9%) 1215.861 ops/s [Average]
[info]   (min, avg, max) = (54468.172, 54871.515, 55214.192), stdev = 315.755
[info]   CI (99.9%): [53655.654, 56087.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2350.340 ±(99.9%) 42.270 MB/sec [Average]
[info]   (min, avg, max) = (2337.495, 2350.340, 2360.520), stdev = 10.977
[info]   CI (99.9%): [2308.071, 2392.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67498.713 ±(99.9%) 1342.426 B/op [Average]
[info]   (min, avg, max) = (67216.811, 67498.713, 68081.034), stdev = 348.624
[info]   CI (99.9%): [66156.288, 68841.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2387.742 ±(99.9%) 1399.691 MB/sec [Average]
[info]   (min, avg, max) = (1988.657, 2387.742, 2667.278), stdev = 363.495
[info]   CI (99.9%): [988.051, 3787.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68623.854 ±(99.9%) 41697.820 B/op [Average]
[info]   (min, avg, max) = (56725.495, 68623.854, 77079.949), stdev = 10828.791
[info]   CI (99.9%): [26926.034, 110321.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.425 ±(99.9%) 3.081 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.425, 1.856), stdev = 0.800
[info]   CI (99.9%): [≈ 0, 3.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.278 ±(99.9%) 89.060 B/op [Average]
[info]   (min, avg, max) = (1.782, 12.278, 53.649), stdev = 23.129
[info]   CI (99.9%): [≈ 0, 101.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.673
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24318.755 ops/s
[info] # Warmup Iteration   2: 78042.162 ops/s
[info] # Warmup Iteration   3: 88982.821 ops/s
[info] # Warmup Iteration   4: 96136.958 ops/s
[info] # Warmup Iteration   5: 96188.202 ops/s
[info] Iteration   1: 96408.752 ops/s
[info]                  ·gc.alloc.rate:               761.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          12429.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10895.595 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 95917.234 ops/s
[info]                  ·gc.alloc.rate:               766.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          12578.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10951.699 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 96324.856 ops/s
[info]                  ·gc.alloc.rate:               767.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          12543.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10910.989 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 96500.350 ops/s
[info]                  ·gc.alloc.rate:               771.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          12579.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10891.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 95928.293 ops/s
[info]                  ·gc.alloc.rate:               760.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          12463.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10961.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   96215.897 ±(99.9%) 1057.866 ops/s [Average]
[info]   (min, avg, max) = (95917.234, 96215.897, 96500.350), stdev = 274.725
[info]   CI (99.9%): [95158.030, 97273.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   765.410 ±(99.9%) 18.008 MB/sec [Average]
[info]   (min, avg, max) = (760.019, 765.410, 771.313), stdev = 4.677
[info]   CI (99.9%): [747.402, 783.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12518.847 ±(99.9%) 263.902 B/op [Average]
[info]   (min, avg, max) = (12429.475, 12518.847, 12579.278), stdev = 68.534
[info]   CI (99.9%): [12254.946, 12782.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   667.791 ±(99.9%) 1.608 MB/sec [Average]
[info]   (min, avg, max) = (667.392, 667.791, 668.427), stdev = 0.418
[info]   CI (99.9%): [666.184, 669.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10922.286 ±(99.9%) 125.187 B/op [Average]
[info]   (min, avg, max) = (10891.319, 10922.286, 10961.829), stdev = 32.511
[info]   CI (99.9%): [10797.100, 11047.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.844 ops/s
[info] # Warmup Iteration   2: 107209.425 ops/s
[info] # Warmup Iteration   3: 118692.826 ops/s
[info] # Warmup Iteration   4: 121999.389 ops/s
[info] # Warmup Iteration   5: 122127.300 ops/s
[info] Iteration   1: 121515.314 ops/s
[info]                  ·gc.alloc.rate:                   463.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              6010.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8602.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 120906.528 ops/s
[info]                  ·gc.alloc.rate:               467.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          6081.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8644.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 122504.685 ops/s
[info]                  ·gc.alloc.rate:      453.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 121809.174 ops/s
[info]                  ·gc.alloc.rate:                   467.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              6036.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8583.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.712 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 121756.007 ops/s
[info]                  ·gc.alloc.rate:               472.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          6110.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8587.687 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   121698.342 ±(99.9%) 2217.271 ops/s [Average]
[info]   (min, avg, max) = (120906.528, 121698.342, 122504.685), stdev = 575.818
[info]   CI (99.9%): [119481.071, 123915.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   464.919 ±(99.9%) 27.770 MB/sec [Average]
[info]   (min, avg, max) = (453.311, 464.919, 472.755), stdev = 7.212
[info]   CI (99.9%): [437.149, 492.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   6012.318 ±(99.9%) 431.878 B/op [Average]
[info]   (min, avg, max) = (5824.004, 6012.318, 6110.015), stdev = 112.157
[info]   CI (99.9%): [5580.440, 6444.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.457 ±(99.9%) 1144.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.457, 664.462), stdev = 297.093
[info]   CI (99.9%): [≈ 0, 1675.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6883.674 ±(99.9%) 14817.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6883.674, 8644.563), stdev = 3848.166
[info]   CI (99.9%): [≈ 0, 21701.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.215 ±(99.9%) 1.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 0.712), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37699.349 ops/s
[info] # Warmup Iteration   2: 95255.387 ops/s
[info] # Warmup Iteration   3: 102558.885 ops/s
[info] # Warmup Iteration   4: 106796.027 ops/s
[info] # Warmup Iteration   5: 107282.255 ops/s
[info] Iteration   1: 106654.795 ops/s
[info]                  ·gc.alloc.rate:               408.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          6023.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7549.370 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 107267.543 ops/s
[info]                  ·gc.alloc.rate:               412.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          6054.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9690.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 107797.629 ops/s
[info]                  ·gc.alloc.rate:      399.020 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 107130.566 ops/s
[info]                  ·gc.alloc.rate:               414.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          6084.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9702.785 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 107130.465 ops/s
[info]                  ·gc.alloc.rate:                   417.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              6126.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9722.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   107196.200 ±(99.9%) 1574.244 ops/s [Average]
[info]   (min, avg, max) = (106654.795, 107196.200, 107797.629), stdev = 408.826
[info]   CI (99.9%): [105621.956, 108770.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   410.204 ±(99.9%) 27.043 MB/sec [Average]
[info]   (min, avg, max) = (399.020, 410.204, 417.027), stdev = 7.023
[info]   CI (99.9%): [383.161, 437.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6022.584 ±(99.9%) 451.955 B/op [Average]
[info]   (min, avg, max) = (5824.004, 6022.584, 6126.711), stdev = 117.371
[info]   CI (99.9%): [5570.628, 6474.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   498.863 ±(99.9%) 1102.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 498.863, 661.804), stdev = 286.272
[info]   CI (99.9%): [≈ 0, 1601.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7333.144 ±(99.9%) 16189.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7333.144, 9722.811), stdev = 4204.337
[info]   CI (99.9%): [≈ 0, 23522.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.306), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55031.849 ops/s
[info] # Warmup Iteration   2: 109185.398 ops/s
[info] # Warmup Iteration   3: 117178.411 ops/s
[info] # Warmup Iteration   4: 124700.876 ops/s
[info] # Warmup Iteration   5: 124331.832 ops/s
[info] Iteration   1: 124059.532 ops/s
[info]                  ·gc.alloc.rate:               474.103 MB/sec
[info]                  ·gc.alloc.rate.norm:          6014.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8476.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 124819.316 ops/s
[info]                  ·gc.alloc.rate:      462.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 124554.819 ops/s
[info]                  ·gc.alloc.rate:                   479.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              6058.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8442.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 124708.609 ops/s
[info]                  ·gc.alloc.rate:               479.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          6055.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8440.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 125575.067 ops/s
[info]                  ·gc.alloc.rate:      464.824 MB/sec
[info]                  ·gc.alloc.rate.norm: 5825.647 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   124743.468 ±(99.9%) 2110.739 ops/s [Average]
[info]   (min, avg, max) = (124059.532, 124743.468, 125575.067), stdev = 548.152
[info]   CI (99.9%): [122632.730, 126854.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   472.048 ±(99.9%) 31.806 MB/sec [Average]
[info]   (min, avg, max) = (462.009, 472.048, 479.774), stdev = 8.260
[info]   CI (99.9%): [440.242, 503.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5955.597 ±(99.9%) 464.406 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5955.597, 6058.370), stdev = 120.605
[info]   CI (99.9%): [5491.191, 6420.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.038 ±(99.9%) 1409.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.038, 668.812), stdev = 366.096
[info]   CI (99.9%): [≈ 0, 1810.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5071.983 ±(99.9%) 17828.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5071.983, 8476.432), stdev = 4630.087
[info]   CI (99.9%): [≈ 0, 22900.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.526), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53370.806 ops/s
[info] # Warmup Iteration   2: 105362.184 ops/s
[info] # Warmup Iteration   3: 119532.358 ops/s
[info] # Warmup Iteration   4: 122978.456 ops/s
[info] # Warmup Iteration   5: 122390.367 ops/s
[info] Iteration   1: 121301.122 ops/s
[info]                  ·gc.alloc.rate:               385.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          5005.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6638.034 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 123260.521 ops/s
[info]                  ·gc.alloc.rate:      359.164 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 122765.288 ops/s
[info]                  ·gc.alloc.rate:               377.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          4842.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8545.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 123308.779 ops/s
[info]                  ·gc.alloc.rate:      359.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 116111.670 ops/s
[info]                  ·gc.alloc.rate:                   360.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              4890.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9038.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   121349.476 ±(99.9%) 11700.579 ops/s [Average]
[info]   (min, avg, max) = (116111.670, 121349.476, 123308.779), stdev = 3038.603
[info]   CI (99.9%): [109648.897, 133050.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   368.546 ±(99.9%) 47.835 MB/sec [Average]
[info]   (min, avg, max) = (359.133, 368.546, 385.813), stdev = 12.423
[info]   CI (99.9%): [320.711, 416.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4781.337 ±(99.9%) 730.444 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4781.337, 5005.981), stdev = 189.694
[info]   CI (99.9%): [4050.893, 5511.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   369.050 ±(99.9%) 1320.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.050, 667.083), stdev = 342.804
[info]   CI (99.9%): [≈ 0, 1689.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4844.524 ±(99.9%) 17375.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4844.524, 9038.826), stdev = 4512.395
[info]   CI (99.9%): [≈ 0, 22220.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.564), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1058.312 ops/s
[info] # Warmup Iteration   2: 9293.741 ops/s
[info] # Warmup Iteration   3: 10259.453 ops/s
[info] # Warmup Iteration   4: 13508.037 ops/s
[info] # Warmup Iteration   5: 13507.368 ops/s
[info] Iteration   1: 13514.447 ops/s
[info]                  ·gc.alloc.rate:                   2037.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              237134.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1931.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224789.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.273 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 11189.649 ops/s
[info]                  ·gc.alloc.rate:                   2760.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              388257.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2571.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361721.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.816 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         45.000 ms
[info] Iteration   3: 13630.730 ops/s
[info]                  ·gc.alloc.rate:                   2032.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              234570.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1916.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221206.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1633.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 13719.338 ops/s
[info]                  ·gc.alloc.rate:                   2075.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              238026.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2538.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291143.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 12876.406 ops/s
[info]                  ·gc.alloc.rate:                   2444.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              298651.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1909.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233319.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   12986.114 ±(99.9%) 4071.318 ops/s [Average]
[info]   (min, avg, max) = (11189.649, 12986.114, 13719.338), stdev = 1057.308
[info]   CI (99.9%): [8914.796, 17057.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   2269.888 ±(99.9%) 1247.661 MB/sec [Average]
[info]   (min, avg, max) = (2032.054, 2269.888, 2760.587), stdev = 324.014
[info]   CI (99.9%): [1022.227, 3517.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   279328.225 ±(99.9%) 256353.503 B/op [Average]
[info]   (min, avg, max) = (234570.732, 279328.225, 388257.924), stdev = 66574.191
[info]   CI (99.9%): [22974.723, 535681.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2173.456 ±(99.9%) 1342.610 MB/sec [Average]
[info]   (min, avg, max) = (1909.758, 2173.456, 2571.910), stdev = 348.672
[info]   CI (99.9%): [830.845, 3516.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   266436.144 ±(99.9%) 232372.167 B/op [Average]
[info]   (min, avg, max) = (221206.233, 266436.144, 361721.709), stdev = 60346.314
[info]   CI (99.9%): [34063.978, 498808.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.809 ±(99.9%) 22.799 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 3.809, 14.151), stdev = 5.921
[info]   CI (99.9%): [≈ 0, 26.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   457.707 ±(99.9%) 2622.686 B/op [Average]
[info]   (min, avg, max) = (7.164, 457.707, 1633.481), stdev = 681.103
[info]   CI (99.9%): [≈ 0, 3080.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   97.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 19.400, 45.000), stdev = 16.288
[info]   CI (99.9%): [97.000, 97.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1038.517 ops/s
[info] # Warmup Iteration   2: 10343.698 ops/s
[info] # Warmup Iteration   3: 13426.411 ops/s
[info] # Warmup Iteration   4: 13436.189 ops/s
[info] # Warmup Iteration   5: 13119.540 ops/s
[info] Iteration   1: 12746.007 ops/s
[info]                  ·gc.alloc.rate:               2018.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          249221.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1982.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244810.296 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 13431.468 ops/s
[info]                  ·gc.alloc.rate:                   1890.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              221448.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233186.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13476.836 ops/s
[info]                  ·gc.alloc.rate:               1889.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          220674.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155341.712 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13180.668 ops/s
[info]                  ·gc.alloc.rate:               2099.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          250542.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 238959.845 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 12395.373 ops/s
[info]                  ·gc.alloc.rate:               2020.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          256499.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 253833.716 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   13046.071 ±(99.9%) 1791.328 ops/s [Average]
[info]   (min, avg, max) = (12395.373, 13046.071, 13476.836), stdev = 465.202
[info]   CI (99.9%): [11254.743, 14837.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1983.522 ±(99.9%) 352.413 MB/sec [Average]
[info]   (min, avg, max) = (1889.626, 1983.522, 2099.150), stdev = 91.520
[info]   CI (99.9%): [1631.109, 2335.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   239677.592 ±(99.9%) 66292.237 B/op [Average]
[info]   (min, avg, max) = (220674.604, 239677.592, 256499.911), stdev = 17215.883
[info]   CI (99.9%): [173385.355, 305969.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1860.913 ±(99.9%) 1142.805 MB/sec [Average]
[info]   (min, avg, max) = (1330.184, 1860.913, 2002.103), stdev = 296.783
[info]   CI (99.9%): [718.107, 3003.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   225226.315 ±(99.9%) 153274.735 B/op [Average]
[info]   (min, avg, max) = (155341.712, 225226.315, 253833.716), stdev = 39804.962
[info]   CI (99.9%): [71951.579, 378501.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.271 ±(99.9%) 2.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.354), stdev = 0.606
[info]   CI (99.9%): [≈ 0, 2.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.738 ±(99.9%) 273.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.738, 158.689), stdev = 70.968
[info]   CI (99.9%): [≈ 0, 305.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.413
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110317.022 ops/s
[info] # Warmup Iteration   2: 197500.366 ops/s
[info] # Warmup Iteration   3: 229159.270 ops/s
[info] # Warmup Iteration   4: 231535.256 ops/s
[info] # Warmup Iteration   5: 232339.726 ops/s
[info] Iteration   1: 232183.542 ops/s
[info]                  ·gc.alloc.rate:               625.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          4241.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4510.538 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 225995.949 ops/s
[info]                  ·gc.alloc.rate:               616.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          4290.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4636.556 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 232236.985 ops/s
[info]                  ·gc.alloc.rate:                   622.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              4217.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4512.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 231202.694 ops/s
[info]                  ·gc.alloc.rate:                   616.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              4199.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4534.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 226604.586 ops/s
[info]                  ·gc.alloc.rate:               608.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          4222.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4626.656 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   229644.751 ±(99.9%) 11891.677 ops/s [Average]
[info]   (min, avg, max) = (225995.949, 229644.751, 232236.985), stdev = 3088.231
[info]   CI (99.9%): [217753.074, 241536.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   617.874 ±(99.9%) 26.033 MB/sec [Average]
[info]   (min, avg, max) = (608.129, 617.874, 625.882), stdev = 6.761
[info]   CI (99.9%): [591.841, 643.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4234.411 ±(99.9%) 134.258 B/op [Average]
[info]   (min, avg, max) = (4199.877, 4234.411, 4290.733), stdev = 34.866
[info]   CI (99.9%): [4100.153, 4368.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.911 ±(99.9%) 1.203 MB/sec [Average]
[info]   (min, avg, max) = (665.523, 665.911, 666.342), stdev = 0.312
[info]   CI (99.9%): [664.708, 667.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4564.054 ±(99.9%) 240.631 B/op [Average]
[info]   (min, avg, max) = (4510.538, 4564.054, 4636.556), stdev = 62.491
[info]   CI (99.9%): [4323.423, 4804.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.142), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491.613 ops/s
[info] # Warmup Iteration   2: 3835.785 ops/s
[info] # Warmup Iteration   3: 5865.607 ops/s
[info] # Warmup Iteration   4: 6629.822 ops/s
[info] # Warmup Iteration   5: 6596.935 ops/s
[info] Iteration   1: 6676.292 ops/s
[info]                  ·gc.alloc.rate:                   1720.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              405413.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470822.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6600.070 ops/s
[info]                  ·gc.alloc.rate:               1680.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          400568.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318130.525 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6550.774 ops/s
[info]                  ·gc.alloc.rate:                   1675.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              402264.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     481957.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6590.129 ops/s
[info]                  ·gc.alloc.rate:                   1678.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              400775.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     319726.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6659.895 ops/s
[info]                  ·gc.alloc.rate:                   1696.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              400778.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475101.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.431 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6615.432 ±(99.9%) 199.508 ops/s [Average]
[info]   (min, avg, max) = (6550.774, 6615.432, 6676.292), stdev = 51.812
[info]   CI (99.9%): [6415.924, 6814.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1690.053 ±(99.9%) 71.774 MB/sec [Average]
[info]   (min, avg, max) = (1675.126, 1690.053, 1720.046), stdev = 18.640
[info]   CI (99.9%): [1618.279, 1761.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401959.921 ±(99.9%) 7881.326 B/op [Average]
[info]   (min, avg, max) = (400568.130, 401959.921, 405413.421), stdev = 2046.755
[info]   CI (99.9%): [394078.595, 409841.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1737.793 ±(99.9%) 1409.790 MB/sec [Average]
[info]   (min, avg, max) = (1334.349, 1737.793, 2010.880), stdev = 366.118
[info]   CI (99.9%): [328.003, 3147.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   413147.847 ±(99.9%) 331554.103 B/op [Average]
[info]   (min, avg, max) = (318130.525, 413147.847, 481957.665), stdev = 86103.548
[info]   CI (99.9%): [81593.743, 744701.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.342 ±(99.9%) 1.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.342, 1.062), stdev = 0.432
[info]   CI (99.9%): [≈ 0, 2.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81.708 ±(99.9%) 399.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.708, 255.062), stdev = 103.840
[info]   CI (99.9%): [≈ 0, 481.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5445.923 ops/s
[info] # Warmup Iteration   2: 23039.901 ops/s
[info] # Warmup Iteration   3: 33332.672 ops/s
[info] # Warmup Iteration   4: 36365.266 ops/s
[info] # Warmup Iteration   5: 32627.631 ops/s
[info] Iteration   1: 32853.255 ops/s
[info]                  ·gc.alloc.rate:                   2354.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              112694.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2557.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122390.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.419 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         36.000 ms
[info] Iteration   2: 34672.205 ops/s
[info]                  ·gc.alloc.rate:                   2054.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              93236.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1915.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86947.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 34644.547 ops/s
[info]                  ·gc.alloc.rate:               2056.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          93381.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1932.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87759.608 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     18.000 ms
[info] Iteration   4: 34582.231 ops/s
[info]                  ·gc.alloc.rate:                   2065.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              93953.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1944.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88465.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 34599.457 ops/s
[info]                  ·gc.alloc.rate:                   2047.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              93100.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1953.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88825.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   34270.339 ±(99.9%) 3053.473 ops/s [Average]
[info]   (min, avg, max) = (32853.255, 34270.339, 34672.205), stdev = 792.977
[info]   CI (99.9%): [31216.866, 37323.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2115.490 ±(99.9%) 516.062 MB/sec [Average]
[info]   (min, avg, max) = (2047.106, 2115.490, 2354.958), stdev = 134.020
[info]   CI (99.9%): [1599.429, 2631.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   97273.136 ±(99.9%) 33218.427 B/op [Average]
[info]   (min, avg, max) = (93100.029, 97273.136, 112694.139), stdev = 8626.720
[info]   CI (99.9%): [64054.709, 130491.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2060.623 ±(99.9%) 1071.098 MB/sec [Average]
[info]   (min, avg, max) = (1915.596, 2060.623, 2557.574), stdev = 278.161
[info]   CI (99.9%): [989.525, 3131.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   94877.692 ±(99.9%) 59287.056 B/op [Average]
[info]   (min, avg, max) = (86947.929, 94877.692, 122390.101), stdev = 15396.660
[info]   CI (99.9%): [35590.636, 154164.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.671 ±(99.9%) 10.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.671, 6.733), stdev = 2.612
[info]   CI (99.9%): [≈ 0, 12.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   122.346 ±(99.9%) 456.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.346, 306.213), stdev = 118.471
[info]   CI (99.9%): [≈ 0, 578.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   111.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (18.000, 22.200, 36.000), stdev = 7.727
[info]   CI (99.9%): [111.000, 111.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7159.535 ops/s
[info] # Warmup Iteration   2: 20804.947 ops/s
[info] # Warmup Iteration   3: 29190.232 ops/s
[info] # Warmup Iteration   4: 39859.319 ops/s
[info] # Warmup Iteration   5: 37076.600 ops/s
[info] Iteration   1: 37812.304 ops/s
[info]                  ·gc.alloc.rate:                   2012.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              83780.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1919.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79904.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      17.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 713.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 40249.439 ops/s
[info]                  ·gc.alloc.rate:                   1923.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              75188.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1915.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74862.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 39445.728 ops/s
[info]                  ·gc.alloc.rate:                   2320.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              92562.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2562.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102247.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.356 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 46389.747 ops/s
[info]                  ·gc.alloc.rate:                   2185.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              74120.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1928.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65410.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      11.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 46404.863 ops/s
[info]                  ·gc.alloc.rate:                   2191.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              74334.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1935.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65657.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   42060.416 ±(99.9%) 15615.301 ops/s [Average]
[info]   (min, avg, max) = (37812.304, 42060.416, 46404.863), stdev = 4055.244
[info]   CI (99.9%): [26445.115, 57675.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2126.749 ±(99.9%) 606.347 MB/sec [Average]
[info]   (min, avg, max) = (1923.818, 2126.749, 2320.212), stdev = 157.467
[info]   CI (99.9%): [1520.401, 2733.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   79997.168 ±(99.9%) 31158.975 B/op [Average]
[info]   (min, avg, max) = (74120.086, 79997.168, 92562.046), stdev = 8091.887
[info]   CI (99.9%): [48838.192, 111156.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2052.493 ±(99.9%) 1099.306 MB/sec [Average]
[info]   (min, avg, max) = (1915.481, 2052.493, 2562.995), stdev = 285.486
[info]   CI (99.9%): [953.187, 3151.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   77616.590 ±(99.9%) 58128.129 B/op [Average]
[info]   (min, avg, max) = (65410.298, 77616.590, 102247.589), stdev = 15095.691
[info]   CI (99.9%): [19488.460, 135744.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   6.571 ±(99.9%) 28.608 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 6.571, 17.135), stdev = 7.429
[info]   CI (99.9%): [≈ 0, 35.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   254.432 ±(99.9%) 1149.053 B/op [Average]
[info]   (min, avg, max) = (0.706, 254.432, 713.182), stdev = 298.405
[info]   CI (99.9%): [≈ 0, 1403.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 15.000), stdev = 5.177
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188566.742 ops/s
[info] # Warmup Iteration   2: 293579.544 ops/s
[info] # Warmup Iteration   3: 316997.616 ops/s
[info] # Warmup Iteration   4: 317065.238 ops/s
[info] # Warmup Iteration   5: 319869.528 ops/s
[info] Iteration   1: 320747.893 ops/s
[info]                  ·gc.alloc.rate:               728.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3283.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 317765.937 ops/s
[info]                  ·gc.alloc.rate:               732.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          3626.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3316.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 319296.400 ops/s
[info]                  ·gc.alloc.rate:                   719.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              3547.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3301.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 319100.229 ops/s
[info]                  ·gc.alloc.rate:               727.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          3590.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3305.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 318947.507 ops/s
[info]                  ·gc.alloc.rate:                   725.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              3578.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3305.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   319171.593 ±(99.9%) 4098.483 ops/s [Average]
[info]   (min, avg, max) = (317765.937, 319171.593, 320747.893), stdev = 1064.363
[info]   CI (99.9%): [315073.110, 323270.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   726.862 ±(99.9%) 17.929 MB/sec [Average]
[info]   (min, avg, max) = (719.807, 726.862, 732.314), stdev = 4.656
[info]   CI (99.9%): [708.932, 744.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3583.844 ±(99.9%) 110.080 B/op [Average]
[info]   (min, avg, max) = (3547.512, 3583.844, 3626.593), stdev = 28.587
[info]   CI (99.9%): [3473.764, 3693.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.795 ±(99.9%) 1.634 MB/sec [Average]
[info]   (min, avg, max) = (669.117, 669.795, 670.201), stdev = 0.424
[info]   CI (99.9%): [668.161, 671.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3302.460 ±(99.9%) 46.796 B/op [Average]
[info]   (min, avg, max) = (3283.337, 3302.460, 3316.744), stdev = 12.153
[info]   CI (99.9%): [3255.664, 3349.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.103), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206364.129 ops/s
[info] # Warmup Iteration   2: 338533.463 ops/s
[info] # Warmup Iteration   3: 353361.636 ops/s
[info] # Warmup Iteration   4: 353138.571 ops/s
[info] # Warmup Iteration   5: 352747.717 ops/s
[info] Iteration   1: 352888.801 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 353127.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 353200.236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 351670.613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 333849.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   348947.187 ±(99.9%) 32586.870 ops/s [Average]
[info]   (min, avg, max) = (333849.018, 348947.187, 353200.236), stdev = 8462.707
[info]   CI (99.9%): [316360.318, 381534.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4503.957 ops/s
[info] # Warmup Iteration   2: 20720.349 ops/s
[info] # Warmup Iteration   3: 27626.640 ops/s
[info] # Warmup Iteration   4: 38392.807 ops/s
[info] # Warmup Iteration   5: 40035.455 ops/s
[info] Iteration   1: 39557.081 ops/s
[info]                  ·gc.alloc.rate:                   2719.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              108158.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2384.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94833.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.625 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 39676.987 ops/s
[info]                  ·gc.alloc.rate:                   2694.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              106851.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2395.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94993.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      13.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 532.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         54.000 ms
[info] Iteration   3: 35780.708 ops/s
[info]                  ·gc.alloc.rate:                   3036.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              133507.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3435.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151023.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      26.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1180.869 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         119.000 ms
[info] Iteration   4: 39619.651 ops/s
[info]                  ·gc.alloc.rate:                   2932.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              116141.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2736.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108359.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      55.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2179.940 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         68.000 ms
[info] Iteration   5: 42058.621 ops/s
[info]                  ·gc.alloc.rate:                   2446.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              91495.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2235.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83633.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   39338.610 ±(99.9%) 8674.282 ops/s [Average]
[info]   (min, avg, max) = (35780.708, 39338.610, 42058.621), stdev = 2252.684
[info]   CI (99.9%): [30664.327, 48012.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2766.136 ±(99.9%) 883.774 MB/sec [Average]
[info]   (min, avg, max) = (2446.123, 2766.136, 3036.791), stdev = 229.513
[info]   CI (99.9%): [1882.362, 3649.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111230.788 ±(99.9%) 58980.336 B/op [Average]
[info]   (min, avg, max) = (91495.803, 111230.788, 133507.258), stdev = 15317.006
[info]   CI (99.9%): [52250.452, 170211.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2637.649 ±(99.9%) 1856.357 MB/sec [Average]
[info]   (min, avg, max) = (2235.934, 2637.649, 3435.210), stdev = 482.090
[info]   CI (99.9%): [781.292, 4494.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106568.671 ±(99.9%) 101461.067 B/op [Average]
[info]   (min, avg, max) = (83633.808, 106568.671, 151023.074), stdev = 26349.117
[info]   CI (99.9%): [5107.603, 208029.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   19.335 ±(99.9%) 87.470 MB/sec [Average]
[info]   (min, avg, max) = (0.668, 19.335, 55.051), stdev = 22.716
[info]   CI (99.9%): [≈ 0, 106.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   788.967 ±(99.9%) 3507.589 B/op [Average]
[info]   (min, avg, max) = (25.004, 788.967, 2179.940), stdev = 910.910
[info]   CI (99.9%): [≈ 0, 4296.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   288.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (21.000, 57.600, 119.000), stdev = 39.463
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24201.485 ops/s
[info] # Warmup Iteration   2: 143462.918 ops/s
[info] # Warmup Iteration   3: 160203.779 ops/s
[info] # Warmup Iteration   4: 186246.853 ops/s
[info] # Warmup Iteration   5: 184710.444 ops/s
[info] Iteration   1: 187992.220 ops/s
[info]                  ·gc.alloc.rate:                   2638.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              22086.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22308.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 188437.718 ops/s
[info]                  ·gc.alloc.rate:                   2620.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              21884.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16675.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 186835.017 ops/s
[info]                  ·gc.alloc.rate:                   2612.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              21999.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22449.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 187898.163 ops/s
[info]                  ·gc.alloc.rate:                   2666.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              22328.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22396.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 184362.832 ops/s
[info]                  ·gc.alloc.rate:                   2619.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              22353.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22899.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   187105.190 ±(99.9%) 6322.794 ops/s [Average]
[info]   (min, avg, max) = (184362.832, 187105.190, 188437.718), stdev = 1642.010
[info]   CI (99.9%): [180782.396, 193427.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2631.384 ±(99.9%) 83.559 MB/sec [Average]
[info]   (min, avg, max) = (2612.264, 2631.384, 2666.054), stdev = 21.700
[info]   CI (99.9%): [2547.825, 2714.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22130.382 ±(99.9%) 789.768 B/op [Average]
[info]   (min, avg, max) = (21884.555, 22130.382, 22353.051), stdev = 205.100
[info]   CI (99.9%): [21340.614, 22920.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2537.077 ±(99.9%) 1163.886 MB/sec [Average]
[info]   (min, avg, max) = (1996.550, 2537.077, 2683.664), stdev = 302.257
[info]   CI (99.9%): [1373.192, 3700.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21345.929 ±(99.9%) 10092.630 B/op [Average]
[info]   (min, avg, max) = (16675.151, 21345.929, 22899.713), stdev = 2621.024
[info]   CI (99.9%): [11253.299, 31438.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.631 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.396), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.872 ±(99.9%) 5.282 B/op [Average]
[info]   (min, avg, max) = (0.174, 0.872, 3.311), stdev = 1.372
[info]   CI (99.9%): [≈ 0, 6.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 13.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.571 ops/s
[info] # Warmup Iteration   2: 456397.578 ops/s
[info] # Warmup Iteration   3: 551166.611 ops/s
[info] # Warmup Iteration   4: 568735.993 ops/s
[info] # Warmup Iteration   5: 552608.881 ops/s
[info] Iteration   1: 568750.304 ops/s
[info]                  ·gc.alloc.rate:               610.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1831.373 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 569594.835 ops/s
[info]                  ·gc.alloc.rate:                   607.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              1678.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1830.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 568996.215 ops/s
[info]                  ·gc.alloc.rate:               612.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          1693.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1832.421 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 568347.387 ops/s
[info]                  ·gc.alloc.rate:                   603.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1671.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1836.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 570420.145 ops/s
[info]                  ·gc.alloc.rate:      591.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   569221.777 ±(99.9%) 3112.228 ops/s [Average]
[info]   (min, avg, max) = (568347.387, 569221.777, 570420.145), stdev = 808.236
[info]   CI (99.9%): [566109.549, 572334.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   605.057 ±(99.9%) 31.596 MB/sec [Average]
[info]   (min, avg, max) = (591.502, 605.057, 612.187), stdev = 8.205
[info]   CI (99.9%): [573.461, 636.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1672.854 ±(99.9%) 93.480 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1672.854, 1693.234), stdev = 24.276
[info]   CI (99.9%): [1579.374, 1766.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.021 ±(99.9%) 1140.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.021, 663.139), stdev = 296.291
[info]   CI (99.9%): [≈ 0, 1670.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1466.136 ±(99.9%) 3155.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1466.136, 1836.348), stdev = 819.598
[info]   CI (99.9%): [≈ 0, 4622.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.058), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.161), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77871.886 ops/s
[info] # Warmup Iteration   2: 319091.436 ops/s
[info] # Warmup Iteration   3: 427168.949 ops/s
[info] # Warmup Iteration   4: 463715.239 ops/s
[info] # Warmup Iteration   5: 469072.438 ops/s
[info] Iteration   1: 473057.044 ops/s
[info]                  ·gc.alloc.rate:      449.708 MB/sec
[info]                  ·gc.alloc.rate.norm: 1496.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 470909.151 ops/s
[info]                  ·gc.alloc.rate:               460.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          1537.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2213.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 470360.359 ops/s
[info]                  ·gc.alloc.rate:                   459.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1535.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2215.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 473238.478 ops/s
[info]                  ·gc.alloc.rate:      450.030 MB/sec
[info]                  ·gc.alloc.rate.norm: 1496.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 469110.170 ops/s
[info]                  ·gc.alloc.rate:               468.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          1571.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2221.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   471335.041 ±(99.9%) 6853.120 ops/s [Average]
[info]   (min, avg, max) = (469110.170, 471335.041, 473238.478), stdev = 1779.733
[info]   CI (99.9%): [464481.921, 478188.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   457.487 ±(99.9%) 30.435 MB/sec [Average]
[info]   (min, avg, max) = (449.708, 457.487, 468.670), stdev = 7.904
[info]   CI (99.9%): [427.052, 487.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1527.379 ±(99.9%) 123.572 B/op [Average]
[info]   (min, avg, max) = (1496.001, 1527.379, 1571.904), stdev = 32.091
[info]   CI (99.9%): [1403.807, 1650.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.367 ±(99.9%) 1396.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.367, 662.362), stdev = 362.745
[info]   CI (99.9%): [≈ 0, 1794.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1330.047 ±(99.9%) 4675.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1330.047, 2221.540), stdev = 1214.165
[info]   CI (99.9%): [≈ 0, 6005.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223521.524 ops/s
[info] # Warmup Iteration   2: 551005.495 ops/s
[info] # Warmup Iteration   3: 672396.583 ops/s
[info] # Warmup Iteration   4: 684135.330 ops/s
[info] # Warmup Iteration   5: 680856.700 ops/s
[info] Iteration   1: 683320.442 ops/s
[info]                  ·gc.alloc.rate:                   453.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              1045.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1178.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 679056.348 ops/s
[info]                  ·gc.alloc.rate:               485.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          1125.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1549.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 686698.826 ops/s
[info]                  ·gc.alloc.rate:      470.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 1077.627 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 684484.570 ops/s
[info]                  ·gc.alloc.rate:                   469.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              1080.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1537.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 683596.483 ops/s
[info]                  ·gc.alloc.rate:               468.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1539.768 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   683431.334 ±(99.9%) 10713.840 ops/s [Average]
[info]   (min, avg, max) = (679056.348, 683431.334, 686698.826), stdev = 2782.350
[info]   CI (99.9%): [672717.494, 694145.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   469.567 ±(99.9%) 43.192 MB/sec [Average]
[info]   (min, avg, max) = (453.889, 469.567, 485.519), stdev = 11.217
[info]   CI (99.9%): [426.375, 512.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1081.162 ±(99.9%) 109.827 B/op [Average]
[info]   (min, avg, max) = (1045.249, 1081.162, 1125.188), stdev = 28.522
[info]   CI (99.9%): [971.335, 1190.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.568 ±(99.9%) 1115.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.568, 668.811), stdev = 289.597
[info]   CI (99.9%): [≈ 0, 1618.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1160.908 ±(99.9%) 2571.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1160.908, 1549.366), stdev = 667.815
[info]   CI (99.9%): [≈ 0, 3732.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.030), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6508.384 ops/s
[info] # Warmup Iteration   2: 88639.805 ops/s
[info] # Warmup Iteration   3: 106210.313 ops/s
[info] # Warmup Iteration   4: 111919.911 ops/s
[info] # Warmup Iteration   5: 112604.184 ops/s
[info] Iteration   1: 113033.138 ops/s
[info]                  ·gc.alloc.rate:                   3847.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              53576.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46659.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 111808.733 ops/s
[info]                  ·gc.alloc.rate:                   3848.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              54165.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4041.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56881.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 110676.763 ops/s
[info]                  ·gc.alloc.rate:                   3785.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              53815.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48061.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 109196.284 ops/s
[info]                  ·gc.alloc.rate:                   3812.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              54944.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4065.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58592.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.739 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 115134.951 ops/s
[info]                  ·gc.alloc.rate:                   3883.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              53088.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46381.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   111969.974 ±(99.9%) 8725.584 ops/s [Average]
[info]   (min, avg, max) = (109196.284, 111969.974, 115134.951), stdev = 2266.007
[info]   CI (99.9%): [103244.389, 120695.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3835.538 ±(99.9%) 144.049 MB/sec [Average]
[info]   (min, avg, max) = (3785.983, 3835.538, 3883.432), stdev = 37.409
[info]   CI (99.9%): [3691.488, 3979.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53918.201 ±(99.9%) 2674.995 B/op [Average]
[info]   (min, avg, max) = (53088.470, 53918.201, 54944.679), stdev = 694.688
[info]   CI (99.9%): [51243.207, 56593.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3646.317 ±(99.9%) 1432.443 MB/sec [Average]
[info]   (min, avg, max) = (3350.823, 3646.317, 4065.422), stdev = 372.001
[info]   CI (99.9%): [2213.873, 5078.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51315.322 ±(99.9%) 22824.758 B/op [Average]
[info]   (min, avg, max) = (46381.897, 51315.322, 58592.376), stdev = 5927.517
[info]   CI (99.9%): [28490.564, 74140.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.257 ±(99.9%) 1.948 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.257, 1.161), stdev = 0.506
[info]   CI (99.9%): [≈ 0, 2.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.696 ±(99.9%) 28.092 B/op [Average]
[info]   (min, avg, max) = (0.285, 3.696, 16.739), stdev = 7.295
[info]   CI (99.9%): [≈ 0, 31.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60481.929 ops/s
[info] # Warmup Iteration   2: 221115.354 ops/s
[info] # Warmup Iteration   3: 246444.359 ops/s
[info] # Warmup Iteration   4: 247429.774 ops/s
[info] # Warmup Iteration   5: 243855.834 ops/s
[info] Iteration   1: 248023.196 ops/s
[info]                  ·gc.alloc.rate:                   1762.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              11182.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8479.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 248564.206 ops/s
[info]                  ·gc.alloc.rate:                   1769.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              11200.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12687.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 249276.658 ops/s
[info]                  ·gc.alloc.rate:                   1777.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              11220.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12613.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 249544.371 ops/s
[info]                  ·gc.alloc.rate:                   1760.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              11103.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8394.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 248977.144 ops/s
[info]                  ·gc.alloc.rate:               1769.189 MB/sec
[info]                  ·gc.alloc.rate.norm:          11184.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12626.470 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   248877.115 ±(99.9%) 2311.959 ops/s [Average]
[info]   (min, avg, max) = (248023.196, 248877.115, 249544.371), stdev = 600.408
[info]   CI (99.9%): [246565.156, 251189.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1767.634 ±(99.9%) 25.941 MB/sec [Average]
[info]   (min, avg, max) = (1760.412, 1767.634, 1777.353), stdev = 6.737
[info]   CI (99.9%): [1741.693, 1793.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11177.924 ±(99.9%) 171.542 B/op [Average]
[info]   (min, avg, max) = (11103.027, 11177.924, 11220.068), stdev = 44.549
[info]   CI (99.9%): [11006.383, 11349.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1733.281 ±(99.9%) 1405.276 MB/sec [Average]
[info]   (min, avg, max) = (1330.893, 1733.281, 2003.955), stdev = 364.946
[info]   CI (99.9%): [328.005, 3138.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10959.991 ±(99.9%) 8871.744 B/op [Average]
[info]   (min, avg, max) = (8394.019, 10959.991, 12687.108), stdev = 2303.964
[info]   CI (99.9%): [2088.246, 19831.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 7.718 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.518), stdev = 2.004
[info]   CI (99.9%): [≈ 0, 8.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.905 ±(99.9%) 48.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.905, 28.602), stdev = 12.689
[info]   CI (99.9%): [≈ 0, 54.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.607 ops/s
[info] # Warmup Iteration   2: 1074964.420 ops/s
[info] # Warmup Iteration   3: 1157151.678 ops/s
[info] # Warmup Iteration   4: 1249963.518 ops/s
[info] # Warmup Iteration   5: 1247633.004 ops/s
[info] Iteration   1: 1259380.694 ops/s
[info]                  ·gc.alloc.rate:                   700.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              874.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1258761.330 ops/s
[info]                  ·gc.alloc.rate:                   703.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              878.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1167168.315 ops/s
[info]                  ·gc.alloc.rate:               654.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          882.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 895.569 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1239177.125 ops/s
[info]                  ·gc.alloc.rate:                   697.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              885.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1198726.260 ops/s
[info]                  ·gc.alloc.rate:                   668.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              877.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1224642.745 ±(99.9%) 155903.835 ops/s [Average]
[info]   (min, avg, max) = (1167168.315, 1224642.745, 1259380.694), stdev = 40487.731
[info]   CI (99.9%): [1068738.910, 1380546.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   684.746 ±(99.9%) 84.377 MB/sec [Average]
[info]   (min, avg, max) = (654.740, 684.746, 703.067), stdev = 21.912
[info]   CI (99.9%): [600.368, 769.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   879.842 ±(99.9%) 16.838 B/op [Average]
[info]   (min, avg, max) = (874.839, 879.842, 885.814), stdev = 4.373
[info]   CI (99.9%): [863.004, 896.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.295 ±(99.9%) 1.745 MB/sec [Average]
[info]   (min, avg, max) = (663.563, 664.295, 664.784), stdev = 0.453
[info]   CI (99.9%): [662.550, 666.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   854.297 ±(99.9%) 111.286 B/op [Average]
[info]   (min, avg, max) = (829.157, 854.297, 895.569), stdev = 28.901
[info]   CI (99.9%): [743.010, 965.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.020), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361303.885 ops/s
[info] # Warmup Iteration   2: 1090220.898 ops/s
[info] # Warmup Iteration   3: 1245495.759 ops/s
[info] # Warmup Iteration   4: 1225205.832 ops/s
[info] # Warmup Iteration   5: 1229619.432 ops/s
[info] Iteration   1: 1224157.433 ops/s
[info]                  ·gc.alloc.rate:                   696.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     855.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1245665.413 ops/s
[info]                  ·gc.alloc.rate:               695.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          878.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 841.236 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1193501.468 ops/s
[info]                  ·gc.alloc.rate:                   675.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              890.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     878.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1234941.439 ops/s
[info]                  ·gc.alloc.rate:                   686.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              875.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1229108.030 ops/s
[info]                  ·gc.alloc.rate:               692.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 853.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   1225474.757 ±(99.9%) 75420.242 ops/s [Average]
[info]   (min, avg, max) = (1193501.468, 1225474.757, 1245665.413), stdev = 19586.397
[info]   CI (99.9%): [1150054.514, 1300894.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   689.358 ±(99.9%) 34.029 MB/sec [Average]
[info]   (min, avg, max) = (675.187, 689.358, 696.778), stdev = 8.837
[info]   CI (99.9%): [655.329, 723.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   885.172 ±(99.9%) 32.570 B/op [Average]
[info]   (min, avg, max) = (875.006, 885.172, 895.760), stdev = 8.458
[info]   CI (99.9%): [852.602, 917.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.123 ±(99.9%) 2.320 MB/sec [Average]
[info]   (min, avg, max) = (665.197, 666.123, 666.791), stdev = 0.602
[info]   CI (99.9%): [663.803, 668.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   855.450 ±(99.9%) 52.815 B/op [Average]
[info]   (min, avg, max) = (841.236, 855.450, 878.020), stdev = 13.716
[info]   CI (99.9%): [802.635, 908.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.023), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.030), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 387747.065 ops/s
[info] # Warmup Iteration   2: 1097531.857 ops/s
[info] # Warmup Iteration   3: 1138416.859 ops/s
[info] # Warmup Iteration   4: 1148290.772 ops/s
[info] # Warmup Iteration   5: 1136138.630 ops/s
[info] Iteration   1: 1135955.200 ops/s
[info]                  ·gc.alloc.rate:               631.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 925.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1147217.004 ops/s
[info]                  ·gc.alloc.rate:                   644.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              884.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1142080.120 ops/s
[info]                  ·gc.alloc.rate:               644.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          887.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 921.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1142344.728 ops/s
[info]                  ·gc.alloc.rate:               635.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 921.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1137958.462 ops/s
[info]                  ·gc.alloc.rate:                   638.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              882.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1141111.103 ±(99.9%) 16813.842 ops/s [Average]
[info]   (min, avg, max) = (1135955.200, 1141111.103, 1147217.004), stdev = 4366.501
[info]   CI (99.9%): [1124297.261, 1157924.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   638.799 ±(99.9%) 21.745 MB/sec [Average]
[info]   (min, avg, max) = (631.333, 638.799, 644.548), stdev = 5.647
[info]   CI (99.9%): [617.054, 660.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   880.886 ±(99.9%) 21.130 B/op [Average]
[info]   (min, avg, max) = (874.682, 880.886, 887.346), stdev = 5.487
[info]   CI (99.9%): [859.757, 902.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.412 ±(99.9%) 2.011 MB/sec [Average]
[info]   (min, avg, max) = (667.855, 668.412, 669.090), stdev = 0.522
[info]   CI (99.9%): [666.401, 670.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   921.742 ±(99.9%) 14.280 B/op [Average]
[info]   (min, avg, max) = (916.195, 921.742, 925.281), stdev = 3.708
[info]   CI (99.9%): [907.462, 936.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372031.302 ops/s
[info] # Warmup Iteration   2: 1056530.536 ops/s
[info] # Warmup Iteration   3: 1188779.859 ops/s
[info] # Warmup Iteration   4: 1187927.651 ops/s
[info] # Warmup Iteration   5: 1183104.079 ops/s
[info] Iteration   1: 1189791.965 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1185207.314 ops/s
[info]                  ·gc.alloc.rate:      0.520 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.691 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1190413.278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1189862.513 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1191189.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1189292.841 ±(99.9%) 9054.436 ops/s [Average]
[info]   (min, avg, max) = (1185207.314, 1189292.841, 1191189.132), stdev = 2351.408
[info]   CI (99.9%): [1180238.404, 1198347.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.104 ±(99.9%) 0.895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.104, 0.520), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.138 ±(99.9%) 1.189 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.138, 0.691), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5749.597 ops/s
[info] # Warmup Iteration   2: 21082.986 ops/s
[info] # Warmup Iteration   3: 39835.434 ops/s
[info] # Warmup Iteration   4: 39705.383 ops/s
[info] # Warmup Iteration   5: 35037.083 ops/s
[info] Iteration   1: 40431.551 ops/s
[info]                  ·gc.alloc.rate:                   1941.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              75524.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77107.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 40513.972 ops/s
[info]                  ·gc.alloc.rate:                   1963.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              76227.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77075.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 40315.249 ops/s
[info]                  ·gc.alloc.rate:                   1952.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              76212.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77521.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 40649.500 ops/s
[info]                  ·gc.alloc.rate:                   1943.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              75229.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76983.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 39933.725 ops/s
[info]                  ·gc.alloc.rate:                   1932.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              76146.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78494.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.500 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   40368.799 ±(99.9%) 1047.423 ops/s [Average]
[info]   (min, avg, max) = (39933.725, 40368.799, 40649.500), stdev = 272.012
[info]   CI (99.9%): [39321.376, 41416.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1946.410 ±(99.9%) 45.369 MB/sec [Average]
[info]   (min, avg, max) = (1932.262, 1946.410, 1963.019), stdev = 11.782
[info]   CI (99.9%): [1901.041, 1991.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75868.230 ±(99.9%) 1776.388 B/op [Average]
[info]   (min, avg, max) = (75229.830, 75868.230, 76227.627), stdev = 461.322
[info]   CI (99.9%): [74091.842, 77644.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1986.598 ±(99.9%) 14.531 MB/sec [Average]
[info]   (min, avg, max) = (1981.774, 1986.598, 1991.850), stdev = 3.774
[info]   CI (99.9%): [1972.067, 2001.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77436.578 ±(99.9%) 2413.002 B/op [Average]
[info]   (min, avg, max) = (76983.604, 77436.578, 78494.874), stdev = 626.649
[info]   CI (99.9%): [75023.576, 79849.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.775 ±(99.9%) 7.325 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.775, 4.555), stdev = 1.902
[info]   CI (99.9%): [≈ 0, 9.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69.321 ±(99.9%) 285.742 B/op [Average]
[info]   (min, avg, max) = (1.612, 69.321, 177.233), stdev = 74.206
[info]   CI (99.9%): [≈ 0, 355.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 13.000), stdev = 2.345
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17164.923 ops/s
[info] # Warmup Iteration   2: 86239.483 ops/s
[info] # Warmup Iteration   3: 140179.019 ops/s
[info] # Warmup Iteration   4: 140555.660 ops/s
[info] # Warmup Iteration   5: 140858.646 ops/s
[info] Iteration   1: 142566.925 ops/s
[info]                  ·gc.alloc.rate:                   1779.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              19644.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14677.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 142789.125 ops/s
[info]                  ·gc.alloc.rate:                   1805.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              19904.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21939.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 142568.127 ops/s
[info]                  ·gc.alloc.rate:                   1779.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              19647.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14619.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 143240.356 ops/s
[info]                  ·gc.alloc.rate:                   1796.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              19737.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21829.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.830 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 143395.740 ops/s
[info]                  ·gc.alloc.rate:               1795.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          19705.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1989.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21829.034 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   142912.055 ±(99.9%) 1484.179 ops/s [Average]
[info]   (min, avg, max) = (142566.925, 142912.055, 143395.740), stdev = 385.437
[info]   CI (99.9%): [141427.876, 144396.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1791.397 ±(99.9%) 44.043 MB/sec [Average]
[info]   (min, avg, max) = (1779.522, 1791.397, 1805.724), stdev = 11.438
[info]   CI (99.9%): [1747.355, 1835.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19727.849 ±(99.9%) 409.552 B/op [Average]
[info]   (min, avg, max) = (19644.621, 19727.849, 19904.639), stdev = 106.359
[info]   CI (99.9%): [19318.296, 20137.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1724.036 ±(99.9%) 1395.788 MB/sec [Average]
[info]   (min, avg, max) = (1324.319, 1724.036, 1990.344), stdev = 362.482
[info]   CI (99.9%): [328.249, 3119.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18979.160 ±(99.9%) 15223.605 B/op [Average]
[info]   (min, avg, max) = (14619.322, 18979.160, 21939.716), stdev = 3953.522
[info]   CI (99.9%): [3755.555, 34202.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.968 ±(99.9%) 5.870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.968, 3.614), stdev = 1.524
[info]   CI (99.9%): [≈ 0, 6.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.687 ±(99.9%) 64.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.687, 39.900), stdev = 16.829
[info]   CI (99.9%): [≈ 0, 75.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48810.095 ops/s
[info] # Warmup Iteration   2: 170157.131 ops/s
[info] # Warmup Iteration   3: 191900.629 ops/s
[info] # Warmup Iteration   4: 206898.237 ops/s
[info] # Warmup Iteration   5: 207873.634 ops/s
[info] Iteration   1: 203609.898 ops/s
[info]                  ·gc.alloc.rate:                   1235.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              9548.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10211.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 206938.232 ops/s
[info]                  ·gc.alloc.rate:               1222.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          9294.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5028.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 205864.554 ops/s
[info]                  ·gc.alloc.rate:                   1238.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              9465.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10119.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 205939.758 ops/s
[info]                  ·gc.alloc.rate:                   1228.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              9388.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10136.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 202918.897 ops/s
[info]                  ·gc.alloc.rate:                   1206.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              9357.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10307.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   205054.268 ±(99.9%) 6567.575 ops/s [Average]
[info]   (min, avg, max) = (202918.897, 205054.268, 206938.232), stdev = 1705.578
[info]   CI (99.9%): [198486.693, 211621.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1226.334 ±(99.9%) 48.285 MB/sec [Average]
[info]   (min, avg, max) = (1206.657, 1226.334, 1238.139), stdev = 12.539
[info]   CI (99.9%): [1178.050, 1274.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9410.940 ±(99.9%) 379.235 B/op [Average]
[info]   (min, avg, max) = (9294.641, 9410.940, 9548.375), stdev = 98.486
[info]   CI (99.9%): [9031.705, 9790.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.418 ±(99.9%) 1142.953 MB/sec [Average]
[info]   (min, avg, max) = (661.476, 1192.418, 1329.186), stdev = 296.821
[info]   CI (99.9%): [49.466, 2335.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9160.530 ±(99.9%) 8899.138 B/op [Average]
[info]   (min, avg, max) = (5028.491, 9160.530, 10307.713), stdev = 2311.078
[info]   CI (99.9%): [261.391, 18059.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.153 ±(99.9%) 0.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.600), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.174 ±(99.9%) 7.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.174, 4.584), stdev = 1.930
[info]   CI (99.9%): [≈ 0, 8.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101067.993 ops/s
[info] # Warmup Iteration   2: 178177.927 ops/s
[info] # Warmup Iteration   3: 226005.772 ops/s
[info] # Warmup Iteration   4: 254039.858 ops/s
[info] # Warmup Iteration   5: 254076.579 ops/s
[info] Iteration   1: 251164.469 ops/s
[info]                  ·gc.alloc.rate:                   1335.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              8367.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8361.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 240193.243 ops/s
[info]                  ·gc.alloc.rate:                   1341.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              8793.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8747.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 250041.498 ops/s
[info]                  ·gc.alloc.rate:                   1347.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              8478.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8406.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 252621.406 ops/s
[info]                  ·gc.alloc.rate:                   1354.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              8433.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8317.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 255273.843 ops/s
[info]                  ·gc.alloc.rate:                   1360.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              8388.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8217.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   249858.892 ±(99.9%) 22129.968 ops/s [Average]
[info]   (min, avg, max) = (240193.243, 249858.892, 255273.843), stdev = 5747.082
[info]   CI (99.9%): [227728.924, 271988.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1348.064 ±(99.9%) 37.563 MB/sec [Average]
[info]   (min, avg, max) = (1335.951, 1348.064, 1360.667), stdev = 9.755
[info]   CI (99.9%): [1310.501, 1385.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8492.272 ±(99.9%) 668.037 B/op [Average]
[info]   (min, avg, max) = (8367.910, 8492.272, 8793.131), stdev = 173.487
[info]   CI (99.9%): [7824.235, 9160.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1334.867 ±(99.9%) 4.770 MB/sec [Average]
[info]   (min, avg, max) = (1332.852, 1334.867, 1336.121), stdev = 1.239
[info]   CI (99.9%): [1330.097, 1339.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8409.826 ±(99.9%) 774.373 B/op [Average]
[info]   (min, avg, max) = (8217.281, 8409.826, 8747.008), stdev = 201.102
[info]   CI (99.9%): [7635.453, 9184.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.980 ±(99.9%) 4.459 MB/sec [Average]
[info]   (min, avg, max) = (0.034, 0.980, 2.908), stdev = 1.158
[info]   CI (99.9%): [≈ 0, 5.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.206 ±(99.9%) 28.085 B/op [Average]
[info]   (min, avg, max) = (0.212, 6.206, 18.295), stdev = 7.294
[info]   CI (99.9%): [≈ 0, 34.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2413.831 ops/s
[info] # Warmup Iteration   2: 58116.248 ops/s
[info] # Warmup Iteration   3: 94768.004 ops/s
[info] # Warmup Iteration   4: 99689.565 ops/s
[info] # Warmup Iteration   5: 104711.169 ops/s
[info] Iteration   1: 106157.836 ops/s
[info]                  ·gc.alloc.rate:                   3487.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              51702.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3328.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49352.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.012 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 105041.950 ops/s
[info]                  ·gc.alloc.rate:                   3459.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              51823.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50038.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 104606.533 ops/s
[info]                  ·gc.alloc.rate:                   3485.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              52434.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50468.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 104394.781 ops/s
[info]                  ·gc.alloc.rate:                   3492.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              52658.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50778.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 106440.548 ops/s
[info]                  ·gc.alloc.rate:                   3558.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              52617.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49976.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   105328.330 ±(99.9%) 3549.924 ops/s [Average]
[info]   (min, avg, max) = (104394.781, 105328.330, 106440.548), stdev = 921.904
[info]   CI (99.9%): [101778.406, 108878.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3496.811 ±(99.9%) 142.567 MB/sec [Average]
[info]   (min, avg, max) = (3459.636, 3496.811, 3558.957), stdev = 37.024
[info]   CI (99.9%): [3354.244, 3639.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52247.325 ±(99.9%) 1742.174 B/op [Average]
[info]   (min, avg, max) = (51702.197, 52247.325, 52658.964), stdev = 452.437
[info]   CI (99.9%): [50505.151, 53989.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3354.467 ±(99.9%) 79.595 MB/sec [Average]
[info]   (min, avg, max) = (3328.804, 3354.467, 3380.311), stdev = 20.670
[info]   CI (99.9%): [3274.872, 3434.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50122.810 ±(99.9%) 2083.450 B/op [Average]
[info]   (min, avg, max) = (49352.595, 50122.810, 50778.365), stdev = 541.065
[info]   CI (99.9%): [48039.360, 52206.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.423 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.271), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.114 ±(99.9%) 6.259 B/op [Average]
[info]   (min, avg, max) = (0.308, 1.114, 4.012), stdev = 1.626
[info]   CI (99.9%): [≈ 0, 7.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47504.963 ops/s
[info] # Warmup Iteration   2: 209666.542 ops/s
[info] # Warmup Iteration   3: 218217.096 ops/s
[info] # Warmup Iteration   4: 239327.490 ops/s
[info] # Warmup Iteration   5: 239790.798 ops/s
[info] Iteration   1: 232750.238 ops/s
[info]                  ·gc.alloc.rate:                   1529.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              10345.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13528.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 238443.097 ops/s
[info]                  ·gc.alloc.rate:                   1552.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              10249.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8811.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 242777.644 ops/s
[info]                  ·gc.alloc.rate:                   1563.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              10133.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8647.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 243398.358 ops/s
[info]                  ·gc.alloc.rate:                   1566.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              10127.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8610.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 243073.084 ops/s
[info]                  ·gc.alloc.rate:                   1588.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              10286.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12926.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   240088.484 ±(99.9%) 17609.260 ops/s [Average]
[info]   (min, avg, max) = (232750.238, 240088.484, 243398.358), stdev = 4573.069
[info]   CI (99.9%): [222479.224, 257697.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1560.280 ±(99.9%) 82.418 MB/sec [Average]
[info]   (min, avg, max) = (1529.979, 1560.280, 1588.812), stdev = 21.404
[info]   CI (99.9%): [1477.862, 1642.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10228.420 ±(99.9%) 369.217 B/op [Average]
[info]   (min, avg, max) = (10127.397, 10228.420, 10345.843), stdev = 95.885
[info]   CI (99.9%): [9859.203, 10597.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1599.659 ±(99.9%) 1402.659 MB/sec [Average]
[info]   (min, avg, max) = (1331.913, 1599.659, 2000.687), stdev = 364.266
[info]   CI (99.9%): [197.001, 3002.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10505.027 ±(99.9%) 9610.196 B/op [Average]
[info]   (min, avg, max) = (8610.668, 10505.027, 13528.807), stdev = 2495.737
[info]   CI (99.9%): [894.831, 20115.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 5.555 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.883, 3.362), stdev = 1.443
[info]   CI (99.9%): [≈ 0, 6.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.806 ±(99.9%) 36.659 B/op [Average]
[info]   (min, avg, max) = (0.135, 5.806, 22.191), stdev = 9.520
[info]   CI (99.9%): [≈ 0, 42.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 13.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261541.156 ops/s
[info] # Warmup Iteration   2: 743386.647 ops/s
[info] # Warmup Iteration   3: 844643.481 ops/s
[info] # Warmup Iteration   4: 839987.738 ops/s
[info] # Warmup Iteration   5: 848916.109 ops/s
[info] Iteration   1: 847908.314 ops/s
[info]                  ·gc.alloc.rate:                   674.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1252.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1229.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 839512.064 ops/s
[info]                  ·gc.alloc.rate:                   661.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1238.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1242.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 848563.175 ops/s
[info]                  ·gc.alloc.rate:               671.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          1245.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1229.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 848045.998 ops/s
[info]                  ·gc.alloc.rate:                   675.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              1253.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1231.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 837276.441 ops/s
[info]                  ·gc.alloc.rate:               664.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1247.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   844261.199 ±(99.9%) 20867.708 ops/s [Average]
[info]   (min, avg, max) = (837276.441, 844261.199, 848563.175), stdev = 5419.278
[info]   CI (99.9%): [823393.490, 865128.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   669.520 ±(99.9%) 24.422 MB/sec [Average]
[info]   (min, avg, max) = (661.055, 669.520, 675.414), stdev = 6.342
[info]   CI (99.9%): [645.098, 693.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1247.906 ±(99.9%) 23.150 B/op [Average]
[info]   (min, avg, max) = (1238.697, 1247.906, 1253.478), stdev = 6.012
[info]   CI (99.9%): [1224.756, 1271.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.178 ±(99.9%) 2.597 MB/sec [Average]
[info]   (min, avg, max) = (662.255, 663.178, 663.861), stdev = 0.674
[info]   CI (99.9%): [660.581, 665.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1236.141 ±(99.9%) 32.879 B/op [Average]
[info]   (min, avg, max) = (1229.041, 1236.141, 1247.750), stdev = 8.538
[info]   CI (99.9%): [1203.262, 1269.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.077), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398981.157 ops/s
[info] # Warmup Iteration   2: 556752.734 ops/s
[info] # Warmup Iteration   3: 674237.673 ops/s
[info] # Warmup Iteration   4: 685939.979 ops/s
[info] # Warmup Iteration   5: 685626.499 ops/s
[info] Iteration   1: 684474.787 ops/s
[info]                  ·gc.alloc.rate:               538.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          1237.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1537.816 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 684182.587 ops/s
[info]                  ·gc.alloc.rate:               566.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          1303.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1538.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 691394.718 ops/s
[info]                  ·gc.alloc.rate:      530.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 687037.414 ops/s
[info]                  ·gc.alloc.rate:               546.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          1251.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1532.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 688214.027 ops/s
[info]                  ·gc.alloc.rate:                   545.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              1247.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1530.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   687060.707 ±(99.9%) 11404.164 ops/s [Average]
[info]   (min, avg, max) = (684182.587, 687060.707, 691394.718), stdev = 2961.625
[info]   CI (99.9%): [675656.542, 698464.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   545.661 ±(99.9%) 52.040 MB/sec [Average]
[info]   (min, avg, max) = (530.670, 545.661, 566.974), stdev = 13.515
[info]   CI (99.9%): [493.621, 597.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1249.785 ±(99.9%) 133.546 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1249.785, 1303.763), stdev = 34.682
[info]   CI (99.9%): [1116.239, 1383.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.297 ±(99.9%) 1152.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.297, 669.193), stdev = 299.240
[info]   CI (99.9%): [≈ 0, 1687.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1227.841 ±(99.9%) 2643.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1227.841, 1538.546), stdev = 686.393
[info]   CI (99.9%): [≈ 0, 3870.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459075.043 ops/s
[info] # Warmup Iteration   2: 688795.044 ops/s
[info] # Warmup Iteration   3: 690986.207 ops/s
[info] # Warmup Iteration   4: 690502.142 ops/s
[info] # Warmup Iteration   5: 690514.606 ops/s
[info] Iteration   1: 690447.698 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 690309.798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 684700.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 691155.227 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 691065.897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   689535.761 ±(99.9%) 10506.252 ops/s [Average]
[info]   (min, avg, max) = (684700.185, 689535.761, 691155.227), stdev = 2728.440
[info]   CI (99.9%): [679029.509, 700042.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91037.873 ops/s
[info] # Warmup Iteration   2: 514304.079 ops/s
[info] # Warmup Iteration   3: 556704.864 ops/s
[info] # Warmup Iteration   4: 621073.042 ops/s
[info] # Warmup Iteration   5: 624308.339 ops/s
[info] Iteration   1: 628363.828 ops/s
[info]                  ·gc.alloc.rate:                   1552.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              3886.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3341.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 626449.860 ops/s
[info]                  ·gc.alloc.rate:                   1554.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              3903.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5040.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 625834.046 ops/s
[info]                  ·gc.alloc.rate:                   1554.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              3910.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3368.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 625791.999 ops/s
[info]                  ·gc.alloc.rate:                   1533.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3370.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 628032.247 ops/s
[info]                  ·gc.alloc.rate:                   1562.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              3915.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5041.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   626894.396 ±(99.9%) 4712.585 ops/s [Average]
[info]   (min, avg, max) = (625791.999, 626894.396, 628363.828), stdev = 1223.843
[info]   CI (99.9%): [622181.811, 631606.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1551.446 ±(99.9%) 41.858 MB/sec [Average]
[info]   (min, avg, max) = (1533.430, 1551.446, 1562.788), stdev = 10.870
[info]   CI (99.9%): [1509.589, 1593.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3894.743 ±(99.9%) 92.113 B/op [Average]
[info]   (min, avg, max) = (3856.661, 3894.743, 3915.950), stdev = 23.922
[info]   CI (99.9%): [3802.630, 3986.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.600 ±(99.9%) 1415.848 MB/sec [Average]
[info]   (min, avg, max) = (1334.411, 1606.600, 2011.987), stdev = 367.691
[info]   CI (99.9%): [190.751, 3022.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4032.807 ±(99.9%) 3544.866 B/op [Average]
[info]   (min, avg, max) = (3341.981, 4032.807, 5041.528), stdev = 920.590
[info]   CI (99.9%): [487.941, 7577.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 2.905 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.379, 1.728), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 3.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.953 ±(99.9%) 7.305 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.953, 4.345), stdev = 1.897
[info]   CI (99.9%): [≈ 0, 8.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 796.545 ops/s
[info] # Warmup Iteration   2: 7676.386 ops/s
[info] # Warmup Iteration   3: 10851.115 ops/s
[info] # Warmup Iteration   4: 12335.658 ops/s
[info] # Warmup Iteration   5: 12096.545 ops/s
[info] Iteration   1: 12140.221 ops/s
[info]                  ·gc.alloc.rate:                   1556.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              201739.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258214.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 11352.656 ops/s
[info]                  ·gc.alloc.rate:               1961.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          271919.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184228.016 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   3: 12101.675 ops/s
[info]                  ·gc.alloc.rate:                   1522.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              197958.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259025.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 783.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12059.356 ops/s
[info]                  ·gc.alloc.rate:                   1513.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              197450.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172806.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12193.788 ops/s
[info]                  ·gc.alloc.rate:                   1762.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              227431.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256383.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11969.539 ±(99.9%) 1341.510 ops/s [Average]
[info]   (min, avg, max) = (11352.656, 11969.539, 12193.788), stdev = 348.386
[info]   CI (99.9%): [10628.029, 13311.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1663.328 ±(99.9%) 752.148 MB/sec [Average]
[info]   (min, avg, max) = (1513.444, 1663.328, 1961.538), stdev = 195.330
[info]   CI (99.9%): [911.180, 2415.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   219299.835 ±(99.9%) 122922.192 B/op [Average]
[info]   (min, avg, max) = (197450.574, 219299.835, 271919.655), stdev = 31922.503
[info]   CI (99.9%): [96377.644, 342222.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1724.983 ±(99.9%) 1399.856 MB/sec [Average]
[info]   (min, avg, max) = (1324.552, 1724.983, 1992.157), stdev = 363.538
[info]   CI (99.9%): [325.127, 3124.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   226131.671 ±(99.9%) 168131.832 B/op [Average]
[info]   (min, avg, max) = (172806.855, 226131.671, 259025.301), stdev = 43663.303
[info]   CI (99.9%): [57999.840, 394263.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.264 ±(99.9%) 10.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.264, 6.027), stdev = 2.663
[info]   CI (99.9%): [≈ 0, 11.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   164.298 ±(99.9%) 1333.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 164.298, 783.691), stdev = 346.306
[info]   CI (99.9%): [≈ 0, 1497.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 15.000), stdev = 5.128
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1309.405 ops/s
[info] # Warmup Iteration   2: 7728.645 ops/s
[info] # Warmup Iteration   3: 12105.675 ops/s
[info] # Warmup Iteration   4: 12083.933 ops/s
[info] # Warmup Iteration   5: 11583.537 ops/s
[info] Iteration   1: 11903.552 ops/s
[info]                  ·gc.alloc.rate:                   1487.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              196673.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263002.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12151.599 ops/s
[info]                  ·gc.alloc.rate:                   1495.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              193648.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171426.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 12165.668 ops/s
[info]                  ·gc.alloc.rate:                   1491.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              192913.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171186.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.693 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12219.521 ops/s
[info]                  ·gc.alloc.rate:               1497.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          192805.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170558.754 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 11839.482 ops/s
[info]                  ·gc.alloc.rate:                   1701.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              226138.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264534.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12055.964 ±(99.9%) 661.442 ops/s [Average]
[info]   (min, avg, max) = (11839.482, 12055.964, 12219.521), stdev = 171.774
[info]   CI (99.9%): [11394.522, 12717.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1534.576 ±(99.9%) 359.013 MB/sec [Average]
[info]   (min, avg, max) = (1487.498, 1534.576, 1701.216), stdev = 93.235
[info]   CI (99.9%): [1175.563, 1893.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   200435.714 ±(99.9%) 55656.178 B/op [Average]
[info]   (min, avg, max) = (192805.435, 200435.714, 226138.089), stdev = 14453.733
[info]   CI (99.9%): [144779.535, 256091.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1590.212 ±(99.9%) 1403.977 MB/sec [Average]
[info]   (min, avg, max) = (1323.260, 1590.212, 1990.071), stdev = 364.608
[info]   CI (99.9%): [186.235, 2994.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   208141.887 ±(99.9%) 195551.263 B/op [Average]
[info]   (min, avg, max) = (170558.754, 208141.887, 264534.775), stdev = 50784.042
[info]   CI (99.9%): [12590.624, 403693.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.182 ±(99.9%) 4.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.182, 2.767), stdev = 1.220
[info]   CI (99.9%): [≈ 0, 6.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.449
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132727.267 ops/s
[info] # Warmup Iteration   2: 256458.152 ops/s
[info] # Warmup Iteration   3: 349517.988 ops/s
[info] # Warmup Iteration   4: 348093.096 ops/s
[info] # Warmup Iteration   5: 346295.118 ops/s
[info] Iteration   1: 349105.990 ops/s
[info]                  ·gc.alloc.rate:                   2323.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              10470.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9030.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 345431.203 ops/s
[info]                  ·gc.alloc.rate:                   2305.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              10501.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12140.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 353124.908 ops/s
[info]                  ·gc.alloc.rate:               2350.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          10476.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8914.569 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 349653.961 ops/s
[info]                  ·gc.alloc.rate:                   2368.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              10659.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12034.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 353413.958 ops/s
[info]                  ·gc.alloc.rate:               2380.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          10596.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8952.731 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   350146.004 ±(99.9%) 12640.801 ops/s [Average]
[info]   (min, avg, max) = (345431.203, 350146.004, 353413.958), stdev = 3282.776
[info]   CI (99.9%): [337505.203, 362786.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2345.594 ±(99.9%) 118.450 MB/sec [Average]
[info]   (min, avg, max) = (2305.792, 2345.594, 2380.012), stdev = 30.761
[info]   CI (99.9%): [2227.144, 2464.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10540.865 ±(99.9%) 321.238 B/op [Average]
[info]   (min, avg, max) = (10470.901, 10540.865, 10659.303), stdev = 83.424
[info]   CI (99.9%): [10219.627, 10862.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2270.852 ±(99.9%) 1402.140 MB/sec [Average]
[info]   (min, avg, max) = (2000.183, 2270.852, 2673.564), stdev = 364.131
[info]   CI (99.9%): [868.712, 3672.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10214.632 ±(99.9%) 6587.519 B/op [Average]
[info]   (min, avg, max) = (8914.569, 10214.632, 12140.969), stdev = 1710.758
[info]   CI (99.9%): [3627.113, 16802.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.196 ±(99.9%) 1.553 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.916), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.883 ±(99.9%) 6.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.129), stdev = 1.817
[info]   CI (99.9%): [≈ 0, 7.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 616.582 ops/s
[info] # Warmup Iteration   2: 3884.773 ops/s
[info] # Warmup Iteration   3: 8877.797 ops/s
[info] # Warmup Iteration   4: 10011.068 ops/s
[info] # Warmup Iteration   5: 10080.627 ops/s
[info] Iteration   1: 10092.477 ops/s
[info]                  ·gc.alloc.rate:               1762.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          274757.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 206775.364 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 10052.486 ops/s
[info]                  ·gc.alloc.rate:                   1765.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              276332.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311683.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9868.611 ops/s
[info]                  ·gc.alloc.rate:                   1771.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              282432.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318365.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 10210.330 ops/s
[info]                  ·gc.alloc.rate:                   1772.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              273136.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205464.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10134.997 ops/s
[info]                  ·gc.alloc.rate:                   1764.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              274087.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310631.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   10071.780 ±(99.9%) 491.883 ops/s [Average]
[info]   (min, avg, max) = (9868.611, 10071.780, 10210.330), stdev = 127.740
[info]   CI (99.9%): [9579.897, 10563.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1767.165 ±(99.9%) 17.090 MB/sec [Average]
[info]   (min, avg, max) = (1762.061, 1767.165, 1772.228), stdev = 4.438
[info]   CI (99.9%): [1750.075, 1784.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   276149.309 ±(99.9%) 14250.354 B/op [Average]
[info]   (min, avg, max) = (273136.895, 276149.309, 282432.988), stdev = 3700.772
[info]   CI (99.9%): [261898.956, 290399.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1729.454 ±(99.9%) 1405.597 MB/sec [Average]
[info]   (min, avg, max) = (1326.083, 1729.454, 2000.300), stdev = 365.029
[info]   CI (99.9%): [323.857, 3135.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   270584.056 ±(99.9%) 226895.598 B/op [Average]
[info]   (min, avg, max) = (205464.216, 270584.056, 318365.137), stdev = 58924.066
[info]   CI (99.9%): [43688.459, 497479.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 2.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 1.353), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 2.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66.884 ±(99.9%) 362.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.884, 208.489), stdev = 94.058
[info]   CI (99.9%): [≈ 0, 429.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5541.237 ops/s
[info] # Warmup Iteration   2: 17142.620 ops/s
[info] # Warmup Iteration   3: 27798.970 ops/s
[info] # Warmup Iteration   4: 28236.646 ops/s
[info] # Warmup Iteration   5: 27805.842 ops/s
[info] Iteration   1: 26296.361 ops/s
[info]                  ·gc.alloc.rate:                   1589.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              95116.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1960.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117296.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         30.000 ms
[info] Iteration   2: 25747.076 ops/s
[info]                  ·gc.alloc.rate:               1706.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          104315.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1301.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79525.802 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     16.000 ms
[info] Iteration   3: 27446.189 ops/s
[info]                  ·gc.alloc.rate:                   1348.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              77327.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1301.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74619.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 27419.379 ops/s
[info]                  ·gc.alloc.rate:                   1334.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              76612.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74750.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 27587.933 ops/s
[info]                  ·gc.alloc.rate:                   1364.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              77816.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74311.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26899.388 ±(99.9%) 3184.032 ops/s [Average]
[info]   (min, avg, max) = (25747.076, 26899.388, 27587.933), stdev = 826.883
[info]   CI (99.9%): [23715.356, 30083.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1468.933 ±(99.9%) 651.769 MB/sec [Average]
[info]   (min, avg, max) = (1334.734, 1468.933, 1706.977), stdev = 169.262
[info]   CI (99.9%): [817.164, 2120.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   86237.619 ±(99.9%) 49033.136 B/op [Average]
[info]   (min, avg, max) = (76612.006, 86237.619, 104315.482), stdev = 12733.750
[info]   CI (99.9%): [37204.483, 135270.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1433.724 ±(99.9%) 1133.710 MB/sec [Average]
[info]   (min, avg, max) = (1301.328, 1433.724, 1960.399), stdev = 294.421
[info]   CI (99.9%): [300.013, 2567.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   84101.110 ±(99.9%) 71937.159 B/op [Average]
[info]   (min, avg, max) = (74311.977, 84101.110, 117296.981), stdev = 18681.852
[info]   CI (99.9%): [12163.951, 156038.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.443 ±(99.9%) 5.889 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.443, 3.669), stdev = 1.529
[info]   CI (99.9%): [≈ 0, 8.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   141.792 ±(99.9%) 345.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 141.792, 219.064), stdev = 89.634
[info]   CI (99.9%): [≈ 0, 486.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   81.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 16.200, 30.000), stdev = 8.258
[info]   CI (99.9%): [81.000, 81.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6129.576 ops/s
[info] # Warmup Iteration   2: 21104.090 ops/s
[info] # Warmup Iteration   3: 29833.682 ops/s
[info] # Warmup Iteration   4: 30222.577 ops/s
[info] # Warmup Iteration   5: 29983.930 ops/s
[info] Iteration   1: 28997.345 ops/s
[info]                  ·gc.alloc.rate:                   1409.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              76521.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71804.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 31766.312 ops/s
[info]                  ·gc.alloc.rate:               1214.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          60121.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65647.393 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 32328.644 ops/s
[info]                  ·gc.alloc.rate:                   1217.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              59250.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32268.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 32329.654 ops/s
[info]                  ·gc.alloc.rate:                   1220.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              59429.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64471.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 32343.742 ops/s
[info]                  ·gc.alloc.rate:                   1234.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              60051.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64344.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   31553.139 ±(99.9%) 5582.424 ops/s [Average]
[info]   (min, avg, max) = (28997.345, 31553.139, 32343.742), stdev = 1449.738
[info]   CI (99.9%): [25970.715, 37135.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1259.282 ±(99.9%) 325.675 MB/sec [Average]
[info]   (min, avg, max) = (1214.066, 1259.282, 1409.965), stdev = 84.577
[info]   CI (99.9%): [933.607, 1584.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   63075.030 ±(99.9%) 28982.229 B/op [Average]
[info]   (min, avg, max) = (59250.345, 63075.030, 76521.894), stdev = 7526.593
[info]   CI (99.9%): [34092.801, 92057.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.699 ±(99.9%) 1138.064 MB/sec [Average]
[info]   (min, avg, max) = (663.006, 1191.699, 1325.648), stdev = 295.551
[info]   CI (99.9%): [53.636, 2329.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   59707.358 ±(99.9%) 60232.955 B/op [Average]
[info]   (min, avg, max) = (32268.367, 59707.358, 71804.425), stdev = 15642.307
[info]   CI (99.9%): [≈ 0, 119940.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.588 ±(99.9%) 6.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.588, 3.293), stdev = 1.619
[info]   CI (99.9%): [≈ 0, 7.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80.961 ±(99.9%) 323.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.961, 178.698), stdev = 83.909
[info]   CI (99.9%): [≈ 0, 404.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 3.286
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317710.293 ops/s
[info] # Warmup Iteration   2: 738666.862 ops/s
[info] # Warmup Iteration   3: 792703.900 ops/s
[info] # Warmup Iteration   4: 778125.389 ops/s
[info] # Warmup Iteration   5: 773721.629 ops/s
[info] Iteration   1: 792042.261 ops/s
[info]                  ·gc.alloc.rate:                   1474.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              2929.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2661.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 796553.371 ops/s
[info]                  ·gc.alloc.rate:               1477.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          2919.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2648.185 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 805565.341 ops/s
[info]                  ·gc.alloc.rate:                   1481.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              2895.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2621.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 808468.201 ops/s
[info]                  ·gc.alloc.rate:                   1498.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              2917.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2603.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 808000.490 ops/s
[info]                  ·gc.alloc.rate:               1511.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          2943.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2602.869 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   802125.933 ±(99.9%) 28511.554 ops/s [Average]
[info]   (min, avg, max) = (792042.261, 802125.933, 808468.201), stdev = 7404.360
[info]   CI (99.9%): [773614.379, 830637.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1488.716 ±(99.9%) 60.669 MB/sec [Average]
[info]   (min, avg, max) = (1474.144, 1488.716, 1511.397), stdev = 15.756
[info]   CI (99.9%): [1428.046, 1549.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2920.892 ±(99.9%) 68.758 B/op [Average]
[info]   (min, avg, max) = (2895.016, 2920.892, 2943.736), stdev = 17.856
[info]   CI (99.9%): [2852.133, 2989.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.153 ±(99.9%) 8.212 MB/sec [Average]
[info]   (min, avg, max) = (1336.386, 1339.153, 1341.654), stdev = 2.133
[info]   CI (99.9%): [1330.941, 1347.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2627.628 ±(99.9%) 102.157 B/op [Average]
[info]   (min, avg, max) = (2602.869, 2627.628, 2661.952), stdev = 26.530
[info]   CI (99.9%): [2525.471, 2729.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.801 ±(99.9%) 6.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.801, 3.979), stdev = 1.776
[info]   CI (99.9%): [≈ 0, 7.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.566 ±(99.9%) 13.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.566, 7.773), stdev = 3.470
[info]   CI (99.9%): [≈ 0, 14.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458660.656 ops/s
[info] # Warmup Iteration   2: 838099.135 ops/s
[info] # Warmup Iteration   3: 932818.696 ops/s
[info] # Warmup Iteration   4: 932141.728 ops/s
[info] # Warmup Iteration   5: 932750.612 ops/s
[info] Iteration   1: 932793.512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 886734.179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 930392.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 930259.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 930537.232 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   922143.409 ±(99.9%) 76326.693 ops/s [Average]
[info]   (min, avg, max) = (886734.179, 922143.409, 932793.512), stdev = 19821.800
[info]   CI (99.9%): [845816.716, 998470.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5796.850 ops/s
[info] # Warmup Iteration   2: 20082.323 ops/s
[info] # Warmup Iteration   3: 27144.104 ops/s
[info] # Warmup Iteration   4: 31895.918 ops/s
[info] # Warmup Iteration   5: 31869.119 ops/s
[info] Iteration   1: 30049.390 ops/s
[info]                  ·gc.alloc.rate:                   1642.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              85995.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1963.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102802.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 33265.538 ops/s
[info]                  ·gc.alloc.rate:                   1380.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              65322.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1300.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61521.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 33450.587 ops/s
[info]                  ·gc.alloc.rate:                   1393.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              65531.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1294.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60867.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 33264.131 ops/s
[info]                  ·gc.alloc.rate:                   1384.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              65486.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61019.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 33605.099 ops/s
[info]                  ·gc.alloc.rate:                   1406.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              65884.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60399.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   32726.949 ±(99.9%) 5789.672 ops/s [Average]
[info]   (min, avg, max) = (30049.390, 32726.949, 33605.099), stdev = 1503.559
[info]   CI (99.9%): [26937.277, 38516.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1441.509 ±(99.9%) 433.754 MB/sec [Average]
[info]   (min, avg, max) = (1380.853, 1441.509, 1642.197), stdev = 112.645
[info]   CI (99.9%): [1007.755, 1875.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   69644.082 ±(99.9%) 35206.249 B/op [Average]
[info]   (min, avg, max) = (65322.112, 69644.082, 85995.385), stdev = 9142.951
[info]   CI (99.9%): [34437.832, 104850.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1427.488 ±(99.9%) 1153.183 MB/sec [Average]
[info]   (min, avg, max) = (1289.678, 1427.488, 1963.153), stdev = 299.478
[info]   CI (99.9%): [274.305, 2580.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69322.200 ±(99.9%) 72085.547 B/op [Average]
[info]   (min, avg, max) = (60399.974, 69322.200, 102802.595), stdev = 18720.388
[info]   CI (99.9%): [≈ 0, 141407.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.268 ±(99.9%) 7.276 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.268, 4.565), stdev = 1.889
[info]   CI (99.9%): [≈ 0, 8.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60.624 ±(99.9%) 340.114 B/op [Average]
[info]   (min, avg, max) = (0.985, 60.624, 213.780), stdev = 88.326
[info]   CI (99.9%): [≈ 0, 400.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   81.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 16.200, 21.000), stdev = 2.775
[info]   CI (99.9%): [81.000, 81.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2849.410 ops/s
[info] # Warmup Iteration   2: 25881.349 ops/s
[info] # Warmup Iteration   3: 34175.573 ops/s
[info] # Warmup Iteration   4: 50490.290 ops/s
[info] # Warmup Iteration   5: 44600.562 ops/s
[info] Iteration   1: 45537.877 ops/s
[info]                  ·gc.alloc.rate:                   2472.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              85426.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2526.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87283.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 515.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         46.000 ms
[info] Iteration   2: 29415.893 ops/s
[info]                  ·gc.alloc.rate:                   1253.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              67061.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1249.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66828.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 511.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 45982.757 ops/s
[info]                  ·gc.alloc.rate:                   1938.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              66332.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1875.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64182.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 45710.581 ops/s
[info]                  ·gc.alloc.rate:                   1925.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              66279.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1878.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64654.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 45775.949 ops/s
[info]                  ·gc.alloc.rate:                   1917.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              65933.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1887.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64907.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   42484.611 ±(99.9%) 28138.081 ops/s [Average]
[info]   (min, avg, max) = (29415.893, 42484.611, 45982.757), stdev = 7307.370
[info]   CI (99.9%): [14346.531, 70622.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1901.683 ±(99.9%) 1665.558 MB/sec [Average]
[info]   (min, avg, max) = (1253.626, 1901.683, 2472.821), stdev = 432.540
[info]   CI (99.9%): [236.125, 3567.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70206.840 ±(99.9%) 32800.505 B/op [Average]
[info]   (min, avg, max) = (65933.180, 70206.840, 85426.908), stdev = 8518.187
[info]   CI (99.9%): [37406.335, 103007.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1883.579 ±(99.9%) 1739.090 MB/sec [Average]
[info]   (min, avg, max) = (1249.255, 1883.579, 2526.562), stdev = 451.636
[info]   CI (99.9%): [144.488, 3622.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69571.151 ±(99.9%) 38323.810 B/op [Average]
[info]   (min, avg, max) = (64182.245, 69571.151, 87283.482), stdev = 9952.572
[info]   CI (99.9%): [31247.341, 107894.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   5.763 ±(99.9%) 24.650 MB/sec [Average]
[info]   (min, avg, max) = (0.073, 5.763, 14.909), stdev = 6.401
[info]   CI (99.9%): [≈ 0, 30.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   235.180 ±(99.9%) 999.499 B/op [Average]
[info]   (min, avg, max) = (2.487, 235.180, 515.053), stdev = 259.567
[info]   CI (99.9%): [≈ 0, 1234.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   97.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 19.400, 46.000), stdev = 15.110
[info]   CI (99.9%): [97.000, 97.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2862.858 ops/s
[info] # Warmup Iteration   2: 29517.057 ops/s
[info] # Warmup Iteration   3: 42907.944 ops/s
[info] # Warmup Iteration   4: 50098.772 ops/s
[info] # Warmup Iteration   5: 38430.561 ops/s
[info] Iteration   1: 43451.745 ops/s
[info]                  ·gc.alloc.rate:                   1502.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              54409.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47592.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 42370.529 ops/s
[info]                  ·gc.alloc.rate:                   1468.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              54521.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48819.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 42290.029 ops/s
[info]                  ·gc.alloc.rate:                   1460.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              54362.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49010.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 43128.364 ops/s
[info]                  ·gc.alloc.rate:                   1512.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              55178.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72207.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 43441.313 ops/s
[info]                  ·gc.alloc.rate:                   1496.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              54227.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47856.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   42936.396 ±(99.9%) 2191.295 ops/s [Average]
[info]   (min, avg, max) = (42290.029, 42936.396, 43451.745), stdev = 569.072
[info]   CI (99.9%): [40745.101, 45127.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1488.020 ±(99.9%) 86.170 MB/sec [Average]
[info]   (min, avg, max) = (1460.809, 1488.020, 1512.335), stdev = 22.378
[info]   CI (99.9%): [1401.850, 1574.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54539.977 ±(99.9%) 1433.431 B/op [Average]
[info]   (min, avg, max) = (54227.754, 54539.977, 55178.743), stdev = 372.257
[info]   CI (99.9%): [53106.546, 55973.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1449.082 ±(99.9%) 1140.837 MB/sec [Average]
[info]   (min, avg, max) = (1313.889, 1449.082, 1979.046), stdev = 296.272
[info]   CI (99.9%): [308.245, 2589.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   53097.245 ±(99.9%) 41201.470 B/op [Average]
[info]   (min, avg, max) = (47592.355, 53097.245, 72207.038), stdev = 10699.891
[info]   CI (99.9%): [11895.775, 94298.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.916 ±(99.9%) 5.548 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.916, 3.370), stdev = 1.441
[info]   CI (99.9%): [≈ 0, 6.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   33.386 ±(99.9%) 201.045 B/op [Average]
[info]   (min, avg, max) = (0.754, 33.386, 122.081), stdev = 52.211
[info]   CI (99.9%): [≈ 0, 234.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.000, 12.000), stdev = 1.581
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196520.652 ops/s
[info] # Warmup Iteration   2: 505374.635 ops/s
[info] # Warmup Iteration   3: 536731.585 ops/s
[info] # Warmup Iteration   4: 543001.846 ops/s
[info] # Warmup Iteration   5: 545110.123 ops/s
[info] Iteration   1: 551863.022 ops/s
[info]                  ·gc.alloc.rate:                   1473.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3824.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 537913.313 ops/s
[info]                  ·gc.alloc.rate:                   1440.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              4214.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3925.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 554083.430 ops/s
[info]                  ·gc.alloc.rate:                   1483.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              4214.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3812.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 552637.862 ops/s
[info]                  ·gc.alloc.rate:                   1477.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              4207.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3813.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 553725.978 ops/s
[info]                  ·gc.alloc.rate:                   1496.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              4250.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5701.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   550044.721 ±(99.9%) 26332.921 ops/s [Average]
[info]   (min, avg, max) = (537913.313, 550044.721, 554083.430), stdev = 6838.576
[info]   CI (99.9%): [523711.800, 576377.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1474.256 ±(99.9%) 79.463 MB/sec [Average]
[info]   (min, avg, max) = (1440.714, 1474.256, 1496.030), stdev = 20.636
[info]   CI (99.9%): [1394.793, 1553.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4217.602 ±(99.9%) 75.079 B/op [Average]
[info]   (min, avg, max) = (4200.352, 4217.602, 4250.868), stdev = 19.498
[info]   CI (99.9%): [4142.523, 4292.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1474.172 ±(99.9%) 1145.636 MB/sec [Average]
[info]   (min, avg, max) = (1339.088, 1474.172, 2006.384), stdev = 297.518
[info]   CI (99.9%): [328.536, 2619.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4215.303 ±(99.9%) 3203.265 B/op [Average]
[info]   (min, avg, max) = (3812.694, 4215.303, 5701.005), stdev = 831.878
[info]   CI (99.9%): [1012.038, 7418.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.410 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.783, 3.761), stdev = 1.665
[info]   CI (99.9%): [≈ 0, 7.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.224 ±(99.9%) 18.203 B/op [Average]
[info]   (min, avg, max) = (0.059, 2.224, 10.680), stdev = 4.727
[info]   CI (99.9%): [≈ 0, 20.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 661.414 ops/s
[info] # Warmup Iteration   2: 11565.436 ops/s
[info] # Warmup Iteration   3: 21791.230 ops/s
[info] # Warmup Iteration   4: 22390.813 ops/s
[info] # Warmup Iteration   5: 21422.881 ops/s
[info] Iteration   1: 21466.652 ops/s
[info]                  ·gc.alloc.rate:                   2105.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              154385.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2652.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194501.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 20528.377 ops/s
[info]                  ·gc.alloc.rate:                   2267.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              173766.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153032.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 22877.459 ops/s
[info]                  ·gc.alloc.rate:                   2087.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              143589.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137344.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22583.181 ops/s
[info]                  ·gc.alloc.rate:               2056.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          143301.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139172.607 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 22894.560 ops/s
[info]                  ·gc.alloc.rate:                   2075.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              142657.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137528.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.431 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   22070.046 ±(99.9%) 4009.052 ops/s [Average]
[info]   (min, avg, max) = (20528.377, 22070.046, 22894.560), stdev = 1041.138
[info]   CI (99.9%): [18060.994, 26079.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2118.639 ±(99.9%) 327.408 MB/sec [Average]
[info]   (min, avg, max) = (2056.950, 2118.639, 2267.399), stdev = 85.027
[info]   CI (99.9%): [1791.231, 2446.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   151540.247 ±(99.9%) 51377.110 B/op [Average]
[info]   (min, avg, max) = (142657.863, 151540.247, 173766.674), stdev = 13342.472
[info]   CI (99.9%): [100163.137, 202917.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2129.024 ±(99.9%) 1127.724 MB/sec [Average]
[info]   (min, avg, max) = (1996.510, 2129.024, 2652.908), stdev = 292.866
[info]   CI (99.9%): [1001.299, 3256.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   152315.916 ±(99.9%) 94237.045 B/op [Average]
[info]   (min, avg, max) = (137344.621, 152315.916, 194501.813), stdev = 24473.061
[info]   CI (99.9%): [58078.871, 246552.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.857 ±(99.9%) 6.226 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.857, 3.722), stdev = 1.617
[info]   CI (99.9%): [≈ 0, 7.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64.808 ±(99.9%) 478.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.808, 285.280), stdev = 124.168
[info]   CI (99.9%): [≈ 0, 542.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.510
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15466.392 ops/s
[info] # Warmup Iteration   2: 62905.362 ops/s
[info] # Warmup Iteration   3: 67876.704 ops/s
[info] # Warmup Iteration   4: 71564.364 ops/s
[info] # Warmup Iteration   5: 71274.154 ops/s
[info] Iteration   1: 72094.689 ops/s
[info]                  ·gc.alloc.rate:                   1896.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              41402.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28995.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 72601.227 ops/s
[info]                  ·gc.alloc.rate:                   1915.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              41520.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43160.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 71281.580 ops/s
[info]                  ·gc.alloc.rate:                   1877.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              41448.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43903.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.491 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 72179.298 ops/s
[info]                  ·gc.alloc.rate:                   1919.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              41840.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43329.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 72339.383 ops/s
[info]                  ·gc.alloc.rate:               1913.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          41623.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1987.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43225.082 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   72099.235 ±(99.9%) 1910.495 ops/s [Average]
[info]   (min, avg, max) = (71281.580, 72099.235, 72601.227), stdev = 496.150
[info]   CI (99.9%): [70188.740, 74009.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1904.419 ±(99.9%) 67.448 MB/sec [Average]
[info]   (min, avg, max) = (1877.253, 1904.419, 1919.206), stdev = 17.516
[info]   CI (99.9%): [1836.970, 1971.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41567.069 ±(99.9%) 669.532 B/op [Average]
[info]   (min, avg, max) = (41402.617, 41567.069, 41840.072), stdev = 173.875
[info]   CI (99.9%): [40897.536, 42236.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1856.519 ±(99.9%) 1137.272 MB/sec [Average]
[info]   (min, avg, max) = (1328.196, 1856.519, 1991.277), stdev = 295.346
[info]   CI (99.9%): [719.247, 2993.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40522.961 ±(99.9%) 24838.898 B/op [Average]
[info]   (min, avg, max) = (28995.833, 40522.961, 43903.935), stdev = 6450.583
[info]   CI (99.9%): [15684.062, 65361.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.396 ±(99.9%) 4.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.396, 2.948), stdev = 1.177
[info]   CI (99.9%): [≈ 0, 5.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30.448 ±(99.9%) 98.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.448, 64.358), stdev = 25.652
[info]   CI (99.9%): [≈ 0, 129.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 12.000), stdev = 3.209
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41929.110 ops/s
[info] # Warmup Iteration   2: 156222.296 ops/s
[info] # Warmup Iteration   3: 187902.402 ops/s
[info] # Warmup Iteration   4: 209416.581 ops/s
[info] # Warmup Iteration   5: 209016.098 ops/s
[info] Iteration   1: 208999.792 ops/s
[info]                  ·gc.alloc.rate:                   1626.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              12249.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10007.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 209589.940 ops/s
[info]                  ·gc.alloc.rate:                   1628.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              12225.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9987.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 208314.908 ops/s
[info]                  ·gc.alloc.rate:                   1634.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              12347.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15096.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 209344.438 ops/s
[info]                  ·gc.alloc.rate:                   1627.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              12230.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10036.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 209753.312 ops/s
[info]                  ·gc.alloc.rate:                   1629.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              12229.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10031.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   209200.478 ±(99.9%) 2197.348 ops/s [Average]
[info]   (min, avg, max) = (208314.908, 209200.478, 209753.312), stdev = 570.644
[info]   CI (99.9%): [207003.130, 211397.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1629.500 ±(99.9%) 12.137 MB/sec [Average]
[info]   (min, avg, max) = (1626.556, 1629.500, 1634.635), stdev = 3.152
[info]   CI (99.9%): [1617.363, 1641.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12256.403 ±(99.9%) 198.704 B/op [Average]
[info]   (min, avg, max) = (12225.609, 12256.403, 12347.281), stdev = 51.603
[info]   CI (99.9%): [12057.699, 12455.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1466.147 ±(99.9%) 1146.297 MB/sec [Average]
[info]   (min, avg, max) = (1328.909, 1466.147, 1998.637), stdev = 297.690
[info]   CI (99.9%): [319.850, 2612.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11031.949 ±(99.9%) 8750.199 B/op [Average]
[info]   (min, avg, max) = (9987.081, 11031.949, 15096.785), stdev = 2272.399
[info]   CI (99.9%): [2281.750, 19782.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.234 ±(99.9%) 1.705 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.234, 1.026), stdev = 0.443
[info]   CI (99.9%): [≈ 0, 1.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.758 ±(99.9%) 12.788 B/op [Average]
[info]   (min, avg, max) = (0.157, 1.758, 7.694), stdev = 3.321
[info]   CI (99.9%): [≈ 0, 14.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484406.937 ops/s
[info] # Warmup Iteration   2: 747001.394 ops/s
[info] # Warmup Iteration   3: 872515.881 ops/s
[info] # Warmup Iteration   4: 859098.889 ops/s
[info] # Warmup Iteration   5: 850437.420 ops/s
[info] Iteration   1: 858862.459 ops/s
[info]                  ·gc.alloc.rate:               935.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          1714.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1226.826 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 855481.747 ops/s
[info]                  ·gc.alloc.rate:               940.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          1729.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1232.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 823563.614 ops/s
[info]                  ·gc.alloc.rate:                   926.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              1771.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2561.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 844449.248 ops/s
[info]                  ·gc.alloc.rate:               921.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          1716.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1248.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 842382.538 ops/s
[info]                  ·gc.alloc.rate:               929.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          1735.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1253.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   844947.921 ±(99.9%) 53380.201 ops/s [Average]
[info]   (min, avg, max) = (823563.614, 844947.921, 858862.459), stdev = 13862.669
[info]   CI (99.9%): [791567.720, 898328.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   930.683 ±(99.9%) 29.014 MB/sec [Average]
[info]   (min, avg, max) = (921.199, 930.683, 940.581), stdev = 7.535
[info]   CI (99.9%): [901.670, 959.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1733.438 ±(99.9%) 88.374 B/op [Average]
[info]   (min, avg, max) = (1714.277, 1733.438, 1771.108), stdev = 22.951
[info]   CI (99.9%): [1645.064, 1821.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.350 ±(99.9%) 1154.304 MB/sec [Average]
[info]   (min, avg, max) = (669.480, 804.350, 1340.592), stdev = 299.769
[info]   CI (99.9%): [≈ 0, 1958.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1504.677 ±(99.9%) 2275.181 B/op [Average]
[info]   (min, avg, max) = (1226.826, 1504.677, 2561.452), stdev = 590.857
[info]   CI (99.9%): [≈ 0, 3779.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 737949.775 ops/s
[info] # Warmup Iteration   2: 894131.966 ops/s
[info] # Warmup Iteration   3: 892609.370 ops/s
[info] # Warmup Iteration   4: 911960.640 ops/s
[info] # Warmup Iteration   5: 911846.418 ops/s
[info] Iteration   1: 913435.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 912131.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 912267.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 899274.265 ops/s
[info]                  ·gc.alloc.rate:      5.485 MB/sec
[info]                  ·gc.alloc.rate.norm: 9.600 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 912453.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   909912.361 ±(99.9%) 22983.887 ops/s [Average]
[info]   (min, avg, max) = (899274.265, 909912.361, 913435.690), stdev = 5968.842
[info]   CI (99.9%): [886928.474, 932896.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.097 ±(99.9%) 9.445 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.097, 5.485), stdev = 2.453
[info]   CI (99.9%): [≈ 0, 10.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.920 ±(99.9%) 16.530 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.920, 9.600), stdev = 4.293
[info]   CI (99.9%): [≈ 0, 18.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14543.445 ops/s
[info] # Warmup Iteration   2: 72997.028 ops/s
[info] # Warmup Iteration   3: 81542.672 ops/s
[info] # Warmup Iteration   4: 91161.463 ops/s
[info] # Warmup Iteration   5: 91933.188 ops/s
[info] Iteration   1: 92023.323 ops/s
[info]                  ·gc.alloc.rate:                   1929.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              33002.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34190.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 93291.879 ops/s
[info]                  ·gc.alloc.rate:                   1938.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              32691.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33680.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 92694.491 ops/s
[info]                  ·gc.alloc.rate:                   1934.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              32829.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33796.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 92438.737 ops/s
[info]                  ·gc.alloc.rate:               1927.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          32818.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1991.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33900.033 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 93275.166 ops/s
[info]                  ·gc.alloc.rate:               1944.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          32806.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22423.242 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   92744.719 ±(99.9%) 2106.726 ops/s [Average]
[info]   (min, avg, max) = (92023.323, 92744.719, 93291.879), stdev = 547.110
[info]   CI (99.9%): [90637.993, 94851.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1934.825 ±(99.9%) 25.361 MB/sec [Average]
[info]   (min, avg, max) = (1927.987, 1934.825, 1944.263), stdev = 6.586
[info]   CI (99.9%): [1909.464, 1960.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32829.585 ±(99.9%) 429.783 B/op [Average]
[info]   (min, avg, max) = (32691.026, 32829.585, 33002.686), stdev = 111.613
[info]   CI (99.9%): [32399.802, 33259.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1861.477 ±(99.9%) 1146.448 MB/sec [Average]
[info]   (min, avg, max) = (1328.917, 1861.477, 1999.049), stdev = 297.729
[info]   CI (99.9%): [715.029, 3007.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31598.115 ±(99.9%) 19763.009 B/op [Average]
[info]   (min, avg, max) = (22423.242, 31598.115, 34190.343), stdev = 5132.391
[info]   CI (99.9%): [11835.106, 51361.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.998 ±(99.9%) 5.916 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.998, 3.596), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.010 ±(99.9%) 101.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.010, 61.498), stdev = 26.269
[info]   CI (99.9%): [≈ 0, 118.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.550
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2422.844 ops/s
[info] # Warmup Iteration   2: 10431.654 ops/s
[info] # Warmup Iteration   3: 18281.528 ops/s
[info] # Warmup Iteration   4: 18873.892 ops/s
[info] # Warmup Iteration   5: 17245.876 ops/s
[info] Iteration   1: 17221.534 ops/s
[info]                  ·gc.alloc.rate:                   1806.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              165076.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181449.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 18624.735 ops/s
[info]                  ·gc.alloc.rate:                   1764.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              149133.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111792.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17567.910 ops/s
[info]                  ·gc.alloc.rate:                   1871.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              167578.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177378.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17592.860 ops/s
[info]                  ·gc.alloc.rate:                   1679.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              150179.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177305.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18715.135 ops/s
[info]                  ·gc.alloc.rate:                   1634.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              137429.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111243.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17944.435 ±(99.9%) 2615.002 ops/s [Average]
[info]   (min, avg, max) = (17221.534, 17944.435, 18715.135), stdev = 679.108
[info]   CI (99.9%): [15329.433, 20559.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1751.258 ±(99.9%) 367.907 MB/sec [Average]
[info]   (min, avg, max) = (1634.329, 1751.258, 1871.332), stdev = 95.544
[info]   CI (99.9%): [1383.351, 2119.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   153879.352 ±(99.9%) 47934.327 B/op [Average]
[info]   (min, avg, max) = (137429.579, 153879.352, 167578.000), stdev = 12448.393
[info]   CI (99.9%): [105945.025, 201813.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1718.979 ±(99.9%) 1392.091 MB/sec [Average]
[info]   (min, avg, max) = (1322.917, 1718.979, 1985.666), stdev = 361.522
[info]   CI (99.9%): [326.888, 3111.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   151833.670 ±(99.9%) 141864.775 B/op [Average]
[info]   (min, avg, max) = (111243.159, 151833.670, 181449.185), stdev = 36841.832
[info]   CI (99.9%): [9968.895, 293698.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.161 ±(99.9%) 7.460 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.161, 4.234), stdev = 1.937
[info]   CI (99.9%): [≈ 0, 9.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   190.881 ±(99.9%) 657.956 B/op [Average]
[info]   (min, avg, max) = (1.750, 190.881, 386.921), stdev = 170.869
[info]   CI (99.9%): [≈ 0, 848.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 20.000), stdev = 6.693
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1740.371 ops/s
[info] # Warmup Iteration   2: 9760.377 ops/s
[info] # Warmup Iteration   3: 19187.590 ops/s
[info] # Warmup Iteration   4: 18937.714 ops/s
[info] # Warmup Iteration   5: 19338.069 ops/s
[info] Iteration   1: 19104.756 ops/s
[info]                  ·gc.alloc.rate:               1558.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          128326.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164464.218 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 18741.563 ops/s
[info]                  ·gc.alloc.rate:               1700.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          142793.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111933.880 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 18127.778 ops/s
[info]                  ·gc.alloc.rate:                   1658.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              143979.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173731.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 19334.484 ops/s
[info]                  ·gc.alloc.rate:                   1543.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              125675.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108495.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 19363.576 ops/s
[info]                  ·gc.alloc.rate:                   1553.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              126295.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108068.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18934.432 ±(99.9%) 1983.273 ops/s [Average]
[info]   (min, avg, max) = (18127.778, 18934.432, 19363.576), stdev = 515.050
[info]   CI (99.9%): [16951.158, 20917.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1602.963 ±(99.9%) 275.494 MB/sec [Average]
[info]   (min, avg, max) = (1543.859, 1602.963, 1700.395), stdev = 71.545
[info]   CI (99.9%): [1327.468, 1878.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   133414.019 ±(99.9%) 35294.508 B/op [Average]
[info]   (min, avg, max) = (125675.112, 133414.019, 143979.537), stdev = 9165.872
[info]   CI (99.9%): [98119.511, 168708.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1598.716 ±(99.9%) 1407.594 MB/sec [Average]
[info]   (min, avg, max) = (1329.551, 1598.716, 2001.144), stdev = 365.548
[info]   CI (99.9%): [191.122, 3006.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   133338.693 ±(99.9%) 126461.437 B/op [Average]
[info]   (min, avg, max) = (108068.245, 133338.693, 173731.306), stdev = 32841.634
[info]   CI (99.9%): [6877.256, 259800.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.299 ±(99.9%) 7.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.299, 4.084), stdev = 1.862
[info]   CI (99.9%): [≈ 0, 8.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   108.347 ±(99.9%) 591.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108.347, 332.456), stdev = 153.490
[info]   CI (99.9%): [≈ 0, 699.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.194
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320479.055 ops/s
[info] # Warmup Iteration   2: 696138.581 ops/s
[info] # Warmup Iteration   3: 774818.244 ops/s
[info] # Warmup Iteration   4: 793958.181 ops/s
[info] # Warmup Iteration   5: 780788.893 ops/s
[info] Iteration   1: 801405.097 ops/s
[info]                  ·gc.alloc.rate:                   2127.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              4178.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3949.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 800806.843 ops/s
[info]                  ·gc.alloc.rate:                   2137.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              4199.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3941.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 803544.058 ops/s
[info]                  ·gc.alloc.rate:                   2158.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              4225.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3925.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 806924.389 ops/s
[info]                  ·gc.alloc.rate:                   2153.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              4199.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3912.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 798051.051 ops/s
[info]                  ·gc.alloc.rate:                   2157.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              4254.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3964.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   802146.288 ±(99.9%) 12756.395 ops/s [Average]
[info]   (min, avg, max) = (798051.051, 802146.288, 806924.389), stdev = 3312.795
[info]   CI (99.9%): [789389.893, 814902.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2146.856 ±(99.9%) 52.047 MB/sec [Average]
[info]   (min, avg, max) = (2127.836, 2146.856, 2158.292), stdev = 13.516
[info]   CI (99.9%): [2094.809, 2198.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4211.520 ±(99.9%) 111.886 B/op [Average]
[info]   (min, avg, max) = (4178.559, 4211.520, 4254.094), stdev = 29.056
[info]   CI (99.9%): [4099.633, 4323.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2007.762 ±(99.9%) 10.475 MB/sec [Average]
[info]   (min, avg, max) = (2005.229, 2007.762, 2011.156), stdev = 2.720
[info]   CI (99.9%): [1997.287, 2018.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3938.683 ±(99.9%) 78.111 B/op [Average]
[info]   (min, avg, max) = (3912.054, 3938.683, 3964.141), stdev = 20.285
[info]   CI (99.9%): [3860.572, 4016.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.790 ±(99.9%) 6.574 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.790, 3.843), stdev = 1.707
[info]   CI (99.9%): [≈ 0, 7.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.550 ±(99.9%) 12.910 B/op [Average]
[info]   (min, avg, max) = (0.041, 1.550, 7.548), stdev = 3.353
[info]   CI (99.9%): [≈ 0, 14.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 533.782 ops/s
[info] # Warmup Iteration   2: 9118.362 ops/s
[info] # Warmup Iteration   3: 13523.394 ops/s
[info] # Warmup Iteration   4: 14412.092 ops/s
[info] # Warmup Iteration   5: 14669.545 ops/s
[info] Iteration   1: 14249.557 ops/s
[info]                  ·gc.alloc.rate:                   2026.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              223812.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219434.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 14898.471 ops/s
[info]                  ·gc.alloc.rate:                   2030.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              214492.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210496.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.929 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14477.482 ops/s
[info]                  ·gc.alloc.rate:                   1969.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              214035.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217391.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14079.029 ops/s
[info]                  ·gc.alloc.rate:               2215.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          247592.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 224072.522 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 14300.927 ops/s
[info]                  ·gc.alloc.rate:                   1965.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              216344.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220249.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 647.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14401.093 ±(99.9%) 1202.274 ops/s [Average]
[info]   (min, avg, max) = (14079.029, 14401.093, 14898.471), stdev = 312.227
[info]   CI (99.9%): [13198.819, 15603.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2041.488 ±(99.9%) 391.768 MB/sec [Average]
[info]   (min, avg, max) = (1965.924, 2041.488, 2215.119), stdev = 101.741
[info]   CI (99.9%): [1649.719, 2433.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   223255.505 ±(99.9%) 54529.906 B/op [Average]
[info]   (min, avg, max) = (214035.333, 223255.505, 247592.597), stdev = 14161.243
[info]   CI (99.9%): [168725.599, 277785.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1997.180 ±(99.9%) 27.897 MB/sec [Average]
[info]   (min, avg, max) = (1986.884, 1997.180, 2004.694), stdev = 7.245
[info]   CI (99.9%): [1969.283, 2025.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   218328.735 ±(99.9%) 19265.622 B/op [Average]
[info]   (min, avg, max) = (210496.249, 218328.735, 224072.522), stdev = 5003.221
[info]   CI (99.9%): [199063.113, 237594.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.658 ±(99.9%) 9.615 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.658, 5.885), stdev = 2.497
[info]   CI (99.9%): [≈ 0, 11.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   180.633 ±(99.9%) 1057.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 180.633, 647.675), stdev = 274.605
[info]   CI (99.9%): [≈ 0, 1238.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7811.219 ops/s
[info] # Warmup Iteration   2: 28897.086 ops/s
[info] # Warmup Iteration   3: 47917.429 ops/s
[info] # Warmup Iteration   4: 45574.028 ops/s
[info] # Warmup Iteration   5: 45531.523 ops/s
[info] Iteration   1: 46675.399 ops/s
[info]                  ·gc.alloc.rate:                   1924.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              64886.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1942.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65477.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 48419.840 ops/s
[info]                  ·gc.alloc.rate:                   1701.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              55298.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1268.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41226.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 47693.336 ops/s
[info]                  ·gc.alloc.rate:                   1700.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              56109.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1909.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62990.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.865 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   4: 47478.823 ops/s
[info]                  ·gc.alloc.rate:                   1681.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              55736.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1277.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42362.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 47881.464 ops/s
[info]                  ·gc.alloc.rate:                   1699.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              55841.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1926.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63299.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.285 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   47629.772 ±(99.9%) 2454.473 ops/s [Average]
[info]   (min, avg, max) = (46675.399, 47629.772, 48419.840), stdev = 637.419
[info]   CI (99.9%): [45175.300, 50084.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1741.455 ±(99.9%) 395.374 MB/sec [Average]
[info]   (min, avg, max) = (1681.447, 1741.455, 1924.535), stdev = 102.677
[info]   CI (99.9%): [1346.081, 2136.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   57574.469 ±(99.9%) 15779.097 B/op [Average]
[info]   (min, avg, max) = (55298.495, 57574.469, 64886.151), stdev = 4097.781
[info]   CI (99.9%): [41795.372, 73353.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1664.768 ±(99.9%) 1377.053 MB/sec [Average]
[info]   (min, avg, max) = (1268.526, 1664.768, 1942.060), stdev = 357.616
[info]   CI (99.9%): [287.715, 3041.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   55071.208 ±(99.9%) 46840.838 B/op [Average]
[info]   (min, avg, max) = (41226.768, 55071.208, 65477.037), stdev = 12164.417
[info]   CI (99.9%): [8230.370, 101912.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.770 ±(99.9%) 8.199 MB/sec [Average]
[info]   (min, avg, max) = (0.168, 1.770, 4.756), stdev = 2.129
[info]   CI (99.9%): [≈ 0, 9.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58.730 ±(99.9%) 271.397 B/op [Average]
[info]   (min, avg, max) = (5.468, 58.730, 156.285), stdev = 70.481
[info]   CI (99.9%): [≈ 0, 330.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   104.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (15.000, 20.800, 28.000), stdev = 5.450
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8639.593 ops/s
[info] # Warmup Iteration   2: 39566.473 ops/s
[info] # Warmup Iteration   3: 44509.531 ops/s
[info] # Warmup Iteration   4: 50549.454 ops/s
[info] # Warmup Iteration   5: 55059.136 ops/s
[info] Iteration   1: 57093.434 ops/s
[info]                  ·gc.alloc.rate:                   1540.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              42454.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36210.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.822 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 57405.268 ops/s
[info]                  ·gc.alloc.rate:                   1544.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              42329.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36050.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 57384.549 ops/s
[info]                  ·gc.alloc.rate:                   1576.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              43232.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54025.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 58922.973 ops/s
[info]                  ·gc.alloc.rate:                   1589.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              42454.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35016.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 59054.932 ops/s
[info]                  ·gc.alloc.rate:                   1584.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              42226.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34882.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   57972.231 ±(99.9%) 3609.789 ops/s [Average]
[info]   (min, avg, max) = (57093.434, 57972.231, 59054.932), stdev = 937.451
[info]   CI (99.9%): [54362.442, 61582.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1567.239 ±(99.9%) 88.997 MB/sec [Average]
[info]   (min, avg, max) = (1540.307, 1567.239, 1589.630), stdev = 23.112
[info]   CI (99.9%): [1478.242, 1656.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42539.786 ±(99.9%) 1536.626 B/op [Average]
[info]   (min, avg, max) = (42226.808, 42539.786, 43232.948), stdev = 399.057
[info]   CI (99.9%): [41003.160, 44076.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1443.995 ±(99.9%) 1133.001 MB/sec [Average]
[info]   (min, avg, max) = (1309.210, 1443.995, 1970.324), stdev = 294.237
[info]   CI (99.9%): [310.995, 2576.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39237.212 ±(99.9%) 31915.640 B/op [Average]
[info]   (min, avg, max) = (34882.118, 39237.212, 54025.635), stdev = 8288.390
[info]   CI (99.9%): [7321.571, 71152.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.200 ±(99.9%) 6.128 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 2.200, 3.576), stdev = 1.592
[info]   CI (99.9%): [≈ 0, 8.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   60.277 ±(99.9%) 168.971 B/op [Average]
[info]   (min, avg, max) = (2.219, 60.277, 98.009), stdev = 43.881
[info]   CI (99.9%): [≈ 0, 229.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 13.000), stdev = 3.899
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585394.502 ops/s
[info] # Warmup Iteration   2: 991170.049 ops/s
[info] # Warmup Iteration   3: 1044736.091 ops/s
[info] # Warmup Iteration   4: 1038015.259 ops/s
[info] # Warmup Iteration   5: 1040921.956 ops/s
[info] Iteration   1: 1036726.992 ops/s
[info]                  ·gc.alloc.rate:               967.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          1468.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1016.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1030515.593 ops/s
[info]                  ·gc.alloc.rate:                   979.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              1495.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2047.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1036159.942 ops/s
[info]                  ·gc.alloc.rate:               960.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          1459.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1018.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1050511.217 ops/s
[info]                  ·gc.alloc.rate:                   981.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              1470.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1004.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1041129.602 ops/s
[info]                  ·gc.alloc.rate:               1000.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          1513.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2028.034 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1039008.669 ±(99.9%) 28703.484 ops/s [Average]
[info]   (min, avg, max) = (1030515.593, 1039008.669, 1050511.217), stdev = 7454.204
[info]   CI (99.9%): [1010305.186, 1067712.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   977.982 ±(99.9%) 59.511 MB/sec [Average]
[info]   (min, avg, max) = (960.952, 977.982, 1000.993), stdev = 15.455
[info]   CI (99.9%): [918.471, 1037.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1481.317 ±(99.9%) 85.464 B/op [Average]
[info]   (min, avg, max) = (1459.609, 1481.317, 1513.139), stdev = 22.195
[info]   CI (99.9%): [1395.853, 1566.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.598 ±(99.9%) 1414.618 MB/sec [Average]
[info]   (min, avg, max) = (669.797, 938.598, 1341.613), stdev = 367.372
[info]   CI (99.9%): [≈ 0, 2353.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1422.954 ±(99.9%) 2160.567 B/op [Average]
[info]   (min, avg, max) = (1004.464, 1422.954, 2047.020), stdev = 561.092
[info]   CI (99.9%): [≈ 0, 3583.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.032), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.408
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 536054.714 ops/s
[info] # Warmup Iteration   2: 1066657.516 ops/s
[info] # Warmup Iteration   3: 1115789.098 ops/s
[info] # Warmup Iteration   4: 1115745.860 ops/s
[info] # Warmup Iteration   5: 1114267.663 ops/s
[info] Iteration   1: 1115328.834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1113095.179 ops/s
[info]                  ·gc.alloc.rate:      0.736 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1110666.129 ops/s
[info]                  ·gc.alloc.rate:      0.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.170 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1116150.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1116167.084 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1114281.622 ±(99.9%) 9157.975 ops/s [Average]
[info]   (min, avg, max) = (1110666.129, 1114281.622, 1116167.084), stdev = 2378.297
[info]   CI (99.9%): [1105123.647, 1123439.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.312 ±(99.9%) 1.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.312, 0.826), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 1.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.442 ±(99.9%) 2.336 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.442, 1.170), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 2.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1366.077 ops/s
[info] # Warmup Iteration   2: 2611.981 ops/s
[info] # Warmup Iteration   3: 3311.062 ops/s
[info] # Warmup Iteration   4: 3298.237 ops/s
[info] # Warmup Iteration   5: 3965.350 ops/s
[info] Iteration   1: 4158.761 ops/s
[info]                  ·gc.alloc.rate:               565.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          213924.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 247776.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 4113.208 ops/s
[info]                  ·gc.alloc.rate:      559.543 MB/sec
[info]                  ·gc.alloc.rate.norm: 214093.667 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4148.758 ops/s
[info]                  ·gc.alloc.rate:               568.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          215450.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 248373.544 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 4013.742 ops/s
[info]                  ·gc.alloc.rate:                   558.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              219158.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256724.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4003.030 ops/s
[info]                  ·gc.alloc.rate:                   551.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              216772.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257430.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   4087.500 ±(99.9%) 286.007 ops/s [Average]
[info]   (min, avg, max) = (4003.030, 4087.500, 4158.761), stdev = 74.275
[info]   CI (99.9%): [3801.493, 4373.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   560.657 ±(99.9%) 24.656 MB/sec [Average]
[info]   (min, avg, max) = (551.478, 560.657, 568.039), stdev = 6.403
[info]   CI (99.9%): [536.001, 585.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   215879.847 ±(99.9%) 8335.185 B/op [Average]
[info]   (min, avg, max) = (213924.552, 215879.847, 219158.071), stdev = 2164.621
[info]   CI (99.9%): [207544.662, 224215.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   523.849 ±(99.9%) 1127.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 523.849, 654.911), stdev = 292.840
[info]   CI (99.9%): [≈ 0, 1651.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202060.998 ±(99.9%) 435298.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 202060.998, 257430.122), stdev = 113045.655
[info]   CI (99.9%): [≈ 0, 637359.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.417 ±(99.9%) 35.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.417, 19.736), stdev = 9.167
[info]   CI (99.9%): [≈ 0, 41.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.600, 9.000), stdev = 3.715
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14428.945 ops/s
[info] # Warmup Iteration   2: 107313.385 ops/s
[info] # Warmup Iteration   3: 135461.652 ops/s
[info] # Warmup Iteration   4: 146495.801 ops/s
[info] # Warmup Iteration   5: 143003.111 ops/s
[info] Iteration   1: 141690.805 ops/s
[info]                  ·gc.alloc.rate:                   2203.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              24475.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22213.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.431 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 140780.751 ops/s
[info]                  ·gc.alloc.rate:                   2203.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              24630.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22319.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.956 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 141309.231 ops/s
[info]                  ·gc.alloc.rate:                   2212.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              24642.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29652.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.464 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 140933.261 ops/s
[info]                  ·gc.alloc.rate:                   2178.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              24330.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22328.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.827 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 139834.547 ops/s
[info]                  ·gc.alloc.rate:                   2173.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              24460.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22540.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   140909.719 ±(99.9%) 2683.657 ops/s [Average]
[info]   (min, avg, max) = (139834.547, 140909.719, 141690.805), stdev = 696.937
[info]   CI (99.9%): [138226.062, 143593.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2194.385 ±(99.9%) 66.082 MB/sec [Average]
[info]   (min, avg, max) = (2173.382, 2194.385, 2212.565), stdev = 17.161
[info]   CI (99.9%): [2128.303, 2260.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24507.859 ±(99.9%) 502.856 B/op [Average]
[info]   (min, avg, max) = (24330.103, 24507.859, 24642.968), stdev = 130.590
[info]   CI (99.9%): [24005.003, 25010.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2132.274 ±(99.9%) 1140.961 MB/sec [Average]
[info]   (min, avg, max) = (1996.423, 2132.274, 2662.303), stdev = 296.304
[info]   CI (99.9%): [991.312, 3273.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23810.659 ±(99.9%) 12582.298 B/op [Average]
[info]   (min, avg, max) = (22213.304, 23810.659, 29652.041), stdev = 3267.583
[info]   CI (99.9%): [11228.361, 36392.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.659 ±(99.9%) 1.976 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.659, 1.209), stdev = 0.513
[info]   CI (99.9%): [≈ 0, 2.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.361 ±(99.9%) 22.086 B/op [Average]
[info]   (min, avg, max) = (0.464, 7.361, 13.431), stdev = 5.736
[info]   CI (99.9%): [≈ 0, 29.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.794 ops/s
[info] # Warmup Iteration   2: 332660.529 ops/s
[info] # Warmup Iteration   3: 373570.118 ops/s
[info] # Warmup Iteration   4: 396688.911 ops/s
[info] # Warmup Iteration   5: 402271.360 ops/s
[info] Iteration   1: 399748.766 ops/s
[info]                  ·gc.alloc.rate:                   820.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              3231.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2618.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 401924.508 ops/s
[info]                  ·gc.alloc.rate:               828.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          3241.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2604.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 401088.262 ops/s
[info]                  ·gc.alloc.rate:                   843.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              3311.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5222.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 401475.647 ops/s
[info]                  ·gc.alloc.rate:               830.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          3254.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2611.354 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 402696.740 ops/s
[info]                  ·gc.alloc.rate:               830.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          3246.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2603.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   401386.785 ±(99.9%) 4211.681 ops/s [Average]
[info]   (min, avg, max) = (399748.766, 401386.785, 402696.740), stdev = 1093.760
[info]   CI (99.9%): [397175.103, 405598.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   830.817 ±(99.9%) 31.977 MB/sec [Average]
[info]   (min, avg, max) = (820.945, 830.817, 843.878), stdev = 8.304
[info]   CI (99.9%): [798.840, 862.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3257.134 ±(99.9%) 120.946 B/op [Average]
[info]   (min, avg, max) = (3231.578, 3257.134, 3311.363), stdev = 31.409
[info]   CI (99.9%): [3136.188, 3378.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798.824 ±(99.9%) 1145.548 MB/sec [Average]
[info]   (min, avg, max) = (665.267, 798.824, 1330.999), stdev = 297.495
[info]   CI (99.9%): [≈ 0, 1944.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3132.199 ±(99.9%) 4500.276 B/op [Average]
[info]   (min, avg, max) = (2603.398, 3132.199, 5222.817), stdev = 1168.707
[info]   CI (99.9%): [≈ 0, 7632.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.077), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.302), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74685.665 ops/s
[info] # Warmup Iteration   2: 180953.973 ops/s
[info] # Warmup Iteration   3: 255060.542 ops/s
[info] # Warmup Iteration   4: 281839.734 ops/s
[info] # Warmup Iteration   5: 282397.825 ops/s
[info] Iteration   1: 281551.175 ops/s
[info]                  ·gc.alloc.rate:                   582.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3682.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 281814.548 ops/s
[info]                  ·gc.alloc.rate:               579.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          3233.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3675.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 272649.194 ops/s
[info]                  ·gc.alloc.rate:               571.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          3299.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3799.147 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 281209.218 ops/s
[info]                  ·gc.alloc.rate:               587.324 MB/sec
[info]                  ·gc.alloc.rate.norm:          3286.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3685.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 278082.909 ops/s
[info]                  ·gc.alloc.rate:                   583.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              3298.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3726.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   279061.409 ±(99.9%) 14971.252 ops/s [Average]
[info]   (min, avg, max) = (272649.194, 279061.409, 281814.548), stdev = 3887.986
[info]   CI (99.9%): [264090.157, 294032.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   580.750 ±(99.9%) 22.548 MB/sec [Average]
[info]   (min, avg, max) = (571.648, 580.750, 587.324), stdev = 5.856
[info]   CI (99.9%): [558.201, 603.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3274.961 ±(99.9%) 110.403 B/op [Average]
[info]   (min, avg, max) = (3233.975, 3274.961, 3299.006), stdev = 28.671
[info]   CI (99.9%): [3164.559, 3385.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   658.525 ±(99.9%) 0.880 MB/sec [Average]
[info]   (min, avg, max) = (658.270, 658.525, 658.784), stdev = 0.229
[info]   CI (99.9%): [657.645, 659.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3713.874 ±(99.9%) 199.060 B/op [Average]
[info]   (min, avg, max) = (3675.703, 3713.874, 3799.147), stdev = 51.695
[info]   CI (99.9%): [3514.814, 3912.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.465), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147390.614 ops/s
[info] # Warmup Iteration   2: 468046.531 ops/s
[info] # Warmup Iteration   3: 496060.213 ops/s
[info] # Warmup Iteration   4: 491042.798 ops/s
[info] # Warmup Iteration   5: 496436.861 ops/s
[info] Iteration   1: 494893.968 ops/s
[info]                  ·gc.alloc.rate:               642.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          2043.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2125.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 493157.177 ops/s
[info]                  ·gc.alloc.rate:               634.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          2026.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2133.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 484597.508 ops/s
[info]                  ·gc.alloc.rate:                   643.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              2090.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2172.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 492235.373 ops/s
[info]                  ·gc.alloc.rate:               640.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          2047.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2138.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 493493.641 ops/s
[info]                  ·gc.alloc.rate:               646.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          2061.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2135.073 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   491675.533 ±(99.9%) 15673.465 ops/s [Average]
[info]   (min, avg, max) = (484597.508, 491675.533, 494893.968), stdev = 4070.349
[info]   CI (99.9%): [476002.069, 507348.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   641.626 ±(99.9%) 16.525 MB/sec [Average]
[info]   (min, avg, max) = (634.928, 641.626, 646.275), stdev = 4.291
[info]   CI (99.9%): [625.101, 658.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2053.847 ±(99.9%) 93.064 B/op [Average]
[info]   (min, avg, max) = (2026.217, 2053.847, 2090.897), stdev = 24.169
[info]   CI (99.9%): [1960.782, 2146.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.839 ±(99.9%) 1.477 MB/sec [Average]
[info]   (min, avg, max) = (668.512, 668.839, 669.454), stdev = 0.383
[info]   CI (99.9%): [667.362, 670.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2140.936 ±(99.9%) 69.441 B/op [Average]
[info]   (min, avg, max) = (2125.771, 2140.936, 2172.129), stdev = 18.033
[info]   CI (99.9%): [2071.496, 2210.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2314.718 ops/s
[info] # Warmup Iteration   2: 66505.111 ops/s
[info] # Warmup Iteration   3: 98311.924 ops/s
[info] # Warmup Iteration   4: 108240.480 ops/s
[info] # Warmup Iteration   5: 106520.743 ops/s
[info] Iteration   1: 109174.117 ops/s
[info]                  ·gc.alloc.rate:                   3752.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              54087.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48396.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 108942.568 ops/s
[info]                  ·gc.alloc.rate:                   3756.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              54255.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4043.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58398.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 107752.487 ops/s
[info]                  ·gc.alloc.rate:               3765.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          54976.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49365.759 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 106246.299 ops/s
[info]                  ·gc.alloc.rate:                   3698.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              54784.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50187.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.617 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 109025.205 ops/s
[info]                  ·gc.alloc.rate:               3827.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          55244.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4073.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58801.800 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   108228.135 ±(99.9%) 4791.898 ops/s [Average]
[info]   (min, avg, max) = (106246.299, 108228.135, 109174.117), stdev = 1244.441
[info]   CI (99.9%): [103436.237, 113020.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3760.078 ±(99.9%) 176.085 MB/sec [Average]
[info]   (min, avg, max) = (3698.912, 3760.078, 3827.264), stdev = 45.729
[info]   CI (99.9%): [3583.993, 3936.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54669.675 ±(99.9%) 1874.715 B/op [Average]
[info]   (min, avg, max) = (54087.863, 54669.675, 55244.731), stdev = 486.858
[info]   CI (99.9%): [52794.960, 56544.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3648.836 ±(99.9%) 1441.183 MB/sec [Average]
[info]   (min, avg, max) = (3357.289, 3648.836, 4073.692), stdev = 374.271
[info]   CI (99.9%): [2207.653, 5090.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53029.963 ±(99.9%) 19739.348 B/op [Average]
[info]   (min, avg, max) = (48396.332, 53029.963, 58801.800), stdev = 5126.246
[info]   CI (99.9%): [33290.615, 72769.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.304 ±(99.9%) 1.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 0.617), stdev = 0.304
[info]   CI (99.9%): [≈ 0, 1.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54533.444 ops/s
[info] # Warmup Iteration   2: 194049.948 ops/s
[info] # Warmup Iteration   3: 199369.677 ops/s
[info] # Warmup Iteration   4: 218583.099 ops/s
[info] # Warmup Iteration   5: 217622.250 ops/s
[info] Iteration   1: 213267.665 ops/s
[info]                  ·gc.alloc.rate:                   1851.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              13661.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14802.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 216986.495 ops/s
[info]                  ·gc.alloc.rate:                   1872.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              13577.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14524.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 218588.186 ops/s
[info]                  ·gc.alloc.rate:               1869.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          13457.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9583.264 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 219862.399 ops/s
[info]                  ·gc.alloc.rate:                   1893.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              13550.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14293.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 219223.119 ops/s
[info]                  ·gc.alloc.rate:               1888.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          13550.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14349.740 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   217585.573 ±(99.9%) 10164.889 ops/s [Average]
[info]   (min, avg, max) = (213267.665, 217585.573, 219862.399), stdev = 2639.789
[info]   CI (99.9%): [207420.684, 227750.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1874.957 ±(99.9%) 63.683 MB/sec [Average]
[info]   (min, avg, max) = (1851.587, 1874.957, 1893.315), stdev = 16.538
[info]   CI (99.9%): [1811.275, 1938.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13559.422 ±(99.9%) 281.566 B/op [Average]
[info]   (min, avg, max) = (13457.321, 13559.422, 13661.720), stdev = 73.122
[info]   CI (99.9%): [13277.856, 13840.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1867.400 ±(99.9%) 1153.945 MB/sec [Average]
[info]   (min, avg, max) = (1331.357, 1867.400, 2006.156), stdev = 299.676
[info]   CI (99.9%): [713.455, 3021.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13510.672 ±(99.9%) 8488.351 B/op [Average]
[info]   (min, avg, max) = (9583.264, 13510.672, 14802.188), stdev = 2204.398
[info]   CI (99.9%): [5022.321, 21999.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.923 ±(99.9%) 5.758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.923, 3.449), stdev = 1.495
[info]   CI (99.9%): [≈ 0, 6.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.780 ±(99.9%) 42.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.780, 25.444), stdev = 11.029
[info]   CI (99.9%): [≈ 0, 49.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.219
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.646 ops/s
[info] # Warmup Iteration   2: 816030.093 ops/s
[info] # Warmup Iteration   3: 896623.583 ops/s
[info] # Warmup Iteration   4: 947204.084 ops/s
[info] # Warmup Iteration   5: 942728.875 ops/s
[info] Iteration   1: 935394.386 ops/s
[info]                  ·gc.alloc.rate:               745.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          1253.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1117.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 945068.118 ops/s
[info]                  ·gc.alloc.rate:               757.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1106.052 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 921969.640 ops/s
[info]                  ·gc.alloc.rate:                   736.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1257.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1134.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 931231.019 ops/s
[info]                  ·gc.alloc.rate:               747.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          1262.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1123.591 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 916317.323 ops/s
[info]                  ·gc.alloc.rate:               744.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          1277.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1142.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   929996.097 ±(99.9%) 43452.825 ops/s [Average]
[info]   (min, avg, max) = (916317.323, 929996.097, 945068.118), stdev = 11284.561
[info]   CI (99.9%): [886543.272, 973448.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   746.141 ±(99.9%) 29.068 MB/sec [Average]
[info]   (min, avg, max) = (736.634, 746.141, 757.624), stdev = 7.549
[info]   CI (99.9%): [717.073, 775.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1262.593 ±(99.9%) 35.228 B/op [Average]
[info]   (min, avg, max) = (1253.906, 1262.593, 1277.810), stdev = 9.149
[info]   CI (99.9%): [1227.365, 1297.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.699 ±(99.9%) 1.726 MB/sec [Average]
[info]   (min, avg, max) = (664.182, 664.699, 665.260), stdev = 0.448
[info]   CI (99.9%): [662.974, 666.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1124.876 ±(99.9%) 55.105 B/op [Average]
[info]   (min, avg, max) = (1106.052, 1124.876, 1142.419), stdev = 14.311
[info]   CI (99.9%): [1069.771, 1179.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177153.460 ops/s
[info] # Warmup Iteration   2: 488997.104 ops/s
[info] # Warmup Iteration   3: 561334.710 ops/s
[info] # Warmup Iteration   4: 614672.693 ops/s
[info] # Warmup Iteration   5: 617767.245 ops/s
[info] Iteration   1: 624606.221 ops/s
[info]                  ·gc.alloc.rate:      488.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 621173.529 ops/s
[info]                  ·gc.alloc.rate:                   505.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              1281.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1684.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 620316.833 ops/s
[info]                  ·gc.alloc.rate:               498.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1687.705 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 620417.092 ops/s
[info]                  ·gc.alloc.rate:               507.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          1286.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1687.397 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 623404.036 ops/s
[info]                  ·gc.alloc.rate:      488.008 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   621983.542 ±(99.9%) 7402.871 ops/s [Average]
[info]   (min, avg, max) = (620316.833, 621983.542, 624606.221), stdev = 1922.502
[info]   CI (99.9%): [614580.671, 629386.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   497.635 ±(99.9%) 34.579 MB/sec [Average]
[info]   (min, avg, max) = (488.008, 497.635, 507.148), stdev = 8.980
[info]   CI (99.9%): [463.056, 532.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1259.125 ±(99.9%) 100.192 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1259.125, 1286.049), stdev = 26.020
[info]   CI (99.9%): [1158.932, 1359.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   399.098 ±(99.9%) 1402.887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.098, 665.418), stdev = 364.325
[info]   CI (99.9%): [≈ 0, 1801.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1011.923 ±(99.9%) 3557.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1011.923, 1687.705), stdev = 923.756
[info]   CI (99.9%): [≈ 0, 4568.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.132), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 409801.269 ops/s
[info] # Warmup Iteration   2: 669787.934 ops/s
[info] # Warmup Iteration   3: 789411.573 ops/s
[info] # Warmup Iteration   4: 783358.347 ops/s
[info] # Warmup Iteration   5: 790495.271 ops/s
[info] Iteration   1: 790840.177 ops/s
[info]                  ·gc.alloc.rate:               632.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1329.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 759403.508 ops/s
[info]                  ·gc.alloc.rate:                   614.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              1273.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1384.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 792644.146 ops/s
[info]                  ·gc.alloc.rate:               643.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          1276.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1328.050 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 780081.886 ops/s
[info]                  ·gc.alloc.rate:                   644.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1298.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1349.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 786001.484 ops/s
[info]                  ·gc.alloc.rate:               638.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          1276.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1339.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   781794.240 ±(99.9%) 51716.577 ops/s [Average]
[info]   (min, avg, max) = (759403.508, 781794.240, 792644.146), stdev = 13430.631
[info]   CI (99.9%): [730077.663, 833510.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   634.505 ±(99.9%) 45.961 MB/sec [Average]
[info]   (min, avg, max) = (614.889, 634.505, 644.031), stdev = 11.936
[info]   CI (99.9%): [588.543, 680.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1276.915 ±(99.9%) 56.005 B/op [Average]
[info]   (min, avg, max) = (1258.115, 1276.915, 1298.893), stdev = 14.544
[info]   CI (99.9%): [1220.910, 1332.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.871 ±(99.9%) 1.900 MB/sec [Average]
[info]   (min, avg, max) = (668.273, 668.871, 669.456), stdev = 0.493
[info]   CI (99.9%): [666.971, 670.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1346.355 ±(99.9%) 89.038 B/op [Average]
[info]   (min, avg, max) = (1328.050, 1346.355, 1384.772), stdev = 23.123
[info]   CI (99.9%): [1257.317, 1435.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.043), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243059.325 ops/s
[info] # Warmup Iteration   2: 760905.966 ops/s
[info] # Warmup Iteration   3: 838265.728 ops/s
[info] # Warmup Iteration   4: 839262.597 ops/s
[info] # Warmup Iteration   5: 839451.812 ops/s
[info] Iteration   1: 794877.953 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 839020.995 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 838163.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 838925.072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 838619.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   829921.295 ±(99.9%) 75444.424 ops/s [Average]
[info]   (min, avg, max) = (794877.953, 829921.295, 839020.995), stdev = 19592.677
[info]   CI (99.9%): [754476.871, 905365.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6239.406 ops/s
[info] # Warmup Iteration   2: 20592.494 ops/s
[info] # Warmup Iteration   3: 35567.438 ops/s
[info] # Warmup Iteration   4: 35786.613 ops/s
[info] # Warmup Iteration   5: 32435.281 ops/s
[info] Iteration   1: 35622.934 ops/s
[info]                  ·gc.alloc.rate:                   1607.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              71031.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58595.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 35570.210 ops/s
[info]                  ·gc.alloc.rate:                   1633.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              72251.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87980.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185.596 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 35908.732 ops/s
[info]                  ·gc.alloc.rate:                   1614.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              70730.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58041.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34871.524 ops/s
[info]                  ·gc.alloc.rate:                   1567.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              70716.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59707.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 36066.488 ops/s
[info]                  ·gc.alloc.rate:                   1628.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              71041.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86625.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.725 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   35607.978 ±(99.9%) 1769.516 ops/s [Average]
[info]   (min, avg, max) = (34871.524, 35607.978, 36066.488), stdev = 459.538
[info]   CI (99.9%): [33838.462, 37377.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1610.315 ±(99.9%) 100.676 MB/sec [Average]
[info]   (min, avg, max) = (1567.485, 1610.315, 1633.669), stdev = 26.145
[info]   CI (99.9%): [1509.639, 1710.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71154.087 ±(99.9%) 2437.359 B/op [Average]
[info]   (min, avg, max) = (70716.023, 71154.087, 72251.131), stdev = 632.974
[info]   CI (99.9%): [68716.729, 73591.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1589.885 ±(99.9%) 1397.872 MB/sec [Average]
[info]   (min, avg, max) = (1323.467, 1589.885, 1989.328), stdev = 363.023
[info]   CI (99.9%): [192.013, 2987.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70190.237 ±(99.9%) 60226.672 B/op [Average]
[info]   (min, avg, max) = (58041.740, 70190.237, 87980.643), stdev = 15640.676
[info]   CI (99.9%): [9963.565, 130416.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.283 ±(99.9%) 6.709 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.283, 4.197), stdev = 1.742
[info]   CI (99.9%): [≈ 0, 7.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56.681 ±(99.9%) 296.766 B/op [Average]
[info]   (min, avg, max) = (2.725, 56.681, 185.596), stdev = 77.069
[info]   CI (99.9%): [≈ 0, 353.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 16.000), stdev = 5.020
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 863.613 ops/s
[info] # Warmup Iteration   2: 5449.655 ops/s
[info] # Warmup Iteration   3: 8009.737 ops/s
[info] # Warmup Iteration   4: 9492.425 ops/s
[info] # Warmup Iteration   5: 9402.382 ops/s
[info] Iteration   1: 9482.132 ops/s
[info]                  ·gc.alloc.rate:               1320.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          219139.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 220240.763 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 9387.941 ops/s
[info]                  ·gc.alloc.rate:               1302.582 MB/sec
[info]                  ·gc.alloc.rate.norm:          218322.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 222445.516 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9497.838 ops/s
[info]                  ·gc.alloc.rate:                   1323.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              219270.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219980.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9314.243 ops/s
[info]                  ·gc.alloc.rate:                   1350.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              228175.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224662.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9466.337 ops/s
[info]                  ·gc.alloc.rate:                   1315.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              218715.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221364.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   9429.698 ±(99.9%) 297.076 ops/s [Average]
[info]   (min, avg, max) = (9314.243, 9429.698, 9497.838), stdev = 77.150
[info]   CI (99.9%): [9132.623, 9726.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1322.649 ±(99.9%) 67.761 MB/sec [Average]
[info]   (min, avg, max) = (1302.582, 1322.649, 1350.621), stdev = 17.597
[info]   CI (99.9%): [1254.888, 1390.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   220724.809 ±(99.9%) 16102.544 B/op [Average]
[info]   (min, avg, max) = (218322.997, 220724.809, 228175.631), stdev = 4181.779
[info]   CI (99.9%): [204622.265, 236827.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1328.781 ±(99.9%) 7.656 MB/sec [Average]
[info]   (min, avg, max) = (1327.038, 1328.781, 1331.729), stdev = 1.988
[info]   CI (99.9%): [1321.125, 1336.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   221738.800 ±(99.9%) 7337.790 B/op [Average]
[info]   (min, avg, max) = (219980.207, 221738.800, 224662.698), stdev = 1905.601
[info]   CI (99.9%): [214401.009, 229076.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.629 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.375), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.851 ±(99.9%) 104.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.851, 62.290), stdev = 27.134
[info]   CI (99.9%): [≈ 0, 118.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 843.548 ops/s
[info] # Warmup Iteration   2: 6675.068 ops/s
[info] # Warmup Iteration   3: 9134.918 ops/s
[info] # Warmup Iteration   4: 9134.601 ops/s
[info] # Warmup Iteration   5: 8889.382 ops/s
[info] Iteration   1: 9270.720 ops/s
[info]                  ·gc.alloc.rate:                   1220.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              207139.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224347.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9078.668 ops/s
[info]                  ·gc.alloc.rate:                   1210.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              209876.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229231.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9125.166 ops/s
[info]                  ·gc.alloc.rate:               1354.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          233569.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 228485.721 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 9135.369 ops/s
[info]                  ·gc.alloc.rate:                   1182.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              203676.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114359.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.967 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9191.286 ops/s
[info]                  ·gc.alloc.rate:                   1212.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              207647.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227643.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9160.242 ±(99.9%) 283.437 ops/s [Average]
[info]   (min, avg, max) = (9078.668, 9160.242, 9270.720), stdev = 73.608
[info]   CI (99.9%): [8876.805, 9443.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1236.118 ±(99.9%) 260.336 MB/sec [Average]
[info]   (min, avg, max) = (1182.582, 1236.118, 1354.325), stdev = 67.608
[info]   CI (99.9%): [975.782, 1496.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   212381.951 ±(99.9%) 46402.692 B/op [Average]
[info]   (min, avg, max) = (203676.162, 212381.951, 233569.423), stdev = 12050.632
[info]   CI (99.9%): [165979.259, 258784.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.466 ±(99.9%) 1137.637 MB/sec [Average]
[info]   (min, avg, max) = (663.995, 1192.466, 1329.520), stdev = 295.441
[info]   CI (99.9%): [54.830, 2330.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   204813.727 ±(99.9%) 194841.123 B/op [Average]
[info]   (min, avg, max) = (114359.854, 204813.727, 229231.648), stdev = 50599.621
[info]   CI (99.9%): [9972.603, 399654.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.089 ±(99.9%) 0.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.354), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.310 ±(99.9%) 98.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.310, 60.967), stdev = 25.652
[info]   CI (99.9%): [≈ 0, 114.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66832.621 ops/s
[info] # Warmup Iteration   2: 156118.461 ops/s
[info] # Warmup Iteration   3: 193260.364 ops/s
[info] # Warmup Iteration   4: 196191.694 ops/s
[info] # Warmup Iteration   5: 195307.287 ops/s
[info] Iteration   1: 196836.412 ops/s
[info]                  ·gc.alloc.rate:                   1960.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              15678.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15933.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 197685.140 ops/s
[info]                  ·gc.alloc.rate:                   1983.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              15786.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15841.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 195850.947 ops/s
[info]                  ·gc.alloc.rate:                   1963.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              15780.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15984.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 198277.289 ops/s
[info]                  ·gc.alloc.rate:                   1973.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              15668.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15818.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 198468.859 ops/s
[info]                  ·gc.alloc.rate:                   1963.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              15563.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10559.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   197423.729 ±(99.9%) 4177.452 ops/s [Average]
[info]   (min, avg, max) = (195850.947, 197423.729, 198468.859), stdev = 1084.871
[info]   CI (99.9%): [193246.278, 201601.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1969.005 ±(99.9%) 35.825 MB/sec [Average]
[info]   (min, avg, max) = (1960.884, 1969.005, 1983.031), stdev = 9.304
[info]   CI (99.9%): [1933.180, 2004.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15695.374 ±(99.9%) 354.638 B/op [Average]
[info]   (min, avg, max) = (15563.304, 15695.374, 15786.026), stdev = 92.098
[info]   CI (99.9%): [15340.735, 16050.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1859.383 ±(99.9%) 1134.865 MB/sec [Average]
[info]   (min, avg, max) = (1332.178, 1859.383, 1992.810), stdev = 294.721
[info]   CI (99.9%): [724.518, 2994.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14827.519 ±(99.9%) 9190.451 B/op [Average]
[info]   (min, avg, max) = (10559.715, 14827.519, 15984.521), stdev = 2386.731
[info]   CI (99.9%): [5637.068, 24017.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.839 ±(99.9%) 5.425 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.839, 3.281), stdev = 1.409
[info]   CI (99.9%): [≈ 0, 6.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.706 ±(99.9%) 43.377 B/op [Average]
[info]   (min, avg, max) = (0.165, 6.706, 26.236), stdev = 11.265
[info]   CI (99.9%): [≈ 0, 50.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541.718 ops/s
[info] # Warmup Iteration   2: 5354.738 ops/s
[info] # Warmup Iteration   3: 7899.193 ops/s
[info] # Warmup Iteration   4: 8752.526 ops/s
[info] # Warmup Iteration   5: 8751.773 ops/s
[info] Iteration   1: 8724.821 ops/s
[info]                  ·gc.alloc.rate:                   1336.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              241054.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238383.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8684.028 ops/s
[info]                  ·gc.alloc.rate:                   1355.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              245545.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239569.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8728.237 ops/s
[info]                  ·gc.alloc.rate:                   1347.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              243003.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238662.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8395.640 ops/s
[info]                  ·gc.alloc.rate:               1350.583 MB/sec
[info]                  ·gc.alloc.rate.norm:          253144.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 248626.273 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 8264.573 ops/s
[info]                  ·gc.alloc.rate:                   1333.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              253906.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252947.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8559.460 ±(99.9%) 828.431 ops/s [Average]
[info]   (min, avg, max) = (8264.573, 8559.460, 8728.237), stdev = 215.141
[info]   CI (99.9%): [7731.029, 9387.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1344.775 ±(99.9%) 35.944 MB/sec [Average]
[info]   (min, avg, max) = (1333.460, 1344.775, 1355.404), stdev = 9.335
[info]   CI (99.9%): [1308.831, 1380.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   247330.674 ±(99.9%) 22644.971 B/op [Average]
[info]   (min, avg, max) = (241054.626, 247330.674, 253906.035), stdev = 5880.827
[info]   CI (99.9%): [224685.703, 269975.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1324.572 ±(99.9%) 10.743 MB/sec [Average]
[info]   (min, avg, max) = (1321.895, 1324.572, 1328.423), stdev = 2.790
[info]   CI (99.9%): [1313.829, 1335.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   243637.707 ±(99.9%) 25864.071 B/op [Average]
[info]   (min, avg, max) = (238383.727, 243637.707, 252947.078), stdev = 6716.817
[info]   CI (99.9%): [217773.636, 269501.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.384 ±(99.9%) 3.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.794), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72.845 ±(99.9%) 578.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.845, 341.660), stdev = 150.331
[info]   CI (99.9%): [≈ 0, 651.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4452.909 ops/s
[info] # Warmup Iteration   2: 14063.484 ops/s
[info] # Warmup Iteration   3: 22689.137 ops/s
[info] # Warmup Iteration   4: 23657.385 ops/s
[info] # Warmup Iteration   5: 23892.811 ops/s
[info] Iteration   1: 22499.871 ops/s
[info]                  ·gc.alloc.rate:               1518.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          106192.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1957.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136838.655 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     23.000 ms
[info] Iteration   2: 22645.621 ops/s
[info]                  ·gc.alloc.rate:                   1473.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              102385.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90649.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   3: 21674.229 ops/s
[info]                  ·gc.alloc.rate:                   1611.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              116983.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94322.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 22396.546 ops/s
[info]                  ·gc.alloc.rate:                   1316.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              92509.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91282.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   5: 22489.919 ops/s
[info]                  ·gc.alloc.rate:                   1196.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              83756.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1272.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89036.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   22341.237 ±(99.9%) 1476.207 ops/s [Average]
[info]   (min, avg, max) = (21674.229, 22341.237, 22645.621), stdev = 383.366
[info]   CI (99.9%): [20865.030, 23817.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1423.544 ±(99.9%) 637.906 MB/sec [Average]
[info]   (min, avg, max) = (1196.988, 1423.544, 1611.819), stdev = 165.662
[info]   CI (99.9%): [785.638, 2061.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   100365.591 ±(99.9%) 49153.190 B/op [Average]
[info]   (min, avg, max) = (83756.318, 100365.591, 116983.514), stdev = 12764.927
[info]   CI (99.9%): [51212.402, 149518.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1426.580 ±(99.9%) 1143.145 MB/sec [Average]
[info]   (min, avg, max) = (1272.445, 1426.580, 1957.161), stdev = 296.871
[info]   CI (99.9%): [283.435, 2569.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   100425.751 ±(99.9%) 78727.939 B/op [Average]
[info]   (min, avg, max) = (89036.195, 100425.751, 136838.655), stdev = 20445.396
[info]   CI (99.9%): [21697.812, 179153.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.981 ±(99.9%) 5.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.981, 3.502), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.593 ±(99.9%) 388.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.593, 243.356), stdev = 100.904
[info]   CI (99.9%): [≈ 0, 457.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   101.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (16.000, 20.200, 24.000), stdev = 3.564
[info]   CI (99.9%): [101.000, 101.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2459.839 ops/s
[info] # Warmup Iteration   2: 17747.779 ops/s
[info] # Warmup Iteration   3: 24468.524 ops/s
[info] # Warmup Iteration   4: 24128.710 ops/s
[info] # Warmup Iteration   5: 25315.618 ops/s
[info] Iteration   1: 23710.475 ops/s
[info]                  ·gc.alloc.rate:                   1267.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              84131.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87727.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 24735.091 ops/s
[info]                  ·gc.alloc.rate:                   1360.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              86536.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84004.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 24676.155 ops/s
[info]                  ·gc.alloc.rate:                   1012.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              64580.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84124.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 24233.474 ops/s
[info]                  ·gc.alloc.rate:                   975.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              63342.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42874.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 24971.940 ops/s
[info]                  ·gc.alloc.rate:                   1027.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              64760.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83127.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24465.427 ±(99.9%) 1922.852 ops/s [Average]
[info]   (min, avg, max) = (23710.475, 24465.427, 24971.940), stdev = 499.359
[info]   CI (99.9%): [22542.575, 26388.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1128.745 ±(99.9%) 666.595 MB/sec [Average]
[info]   (min, avg, max) = (975.715, 1128.745, 1360.040), stdev = 173.113
[info]   CI (99.9%): [462.150, 1795.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   72670.261 ±(99.9%) 44684.159 B/op [Average]
[info]   (min, avg, max) = (63342.416, 72670.261, 86536.391), stdev = 11604.334
[info]   CI (99.9%): [27986.101, 117354.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.150 ±(99.9%) 1135.977 MB/sec [Average]
[info]   (min, avg, max) = (660.424, 1188.150, 1321.768), stdev = 295.010
[info]   CI (99.9%): [52.173, 2324.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   76371.511 ±(99.9%) 72425.030 B/op [Average]
[info]   (min, avg, max) = (42874.069, 76371.511, 87727.704), stdev = 18808.550
[info]   CI (99.9%): [3946.481, 148796.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.362 ±(99.9%) 5.913 MB/sec [Average]
[info]   (min, avg, max) = (0.020, 1.362, 4.014), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 7.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   87.652 ±(99.9%) 384.934 B/op [Average]
[info]   (min, avg, max) = (1.341, 87.652, 260.569), stdev = 99.966
[info]   CI (99.9%): [≈ 0, 472.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 12.000), stdev = 3.130
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296323.543 ops/s
[info] # Warmup Iteration   2: 506771.428 ops/s
[info] # Warmup Iteration   3: 541511.801 ops/s
[info] # Warmup Iteration   4: 542106.050 ops/s
[info] # Warmup Iteration   5: 546109.846 ops/s
[info] Iteration   1: 534054.523 ops/s
[info]                  ·gc.alloc.rate:                   1247.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              3675.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3951.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 523770.398 ops/s
[info]                  ·gc.alloc.rate:               1281.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          3850.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2015.742 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 532964.196 ops/s
[info]                  ·gc.alloc.rate:                   1251.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              3695.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3961.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 537177.450 ops/s
[info]                  ·gc.alloc.rate:                   1257.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              3684.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3934.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 540593.973 ops/s
[info]                  ·gc.alloc.rate:                   1257.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              3662.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3898.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   533712.108 ±(99.9%) 24268.444 ops/s [Average]
[info]   (min, avg, max) = (523770.398, 533712.108, 540593.973), stdev = 6302.438
[info]   CI (99.9%): [509443.664, 557980.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1259.297 ±(99.9%) 51.032 MB/sec [Average]
[info]   (min, avg, max) = (1247.272, 1259.297, 1281.632), stdev = 13.253
[info]   CI (99.9%): [1208.265, 1310.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3713.748 ±(99.9%) 298.535 B/op [Average]
[info]   (min, avg, max) = (3662.041, 3713.748, 3850.682), stdev = 77.529
[info]   CI (99.9%): [3415.212, 4012.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1207.206 ±(99.9%) 1154.446 MB/sec [Average]
[info]   (min, avg, max) = (670.904, 1207.206, 1343.096), stdev = 299.806
[info]   CI (99.9%): [52.761, 2361.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3552.422 ±(99.9%) 3309.132 B/op [Average]
[info]   (min, avg, max) = (2015.742, 3552.422, 3961.827), stdev = 859.371
[info]   CI (99.9%): [243.291, 6861.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.740), stdev = 1.633
[info]   CI (99.9%): [≈ 0, 7.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.428 ±(99.9%) 18.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.428, 10.955), stdev = 4.783
[info]   CI (99.9%): [≈ 0, 20.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356590.861 ops/s
[info] # Warmup Iteration   2: 578102.545 ops/s
[info] # Warmup Iteration   3: 612611.704 ops/s
[info] # Warmup Iteration   4: 611852.632 ops/s
[info] # Warmup Iteration   5: 584345.876 ops/s
[info] Iteration   1: 612408.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 611580.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 615488.173 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 609435.398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 610551.629 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   611892.876 ±(99.9%) 8849.871 ops/s [Average]
[info]   (min, avg, max) = (609435.398, 611892.876, 615488.173), stdev = 2298.283
[info]   CI (99.9%): [603043.005, 620742.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5044.789 ops/s
[info] # Warmup Iteration   2: 14546.100 ops/s
[info] # Warmup Iteration   3: 20867.568 ops/s
[info] # Warmup Iteration   4: 26244.855 ops/s
[info] # Warmup Iteration   5: 25978.785 ops/s
[info] Iteration   1: 25231.786 ops/s
[info]                  ·gc.alloc.rate:               1530.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          95436.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1312.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81816.768 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Iteration   2: 21969.760 ops/s
[info]                  ·gc.alloc.rate:                   1385.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              99222.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93919.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 25744.034 ops/s
[info]                  ·gc.alloc.rate:                   1146.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              70031.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80149.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 26320.551 ops/s
[info]                  ·gc.alloc.rate:                   1180.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              70571.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78306.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 26143.085 ops/s
[info]                  ·gc.alloc.rate:                   1149.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              69225.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39378.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   25081.843 ±(99.9%) 6890.036 ops/s [Average]
[info]   (min, avg, max) = (21969.760, 25081.843, 26320.551), stdev = 1789.320
[info]   CI (99.9%): [18191.808, 31971.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1278.514 ±(99.9%) 663.548 MB/sec [Average]
[info]   (min, avg, max) = (1146.077, 1278.514, 1530.734), stdev = 172.321
[info]   CI (99.9%): [614.966, 1942.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80897.507 ±(99.9%) 58018.934 B/op [Average]
[info]   (min, avg, max) = (69225.594, 80897.507, 99222.462), stdev = 15067.333
[info]   CI (99.9%): [22878.572, 138916.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1179.840 ±(99.9%) 1131.624 MB/sec [Average]
[info]   (min, avg, max) = (654.136, 1179.840, 1312.288), stdev = 293.879
[info]   CI (99.9%): [48.216, 2311.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74714.023 ±(99.9%) 79624.581 B/op [Average]
[info]   (min, avg, max) = (39378.241, 74714.023, 93919.423), stdev = 20678.251
[info]   CI (99.9%): [≈ 0, 154338.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.575 ±(99.9%) 8.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.575, 5.498), stdev = 2.283
[info]   CI (99.9%): [≈ 0, 10.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   99.388 ±(99.9%) 538.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.388, 335.986), stdev = 139.841
[info]   CI (99.9%): [≈ 0, 637.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.200, 17.000), stdev = 5.630
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 829.329 ops/s
[info] # Warmup Iteration   2: 8343.183 ops/s
[info] # Warmup Iteration   3: 12003.166 ops/s
[info] # Warmup Iteration   4: 14177.250 ops/s
[info] # Warmup Iteration   5: 13998.482 ops/s
[info] Iteration   1: 13990.337 ops/s
[info]                  ·gc.alloc.rate:               1622.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          182492.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1315.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147998.113 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 12852.607 ops/s
[info]                  ·gc.alloc.rate:                   1528.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              187079.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160936.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 14036.074 ops/s
[info]                  ·gc.alloc.rate:               1343.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          150602.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1313.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147262.258 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   4: 13479.270 ops/s
[info]                  ·gc.alloc.rate:               1479.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          172730.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1974.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230489.169 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     19.000 ms
[info] Iteration   5: 13106.407 ops/s
[info]                  ·gc.alloc.rate:                   1634.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              196205.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158366.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13492.939 ±(99.9%) 2021.147 ops/s [Average]
[info]   (min, avg, max) = (12852.607, 13492.939, 14036.074), stdev = 524.886
[info]   CI (99.9%): [11471.792, 15514.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1521.566 ±(99.9%) 457.809 MB/sec [Average]
[info]   (min, avg, max) = (1343.354, 1521.566, 1634.754), stdev = 118.891
[info]   CI (99.9%): [1063.757, 1979.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   177822.053 ±(99.9%) 67035.233 B/op [Average]
[info]   (min, avg, max) = (150602.676, 177822.053, 196205.032), stdev = 17408.837
[info]   CI (99.9%): [110786.820, 244857.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1447.455 ±(99.9%) 1133.626 MB/sec [Average]
[info]   (min, avg, max) = (1313.558, 1447.455, 1974.077), stdev = 294.399
[info]   CI (99.9%): [313.830, 2581.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   169010.469 ±(99.9%) 134395.502 B/op [Average]
[info]   (min, avg, max) = (147262.258, 169010.469, 230489.169), stdev = 34902.085
[info]   CI (99.9%): [34614.967, 303405.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.041 ±(99.9%) 12.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.041, 7.102), stdev = 3.132
[info]   CI (99.9%): [≈ 0, 14.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   246.434 ±(99.9%) 1449.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 246.434, 852.358), stdev = 376.538
[info]   CI (99.9%): [≈ 0, 1696.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.600, 19.000), stdev = 4.159
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1731.310 ops/s
[info] # Warmup Iteration   2: 9787.736 ops/s
[info] # Warmup Iteration   3: 12854.071 ops/s
[info] # Warmup Iteration   4: 12892.553 ops/s
[info] # Warmup Iteration   5: 12907.853 ops/s
[info] Iteration   1: 12834.759 ops/s
[info]                  ·gc.alloc.rate:               1242.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          152304.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163028.330 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 12879.496 ops/s
[info]                  ·gc.alloc.rate:               1234.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          150849.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81276.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 12935.609 ops/s
[info]                  ·gc.alloc.rate:               1254.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          152581.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161606.164 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 12848.187 ops/s
[info]                  ·gc.alloc.rate:               1425.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          174510.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162361.208 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 12568.909 ops/s
[info]                  ·gc.alloc.rate:                   1388.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              173890.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165823.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 989.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12813.392 ±(99.9%) 547.095 ops/s [Average]
[info]   (min, avg, max) = (12568.909, 12813.392, 12935.609), stdev = 142.079
[info]   CI (99.9%): [12266.297, 13360.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1309.064 ±(99.9%) 349.163 MB/sec [Average]
[info]   (min, avg, max) = (1234.461, 1309.064, 1425.383), stdev = 90.677
[info]   CI (99.9%): [959.901, 1658.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   160827.256 ±(99.9%) 47083.893 B/op [Average]
[info]   (min, avg, max) = (150849.405, 160827.256, 174510.315), stdev = 12227.538
[info]   CI (99.9%): [113743.362, 207911.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1194.797 ±(99.9%) 1140.204 MB/sec [Average]
[info]   (min, avg, max) = (665.118, 1194.797, 1329.573), stdev = 296.107
[info]   CI (99.9%): [54.593, 2335.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   146819.158 ±(99.9%) 141219.003 B/op [Average]
[info]   (min, avg, max) = (81276.443, 146819.158, 165823.649), stdev = 36674.127
[info]   CI (99.9%): [5600.155, 288038.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.581 ±(99.9%) 13.611 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.581, 7.904), stdev = 3.535
[info]   CI (99.9%): [≈ 0, 15.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   197.936 ±(99.9%) 1704.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 197.936, 989.680), stdev = 442.598
[info]   CI (99.9%): [≈ 0, 1902.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.600, 10.000), stdev = 3.507
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106339.730 ops/s
[info] # Warmup Iteration   2: 242709.147 ops/s
[info] # Warmup Iteration   3: 358566.011 ops/s
[info] # Warmup Iteration   4: 353912.470 ops/s
[info] # Warmup Iteration   5: 349527.630 ops/s
[info] Iteration   1: 348548.307 ops/s
[info]                  ·gc.alloc.rate:                   1638.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              7396.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6034.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 360648.348 ops/s
[info]                  ·gc.alloc.rate:                   1697.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              7407.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8753.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 364506.119 ops/s
[info]                  ·gc.alloc.rate:                   1700.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              7342.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5764.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 364572.990 ops/s
[info]                  ·gc.alloc.rate:                   1713.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              7395.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8633.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 364469.873 ops/s
[info]                  ·gc.alloc.rate:                   1700.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              7340.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5756.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   360549.127 ±(99.9%) 26625.959 ops/s [Average]
[info]   (min, avg, max) = (348548.307, 360549.127, 364572.990), stdev = 6914.677
[info]   CI (99.9%): [333923.169, 387175.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1690.153 ±(99.9%) 113.176 MB/sec [Average]
[info]   (min, avg, max) = (1638.725, 1690.153, 1713.435), stdev = 29.392
[info]   CI (99.9%): [1576.976, 1803.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7376.651 ±(99.9%) 124.746 B/op [Average]
[info]   (min, avg, max) = (7340.723, 7376.651, 7407.706), stdev = 32.396
[info]   CI (99.9%): [7251.905, 7501.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1602.271 ±(99.9%) 1409.206 MB/sec [Average]
[info]   (min, avg, max) = (1333.179, 1602.271, 2006.182), stdev = 365.966
[info]   CI (99.9%): [193.065, 3011.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6988.102 ±(99.9%) 6010.985 B/op [Average]
[info]   (min, avg, max) = (5756.128, 6988.102, 8753.129), stdev = 1561.034
[info]   CI (99.9%): [977.117, 12999.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.825 ±(99.9%) 6.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.825, 3.698), stdev = 1.610
[info]   CI (99.9%): [≈ 0, 7.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.595 ±(99.9%) 27.058 B/op [Average]
[info]   (min, avg, max) = (0.090, 3.595, 16.136), stdev = 7.027
[info]   CI (99.9%): [≈ 0, 30.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 590.507 ops/s
[info] # Warmup Iteration   2: 7320.867 ops/s
[info] # Warmup Iteration   3: 11768.179 ops/s
[info] # Warmup Iteration   4: 13573.695 ops/s
[info] # Warmup Iteration   5: 13686.868 ops/s
[info] Iteration   1: 13719.439 ops/s
[info]                  ·gc.alloc.rate:                   1576.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              180778.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152918.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13638.764 ops/s
[info]                  ·gc.alloc.rate:                   1594.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              184009.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230992.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 13792.146 ops/s
[info]                  ·gc.alloc.rate:                   1578.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              180108.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152489.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13673.668 ops/s
[info]                  ·gc.alloc.rate:                   1662.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              191346.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153794.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.667 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13479.999 ops/s
[info]                  ·gc.alloc.rate:                   1791.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              209110.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233872.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.583 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13660.803 ±(99.9%) 447.530 ops/s [Average]
[info]   (min, avg, max) = (13479.999, 13660.803, 13792.146), stdev = 116.222
[info]   CI (99.9%): [13213.273, 14108.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1640.844 ±(99.9%) 352.420 MB/sec [Average]
[info]   (min, avg, max) = (1576.106, 1640.844, 1791.978), stdev = 91.522
[info]   CI (99.9%): [1288.424, 1993.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   189070.663 ±(99.9%) 46427.817 B/op [Average]
[info]   (min, avg, max) = (180108.113, 189070.663, 209110.889), stdev = 12057.157
[info]   CI (99.9%): [142642.846, 235498.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1602.461 ±(99.9%) 1408.100 MB/sec [Average]
[info]   (min, avg, max) = (1333.215, 1602.461, 2004.172), stdev = 365.679
[info]   CI (99.9%): [194.361, 3010.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   184813.593 ±(99.9%) 167443.011 B/op [Average]
[info]   (min, avg, max) = (152489.739, 184813.593, 233872.425), stdev = 43484.418
[info]   CI (99.9%): [17370.581, 352256.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 2.792 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.591, 1.811), stdev = 0.725
[info]   CI (99.9%): [≈ 0, 3.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68.127 ±(99.9%) 322.229 B/op [Average]
[info]   (min, avg, max) = (2.388, 68.127, 208.989), stdev = 83.682
[info]   CI (99.9%): [≈ 0, 390.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6746.404 ops/s
[info] # Warmup Iteration   2: 24095.039 ops/s
[info] # Warmup Iteration   3: 35717.545 ops/s
[info] # Warmup Iteration   4: 34675.632 ops/s
[info] # Warmup Iteration   5: 32007.962 ops/s
[info] Iteration   1: 34301.280 ops/s
[info]                  ·gc.alloc.rate:                   1734.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              79563.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60412.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34601.247 ops/s
[info]                  ·gc.alloc.rate:                   1504.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              68415.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89674.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 438.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 36136.670 ops/s
[info]                  ·gc.alloc.rate:                   1433.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              62424.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57096.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36279.390 ops/s
[info]                  ·gc.alloc.rate:                   1442.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              62552.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56870.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 36116.842 ops/s
[info]                  ·gc.alloc.rate:               1434.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          62522.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1311.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57126.971 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   35487.086 ±(99.9%) 3671.839 ops/s [Average]
[info]   (min, avg, max) = (34301.280, 35487.086, 36279.390), stdev = 953.565
[info]   CI (99.9%): [31815.246, 39158.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1509.975 ±(99.9%) 497.111 MB/sec [Average]
[info]   (min, avg, max) = (1433.753, 1509.975, 1734.902), stdev = 129.098
[info]   CI (99.9%): [1012.864, 2007.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67095.659 ±(99.9%) 28593.529 B/op [Average]
[info]   (min, avg, max) = (62424.712, 67095.659, 79563.260), stdev = 7425.649
[info]   CI (99.9%): [38502.130, 95689.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1444.491 ±(99.9%) 1134.432 MB/sec [Average]
[info]   (min, avg, max) = (1311.123, 1444.491, 1971.482), stdev = 294.609
[info]   CI (99.9%): [310.059, 2578.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   64236.161 ±(99.9%) 55047.770 B/op [Average]
[info]   (min, avg, max) = (56870.351, 64236.161, 89674.064), stdev = 14295.731
[info]   CI (99.9%): [9188.391, 119283.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.954 ±(99.9%) 16.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.954, 9.636), stdev = 4.172
[info]   CI (99.9%): [≈ 0, 19.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   134.426 ±(99.9%) 732.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.426, 438.281), stdev = 190.126
[info]   CI (99.9%): [≈ 0, 866.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.339
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20195.683 ops/s
[info] # Warmup Iteration   2: 100857.708 ops/s
[info] # Warmup Iteration   3: 127536.548 ops/s
[info] # Warmup Iteration   4: 129965.579 ops/s
[info] # Warmup Iteration   5: 131714.051 ops/s
[info] Iteration   1: 132207.375 ops/s
[info]                  ·gc.alloc.rate:                   2470.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              29405.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31541.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 132942.916 ops/s
[info]                  ·gc.alloc.rate:                   2503.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              29639.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31364.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 133872.400 ops/s
[info]                  ·gc.alloc.rate:               2496.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          29331.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1983.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23306.910 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 134701.618 ops/s
[info]                  ·gc.alloc.rate:                   2562.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              29938.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2645.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30906.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 134705.802 ops/s
[info]                  ·gc.alloc.rate:                   2563.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              29950.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31021.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   133686.022 ±(99.9%) 4237.777 ops/s [Average]
[info]   (min, avg, max) = (132207.375, 133686.022, 134705.802), stdev = 1100.537
[info]   CI (99.9%): [129448.245, 137923.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2519.268 ±(99.9%) 161.388 MB/sec [Average]
[info]   (min, avg, max) = (2470.166, 2519.268, 2563.913), stdev = 41.912
[info]   CI (99.9%): [2357.880, 2680.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29653.157 ±(99.9%) 1114.321 B/op [Average]
[info]   (min, avg, max) = (29331.959, 29653.157, 29950.673), stdev = 289.386
[info]   CI (99.9%): [28538.836, 30767.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2516.682 ±(99.9%) 1148.138 MB/sec [Average]
[info]   (min, avg, max) = (1983.345, 2516.682, 2655.622), stdev = 298.168
[info]   CI (99.9%): [1368.543, 3664.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29628.359 ±(99.9%) 13642.915 B/op [Average]
[info]   (min, avg, max) = (23306.910, 29628.359, 31541.814), stdev = 3543.022
[info]   CI (99.9%): [15985.443, 43271.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.194 ±(99.9%) 7.992 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.194, 4.806), stdev = 2.076
[info]   CI (99.9%): [≈ 0, 9.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.152 ±(99.9%) 94.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.152, 56.891), stdev = 24.568
[info]   CI (99.9%): [≈ 0, 108.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 15.000), stdev = 4.159
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300844.235 ops/s
[info] # Warmup Iteration   2: 761455.983 ops/s
[info] # Warmup Iteration   3: 865089.770 ops/s
[info] # Warmup Iteration   4: 870165.126 ops/s
[info] # Warmup Iteration   5: 880031.512 ops/s
[info] Iteration   1: 878943.155 ops/s
[info]                  ·gc.alloc.rate:               1243.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          2226.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2397.577 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 872216.591 ops/s
[info]                  ·gc.alloc.rate:               1241.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          2238.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2418.475 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 878718.690 ops/s
[info]                  ·gc.alloc.rate:                   1220.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              2185.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1200.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 872129.395 ops/s
[info]                  ·gc.alloc.rate:                   1250.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              2256.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2420.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 882130.680 ops/s
[info]                  ·gc.alloc.rate:                   1249.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              2228.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2390.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   876827.702 ±(99.9%) 17167.675 ops/s [Average]
[info]   (min, avg, max) = (872129.395, 876827.702, 882130.680), stdev = 4458.391
[info]   CI (99.9%): [859660.027, 893995.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1240.910 ±(99.9%) 46.163 MB/sec [Average]
[info]   (min, avg, max) = (1220.576, 1240.910, 1250.242), stdev = 11.988
[info]   CI (99.9%): [1194.747, 1287.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2227.041 ±(99.9%) 99.692 B/op [Average]
[info]   (min, avg, max) = (2185.769, 2227.041, 2256.008), stdev = 25.890
[info]   CI (99.9%): [2127.349, 2326.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.320 ±(99.9%) 1153.339 MB/sec [Average]
[info]   (min, avg, max) = (670.527, 1206.320, 1341.418), stdev = 299.518
[info]   CI (99.9%): [52.981, 2359.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2165.476 ±(99.9%) 2077.242 B/op [Average]
[info]   (min, avg, max) = (1200.759, 2165.476, 2420.531), stdev = 539.453
[info]   CI (99.9%): [88.234, 4242.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.269), stdev = 1.408
[info]   CI (99.9%): [≈ 0, 6.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.455 ±(99.9%) 9.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.455, 5.898), stdev = 2.540
[info]   CI (99.9%): [≈ 0, 11.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 618547.737 ops/s
[info] # Warmup Iteration   2: 857310.861 ops/s
[info] # Warmup Iteration   3: 986492.076 ops/s
[info] # Warmup Iteration   4: 985812.477 ops/s
[info] # Warmup Iteration   5: 989212.419 ops/s
[info] Iteration   1: 985905.850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 989474.070 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 990947.014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 990240.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 989842.992 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   989282.074 ±(99.9%) 7565.530 ops/s [Average]
[info]   (min, avg, max) = (985905.850, 989282.074, 990947.014), stdev = 1964.744
[info]   CI (99.9%): [981716.544, 996847.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8766.075 ops/s
[info] # Warmup Iteration   2: 89373.373 ops/s
[info] # Warmup Iteration   3: 107607.723 ops/s
[info] # Warmup Iteration   4: 126526.099 ops/s
[info] # Warmup Iteration   5: 126822.440 ops/s
[info] Iteration   1: 127832.714 ops/s
[info]                  ·gc.alloc.rate:                   2847.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              35056.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32708.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.341 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 127505.288 ops/s
[info]                  ·gc.alloc.rate:                   2850.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              35180.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32788.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 127454.309 ops/s
[info]                  ·gc.alloc.rate:                   2861.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              35334.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32812.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 127437.234 ops/s
[info]                  ·gc.alloc.rate:                   2887.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              35666.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32924.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 127294.988 ops/s
[info]                  ·gc.alloc.rate:                   2887.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              35679.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33092.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   127504.906 ±(99.9%) 766.905 ops/s [Average]
[info]   (min, avg, max) = (127294.988, 127504.906, 127832.714), stdev = 199.163
[info]   CI (99.9%): [126738.001, 128271.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2866.986 ±(99.9%) 74.695 MB/sec [Average]
[info]   (min, avg, max) = (2847.854, 2866.986, 2887.886), stdev = 19.398
[info]   CI (99.9%): [2792.292, 2941.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35383.645 ±(99.9%) 1085.313 B/op [Average]
[info]   (min, avg, max) = (35056.997, 35383.645, 35679.718), stdev = 281.852
[info]   CI (99.9%): [34298.331, 36468.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2662.936 ±(99.9%) 35.044 MB/sec [Average]
[info]   (min, avg, max) = (2656.756, 2662.936, 2677.686), stdev = 9.101
[info]   CI (99.9%): [2627.892, 2697.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32865.188 ±(99.9%) 572.264 B/op [Average]
[info]   (min, avg, max) = (32708.056, 32865.188, 33092.033), stdev = 148.615
[info]   CI (99.9%): [32292.924, 33437.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.653 ±(99.9%) 4.797 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.653, 2.871), stdev = 1.246
[info]   CI (99.9%): [≈ 0, 5.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.045 ±(99.9%) 59.050 B/op [Average]
[info]   (min, avg, max) = (0.257, 8.045, 35.341), stdev = 15.335
[info]   CI (99.9%): [≈ 0, 67.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 10.000), stdev = 1.949
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2579.917 ops/s
[info] # Warmup Iteration   2: 11542.089 ops/s
[info] # Warmup Iteration   3: 18744.689 ops/s
[info] # Warmup Iteration   4: 19122.300 ops/s
[info] # Warmup Iteration   5: 18789.637 ops/s
[info] Iteration   1: 18964.551 ops/s
[info]                  ·gc.alloc.rate:               971.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          80586.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110452.069 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 17927.097 ops/s
[info]                  ·gc.alloc.rate:               1098.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          96422.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58423.169 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 17779.388 ops/s
[info]                  ·gc.alloc.rate:               1297.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          114808.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117877.822 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   4: 18204.621 ops/s
[info]                  ·gc.alloc.rate:                   1070.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              92522.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115241.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 19134.897 ops/s
[info]                  ·gc.alloc.rate:                   955.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              78596.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54845.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18402.111 ±(99.9%) 2362.535 ops/s [Average]
[info]   (min, avg, max) = (17779.388, 18402.111, 19134.897), stdev = 613.543
[info]   CI (99.9%): [16039.576, 20764.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1078.449 ±(99.9%) 526.891 MB/sec [Average]
[info]   (min, avg, max) = (955.591, 1078.449, 1297.078), stdev = 136.832
[info]   CI (99.9%): [551.559, 1605.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92587.358 ±(99.9%) 56074.160 B/op [Average]
[info]   (min, avg, max) = (78596.808, 92587.358, 114808.552), stdev = 14562.281
[info]   CI (99.9%): [36513.198, 148661.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1065.588 ±(99.9%) 1404.038 MB/sec [Average]
[info]   (min, avg, max) = (665.512, 1065.588, 1332.932), stdev = 364.624
[info]   CI (99.9%): [≈ 0, 2469.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91367.907 ±(99.9%) 122620.495 B/op [Average]
[info]   (min, avg, max) = (54845.050, 91367.907, 117877.822), stdev = 31844.153
[info]   CI (99.9%): [≈ 0, 213988.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 5.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 3.560), stdev = 1.542
[info]   CI (99.9%): [≈ 0, 6.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   75.199 ±(99.9%) 488.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.199, 292.785), stdev = 126.859
[info]   CI (99.9%): [≈ 0, 563.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 11.000), stdev = 2.950
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4691.305 ops/s
[info] # Warmup Iteration   2: 12705.533 ops/s
[info] # Warmup Iteration   3: 19041.034 ops/s
[info] # Warmup Iteration   4: 19904.814 ops/s
[info] # Warmup Iteration   5: 19459.873 ops/s
[info] Iteration   1: 19624.629 ops/s
[info]                  ·gc.alloc.rate:                   818.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              65605.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52220.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.391 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18030.889 ops/s
[info]                  ·gc.alloc.rate:               1231.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          107501.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1304.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113904.868 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 18214.064 ops/s
[info]                  ·gc.alloc.rate:                   1249.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              107959.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113048.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 19007.513 ops/s
[info]                  ·gc.alloc.rate:                   792.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              65559.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54328.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19146.488 ops/s
[info]                  ·gc.alloc.rate:                   789.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              64863.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53934.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18804.717 ±(99.9%) 2567.162 ops/s [Average]
[info]   (min, avg, max) = (18030.889, 18804.717, 19624.629), stdev = 666.684
[info]   CI (99.9%): [16237.554, 21371.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   976.191 ±(99.9%) 931.337 MB/sec [Average]
[info]   (min, avg, max) = (789.274, 976.191, 1249.955), stdev = 241.865
[info]   CI (99.9%): [44.854, 1907.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   82297.801 ±(99.9%) 89408.334 B/op [Average]
[info]   (min, avg, max) = (64863.243, 82297.801, 107959.167), stdev = 23219.060
[info]   CI (99.9%): [≈ 0, 171706.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   915.532 ±(99.9%) 1375.755 MB/sec [Average]
[info]   (min, avg, max) = (651.123, 915.532, 1308.878), stdev = 357.279
[info]   CI (99.9%): [≈ 0, 2291.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   77487.455 ±(99.9%) 126549.276 B/op [Average]
[info]   (min, avg, max) = (52220.452, 77487.455, 113904.868), stdev = 32864.445
[info]   CI (99.9%): [≈ 0, 204036.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.740 ±(99.9%) 4.754 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.740, 2.883), stdev = 1.235
[info]   CI (99.9%): [≈ 0, 5.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.735 ±(99.9%) 393.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.735, 238.597), stdev = 102.201
[info]   CI (99.9%): [≈ 0, 455.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80089.533 ops/s
[info] # Warmup Iteration   2: 130181.168 ops/s
[info] # Warmup Iteration   3: 163620.954 ops/s
[info] # Warmup Iteration   4: 165442.542 ops/s
[info] # Warmup Iteration   5: 164329.607 ops/s
[info] Iteration   1: 164808.990 ops/s
[info]                  ·gc.alloc.rate:               428.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          4087.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6320.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 165380.486 ops/s
[info]                  ·gc.alloc.rate:      421.847 MB/sec
[info]                  ·gc.alloc.rate.norm: 4013.595 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 165012.180 ops/s
[info]                  ·gc.alloc.rate:               426.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          4068.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6312.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 164796.293 ops/s
[info]                  ·gc.alloc.rate:                   429.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              4105.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6326.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 165606.801 ops/s
[info]                  ·gc.alloc.rate:      415.878 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   165120.950 ±(99.9%) 1385.646 ops/s [Average]
[info]   (min, avg, max) = (164796.293, 165120.950, 165606.801), stdev = 359.848
[info]   CI (99.9%): [163735.304, 166506.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   424.488 ±(99.9%) 21.839 MB/sec [Average]
[info]   (min, avg, max) = (415.878, 424.488, 429.931), stdev = 5.671
[info]   CI (99.9%): [402.649, 446.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4045.383 ±(99.9%) 240.643 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4045.383, 4105.367), stdev = 62.494
[info]   CI (99.9%): [3804.741, 4286.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   397.312 ±(99.9%) 1396.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.312, 662.573), stdev = 362.694
[info]   CI (99.9%): [≈ 0, 1793.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3791.943 ±(99.9%) 13329.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3791.943, 6326.841), stdev = 3461.559
[info]   CI (99.9%): [≈ 0, 17121.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.398), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2325.911 ops/s
[info] # Warmup Iteration   2: 12150.959 ops/s
[info] # Warmup Iteration   3: 17648.248 ops/s
[info] # Warmup Iteration   4: 17867.266 ops/s
[info] # Warmup Iteration   5: 17789.501 ops/s
[info] Iteration   1: 17643.706 ops/s
[info]                  ·gc.alloc.rate:                   1192.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              106393.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59003.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16969.100 ops/s
[info]                  ·gc.alloc.rate:                   1363.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              126406.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122824.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 16760.349 ops/s
[info]                  ·gc.alloc.rate:               1288.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          120913.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124543.030 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 17108.592 ops/s
[info]                  ·gc.alloc.rate:                   1195.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              109920.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122064.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 17156.024 ops/s
[info]                  ·gc.alloc.rate:                   1209.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              110965.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121363.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   17127.554 ±(99.9%) 1258.886 ops/s [Average]
[info]   (min, avg, max) = (16760.349, 17127.554, 17643.706), stdev = 326.929
[info]   CI (99.9%): [15868.668, 18386.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1249.845 ±(99.9%) 286.651 MB/sec [Average]
[info]   (min, avg, max) = (1192.969, 1249.845, 1363.342), stdev = 74.442
[info]   CI (99.9%): [963.194, 1536.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114919.810 ±(99.9%) 32284.540 B/op [Average]
[info]   (min, avg, max) = (106393.596, 114919.810, 126406.146), stdev = 8384.193
[info]   CI (99.9%): [82635.270, 147204.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1192.655 ±(99.9%) 1143.167 MB/sec [Average]
[info]   (min, avg, max) = (661.595, 1192.655, 1327.351), stdev = 296.877
[info]   CI (99.9%): [49.488, 2335.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   109959.620 ±(99.9%) 109781.383 B/op [Average]
[info]   (min, avg, max) = (59003.568, 109959.620, 124543.030), stdev = 28509.877
[info]   CI (99.9%): [178.237, 219741.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.417 ±(99.9%) 10.859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.417, 6.443), stdev = 2.820
[info]   CI (99.9%): [≈ 0, 12.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   130.264 ±(99.9%) 998.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.264, 592.472), stdev = 259.352
[info]   CI (99.9%): [≈ 0, 1128.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8581.887 ops/s
[info] # Warmup Iteration   2: 56203.675 ops/s
[info] # Warmup Iteration   3: 61616.392 ops/s
[info] # Warmup Iteration   4: 63238.350 ops/s
[info] # Warmup Iteration   5: 63106.245 ops/s
[info] Iteration   1: 63144.672 ops/s
[info]                  ·gc.alloc.rate:                   1819.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              45336.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49852.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 63309.654 ops/s
[info]                  ·gc.alloc.rate:                   1799.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              44723.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33128.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 63109.263 ops/s
[info]                  ·gc.alloc.rate:                   1804.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              44974.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49723.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.596 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 63405.637 ops/s
[info]                  ·gc.alloc.rate:                   1822.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              45229.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49464.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.033 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 63895.993 ops/s
[info]                  ·gc.alloc.rate:                   1822.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              44878.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32757.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   63373.044 ±(99.9%) 1218.122 ops/s [Average]
[info]   (min, avg, max) = (63109.263, 63373.044, 63895.993), stdev = 316.343
[info]   CI (99.9%): [62154.922, 64591.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1813.545 ±(99.9%) 41.970 MB/sec [Average]
[info]   (min, avg, max) = (1799.443, 1813.545, 1822.462), stdev = 10.900
[info]   CI (99.9%): [1771.575, 1855.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   45028.494 ±(99.9%) 970.216 B/op [Average]
[info]   (min, avg, max) = (44723.628, 45028.494, 45336.801), stdev = 251.962
[info]   CI (99.9%): [44058.278, 45998.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1730.276 ±(99.9%) 1401.471 MB/sec [Average]
[info]   (min, avg, max) = (1330.261, 1730.276, 2000.365), stdev = 363.957
[info]   CI (99.9%): [328.805, 3131.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42985.478 ±(99.9%) 35307.647 B/op [Average]
[info]   (min, avg, max) = (32757.745, 42985.478, 49852.730), stdev = 9169.284
[info]   CI (99.9%): [7677.832, 78293.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.940 ±(99.9%) 6.079 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.940, 3.698), stdev = 1.579
[info]   CI (99.9%): [≈ 0, 7.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.401 ±(99.9%) 151.510 B/op [Average]
[info]   (min, avg, max) = (0.513, 23.401, 92.164), stdev = 39.347
[info]   CI (99.9%): [≈ 0, 174.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 13.000), stdev = 4.278
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34223.144 ops/s
[info] # Warmup Iteration   2: 76623.802 ops/s
[info] # Warmup Iteration   3: 96668.119 ops/s
[info] # Warmup Iteration   4: 101938.221 ops/s
[info] # Warmup Iteration   5: 102466.690 ops/s
[info] Iteration   1: 102192.433 ops/s
[info]                  ·gc.alloc.rate:                   1945.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              29965.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30819.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.652 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 102857.158 ops/s
[info]                  ·gc.alloc.rate:                   1948.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              29817.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30579.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 101712.513 ops/s
[info]                  ·gc.alloc.rate:                   1975.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              30574.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30861.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 103092.655 ops/s
[info]                  ·gc.alloc.rate:                   1962.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              29964.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30447.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 102301.566 ops/s
[info]                  ·gc.alloc.rate:               1961.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          30172.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30750.345 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   102431.265 ±(99.9%) 2117.231 ops/s [Average]
[info]   (min, avg, max) = (101712.513, 102431.265, 103092.655), stdev = 549.838
[info]   CI (99.9%): [100314.034, 104548.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1958.946 ±(99.9%) 46.825 MB/sec [Average]
[info]   (min, avg, max) = (1945.659, 1958.946, 1975.899), stdev = 12.160
[info]   CI (99.9%): [1912.121, 2005.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   30098.948 ±(99.9%) 1133.812 B/op [Average]
[info]   (min, avg, max) = (29817.691, 30098.948, 30574.736), stdev = 294.447
[info]   CI (99.9%): [28965.136, 31232.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1997.542 ±(99.9%) 11.403 MB/sec [Average]
[info]   (min, avg, max) = (1994.443, 1997.542, 2001.131), stdev = 2.961
[info]   CI (99.9%): [1986.139, 2008.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30691.637 ±(99.9%) 669.696 B/op [Average]
[info]   (min, avg, max) = (30447.154, 30691.637, 30861.693), stdev = 173.918
[info]   CI (99.9%): [30021.941, 31361.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 5.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.354), stdev = 1.434
[info]   CI (99.9%): [≈ 0, 6.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.348 ±(99.9%) 85.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.348, 51.652), stdev = 22.077
[info]   CI (99.9%): [≈ 0, 99.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.899
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149321.409 ops/s
[info] # Warmup Iteration   2: 280022.040 ops/s
[info] # Warmup Iteration   3: 287710.736 ops/s
[info] # Warmup Iteration   4: 306790.741 ops/s
[info] # Warmup Iteration   5: 300684.750 ops/s
[info] Iteration   1: 310423.969 ops/s
[info]                  ·gc.alloc.rate:               608.237 MB/sec
[info]                  ·gc.alloc.rate.norm:          3083.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3394.248 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 298235.323 ops/s
[info]                  ·gc.alloc.rate:               654.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          3452.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3533.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 311384.792 ops/s
[info]                  ·gc.alloc.rate:                   617.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              3118.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3385.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.225 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 312303.972 ops/s
[info]                  ·gc.alloc.rate:                   614.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              3094.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3375.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 311528.517 ops/s
[info]                  ·gc.alloc.rate:               611.344 MB/sec
[info]                  ·gc.alloc.rate.norm:          3087.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3385.597 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   308775.314 ±(99.9%) 22833.572 ops/s [Average]
[info]   (min, avg, max) = (298235.323, 308775.314, 312303.972), stdev = 5929.806
[info]   CI (99.9%): [285941.743, 331608.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   621.012 ±(99.9%) 72.706 MB/sec [Average]
[info]   (min, avg, max) = (608.237, 621.012, 654.276), stdev = 18.882
[info]   CI (99.9%): [548.306, 693.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3167.455 ±(99.9%) 616.123 B/op [Average]
[info]   (min, avg, max) = (3083.710, 3167.455, 3452.662), stdev = 160.005
[info]   CI (99.9%): [2551.333, 3783.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.833 ±(99.9%) 1.368 MB/sec [Average]
[info]   (min, avg, max) = (669.488, 669.833, 670.363), stdev = 0.355
[info]   CI (99.9%): [668.464, 671.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3414.864 ±(99.9%) 255.879 B/op [Average]
[info]   (min, avg, max) = (3375.670, 3414.864, 3533.151), stdev = 66.451
[info]   CI (99.9%): [3158.985, 3670.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.090 ±(99.9%) 0.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.440), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.453 ±(99.9%) 3.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.453, 2.225), stdev = 0.991
[info]   CI (99.9%): [≈ 0, 4.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200112.455 ops/s
[info] # Warmup Iteration   2: 358304.050 ops/s
[info] # Warmup Iteration   3: 373996.667 ops/s
[info] # Warmup Iteration   4: 383131.922 ops/s
[info] # Warmup Iteration   5: 383129.204 ops/s
[info] Iteration   1: 383508.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 382485.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 379973.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 381876.213 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 381997.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   381968.086 ±(99.9%) 4957.619 ops/s [Average]
[info]   (min, avg, max) = (379973.031, 381968.086, 383508.721), stdev = 1287.478
[info]   CI (99.9%): [377010.467, 386925.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17119.161 ops/s
[info] # Warmup Iteration   2: 67934.614 ops/s
[info] # Warmup Iteration   3: 80420.722 ops/s
[info] # Warmup Iteration   4: 92531.643 ops/s
[info] # Warmup Iteration   5: 93890.504 ops/s
[info] Iteration   1: 94071.086 ops/s
[info]                  ·gc.alloc.rate:                   1960.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              32798.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33456.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 93645.915 ops/s
[info]                  ·gc.alloc.rate:                   1943.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              32655.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33509.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 95089.829 ops/s
[info]                  ·gc.alloc.rate:                   1963.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              32493.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32977.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 95049.622 ops/s
[info]                  ·gc.alloc.rate:               1972.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          32666.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1993.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33008.254 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 95072.475 ops/s
[info]                  ·gc.alloc.rate:                   1973.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              32665.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33065.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   94585.785 ±(99.9%) 2621.793 ops/s [Average]
[info]   (min, avg, max) = (93645.915, 94585.785, 95089.829), stdev = 680.871
[info]   CI (99.9%): [91963.992, 97207.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1962.766 ±(99.9%) 47.554 MB/sec [Average]
[info]   (min, avg, max) = (1943.121, 1962.766, 1973.666), stdev = 12.350
[info]   CI (99.9%): [1915.213, 2010.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32655.958 ±(99.9%) 417.633 B/op [Average]
[info]   (min, avg, max) = (32493.426, 32655.958, 32798.867), stdev = 108.458
[info]   CI (99.9%): [32238.325, 33073.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1995.598 ±(99.9%) 12.077 MB/sec [Average]
[info]   (min, avg, max) = (1992.840, 1995.598, 1999.993), stdev = 3.136
[info]   CI (99.9%): [1983.520, 2007.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33203.338 ±(99.9%) 992.331 B/op [Average]
[info]   (min, avg, max) = (32977.486, 33203.338, 33509.022), stdev = 257.705
[info]   CI (99.9%): [32211.007, 34195.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.962 ±(99.9%) 7.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.962, 4.392), stdev = 1.921
[info]   CI (99.9%): [≈ 0, 8.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.086 ±(99.9%) 123.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.086, 73.467), stdev = 32.128
[info]   CI (99.9%): [≈ 0, 139.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32399.886 ops/s
[info] # Warmup Iteration   2: 187958.124 ops/s
[info] # Warmup Iteration   3: 209936.608 ops/s
[info] # Warmup Iteration   4: 218090.171 ops/s
[info] # Warmup Iteration   5: 219823.140 ops/s
[info] Iteration   1: 220783.457 ops/s
[info]                  ·gc.alloc.rate:                   2816.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              20068.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18946.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 220121.590 ops/s
[info]                  ·gc.alloc.rate:                   2817.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              20139.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19014.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 221532.531 ops/s
[info]                  ·gc.alloc.rate:               2848.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          20229.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2667.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18949.541 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 220817.665 ops/s
[info]                  ·gc.alloc.rate:                   2893.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              20615.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23860.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 220591.055 ops/s
[info]                  ·gc.alloc.rate:                   2864.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              20428.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19192.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   220769.260 ±(99.9%) 1960.012 ops/s [Average]
[info]   (min, avg, max) = (220121.590, 220769.260, 221532.531), stdev = 509.009
[info]   CI (99.9%): [218809.248, 222729.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2847.827 ±(99.9%) 125.866 MB/sec [Average]
[info]   (min, avg, max) = (2816.166, 2847.827, 2893.315), stdev = 32.687
[info]   CI (99.9%): [2721.961, 2973.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20296.534 ±(99.9%) 861.601 B/op [Average]
[info]   (min, avg, max) = (20068.876, 20296.534, 20615.929), stdev = 223.755
[info]   CI (99.9%): [19434.933, 21158.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2805.226 ±(99.9%) 1171.009 MB/sec [Average]
[info]   (min, avg, max) = (2658.738, 2805.226, 3348.733), stdev = 304.107
[info]   CI (99.9%): [1634.217, 3976.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19992.795 ±(99.9%) 8335.377 B/op [Average]
[info]   (min, avg, max) = (18946.993, 19992.795, 23860.948), stdev = 2164.671
[info]   CI (99.9%): [11657.419, 28328.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.292), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.713 ±(99.9%) 3.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 2.078), stdev = 0.862
[info]   CI (99.9%): [≈ 0, 4.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.825 ops/s
[info] # Warmup Iteration   2: 683352.153 ops/s
[info] # Warmup Iteration   3: 783714.702 ops/s
[info] # Warmup Iteration   4: 815954.404 ops/s
[info] # Warmup Iteration   5: 817935.527 ops/s
[info] Iteration   1: 820318.457 ops/s
[info]                  ·gc.alloc.rate:                   469.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 822372.278 ops/s
[info]                  ·gc.alloc.rate:      455.671 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 820534.069 ops/s
[info]                  ·gc.alloc.rate:               473.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          908.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1272.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 822430.627 ops/s
[info]                  ·gc.alloc.rate:               477.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          913.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1270.356 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 825015.419 ops/s
[info]                  ·gc.alloc.rate:      469.688 MB/sec
[info]                  ·gc.alloc.rate.norm: 896.052 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   822134.170 ±(99.9%) 7281.515 ops/s [Average]
[info]   (min, avg, max) = (820318.457, 822134.170, 825015.419), stdev = 1890.986
[info]   CI (99.9%): [814852.655, 829415.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   469.271 ±(99.9%) 31.684 MB/sec [Average]
[info]   (min, avg, max) = (455.671, 469.271, 477.276), stdev = 8.228
[info]   CI (99.9%): [437.587, 500.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   898.212 ±(99.9%) 61.878 B/op [Average]
[info]   (min, avg, max) = (872.001, 898.212, 913.231), stdev = 16.070
[info]   CI (99.9%): [836.334, 960.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.144 ±(99.9%) 1399.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.144, 663.918), stdev = 363.454
[info]   CI (99.9%): [≈ 0, 1797.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   762.954 ±(99.9%) 2681.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 762.954, 1272.385), stdev = 696.479
[info]   CI (99.9%): [≈ 0, 3444.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84989.639 ops/s
[info] # Warmup Iteration   2: 256634.826 ops/s
[info] # Warmup Iteration   3: 392130.939 ops/s
[info] # Warmup Iteration   4: 408743.531 ops/s
[info] # Warmup Iteration   5: 420425.167 ops/s
[info] Iteration   1: 417868.806 ops/s
[info]                  ·gc.alloc.rate:                   360.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              1356.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1926.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 421330.807 ops/s
[info]                  ·gc.alloc.rate:      354.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 1322.940 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 418607.286 ops/s
[info]                  ·gc.alloc.rate:               370.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          1393.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2482.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 419187.335 ops/s
[info]                  ·gc.alloc.rate:               368.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          1381.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2478.495 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 420541.270 ops/s
[info]                  ·gc.alloc.rate:      352.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 1320.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   419507.101 ±(99.9%) 5442.684 ops/s [Average]
[info]   (min, avg, max) = (417868.806, 419507.101, 421330.807), stdev = 1413.448
[info]   CI (99.9%): [414064.417, 424949.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   361.190 ±(99.9%) 30.964 MB/sec [Average]
[info]   (min, avg, max) = (352.696, 361.190, 370.736), stdev = 8.041
[info]   CI (99.9%): [330.226, 392.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1354.911 ±(99.9%) 128.334 B/op [Average]
[info]   (min, avg, max) = (1320.001, 1354.911, 1393.585), stdev = 33.328
[info]   CI (99.9%): [1226.577, 1483.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.447 ±(99.9%) 1309.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.447, 660.304), stdev = 339.977
[info]   CI (99.9%): [≈ 0, 1675.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1377.482 ±(99.9%) 4919.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1377.482, 2482.065), stdev = 1277.601
[info]   CI (99.9%): [≈ 0, 6297.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451010.180 ops/s
[info] # Warmup Iteration   2: 912240.960 ops/s
[info] # Warmup Iteration   3: 1080260.524 ops/s
[info] # Warmup Iteration   4: 1090820.683 ops/s
[info] # Warmup Iteration   5: 1087218.352 ops/s
[info] Iteration   1: 1071572.037 ops/s
[info]                  ·gc.alloc.rate:               387.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          569.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 751.411 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1084572.012 ops/s
[info]                  ·gc.alloc.rate:      374.915 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1091244.594 ops/s
[info]                  ·gc.alloc.rate:                   391.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1095743.077 ops/s
[info]                  ·gc.alloc.rate:      378.810 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1090003.902 ops/s
[info]                  ·gc.alloc.rate:                   397.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              573.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1086627.124 ±(99.9%) 35849.443 ops/s [Average]
[info]   (min, avg, max) = (1071572.037, 1086627.124, 1095743.077), stdev = 9309.987
[info]   CI (99.9%): [1050777.681, 1122476.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   385.979 ±(99.9%) 35.115 MB/sec [Average]
[info]   (min, avg, max) = (374.915, 385.979, 397.194), stdev = 9.119
[info]   CI (99.9%): [350.864, 421.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.038 ±(99.9%) 54.237 B/op [Average]
[info]   (min, avg, max) = (544.000, 559.038, 573.539), stdev = 14.085
[info]   CI (99.9%): [504.801, 613.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.598 ±(99.9%) 1322.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.598, 668.251), stdev = 343.397
[info]   CI (99.9%): [≈ 0, 1691.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   535.963 ±(99.9%) 1913.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 535.963, 964.760), stdev = 496.917
[info]   CI (99.9%): [≈ 0, 2449.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.030), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6060.040 ops/s
[info] # Warmup Iteration   2: 78187.567 ops/s
[info] # Warmup Iteration   3: 118677.433 ops/s
[info] # Warmup Iteration   4: 120842.367 ops/s
[info] # Warmup Iteration   5: 116734.242 ops/s
[info] Iteration   1: 117683.209 ops/s
[info]                  ·gc.alloc.rate:               3881.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          51885.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3348.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44766.016 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 117099.030 ops/s
[info]                  ·gc.alloc.rate:                   3915.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              52615.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4034.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54221.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 117604.992 ops/s
[info]                  ·gc.alloc.rate:                   3945.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              52796.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4052.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54228.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.557 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 118196.318 ops/s
[info]                  ·gc.alloc.rate:                   3939.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              52443.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45094.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 118124.108 ops/s
[info]                  ·gc.alloc.rate:                   3962.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              52799.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54263.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.555 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   117741.532 ±(99.9%) 1709.148 ops/s [Average]
[info]   (min, avg, max) = (117099.030, 117741.532, 118196.318), stdev = 443.860
[info]   CI (99.9%): [116032.384, 119450.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3928.928 ±(99.9%) 121.864 MB/sec [Average]
[info]   (min, avg, max) = (3881.260, 3928.928, 3962.892), stdev = 31.648
[info]   CI (99.9%): [3807.063, 4050.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52507.931 ±(99.9%) 1455.715 B/op [Average]
[info]   (min, avg, max) = (51885.174, 52507.931, 52799.275), stdev = 378.045
[info]   CI (99.9%): [51052.217, 53963.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3779.303 ±(99.9%) 1447.627 MB/sec [Average]
[info]   (min, avg, max) = (3348.713, 3779.303, 4072.777), stdev = 375.944
[info]   CI (99.9%): [2331.676, 5226.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50514.797 ±(99.9%) 19635.280 B/op [Average]
[info]   (min, avg, max) = (44766.016, 50514.797, 54263.315), stdev = 5099.220
[info]   CI (99.9%): [30879.517, 70150.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.334 ±(99.9%) 0.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.334, 0.557), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44098.684 ops/s
[info] # Warmup Iteration   2: 287096.543 ops/s
[info] # Warmup Iteration   3: 305613.768 ops/s
[info] # Warmup Iteration   4: 317035.013 ops/s
[info] # Warmup Iteration   5: 315721.116 ops/s
[info] Iteration   1: 314503.985 ops/s
[info]                  ·gc.alloc.rate:                   1863.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              9325.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10024.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 315243.878 ops/s
[info]                  ·gc.alloc.rate:                   1848.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              9227.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9987.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.845 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 317362.747 ops/s
[info]                  ·gc.alloc.rate:                   1856.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              9207.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6600.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 317278.703 ops/s
[info]                  ·gc.alloc.rate:                   1869.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9899.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 316993.669 ops/s
[info]                  ·gc.alloc.rate:                   1879.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              9334.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9922.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   316276.596 ±(99.9%) 5059.896 ops/s [Average]
[info]   (min, avg, max) = (314503.985, 316276.596, 317362.747), stdev = 1314.039
[info]   CI (99.9%): [311216.700, 321336.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1863.626 ±(99.9%) 46.448 MB/sec [Average]
[info]   (min, avg, max) = (1848.370, 1863.626, 1879.982), stdev = 12.062
[info]   CI (99.9%): [1817.179, 1910.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9273.709 ±(99.9%) 218.302 B/op [Average]
[info]   (min, avg, max) = (9207.561, 9273.709, 9334.293), stdev = 56.692
[info]   CI (99.9%): [9055.407, 9492.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1865.799 ±(99.9%) 1151.333 MB/sec [Average]
[info]   (min, avg, max) = (1330.959, 1865.799, 2003.407), stdev = 298.998
[info]   CI (99.9%): [714.466, 3017.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9286.895 ±(99.9%) 5785.551 B/op [Average]
[info]   (min, avg, max) = (6600.635, 9286.895, 10024.283), stdev = 1502.489
[info]   CI (99.9%): [3501.344, 15072.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 5.963 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.885, 3.594), stdev = 1.549
[info]   CI (99.9%): [≈ 0, 6.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.428 ±(99.9%) 29.839 B/op [Average]
[info]   (min, avg, max) = (0.103, 4.428, 17.984), stdev = 7.749
[info]   CI (99.9%): [≈ 0, 34.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.795 ops/s
[info] # Warmup Iteration   2: 1860750.444 ops/s
[info] # Warmup Iteration   3: 1790790.261 ops/s
[info] # Warmup Iteration   4: 2026416.695 ops/s
[info] # Warmup Iteration   5: 2032721.345 ops/s
[info] Iteration   1: 2027708.539 ops/s
[info]                  ·gc.alloc.rate:                   704.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              546.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2009339.678 ops/s
[info]                  ·gc.alloc.rate:               708.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 519.932 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1998055.876 ops/s
[info]                  ·gc.alloc.rate:                   693.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              546.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     522.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2020366.052 ops/s
[info]                  ·gc.alloc.rate:               704.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1975652.933 ops/s
[info]                  ·gc.alloc.rate:               713.495 MB/sec
[info]                  ·gc.alloc.rate.norm:          568.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 529.356 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   2006224.616 ±(99.9%) 78740.699 ops/s [Average]
[info]   (min, avg, max) = (1975652.933, 2006224.616, 2027708.539), stdev = 20448.710
[info]   CI (99.9%): [1927483.916, 2084965.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   704.883 ±(99.9%) 27.775 MB/sec [Average]
[info]   (min, avg, max) = (693.767, 704.883, 713.495), stdev = 7.213
[info]   CI (99.9%): [677.108, 732.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   552.919 ±(99.9%) 35.326 B/op [Average]
[info]   (min, avg, max) = (546.235, 552.919, 568.236), stdev = 9.174
[info]   CI (99.9%): [517.594, 588.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.079 ±(99.9%) 2.197 MB/sec [Average]
[info]   (min, avg, max) = (663.199, 664.079, 664.676), stdev = 0.571
[info]   CI (99.9%): [661.883, 666.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   520.901 ±(99.9%) 21.559 B/op [Average]
[info]   (min, avg, max) = (514.718, 520.901, 529.356), stdev = 5.599
[info]   CI (99.9%): [499.342, 542.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525571.130 ops/s
[info] # Warmup Iteration   2: 1526863.269 ops/s
[info] # Warmup Iteration   3: 1920944.814 ops/s
[info] # Warmup Iteration   4: 1925235.224 ops/s
[info] # Warmup Iteration   5: 1884093.375 ops/s
[info] Iteration   1: 1928123.654 ops/s
[info]                  ·gc.alloc.rate:               670.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 540.232 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 1932617.652 ops/s
[info]                  ·gc.alloc.rate:               681.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 539.779 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1927697.142 ops/s
[info]                  ·gc.alloc.rate:                   680.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1930316.085 ops/s
[info]                  ·gc.alloc.rate:               672.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1894177.970 ops/s
[info]                  ·gc.alloc.rate:               668.328 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1922586.501 ±(99.9%) 61616.132 ops/s [Average]
[info]   (min, avg, max) = (1894177.970, 1922586.501, 1932617.652), stdev = 16001.514
[info]   CI (99.9%): [1860970.368, 1984202.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   674.661 ±(99.9%) 23.420 MB/sec [Average]
[info]   (min, avg, max) = (668.328, 674.661, 681.875), stdev = 6.082
[info]   CI (99.9%): [651.241, 698.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   552.252 ±(99.9%) 16.015 B/op [Average]
[info]   (min, avg, max) = (547.180, 552.252, 555.481), stdev = 4.159
[info]   CI (99.9%): [536.238, 568.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.081 ±(99.9%) 3.227 MB/sec [Average]
[info]   (min, avg, max) = (661.842, 663.081, 663.900), stdev = 0.838
[info]   CI (99.9%): [659.854, 666.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   542.796 ±(99.9%) 19.024 B/op [Average]
[info]   (min, avg, max) = (539.779, 542.796, 551.564), stdev = 4.940
[info]   CI (99.9%): [523.773, 561.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1151160.151 ops/s
[info] # Warmup Iteration   2: 2134229.122 ops/s
[info] # Warmup Iteration   3: 2254397.512 ops/s
[info] # Warmup Iteration   4: 2262991.996 ops/s
[info] # Warmup Iteration   5: 2269935.525 ops/s
[info] Iteration   1: 2266154.676 ops/s
[info]                  ·gc.alloc.rate:               794.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2203631.893 ops/s
[info]                  ·gc.alloc.rate:               764.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477.697 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2275974.314 ops/s
[info]                  ·gc.alloc.rate:               792.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2266630.776 ops/s
[info]                  ·gc.alloc.rate:                   792.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2244822.825 ops/s
[info]                  ·gc.alloc.rate:               779.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   2251442.897 ±(99.9%) 111911.001 ops/s [Average]
[info]   (min, avg, max) = (2203631.893, 2251442.897, 2275974.314), stdev = 29062.932
[info]   CI (99.9%): [2139531.895, 2363353.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   784.833 ±(99.9%) 48.575 MB/sec [Average]
[info]   (min, avg, max) = (764.976, 784.833, 794.721), stdev = 12.615
[info]   CI (99.9%): [736.257, 833.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   548.509 ±(99.9%) 8.907 B/op [Average]
[info]   (min, avg, max) = (546.249, 548.509, 551.674), stdev = 2.313
[info]   CI (99.9%): [539.602, 557.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.230 ±(99.9%) 0.742 MB/sec [Average]
[info]   (min, avg, max) = (668.975, 669.230, 669.482), stdev = 0.193
[info]   CI (99.9%): [668.488, 669.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   467.793 ±(99.9%) 23.326 B/op [Average]
[info]   (min, avg, max) = (462.744, 467.793, 477.697), stdev = 6.058
[info]   CI (99.9%): [444.467, 491.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1288850.335 ops/s
[info] # Warmup Iteration   2: 2033552.837 ops/s
[info] # Warmup Iteration   3: 2328334.238 ops/s
[info] # Warmup Iteration   4: 2318168.708 ops/s
[info] # Warmup Iteration   5: 2330448.142 ops/s
[info] Iteration   1: 2331321.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2330259.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2324171.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2317017.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2328217.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2326197.531 ±(99.9%) 22388.468 ops/s [Average]
[info]   (min, avg, max) = (2317017.253, 2326197.531, 2331321.874), stdev = 5814.214
[info]   CI (99.9%): [2303809.063, 2348585.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6670.219 ops/s
[info] # Warmup Iteration   2: 19776.386 ops/s
[info] # Warmup Iteration   3: 47882.815 ops/s
[info] # Warmup Iteration   4: 46773.049 ops/s
[info] # Warmup Iteration   5: 45028.506 ops/s
[info] Iteration   1: 47731.646 ops/s
[info]                  ·gc.alloc.rate:                   1978.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              65231.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65442.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 48770.484 ops/s
[info]                  ·gc.alloc.rate:                   2015.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              65039.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64091.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 48599.878 ops/s
[info]                  ·gc.alloc.rate:                   1999.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              64740.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64338.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 48785.032 ops/s
[info]                  ·gc.alloc.rate:                   1998.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              64486.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64159.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.373 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 48806.990 ops/s
[info]                  ·gc.alloc.rate:                   2010.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              64828.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64237.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   48538.806 ±(99.9%) 1766.121 ops/s [Average]
[info]   (min, avg, max) = (47731.646, 48538.806, 48806.990), stdev = 458.656
[info]   CI (99.9%): [46772.685, 50304.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2000.670 ±(99.9%) 55.147 MB/sec [Average]
[info]   (min, avg, max) = (1978.700, 2000.670, 2015.860), stdev = 14.322
[info]   CI (99.9%): [1945.522, 2055.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   64865.213 ±(99.9%) 1097.670 B/op [Average]
[info]   (min, avg, max) = (64486.237, 64865.213, 65231.606), stdev = 285.061
[info]   CI (99.9%): [63767.543, 65962.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1987.904 ±(99.9%) 10.953 MB/sec [Average]
[info]   (min, avg, max) = (1985.102, 1987.904, 1992.435), stdev = 2.845
[info]   CI (99.9%): [1976.951, 1998.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64454.030 ±(99.9%) 2157.383 B/op [Average]
[info]   (min, avg, max) = (64091.706, 64454.030, 65442.652), stdev = 560.266
[info]   CI (99.9%): [62296.647, 66611.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.537 ±(99.9%) 5.365 MB/sec [Average]
[info]   (min, avg, max) = (0.167, 1.537, 3.178), stdev = 1.393
[info]   CI (99.9%): [≈ 0, 6.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.041 ±(99.9%) 175.577 B/op [Average]
[info]   (min, avg, max) = (5.373, 50.041, 104.768), stdev = 45.597
[info]   CI (99.9%): [≈ 0, 225.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 15.000), stdev = 2.490
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4123.847 ops/s
[info] # Warmup Iteration   2: 12554.391 ops/s
[info] # Warmup Iteration   3: 17648.842 ops/s
[info] # Warmup Iteration   4: 17733.673 ops/s
[info] # Warmup Iteration   5: 16640.046 ops/s
[info] Iteration   1: 18507.589 ops/s
[info]                  ·gc.alloc.rate:                   2089.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              177698.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1901.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161667.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         34.000 ms
[info] Iteration   2: 17836.284 ops/s
[info]                  ·gc.alloc.rate:                   2311.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              203901.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2541.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224128.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 758.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         36.000 ms
[info] Iteration   3: 17177.043 ops/s
[info]                  ·gc.alloc.rate:                   2410.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              220749.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1897.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173765.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 778.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   4: 17658.784 ops/s
[info]                  ·gc.alloc.rate:                   2367.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              210893.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2517.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224296.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.832 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         35.000 ms
[info] Iteration   5: 16426.028 ops/s
[info]                  ·gc.alloc.rate:                   2354.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              225504.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2530.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242342.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         42.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17521.146 ±(99.9%) 2988.293 ops/s [Average]
[info]   (min, avg, max) = (16426.028, 17521.146, 18507.589), stdev = 776.050
[info]   CI (99.9%): [14532.852, 20509.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2306.864 ±(99.9%) 486.190 MB/sec [Average]
[info]   (min, avg, max) = (2089.920, 2306.864, 2410.434), stdev = 126.262
[info]   CI (99.9%): [1820.674, 2793.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207749.304 ±(99.9%) 72347.371 B/op [Average]
[info]   (min, avg, max) = (177698.051, 207749.304, 225504.157), stdev = 18788.382
[info]   CI (99.9%): [135401.933, 280096.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2277.674 ±(99.9%) 1330.091 MB/sec [Average]
[info]   (min, avg, max) = (1897.404, 2277.674, 2541.211), stdev = 345.420
[info]   CI (99.9%): [947.583, 3607.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   205240.083 ±(99.9%) 135945.106 B/op [Average]
[info]   (min, avg, max) = (161667.976, 205240.083, 242342.387), stdev = 35304.512
[info]   CI (99.9%): [69294.978, 341185.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   7.020 ±(99.9%) 7.261 MB/sec [Average]
[info]   (min, avg, max) = (4.163, 7.020, 8.599), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 14.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   633.523 ±(99.9%) 695.531 B/op [Average]
[info]   (min, avg, max) = (370.832, 633.523, 778.502), stdev = 180.627
[info]   CI (99.9%): [≈ 0, 1329.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   176.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (29.000, 35.200, 42.000), stdev = 4.658
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16036.633 ops/s
[info] # Warmup Iteration   2: 65345.251 ops/s
[info] # Warmup Iteration   3: 98490.386 ops/s
[info] # Warmup Iteration   4: 109481.324 ops/s
[info] # Warmup Iteration   5: 108602.793 ops/s
[info] Iteration   1: 108731.998 ops/s
[info]                  ·gc.alloc.rate:               1205.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          17446.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19172.744 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 108879.044 ops/s
[info]                  ·gc.alloc.rate:                   1213.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              17543.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19171.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 108956.211 ops/s
[info]                  ·gc.alloc.rate:               1193.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          17236.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9588.669 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 108938.807 ops/s
[info]                  ·gc.alloc.rate:               1207.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          17440.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19218.119 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 107140.795 ops/s
[info]                  ·gc.alloc.rate:                   1182.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              17367.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19580.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   108529.371 ±(99.9%) 3008.252 ops/s [Average]
[info]   (min, avg, max) = (107140.795, 108529.371, 108956.211), stdev = 781.233
[info]   CI (99.9%): [105521.119, 111537.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1200.509 ±(99.9%) 47.411 MB/sec [Average]
[info]   (min, avg, max) = (1182.616, 1200.509, 1213.669), stdev = 12.312
[info]   CI (99.9%): [1153.098, 1247.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17407.022 ±(99.9%) 438.205 B/op [Average]
[info]   (min, avg, max) = (17236.978, 17407.022, 17543.368), stdev = 113.801
[info]   CI (99.9%): [16968.816, 17845.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1195.693 ±(99.9%) 1144.423 MB/sec [Average]
[info]   (min, avg, max) = (664.075, 1195.693, 1333.320), stdev = 297.203
[info]   CI (99.9%): [51.270, 2340.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17346.322 ±(99.9%) 16711.937 B/op [Average]
[info]   (min, avg, max) = (9588.669, 17346.322, 19580.438), stdev = 4340.037
[info]   CI (99.9%): [634.385, 34058.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.156 ±(99.9%) 1.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.740), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.292 ±(99.9%) 18.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.292, 10.861), stdev = 4.797
[info]   CI (99.9%): [≈ 0, 20.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57710.716 ops/s
[info] # Warmup Iteration   2: 252369.613 ops/s
[info] # Warmup Iteration   3: 257371.515 ops/s
[info] # Warmup Iteration   4: 276149.461 ops/s
[info] # Warmup Iteration   5: 279259.029 ops/s
[info] Iteration   1: 279495.138 ops/s
[info]                  ·gc.alloc.rate:               931.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          5246.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3762.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 279236.177 ops/s
[info]                  ·gc.alloc.rate:               926.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          5222.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3765.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 276811.576 ops/s
[info]                  ·gc.alloc.rate:                   944.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              5367.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7597.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 279663.350 ops/s
[info]                  ·gc.alloc.rate:               931.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          5243.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3760.084 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 279637.565 ops/s
[info]                  ·gc.alloc.rate:               928.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          5225.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3762.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   278968.761 ±(99.9%) 4689.170 ops/s [Average]
[info]   (min, avg, max) = (276811.576, 278968.761, 279663.350), stdev = 1217.762
[info]   CI (99.9%): [274279.592, 283657.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   932.647 ±(99.9%) 26.976 MB/sec [Average]
[info]   (min, avg, max) = (926.504, 932.647, 944.467), stdev = 7.005
[info]   CI (99.9%): [905.671, 959.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5260.982 ±(99.9%) 232.964 B/op [Average]
[info]   (min, avg, max) = (5222.129, 5260.982, 5367.513), stdev = 60.500
[info]   CI (99.9%): [5028.018, 5493.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.016 ±(99.9%) 1151.342 MB/sec [Average]
[info]   (min, avg, max) = (668.127, 802.016, 1336.883), stdev = 299.000
[info]   CI (99.9%): [≈ 0, 1953.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4529.662 ±(99.9%) 6604.108 B/op [Average]
[info]   (min, avg, max) = (3760.084, 4529.662, 7597.663), stdev = 1715.066
[info]   CI (99.9%): [≈ 0, 11133.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.355), stdev = 0.159
[info]   CI (99.9%): [≈ 0, 0.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1462.351 ops/s
[info] # Warmup Iteration   2: 7133.080 ops/s
[info] # Warmup Iteration   3: 15132.549 ops/s
[info] # Warmup Iteration   4: 16406.954 ops/s
[info] # Warmup Iteration   5: 16289.472 ops/s
[info] Iteration   1: 16613.479 ops/s
[info]                  ·gc.alloc.rate:                   2104.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              199386.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1939.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183702.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 16927.024 ops/s
[info]                  ·gc.alloc.rate:                   2128.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              197871.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1944.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180729.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16563.110 ops/s
[info]                  ·gc.alloc.rate:               2183.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          207456.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1930.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 183445.412 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 15957.892 ops/s
[info]                  ·gc.alloc.rate:                   2198.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              216826.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1931.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190453.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 17356.676 ops/s
[info]                  ·gc.alloc.rate:                   2295.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              208126.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2585.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234436.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 732.961 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16683.636 ±(99.9%) 1980.719 ops/s [Average]
[info]   (min, avg, max) = (15957.892, 16683.636, 17356.676), stdev = 514.386
[info]   CI (99.9%): [14702.917, 18664.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2182.139 ±(99.9%) 285.418 MB/sec [Average]
[info]   (min, avg, max) = (2104.669, 2182.139, 2295.433), stdev = 74.122
[info]   CI (99.9%): [1896.721, 2467.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   205933.493 ±(99.9%) 29429.079 B/op [Average]
[info]   (min, avg, max) = (197871.823, 205933.493, 216826.190), stdev = 7642.638
[info]   CI (99.9%): [176504.415, 235362.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2066.154 ±(99.9%) 1118.353 MB/sec [Average]
[info]   (min, avg, max) = (1930.687, 2066.154, 2585.597), stdev = 290.433
[info]   CI (99.9%): [947.801, 3184.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   194553.332 ±(99.9%) 86953.132 B/op [Average]
[info]   (min, avg, max) = (180729.165, 194553.332, 234436.250), stdev = 22581.452
[info]   CI (99.9%): [107600.200, 281506.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.098 ±(99.9%) 13.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.098, 8.084), stdev = 3.407
[info]   CI (99.9%): [≈ 0, 15.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   193.433 ±(99.9%) 1186.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193.433, 732.961), stdev = 308.191
[info]   CI (99.9%): [≈ 0, 1380.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 22.000), stdev = 7.259
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9920.616 ops/s
[info] # Warmup Iteration   2: 35702.146 ops/s
[info] # Warmup Iteration   3: 41834.127 ops/s
[info] # Warmup Iteration   4: 37429.790 ops/s
[info] # Warmup Iteration   5: 43084.231 ops/s
[info] Iteration   1: 43666.394 ops/s
[info]                  ·gc.alloc.rate:                   3416.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              123143.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3331.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120067.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.251 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 43501.174 ops/s
[info]                  ·gc.alloc.rate:                   3403.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              123136.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120898.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 43588.210 ops/s
[info]                  ·gc.alloc.rate:                   3401.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              122833.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121141.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.503 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 43621.983 ops/s
[info]                  ·gc.alloc.rate:                   3429.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              123701.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97193.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 43052.760 ops/s
[info]                  ·gc.alloc.rate:                   3412.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              124750.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123495.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.283 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   43486.104 ±(99.9%) 961.520 ops/s [Average]
[info]   (min, avg, max) = (43052.760, 43486.104, 43666.394), stdev = 249.704
[info]   CI (99.9%): [42524.584, 44447.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3412.907 ±(99.9%) 43.139 MB/sec [Average]
[info]   (min, avg, max) = (3401.967, 3412.907, 3429.789), stdev = 11.203
[info]   CI (99.9%): [3369.768, 3456.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123513.171 ±(99.9%) 2924.779 B/op [Average]
[info]   (min, avg, max) = (122833.209, 123513.171, 124750.619), stdev = 759.556
[info]   CI (99.9%): [120588.392, 126437.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3220.230 ±(99.9%) 1133.048 MB/sec [Average]
[info]   (min, avg, max) = (2694.802, 3220.230, 3378.251), stdev = 294.249
[info]   CI (99.9%): [2087.182, 4353.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   116559.201 ±(99.9%) 41974.260 B/op [Average]
[info]   (min, avg, max) = (97193.182, 116559.201, 123495.813), stdev = 10900.582
[info]   CI (99.9%): [74584.940, 158533.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.412 ±(99.9%) 6.615 B/op [Average]
[info]   (min, avg, max) = (0.751, 2.412, 5.272), stdev = 1.718
[info]   CI (99.9%): [≈ 0, 9.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 12.000), stdev = 2.702
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44268.247 ops/s
[info] # Warmup Iteration   2: 117421.497 ops/s
[info] # Warmup Iteration   3: 122818.351 ops/s
[info] # Warmup Iteration   4: 144870.030 ops/s
[info] # Warmup Iteration   5: 145993.983 ops/s
[info] Iteration   1: 147009.907 ops/s
[info]                  ·gc.alloc.rate:                   2034.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              21786.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21434.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.554 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 147493.894 ops/s
[info]                  ·gc.alloc.rate:                   2040.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              21770.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21417.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 146044.137 ops/s
[info]                  ·gc.alloc.rate:                   2019.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              21755.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21666.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 147439.697 ops/s
[info]                  ·gc.alloc.rate:                   2038.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              21750.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21507.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 147847.553 ops/s
[info]                  ·gc.alloc.rate:                   2043.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              21740.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21454.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   147167.038 ±(99.9%) 2674.657 ops/s [Average]
[info]   (min, avg, max) = (146044.137, 147167.038, 147847.553), stdev = 694.600
[info]   CI (99.9%): [144492.381, 149841.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2035.268 ±(99.9%) 36.304 MB/sec [Average]
[info]   (min, avg, max) = (2019.359, 2035.268, 2043.446), stdev = 9.428
[info]   CI (99.9%): [1998.964, 2071.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21760.716 ±(99.9%) 67.882 B/op [Average]
[info]   (min, avg, max) = (21740.901, 21760.716, 21786.008), stdev = 17.629
[info]   CI (99.9%): [21692.835, 21828.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2010.488 ±(99.9%) 22.799 MB/sec [Average]
[info]   (min, avg, max) = (2002.073, 2010.488, 2016.566), stdev = 5.921
[info]   CI (99.9%): [1987.689, 2033.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21496.073 ±(99.9%) 390.051 B/op [Average]
[info]   (min, avg, max) = (21417.063, 21496.073, 21666.751), stdev = 101.295
[info]   CI (99.9%): [21106.022, 21886.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.194 ±(99.9%) 1.377 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.194, 0.833), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.066 ±(99.9%) 14.689 B/op [Average]
[info]   (min, avg, max) = (0.221, 2.066, 8.885), stdev = 3.815
[info]   CI (99.9%): [≈ 0, 16.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142074.208 ops/s
[info] # Warmup Iteration   2: 239371.336 ops/s
[info] # Warmup Iteration   3: 247455.421 ops/s
[info] # Warmup Iteration   4: 252751.064 ops/s
[info] # Warmup Iteration   5: 253856.621 ops/s
[info] Iteration   1: 253949.931 ops/s
[info]                  ·gc.alloc.rate:                   831.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              5152.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4148.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 253887.605 ops/s
[info]                  ·gc.alloc.rate:               822.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          5097.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4150.200 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 253877.438 ops/s
[info]                  ·gc.alloc.rate:               831.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          5150.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4154.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 252100.705 ops/s
[info]                  ·gc.alloc.rate:                   841.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              5252.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8369.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 250036.212 ops/s
[info]                  ·gc.alloc.rate:               822.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          5177.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4220.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   252770.378 ±(99.9%) 6610.685 ops/s [Average]
[info]   (min, avg, max) = (250036.212, 252770.378, 253949.931), stdev = 1716.774
[info]   CI (99.9%): [246159.693, 259381.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   829.887 ±(99.9%) 29.817 MB/sec [Average]
[info]   (min, avg, max) = (822.459, 829.887, 841.364), stdev = 7.743
[info]   CI (99.9%): [800.070, 859.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5166.408 ±(99.9%) 217.731 B/op [Average]
[info]   (min, avg, max) = (5097.626, 5166.408, 5252.966), stdev = 56.544
[info]   CI (99.9%): [4948.677, 5384.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.168 ±(99.9%) 1154.609 MB/sec [Average]
[info]   (min, avg, max) = (669.554, 804.168, 1340.553), stdev = 299.848
[info]   CI (99.9%): [≈ 0, 1958.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5008.740 ±(99.9%) 7235.416 B/op [Average]
[info]   (min, avg, max) = (4148.975, 5008.740, 8369.594), stdev = 1879.015
[info]   CI (99.9%): [≈ 0, 12244.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 0.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.520), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 0.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166971.207 ops/s
[info] # Warmup Iteration   2: 255399.928 ops/s
[info] # Warmup Iteration   3: 280545.661 ops/s
[info] # Warmup Iteration   4: 280442.113 ops/s
[info] # Warmup Iteration   5: 280581.288 ops/s
[info] Iteration   1: 280657.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 280447.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 280721.938 ops/s
[info]                  ·gc.alloc.rate:      0.836 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.688 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 280418.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 280427.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   280534.468 ±(99.9%) 553.780 ops/s [Average]
[info]   (min, avg, max) = (280418.501, 280534.468, 280721.938), stdev = 143.815
[info]   CI (99.9%): [279980.688, 281088.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.168 ±(99.9%) 1.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.168, 0.836), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.939 ±(99.9%) 8.071 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.939, 4.688), stdev = 2.096
[info]   CI (99.9%): [≈ 0, 9.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8221.566 ops/s
[info] # Warmup Iteration   2: 45738.002 ops/s
[info] # Warmup Iteration   3: 57234.168 ops/s
[info] # Warmup Iteration   4: 57247.790 ops/s
[info] # Warmup Iteration   5: 61522.436 ops/s
[info] Iteration   1: 61799.501 ops/s
[info]                  ·gc.alloc.rate:                   3990.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              101622.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3994.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101739.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.711 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 61849.957 ops/s
[info]                  ·gc.alloc.rate:                   4017.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              102236.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4014.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102165.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 60804.846 ops/s
[info]                  ·gc.alloc.rate:                   4007.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              103682.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4039.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104523.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 60821.561 ops/s
[info]                  ·gc.alloc.rate:                   3980.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              103012.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87420.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 61521.729 ops/s
[info]                  ·gc.alloc.rate:                   4053.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              103682.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104019.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.065 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   61359.519 ±(99.9%) 1979.888 ops/s [Average]
[info]   (min, avg, max) = (60804.846, 61359.519, 61849.957), stdev = 514.171
[info]   CI (99.9%): [59379.631, 63339.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4009.897 ±(99.9%) 108.690 MB/sec [Average]
[info]   (min, avg, max) = (3980.807, 4009.897, 4053.313), stdev = 28.226
[info]   CI (99.9%): [3901.207, 4118.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102847.372 ±(99.9%) 3495.480 B/op [Average]
[info]   (min, avg, max) = (101622.429, 102847.372, 103682.815), stdev = 907.765
[info]   CI (99.9%): [99351.892, 106342.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3898.876 ±(99.9%) 1125.435 MB/sec [Average]
[info]   (min, avg, max) = (3378.260, 3898.876, 4066.474), stdev = 292.272
[info]   CI (99.9%): [2773.441, 5024.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99973.508 ±(99.9%) 27403.094 B/op [Average]
[info]   (min, avg, max) = (87420.118, 99973.508, 104523.098), stdev = 7116.496
[info]   CI (99.9%): [72570.415, 127376.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.277 ±(99.9%) 5.314 B/op [Average]
[info]   (min, avg, max) = (0.530, 1.277, 3.711), stdev = 1.380
[info]   CI (99.9%): [≈ 0, 6.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2704.650 ops/s
[info] # Warmup Iteration   2: 14120.924 ops/s
[info] # Warmup Iteration   3: 26296.932 ops/s
[info] # Warmup Iteration   4: 36932.727 ops/s
[info] # Warmup Iteration   5: 39096.268 ops/s
[info] Iteration   1: 36139.017 ops/s
[info]                  ·gc.alloc.rate:                   1831.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              79752.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1913.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83348.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   2: 38123.875 ops/s
[info]                  ·gc.alloc.rate:                   1625.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              67097.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1273.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52551.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 37671.572 ops/s
[info]                  ·gc.alloc.rate:                   1624.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              67863.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1912.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79901.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         30.000 ms
[info] Iteration   4: 38580.294 ops/s
[info]                  ·gc.alloc.rate:                   1640.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              66938.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1278.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52176.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 38631.557 ops/s
[info]                  ·gc.alloc.rate:                   1657.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              67546.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1916.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78077.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   37829.263 ±(99.9%) 3934.595 ops/s [Average]
[info]   (min, avg, max) = (36139.017, 37829.263, 38631.557), stdev = 1021.802
[info]   CI (99.9%): [33894.668, 41763.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1676.050 ±(99.9%) 338.041 MB/sec [Average]
[info]   (min, avg, max) = (1624.424, 1676.050, 1831.204), stdev = 87.788
[info]   CI (99.9%): [1338.009, 2014.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   69839.689 ±(99.9%) 21383.864 B/op [Average]
[info]   (min, avg, max) = (66938.787, 69839.689, 79752.225), stdev = 5553.321
[info]   CI (99.9%): [48455.826, 91223.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1659.025 ±(99.9%) 1345.822 MB/sec [Average]
[info]   (min, avg, max) = (1273.355, 1659.025, 1916.413), stdev = 349.506
[info]   CI (99.9%): [313.203, 3004.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69211.049 ±(99.9%) 59670.147 B/op [Average]
[info]   (min, avg, max) = (52176.072, 69211.049, 83348.795), stdev = 15496.148
[info]   CI (99.9%): [9540.902, 128881.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.312 ±(99.9%) 10.966 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 3.312, 7.261), stdev = 2.848
[info]   CI (99.9%): [≈ 0, 14.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   136.465 ±(99.9%) 443.669 B/op [Average]
[info]   (min, avg, max) = (1.719, 136.465, 295.816), stdev = 115.219
[info]   CI (99.9%): [≈ 0, 580.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   110.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 22.000, 32.000), stdev = 8.631
[info]   CI (99.9%): [110.000, 110.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3316.832 ops/s
[info] # Warmup Iteration   2: 30425.636 ops/s
[info] # Warmup Iteration   3: 37063.310 ops/s
[info] # Warmup Iteration   4: 42121.489 ops/s
[info] # Warmup Iteration   5: 37001.190 ops/s
[info] Iteration   1: 39230.099 ops/s
[info]                  ·gc.alloc.rate:                   1231.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              49373.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52995.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39172.174 ops/s
[info]                  ·gc.alloc.rate:               1223.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          49174.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53048.412 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 39003.322 ops/s
[info]                  ·gc.alloc.rate:                   1221.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              49288.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53302.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 39303.738 ops/s
[info]                  ·gc.alloc.rate:               1223.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          48976.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26474.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 39222.267 ops/s
[info]                  ·gc.alloc.rate:               1234.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          49552.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53113.096 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   39186.320 ±(99.9%) 433.451 ops/s [Average]
[info]   (min, avg, max) = (39003.322, 39186.320, 39303.738), stdev = 112.566
[info]   CI (99.9%): [38752.869, 39619.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1226.935 ±(99.9%) 22.250 MB/sec [Average]
[info]   (min, avg, max) = (1221.490, 1226.935, 1234.897), stdev = 5.778
[info]   CI (99.9%): [1204.685, 1249.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   49272.892 ±(99.9%) 831.258 B/op [Average]
[info]   (min, avg, max) = (48976.105, 49272.892, 49552.552), stdev = 215.875
[info]   CI (99.9%): [48441.635, 50104.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.527 ±(99.9%) 1137.223 MB/sec [Average]
[info]   (min, avg, max) = (661.223, 1189.527, 1323.629), stdev = 295.333
[info]   CI (99.9%): [52.303, 2326.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47786.748 ±(99.9%) 45878.447 B/op [Average]
[info]   (min, avg, max) = (26474.477, 47786.748, 53302.389), stdev = 11914.487
[info]   CI (99.9%): [1908.301, 93665.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.532 ±(99.9%) 4.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.532, 2.640), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.343 ±(99.9%) 181.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.343, 105.875), stdev = 47.256
[info]   CI (99.9%): [≈ 0, 203.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247512.990 ops/s
[info] # Warmup Iteration   2: 583998.993 ops/s
[info] # Warmup Iteration   3: 649498.537 ops/s
[info] # Warmup Iteration   4: 645774.546 ops/s
[info] # Warmup Iteration   5: 639605.397 ops/s
[info] Iteration   1: 644056.061 ops/s
[info]                  ·gc.alloc.rate:                   1733.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              4235.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4902.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 650492.051 ops/s
[info]                  ·gc.alloc.rate:                   1721.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              4164.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3239.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 629361.613 ops/s
[info]                  ·gc.alloc.rate:                   1706.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              4267.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5010.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 654072.049 ops/s
[info]                  ·gc.alloc.rate:                   1742.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              4192.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3211.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 647829.921 ops/s
[info]                  ·gc.alloc.rate:                   1727.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              4195.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4864.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   645162.339 ±(99.9%) 36823.087 ops/s [Average]
[info]   (min, avg, max) = (629361.613, 645162.339, 654072.049), stdev = 9562.839
[info]   CI (99.9%): [608339.252, 681985.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1726.177 ±(99.9%) 52.086 MB/sec [Average]
[info]   (min, avg, max) = (1706.678, 1726.177, 1742.757), stdev = 13.526
[info]   CI (99.9%): [1674.091, 1778.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4210.985 ±(99.9%) 155.303 B/op [Average]
[info]   (min, avg, max) = (4164.197, 4210.985, 4267.086), stdev = 40.332
[info]   CI (99.9%): [4055.682, 4366.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1737.315 ±(99.9%) 1407.495 MB/sec [Average]
[info]   (min, avg, max) = (1334.840, 1737.315, 2006.160), stdev = 365.522
[info]   CI (99.9%): [329.820, 3144.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4245.694 ±(99.9%) 3592.063 B/op [Average]
[info]   (min, avg, max) = (3211.471, 4245.694, 5010.981), stdev = 932.847
[info]   CI (99.9%): [653.631, 7837.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.172 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.804, 3.667), stdev = 1.603
[info]   CI (99.9%): [≈ 0, 6.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.950 ±(99.9%) 14.926 B/op [Average]
[info]   (min, avg, max) = (0.051, 1.950, 8.871), stdev = 3.876
[info]   CI (99.9%): [≈ 0, 16.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:53:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 513.505 ops/s
[info] # Warmup Iteration   2: 12607.558 ops/s
[info] # Warmup Iteration   3: 25833.241 ops/s
[info] # Warmup Iteration   4: 36757.423 ops/s
[info] # Warmup Iteration   5: 37870.345 ops/s
[info] Iteration   1: 36330.123 ops/s
[info]                  ·gc.alloc.rate:                   2401.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              104046.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85926.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34186.178 ops/s
[info]                  ·gc.alloc.rate:                   2264.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              104245.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2650.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121967.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231.828 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 35613.450 ops/s
[info]                  ·gc.alloc.rate:                   2089.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              92342.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87889.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35902.390 ops/s
[info]                  ·gc.alloc.rate:                   2103.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              92223.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87266.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 36148.216 ops/s
[info]                  ·gc.alloc.rate:                   2107.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              91753.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86936.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   35636.071 ±(99.9%) 3288.656 ops/s [Average]
[info]   (min, avg, max) = (34186.178, 35636.071, 36330.123), stdev = 854.053
[info]   CI (99.9%): [32347.416, 38924.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2193.541 ±(99.9%) 526.257 MB/sec [Average]
[info]   (min, avg, max) = (2089.585, 2193.541, 2401.757), stdev = 136.667
[info]   CI (99.9%): [1667.284, 2719.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   96922.270 ±(99.9%) 25406.639 B/op [Average]
[info]   (min, avg, max) = (91753.416, 96922.270, 104245.148), stdev = 6598.023
[info]   CI (99.9%): [71515.631, 122328.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2122.000 ±(99.9%) 1136.839 MB/sec [Average]
[info]   (min, avg, max) = (1983.490, 2122.000, 2650.061), stdev = 295.233
[info]   CI (99.9%): [985.161, 3258.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   93997.299 ±(99.9%) 60269.815 B/op [Average]
[info]   (min, avg, max) = (85926.381, 93997.299, 121967.382), stdev = 15651.880
[info]   CI (99.9%): [33727.484, 154267.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.903 ±(99.9%) 9.594 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.903, 5.037), stdev = 2.491
[info]   CI (99.9%): [≈ 0, 11.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85.211 ±(99.9%) 432.295 B/op [Average]
[info]   (min, avg, max) = (2.719, 85.211, 231.828), stdev = 112.266
[info]   CI (99.9%): [≈ 0, 517.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 11.000), stdev = 3.240
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10721.081 ops/s
[info] # Warmup Iteration   2: 86676.030 ops/s
[info] # Warmup Iteration   3: 85765.340 ops/s
[info] # Warmup Iteration   4: 95714.749 ops/s
[info] # Warmup Iteration   5: 95613.700 ops/s
[info] Iteration   1: 96938.849 ops/s
[info]                  ·gc.alloc.rate:                   2149.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              34899.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32499.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 96121.621 ops/s
[info]                  ·gc.alloc.rate:                   2136.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              34979.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32678.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96606.605 ops/s
[info]                  ·gc.alloc.rate:                   2145.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              34940.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32503.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 97644.695 ops/s
[info]                  ·gc.alloc.rate:               2168.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          34936.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32200.940 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 97229.111 ops/s
[info]                  ·gc.alloc.rate:                   2184.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              35358.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32417.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   96908.176 ±(99.9%) 2242.000 ops/s [Average]
[info]   (min, avg, max) = (96121.621, 96908.176, 97644.695), stdev = 582.240
[info]   CI (99.9%): [94666.176, 99150.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2156.759 ±(99.9%) 74.365 MB/sec [Average]
[info]   (min, avg, max) = (2136.318, 2156.759, 2184.354), stdev = 19.312
[info]   CI (99.9%): [2082.394, 2231.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   35023.006 ±(99.9%) 730.325 B/op [Average]
[info]   (min, avg, max) = (34899.665, 35023.006, 35358.500), stdev = 189.663
[info]   CI (99.9%): [34292.681, 35753.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1998.852 ±(99.9%) 12.593 MB/sec [Average]
[info]   (min, avg, max) = (1995.676, 1998.852, 2002.671), stdev = 3.270
[info]   CI (99.9%): [1986.259, 2011.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32459.794 ±(99.9%) 666.531 B/op [Average]
[info]   (min, avg, max) = (32200.940, 32459.794, 32678.015), stdev = 173.096
[info]   CI (99.9%): [31793.263, 33126.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.902 ±(99.9%) 7.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.902, 4.364), stdev = 1.935
[info]   CI (99.9%): [≈ 0, 8.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.645 ±(99.9%) 120.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.645, 70.847), stdev = 31.421
[info]   CI (99.9%): [≈ 0, 135.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33384.268 ops/s
[info] # Warmup Iteration   2: 217751.832 ops/s
[info] # Warmup Iteration   3: 226207.982 ops/s
[info] # Warmup Iteration   4: 249915.319 ops/s
[info] # Warmup Iteration   5: 246975.779 ops/s
[info] Iteration   1: 248254.499 ops/s
[info]                  ·gc.alloc.rate:               1695.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          10747.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8450.673 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 252060.940 ops/s
[info]                  ·gc.alloc.rate:                   1730.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              10808.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12498.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 252309.173 ops/s
[info]                  ·gc.alloc.rate:                   1726.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              10770.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8310.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 245436.714 ops/s
[info]                  ·gc.alloc.rate:                   1707.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              10948.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12789.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 252545.980 ops/s
[info]                  ·gc.alloc.rate:                   1726.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              10760.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8290.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   250121.461 ±(99.9%) 12155.227 ops/s [Average]
[info]   (min, avg, max) = (245436.714, 250121.461, 252545.980), stdev = 3156.674
[info]   CI (99.9%): [237966.234, 262276.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1717.507 ±(99.9%) 58.501 MB/sec [Average]
[info]   (min, avg, max) = (1695.844, 1717.507, 1730.953), stdev = 15.193
[info]   CI (99.9%): [1659.006, 1776.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10806.884 ±(99.9%) 317.295 B/op [Average]
[info]   (min, avg, max) = (10747.127, 10806.884, 10948.623), stdev = 82.401
[info]   CI (99.9%): [10489.589, 11124.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1598.452 ±(99.9%) 1404.714 MB/sec [Average]
[info]   (min, avg, max) = (1330.353, 1598.452, 2001.765), stdev = 364.800
[info]   CI (99.9%): [193.737, 3003.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10067.912 ±(99.9%) 9067.455 B/op [Average]
[info]   (min, avg, max) = (8290.074, 10067.912, 12789.283), stdev = 2354.789
[info]   CI (99.9%): [1000.457, 19135.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.919 ±(99.9%) 7.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.919, 4.364), stdev = 1.927
[info]   CI (99.9%): [≈ 0, 8.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.737 ±(99.9%) 46.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.737, 27.247), stdev = 12.029
[info]   CI (99.9%): [≈ 0, 52.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.362
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635576.417 ops/s
[info] # Warmup Iteration   2: 1033123.578 ops/s
[info] # Warmup Iteration   3: 1049397.819 ops/s
[info] # Warmup Iteration   4: 1107920.778 ops/s
[info] # Warmup Iteration   5: 1066991.859 ops/s
[info] Iteration   1: 1110569.736 ops/s
[info]                  ·gc.alloc.rate:                   942.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              1334.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1119043.380 ops/s
[info]                  ·gc.alloc.rate:               953.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          1340.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 942.506 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1116228.085 ops/s
[info]                  ·gc.alloc.rate:                   962.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              1356.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1890.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1118728.584 ops/s
[info]                  ·gc.alloc.rate:               943.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          1326.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 943.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1122702.633 ops/s
[info]                  ·gc.alloc.rate:               946.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          1325.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 940.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1117454.484 ±(99.9%) 17284.502 ops/s [Average]
[info]   (min, avg, max) = (1110569.736, 1117454.484, 1122702.633), stdev = 4488.730
[info]   CI (99.9%): [1100169.982, 1134738.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   949.418 ±(99.9%) 32.626 MB/sec [Average]
[info]   (min, avg, max) = (942.005, 949.418, 962.311), stdev = 8.473
[info]   CI (99.9%): [916.792, 982.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1337.048 ±(99.9%) 48.715 B/op [Average]
[info]   (min, avg, max) = (1325.826, 1337.048, 1356.844), stdev = 12.651
[info]   CI (99.9%): [1288.333, 1385.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.371 ±(99.9%) 1154.309 MB/sec [Average]
[info]   (min, avg, max) = (669.555, 804.371, 1340.615), stdev = 299.770
[info]   CI (99.9%): [≈ 0, 1958.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1133.010 ±(99.9%) 1630.056 B/op [Average]
[info]   (min, avg, max) = (940.316, 1133.010, 1890.248), stdev = 423.320
[info]   CI (99.9%): [≈ 0, 2763.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 933432.218 ops/s
[info] # Warmup Iteration   2: 1126254.748 ops/s
[info] # Warmup Iteration   3: 1183979.687 ops/s
[info] # Warmup Iteration   4: 1181281.815 ops/s
[info] # Warmup Iteration   5: 1186743.628 ops/s
[info] Iteration   1: 1183323.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1184355.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1183308.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1184041.980 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1186009.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1184207.811 ±(99.9%) 4255.230 ops/s [Average]
[info]   (min, avg, max) = (1183308.436, 1184207.811, 1186009.134), stdev = 1105.070
[info]   CI (99.9%): [1179952.581, 1188463.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25599.567 ops/s
[info] # Warmup Iteration   2: 165453.662 ops/s
[info] # Warmup Iteration   3: 208922.422 ops/s
[info] # Warmup Iteration   4: 233994.296 ops/s
[info] # Warmup Iteration   5: 236972.946 ops/s
[info] Iteration   1: 236411.684 ops/s
[info]                  ·gc.alloc.rate:                   2488.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              16566.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17803.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 233708.899 ops/s
[info]                  ·gc.alloc.rate:                   2455.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              16534.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18002.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 237133.955 ops/s
[info]                  ·gc.alloc.rate:               2489.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          16522.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13325.890 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 236463.429 ops/s
[info]                  ·gc.alloc.rate:                   2522.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              16789.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17864.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 236949.575 ops/s
[info]                  ·gc.alloc.rate:                   2541.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              16879.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17880.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   236133.509 ±(99.9%) 5353.579 ops/s [Average]
[info]   (min, avg, max) = (233708.899, 236133.509, 237133.955), stdev = 1390.307
[info]   CI (99.9%): [230779.930, 241487.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2499.616 ±(99.9%) 128.322 MB/sec [Average]
[info]   (min, avg, max) = (2455.761, 2499.616, 2541.705), stdev = 33.325
[info]   CI (99.9%): [2371.294, 2627.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   16658.435 ±(99.9%) 633.232 B/op [Average]
[info]   (min, avg, max) = (16522.395, 16658.435, 16879.398), stdev = 164.448
[info]   CI (99.9%): [16025.202, 17291.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2546.491 ±(99.9%) 1159.309 MB/sec [Average]
[info]   (min, avg, max) = (2008.099, 2546.491, 2692.401), stdev = 301.069
[info]   CI (99.9%): [1387.181, 3705.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16975.311 ±(99.9%) 7860.580 B/op [Average]
[info]   (min, avg, max) = (13325.890, 16975.311, 18002.633), stdev = 2041.368
[info]   CI (99.9%): [9114.731, 24835.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.540 ±(99.9%) 4.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.540, 2.614), stdev = 1.160
[info]   CI (99.9%): [≈ 0, 5.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.593 ±(99.9%) 29.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.593, 17.406), stdev = 7.722
[info]   CI (99.9%): [≈ 0, 33.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3519.733 ops/s
[info] # Warmup Iteration   2: 36250.588 ops/s
[info] # Warmup Iteration   3: 59157.183 ops/s
[info] # Warmup Iteration   4: 57067.954 ops/s
[info] # Warmup Iteration   5: 53146.327 ops/s
[info] Iteration   1: 52378.380 ops/s
[info]                  ·gc.alloc.rate:                   1431.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              42995.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39472.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 52910.250 ops/s
[info]                  ·gc.alloc.rate:                   1442.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              42907.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39095.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 52970.703 ops/s
[info]                  ·gc.alloc.rate:                   1456.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              43273.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39050.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 51135.124 ops/s
[info]                  ·gc.alloc.rate:                        1401.989 MB/sec
[info]                  ·gc.alloc.rate.norm:                   43152.024 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.013 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.408 B/op
[info]                  ·gc.churn.Metaspace:                   0.040 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1756.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          54068.100 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  3.565 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             109.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      126.777 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              46.000 ms
[info] Iteration   5: 53649.588 ops/s
[info]                  ·gc.alloc.rate:               1460.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          42834.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1309.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38417.824 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   52608.809 ±(99.9%) 3617.301 ops/s [Average]
[info]   (min, avg, max) = (51135.124, 52608.809, 53649.588), stdev = 939.402
[info]   CI (99.9%): [48991.508, 56226.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1438.556 ±(99.9%) 90.776 MB/sec [Average]
[info]   (min, avg, max) = (1401.989, 1438.556, 1460.445), stdev = 23.574
[info]   CI (99.9%): [1347.780, 1529.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43032.694 ±(99.9%) 689.282 B/op [Average]
[info]   (min, avg, max) = (42834.774, 43032.694, 43273.146), stdev = 179.004
[info]   CI (99.9%): [42343.412, 43721.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.082 ±(99.9%) 0.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.408), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.008 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.245 ±(99.9%) 2.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.245, 1.224), stdev = 0.547
[info]   CI (99.9%): [≈ 0, 2.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1401.850 ±(99.9%) 763.762 MB/sec [Average]
[info]   (min, avg, max) = (1309.850, 1401.850, 1756.647), stdev = 198.347
[info]   CI (99.9%): [638.088, 2165.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42020.862 ±(99.9%) 25973.573 B/op [Average]
[info]   (min, avg, max) = (38417.824, 42020.862, 54068.100), stdev = 6745.254
[info]   CI (99.9%): [16047.289, 67994.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen":
[info]   0.713 ±(99.9%) 6.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.565), stdev = 1.594
[info]   CI (99.9%): [≈ 0, 6.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm":
[info]   21.943 ±(99.9%) 188.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.943, 109.717), stdev = 49.067
[info]   CI (99.9%): [≈ 0, 210.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.815 ±(99.9%) 7.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.815, 4.119), stdev = 2.033
[info]   CI (99.9%): [≈ 0, 9.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   54.827 ±(99.9%) 237.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.827, 126.777), stdev = 61.704
[info]   CI (99.9%): [≈ 0, 292.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   85.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 17.000, 46.000), stdev = 16.852
[info]   CI (99.9%): [85.000, 85.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334651.867 ops/s
[info] # Warmup Iteration   2: 657938.002 ops/s
[info] # Warmup Iteration   3: 773061.862 ops/s
[info] # Warmup Iteration   4: 778114.329 ops/s
[info] # Warmup Iteration   5: 779428.934 ops/s
[info] Iteration   1: 755855.601 ops/s
[info]                  ·gc.alloc.rate:               1520.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          3164.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2790.669 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 777351.003 ops/s
[info]                  ·gc.alloc.rate:                   1561.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              3160.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2714.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 784296.679 ops/s
[info]                  ·gc.alloc.rate:                   1559.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              3128.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2688.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 782650.419 ops/s
[info]                  ·gc.alloc.rate:                   1594.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              3206.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4032.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 783500.556 ops/s
[info]                  ·gc.alloc.rate:                   1568.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              3150.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2681.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   776730.852 ±(99.9%) 46138.387 ops/s [Average]
[info]   (min, avg, max) = (755855.601, 776730.852, 784296.679), stdev = 11981.992
[info]   CI (99.9%): [730592.465, 822869.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1560.791 ±(99.9%) 103.044 MB/sec [Average]
[info]   (min, avg, max) = (1520.334, 1560.791, 1594.946), stdev = 26.760
[info]   CI (99.9%): [1457.747, 1663.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3162.082 ±(99.9%) 109.705 B/op [Average]
[info]   (min, avg, max) = (3128.772, 3162.082, 3206.771), stdev = 28.490
[info]   CI (99.9%): [3052.377, 3271.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1472.426 ±(99.9%) 1147.509 MB/sec [Average]
[info]   (min, avg, max) = (1334.964, 1472.426, 2005.494), stdev = 298.004
[info]   CI (99.9%): [324.917, 2619.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2981.533 ±(99.9%) 2267.802 B/op [Average]
[info]   (min, avg, max) = (2681.647, 2981.533, 4032.212), stdev = 588.941
[info]   CI (99.9%): [713.731, 5249.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 4.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 2.853), stdev = 1.212
[info]   CI (99.9%): [≈ 0, 5.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.640 ±(99.9%) 9.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.640, 5.774), stdev = 2.453
[info]   CI (99.9%): [≈ 0, 11.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.588
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1044.570 ops/s
[info] # Warmup Iteration   2: 23470.548 ops/s
[info] # Warmup Iteration   3: 42193.984 ops/s
[info] # Warmup Iteration   4: 50754.948 ops/s
[info] # Warmup Iteration   5: 40417.677 ops/s
[info] Iteration   1: 45804.236 ops/s
[info]                  ·gc.alloc.rate:                   2662.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              91434.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91934.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.981 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 47100.231 ops/s
[info]                  ·gc.alloc.rate:                   2600.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              86868.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66978.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 48554.963 ops/s
[info]                  ·gc.alloc.rate:                   2642.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              85652.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86670.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 48063.906 ops/s
[info]                  ·gc.alloc.rate:                   2606.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              85365.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87775.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 48385.072 ops/s
[info]                  ·gc.alloc.rate:                   2651.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              86241.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87453.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   47581.682 ±(99.9%) 4397.311 ops/s [Average]
[info]   (min, avg, max) = (45804.236, 47581.682, 48554.963), stdev = 1141.968
[info]   CI (99.9%): [43184.371, 51978.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2632.668 ±(99.9%) 105.780 MB/sec [Average]
[info]   (min, avg, max) = (2600.455, 2632.668, 2662.199), stdev = 27.471
[info]   CI (99.9%): [2526.888, 2738.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87112.559 ±(99.9%) 9564.926 B/op [Average]
[info]   (min, avg, max) = (85365.128, 87112.559, 91434.446), stdev = 2483.981
[info]   CI (99.9%): [77547.633, 96677.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2544.950 ±(99.9%) 1162.383 MB/sec [Average]
[info]   (min, avg, max) = (2005.042, 2544.950, 2688.503), stdev = 301.867
[info]   CI (99.9%): [1382.567, 3707.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84162.601 ±(99.9%) 37819.849 B/op [Average]
[info]   (min, avg, max) = (66978.691, 84162.601, 91934.372), stdev = 9821.695
[info]   CI (99.9%): [46342.752, 121982.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.040 ±(99.9%) 8.416 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.040, 4.949), stdev = 2.186
[info]   CI (99.9%): [≈ 0, 9.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.632 ±(99.9%) 289.213 B/op [Average]
[info]   (min, avg, max) = (1.354, 35.632, 169.981), stdev = 75.108
[info]   CI (99.9%): [≈ 0, 324.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118868.780 ops/s
[info] # Warmup Iteration   2: 350298.817 ops/s
[info] # Warmup Iteration   3: 407392.597 ops/s
[info] # Warmup Iteration   4: 398955.135 ops/s
[info] # Warmup Iteration   5: 400796.182 ops/s
[info] Iteration   1: 409296.392 ops/s
[info]                  ·gc.alloc.rate:                   1072.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              4123.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5123.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 410813.618 ops/s
[info]                  ·gc.alloc.rate:               1064.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          4075.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2553.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 414290.089 ops/s
[info]                  ·gc.alloc.rate:               1087.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          4129.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5069.081 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 415760.850 ops/s
[info]                  ·gc.alloc.rate:               1081.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          4094.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2526.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 413994.408 ops/s
[info]                  ·gc.alloc.rate:                   1089.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              4142.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5077.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   412831.072 ±(99.9%) 10301.780 ops/s [Average]
[info]   (min, avg, max) = (409296.392, 412831.072, 415760.850), stdev = 2675.339
[info]   CI (99.9%): [402529.292, 423132.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1079.115 ±(99.9%) 40.904 MB/sec [Average]
[info]   (min, avg, max) = (1064.194, 1079.115, 1089.783), stdev = 10.623
[info]   CI (99.9%): [1038.212, 1120.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4113.381 ±(99.9%) 105.174 B/op [Average]
[info]   (min, avg, max) = (4075.909, 4113.381, 4142.992), stdev = 27.313
[info]   CI (99.9%): [4008.207, 4218.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.400 ±(99.9%) 1407.092 MB/sec [Average]
[info]   (min, avg, max) = (666.681, 1067.400, 1335.634), stdev = 365.417
[info]   CI (99.9%): [≈ 0, 2474.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4070.007 ±(99.9%) 5378.556 B/op [Average]
[info]   (min, avg, max) = (2526.774, 4070.007, 5123.127), stdev = 1396.794
[info]   CI (99.9%): [≈ 0, 9448.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.739), stdev = 1.669
[info]   CI (99.9%): [≈ 0, 7.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.867 ±(99.9%) 24.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.867, 14.216), stdev = 6.344
[info]   CI (99.9%): [≈ 0, 27.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 999802.361 ops/s
[info] # Warmup Iteration   2: 1570203.089 ops/s
[info] # Warmup Iteration   3: 1605195.344 ops/s
[info] # Warmup Iteration   4: 1639275.355 ops/s
[info] # Warmup Iteration   5: 1612409.066 ops/s
[info] Iteration   1: 1651268.809 ops/s
[info]                  ·gc.alloc.rate:                   981.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              934.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     638.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1644129.995 ops/s
[info]                  ·gc.alloc.rate:                   1005.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              962.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1282.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1647350.068 ops/s
[info]                  ·gc.alloc.rate:               981.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          937.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 640.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1633466.267 ops/s
[info]                  ·gc.alloc.rate:                   994.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1291.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1647607.729 ops/s
[info]                  ·gc.alloc.rate:               989.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 640.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1644764.574 ±(99.9%) 26196.256 ops/s [Average]
[info]   (min, avg, max) = (1633466.267, 1644764.574, 1651268.809), stdev = 6803.084
[info]   CI (99.9%): [1618568.318, 1670960.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   990.552 ±(99.9%) 39.246 MB/sec [Average]
[info]   (min, avg, max) = (981.241, 990.552, 1005.676), stdev = 10.192
[info]   CI (99.9%): [951.306, 1029.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   947.748 ±(99.9%) 47.690 B/op [Average]
[info]   (min, avg, max) = (934.863, 947.748, 962.578), stdev = 12.385
[info]   CI (99.9%): [900.058, 995.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.168 ±(99.9%) 1413.131 MB/sec [Average]
[info]   (min, avg, max) = (669.751, 938.168, 1340.544), stdev = 366.986
[info]   CI (99.9%): [≈ 0, 2351.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   898.569 ±(99.9%) 1365.577 B/op [Average]
[info]   (min, avg, max) = (638.095, 898.569, 1291.671), stdev = 354.636
[info]   CI (99.9%): [≈ 0, 2264.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1129395.437 ops/s
[info] # Warmup Iteration   2: 1642695.044 ops/s
[info] # Warmup Iteration   3: 1719603.616 ops/s
[info] # Warmup Iteration   4: 1718922.965 ops/s
[info] # Warmup Iteration   5: 1718475.172 ops/s
[info] Iteration   1: 1718484.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1718168.766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1719025.222 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1720205.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1719841.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1719145.000 ±(99.9%) 3341.870 ops/s [Average]
[info]   (min, avg, max) = (1718168.766, 1719145.000, 1720205.167), stdev = 867.873
[info]   CI (99.9%): [1715803.130, 1722486.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27922.231 ops/s
[info] # Warmup Iteration   2: 277989.367 ops/s
[info] # Warmup Iteration   3: 347478.807 ops/s
[info] # Warmup Iteration   4: 365063.220 ops/s
[info] # Warmup Iteration   5: 369859.413 ops/s
[info] Iteration   1: 370497.072 ops/s
[info]                  ·gc.alloc.rate:                   2326.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              9882.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11367.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.504 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 372109.213 ops/s
[info]                  ·gc.alloc.rate:                   2357.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              9972.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8496.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 373381.551 ops/s
[info]                  ·gc.alloc.rate:                   2353.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              9920.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11304.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 374084.762 ops/s
[info]                  ·gc.alloc.rate:               2371.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          9975.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8479.334 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 373878.224 ops/s
[info]                  ·gc.alloc.rate:                   2385.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              10033.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11319.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   372790.165 ±(99.9%) 5753.962 ops/s [Average]
[info]   (min, avg, max) = (370497.072, 372790.165, 374084.762), stdev = 1494.286
[info]   CI (99.9%): [367036.202, 378544.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2358.992 ±(99.9%) 84.465 MB/sec [Average]
[info]   (min, avg, max) = (2326.782, 2358.992, 2385.638), stdev = 21.935
[info]   CI (99.9%): [2274.526, 2443.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9956.790 ±(99.9%) 222.133 B/op [Average]
[info]   (min, avg, max) = (9882.395, 9956.790, 10033.210), stdev = 57.687
[info]   CI (99.9%): [9734.657, 10178.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2414.834 ±(99.9%) 1415.660 MB/sec [Average]
[info]   (min, avg, max) = (2008.861, 2414.834, 2691.404), stdev = 367.642
[info]   CI (99.9%): [999.174, 3830.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10193.390 ±(99.9%) 5995.809 B/op [Average]
[info]   (min, avg, max) = (8479.334, 10193.390, 11367.391), stdev = 1557.093
[info]   CI (99.9%): [4197.580, 16189.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.413 ±(99.9%) 3.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.413, 2.002), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 3.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.753 ±(99.9%) 14.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.753, 8.504), stdev = 3.774
[info]   CI (99.9%): [≈ 0, 16.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.483
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15101.902 ops/s
[info] # Warmup Iteration   2: 35582.790 ops/s
[info] # Warmup Iteration   3: 77468.311 ops/s
[info] # Warmup Iteration   4: 79071.055 ops/s
[info] # Warmup Iteration   5: 85272.903 ops/s
[info] Iteration   1: 84715.127 ops/s
[info]                  ·gc.alloc.rate:                   1699.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              31581.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24491.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 85162.732 ops/s
[info]                  ·gc.alloc.rate:                   1733.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              32020.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36575.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 85804.608 ops/s
[info]                  ·gc.alloc.rate:                   1733.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              31776.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24156.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 84850.359 ops/s
[info]                  ·gc.alloc.rate:                   1715.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              31826.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36623.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.880 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 85774.292 ops/s
[info]                  ·gc.alloc.rate:                   1736.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              31858.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36253.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.888 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   85261.424 ±(99.9%) 1958.951 ops/s [Average]
[info]   (min, avg, max) = (84715.127, 85261.424, 85804.608), stdev = 508.733
[info]   CI (99.9%): [83302.473, 87220.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1723.668 ±(99.9%) 59.778 MB/sec [Average]
[info]   (min, avg, max) = (1699.926, 1723.668, 1736.309), stdev = 15.524
[info]   CI (99.9%): [1663.889, 1783.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31812.701 ±(99.9%) 609.491 B/op [Average]
[info]   (min, avg, max) = (31581.522, 31812.701, 32020.531), stdev = 158.283
[info]   CI (99.9%): [31203.210, 32422.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1713.151 ±(99.9%) 1389.264 MB/sec [Average]
[info]   (min, avg, max) = (1317.579, 1713.151, 1979.584), stdev = 360.787
[info]   CI (99.9%): [323.887, 3102.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31620.066 ±(99.9%) 25656.853 B/op [Average]
[info]   (min, avg, max) = (24156.458, 31620.066, 36623.490), stdev = 6663.003
[info]   CI (99.9%): [5963.213, 57276.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.628 ±(99.9%) 7.658 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.628, 4.781), stdev = 1.989
[info]   CI (99.9%): [≈ 0, 9.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30.033 ±(99.9%) 141.387 B/op [Average]
[info]   (min, avg, max) = (0.387, 30.033, 88.340), stdev = 36.718
[info]   CI (99.9%): [≈ 0, 171.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 14.000), stdev = 4.087
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11889.135 ops/s
[info] # Warmup Iteration   2: 77925.911 ops/s
[info] # Warmup Iteration   3: 90097.067 ops/s
[info] # Warmup Iteration   4: 94315.174 ops/s
[info] # Warmup Iteration   5: 95004.946 ops/s
[info] Iteration   1: 95331.420 ops/s
[info]                  ·gc.alloc.rate:                   1232.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              20343.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21846.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 95037.373 ops/s
[info]                  ·gc.alloc.rate:               1238.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          20508.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21936.344 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 94736.927 ops/s
[info]                  ·gc.alloc.rate:                   1243.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              20654.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22040.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.692 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 90941.732 ops/s
[info]                  ·gc.alloc.rate:                   1369.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              23698.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23004.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 94521.643 ops/s
[info]                  ·gc.alloc.rate:                   1233.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              20531.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22183.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   94113.819 ±(99.9%) 6929.079 ops/s [Average]
[info]   (min, avg, max) = (90941.732, 94113.819, 95331.420), stdev = 1799.460
[info]   CI (99.9%): [87184.740, 101042.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1263.361 ±(99.9%) 229.329 MB/sec [Average]
[info]   (min, avg, max) = (1232.284, 1263.361, 1369.597), stdev = 59.556
[info]   CI (99.9%): [1034.033, 1492.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21147.451 ±(99.9%) 5508.628 B/op [Average]
[info]   (min, avg, max) = (20343.270, 21147.451, 23698.829), stdev = 1430.573
[info]   CI (99.9%): [15638.824, 26656.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.305 ±(99.9%) 13.959 MB/sec [Average]
[info]   (min, avg, max) = (1323.312, 1327.305, 1332.269), stdev = 3.625
[info]   CI (99.9%): [1313.346, 1341.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22202.117 ±(99.9%) 1794.256 B/op [Average]
[info]   (min, avg, max) = (21846.021, 22202.117, 23004.897), stdev = 465.963
[info]   CI (99.9%): [20407.861, 23996.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.468 ±(99.9%) 3.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.468, 2.112), stdev = 0.920
[info]   CI (99.9%): [≈ 0, 4.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.070 ±(99.9%) 61.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.070, 36.545), stdev = 15.943
[info]   CI (99.9%): [≈ 0, 69.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39972.743 ops/s
[info] # Warmup Iteration   2: 91715.284 ops/s
[info] # Warmup Iteration   3: 102497.213 ops/s
[info] # Warmup Iteration   4: 103129.577 ops/s
[info] # Warmup Iteration   5: 105039.975 ops/s
[info] Iteration   1: 103634.744 ops/s
[info]                  ·gc.alloc.rate:                   1286.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              19524.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20030.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 105175.817 ops/s
[info]                  ·gc.alloc.rate:                   1314.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              19662.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19767.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 106310.461 ops/s
[info]                  ·gc.alloc.rate:                   1318.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              19521.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19586.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 106176.567 ops/s
[info]                  ·gc.alloc.rate:                   1314.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              19485.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19590.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 105692.642 ops/s
[info]                  ·gc.alloc.rate:                   1300.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              19357.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19661.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   105398.046 ±(99.9%) 4166.890 ops/s [Average]
[info]   (min, avg, max) = (103634.744, 105398.046, 106310.461), stdev = 1082.128
[info]   CI (99.9%): [101231.157, 109564.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1306.775 ±(99.9%) 51.904 MB/sec [Average]
[info]   (min, avg, max) = (1286.176, 1306.775, 1318.703), stdev = 13.479
[info]   CI (99.9%): [1254.871, 1358.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19510.252 ±(99.9%) 420.207 B/op [Average]
[info]   (min, avg, max) = (19357.318, 19510.252, 19662.964), stdev = 109.126
[info]   CI (99.9%): [19090.046, 19930.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1321.227 ±(99.9%) 5.150 MB/sec [Average]
[info]   (min, avg, max) = (1319.556, 1321.227, 1323.108), stdev = 1.337
[info]   CI (99.9%): [1316.077, 1326.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19727.297 ±(99.9%) 711.864 B/op [Average]
[info]   (min, avg, max) = (19586.463, 19727.297, 20030.878), stdev = 184.869
[info]   CI (99.9%): [19015.433, 20439.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 6.004 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.874, 3.623), stdev = 1.559
[info]   CI (99.9%): [≈ 0, 6.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.949 ±(99.9%) 88.866 B/op [Average]
[info]   (min, avg, max) = (0.117, 12.949, 53.626), stdev = 23.078
[info]   CI (99.9%): [≈ 0, 101.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5094.347 ops/s
[info] # Warmup Iteration   2: 28887.210 ops/s
[info] # Warmup Iteration   3: 59625.954 ops/s
[info] # Warmup Iteration   4: 55394.533 ops/s
[info] # Warmup Iteration   5: 56287.310 ops/s
[info] Iteration   1: 56270.740 ops/s
[info]                  ·gc.alloc.rate:                   2233.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              62464.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74375.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 56406.735 ops/s
[info]                  ·gc.alloc.rate:                   2208.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              61613.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55724.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 56020.037 ops/s
[info]                  ·gc.alloc.rate:                   2185.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              61408.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56202.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.509 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 56670.226 ops/s
[info]                  ·gc.alloc.rate:                   2208.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              61347.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55676.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 55853.929 ops/s
[info]                  ·gc.alloc.rate:                   2217.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              62483.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75563.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.173 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   56244.333 ±(99.9%) 1234.582 ops/s [Average]
[info]   (min, avg, max) = (55853.929, 56244.333, 56670.226), stdev = 320.617
[info]   CI (99.9%): [55009.752, 57478.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2210.761 ±(99.9%) 66.429 MB/sec [Average]
[info]   (min, avg, max) = (2185.783, 2210.761, 2233.380), stdev = 17.252
[info]   CI (99.9%): [2144.331, 2277.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61863.770 ±(99.9%) 2178.926 B/op [Average]
[info]   (min, avg, max) = (61347.920, 61863.770, 62483.891), stdev = 565.860
[info]   CI (99.9%): [59684.844, 64042.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2268.651 ±(99.9%) 1412.766 MB/sec [Average]
[info]   (min, avg, max) = (1997.207, 2268.651, 2681.664), stdev = 366.891
[info]   CI (99.9%): [855.885, 3681.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63508.444 ±(99.9%) 40326.775 B/op [Average]
[info]   (min, avg, max) = (55676.520, 63508.444, 75563.321), stdev = 10472.735
[info]   CI (99.9%): [23181.669, 103835.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.404 ±(99.9%) 2.769 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.404, 1.687), stdev = 0.719
[info]   CI (99.9%): [≈ 0, 3.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.301 ±(99.9%) 77.443 B/op [Average]
[info]   (min, avg, max) = (0.578, 11.301, 47.180), stdev = 20.112
[info]   CI (99.9%): [≈ 0, 88.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24782.649 ops/s
[info] # Warmup Iteration   2: 139181.964 ops/s
[info] # Warmup Iteration   3: 154850.773 ops/s
[info] # Warmup Iteration   4: 164864.882 ops/s
[info] # Warmup Iteration   5: 165739.173 ops/s
[info] Iteration   1: 163017.975 ops/s
[info]                  ·gc.alloc.rate:               1540.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          14864.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12882.496 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 161235.678 ops/s
[info]                  ·gc.alloc.rate:                   1537.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              15002.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13031.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 164825.911 ops/s
[info]                  ·gc.alloc.rate:                   1554.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              14841.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19120.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 165430.010 ops/s
[info]                  ·gc.alloc.rate:                   1556.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              14798.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12662.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 165261.712 ops/s
[info]                  ·gc.alloc.rate:                   1553.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              14794.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12662.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   163954.257 ±(99.9%) 6918.945 ops/s [Average]
[info]   (min, avg, max) = (161235.678, 163954.257, 165430.010), stdev = 1796.828
[info]   CI (99.9%): [157035.312, 170873.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1548.282 ±(99.9%) 34.719 MB/sec [Average]
[info]   (min, avg, max) = (1537.053, 1548.282, 1556.146), stdev = 9.016
[info]   CI (99.9%): [1513.563, 1583.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14860.352 ±(99.9%) 326.768 B/op [Average]
[info]   (min, avg, max) = (14794.539, 14860.352, 15002.580), stdev = 84.861
[info]   CI (99.9%): [14533.584, 15187.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1466.792 ±(99.9%) 1154.228 MB/sec [Average]
[info]   (min, avg, max) = (1329.620, 1466.792, 2002.985), stdev = 299.749
[info]   CI (99.9%): [312.564, 2621.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14072.047 ±(99.9%) 10883.637 B/op [Average]
[info]   (min, avg, max) = (12662.767, 14072.047, 19120.415), stdev = 2826.446
[info]   CI (99.9%): [3188.409, 24955.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.950 ±(99.9%) 7.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.950, 4.560), stdev = 2.019
[info]   CI (99.9%): [≈ 0, 8.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.064 ±(99.9%) 74.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.064, 43.531), stdev = 19.276
[info]   CI (99.9%): [≈ 0, 83.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.362
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127276.536 ops/s
[info] # Warmup Iteration   2: 348406.432 ops/s
[info] # Warmup Iteration   3: 382661.020 ops/s
[info] # Warmup Iteration   4: 411922.227 ops/s
[info] # Warmup Iteration   5: 413102.407 ops/s
[info] Iteration   1: 413909.532 ops/s
[info]                  ·gc.alloc.rate:      513.491 MB/sec
[info]                  ·gc.alloc.rate.norm: 1952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 411962.403 ops/s
[info]                  ·gc.alloc.rate:               532.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          2032.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2523.442 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 412513.338 ops/s
[info]                  ·gc.alloc.rate:               526.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          2008.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2525.130 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 412686.655 ops/s
[info]                  ·gc.alloc.rate:                   532.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              2031.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2524.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 412161.544 ops/s
[info]                  ·gc.alloc.rate:               526.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          2010.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2532.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   412646.695 ±(99.9%) 2931.150 ops/s [Average]
[info]   (min, avg, max) = (411962.403, 412646.695, 413909.532), stdev = 761.210
[info]   CI (99.9%): [409715.545, 415577.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   526.246 ±(99.9%) 29.805 MB/sec [Average]
[info]   (min, avg, max) = (513.491, 526.246, 532.832), stdev = 7.740
[info]   CI (99.9%): [496.441, 556.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2006.825 ±(99.9%) 125.796 B/op [Average]
[info]   (min, avg, max) = (1952.001, 2006.825, 2032.071), stdev = 32.669
[info]   CI (99.9%): [1881.030, 2132.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.548 ±(99.9%) 1139.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.548, 663.120), stdev = 296.028
[info]   CI (99.9%): [≈ 0, 1669.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2020.966 ±(99.9%) 4350.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2020.966, 2532.252), stdev = 1129.760
[info]   CI (99.9%): [≈ 0, 6371.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548948.964 ops/s
[info] # Warmup Iteration   2: 890119.980 ops/s
[info] # Warmup Iteration   3: 942793.199 ops/s
[info] # Warmup Iteration   4: 932600.886 ops/s
[info] # Warmup Iteration   5: 923601.046 ops/s
[info] Iteration   1: 922798.496 ops/s
[info]                  ·gc.alloc.rate:                   1183.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              2017.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2283.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 942931.712 ops/s
[info]                  ·gc.alloc.rate:               1216.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          2031.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2235.881 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 953409.180 ops/s
[info]                  ·gc.alloc.rate:                   1212.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              2000.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2212.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 949587.827 ops/s
[info]                  ·gc.alloc.rate:                   1192.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              1975.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1111.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 975169.180 ops/s
[info]                  ·gc.alloc.rate:                   1237.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1996.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   948779.279 ±(99.9%) 72748.431 ops/s [Average]
[info]   (min, avg, max) = (922798.496, 948779.279, 975169.180), stdev = 18892.536
[info]   CI (99.9%): [876030.848, 1021527.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1208.413 ±(99.9%) 81.999 MB/sec [Average]
[info]   (min, avg, max) = (1183.341, 1208.413, 1237.261), stdev = 21.295
[info]   CI (99.9%): [1126.414, 1290.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2004.421 ±(99.9%) 81.284 B/op [Average]
[info]   (min, avg, max) = (1975.618, 2004.421, 2031.174), stdev = 21.109
[info]   CI (99.9%): [1923.136, 2085.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.885 ±(99.9%) 1152.318 MB/sec [Average]
[info]   (min, avg, max) = (670.565, 1205.885, 1340.600), stdev = 299.253
[info]   CI (99.9%): [53.567, 2358.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2000.957 ±(99.9%) 1922.616 B/op [Average]
[info]   (min, avg, max) = (1111.257, 2000.957, 2283.608), stdev = 499.297
[info]   CI (99.9%): [78.341, 3923.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.869 ±(99.9%) 5.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.869, 3.344), stdev = 1.440
[info]   CI (99.9%): [≈ 0, 6.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.432 ±(99.9%) 9.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.432, 5.542), stdev = 2.385
[info]   CI (99.9%): [≈ 0, 10.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 393145.699 ops/s
[info] # Warmup Iteration   2: 936201.910 ops/s
[info] # Warmup Iteration   3: 962721.036 ops/s
[info] # Warmup Iteration   4: 924451.718 ops/s
[info] # Warmup Iteration   5: 949874.746 ops/s
[info] Iteration   1: 965833.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 965516.537 ops/s
[info]                  ·gc.alloc.rate:      2.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.888 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 960713.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 963400.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 957396.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   962572.112 ±(99.9%) 13646.020 ops/s [Average]
[info]   (min, avg, max) = (957396.396, 962572.112, 965833.787), stdev = 3543.828
[info]   CI (99.9%): [948926.092, 976218.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.477 ±(99.9%) 4.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.477, 2.385), stdev = 1.067
[info]   CI (99.9%): [≈ 0, 4.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.778 ±(99.9%) 6.694 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.778, 3.888), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53064.582 ops/s
[info] # Warmup Iteration   2: 164352.573 ops/s
[info] # Warmup Iteration   3: 222341.358 ops/s
[info] # Warmup Iteration   4: 285824.885 ops/s
[info] # Warmup Iteration   5: 295226.757 ops/s
[info] Iteration   1: 288040.087 ops/s
[info]                  ·gc.alloc.rate:                   871.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              4759.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3610.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 295140.686 ops/s
[info]                  ·gc.alloc.rate:               915.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          4878.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7040.617 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 289560.077 ops/s
[info]                  ·gc.alloc.rate:                   888.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              4827.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3589.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 296405.080 ops/s
[info]                  ·gc.alloc.rate:                   895.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              4752.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3506.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 296874.294 ops/s
[info]                  ·gc.alloc.rate:                   924.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              4899.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7010.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   293204.045 ±(99.9%) 15807.925 ops/s [Average]
[info]   (min, avg, max) = (288040.087, 293204.045, 296874.294), stdev = 4105.268
[info]   CI (99.9%): [277396.120, 309011.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   898.745 ±(99.9%) 81.813 MB/sec [Average]
[info]   (min, avg, max) = (871.063, 898.745, 924.215), stdev = 21.247
[info]   CI (99.9%): [816.932, 980.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4823.491 ±(99.9%) 258.339 B/op [Average]
[info]   (min, avg, max) = (4752.137, 4823.491, 4899.295), stdev = 67.090
[info]   CI (99.9%): [4565.151, 5081.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   924.982 ±(99.9%) 1393.853 MB/sec [Average]
[info]   (min, avg, max) = (660.501, 924.982, 1322.428), stdev = 361.979
[info]   CI (99.9%): [≈ 0, 2318.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4951.701 ±(99.9%) 7291.097 B/op [Average]
[info]   (min, avg, max) = (3506.843, 4951.701, 7040.617), stdev = 1893.475
[info]   CI (99.9%): [≈ 0, 12242.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 7.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.122), stdev = 1.837
[info]   CI (99.9%): [≈ 0, 7.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.438 ±(99.9%) 37.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.438, 21.852), stdev = 9.735
[info]   CI (99.9%): [≈ 0, 41.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23513.609 ops/s
[info] # Warmup Iteration   2: 102150.756 ops/s
[info] # Warmup Iteration   3: 147408.371 ops/s
[info] # Warmup Iteration   4: 147253.179 ops/s
[info] # Warmup Iteration   5: 147697.295 ops/s
[info] Iteration   1: 147710.251 ops/s
[info]                  ·gc.alloc.rate:                   1851.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              19720.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21176.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 149924.626 ops/s
[info]                  ·gc.alloc.rate:                   1867.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              19597.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13887.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 149406.647 ops/s
[info]                  ·gc.alloc.rate:                   1865.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              19645.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20876.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 149815.751 ops/s
[info]                  ·gc.alloc.rate:                   1862.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              19563.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20791.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 149787.392 ops/s
[info]                  ·gc.alloc.rate:                   1872.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              19676.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20804.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   149328.933 ±(99.9%) 3564.809 ops/s [Average]
[info]   (min, avg, max) = (147710.251, 149328.933, 149924.626), stdev = 925.770
[info]   CI (99.9%): [145764.124, 152893.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1863.742 ±(99.9%) 30.781 MB/sec [Average]
[info]   (min, avg, max) = (1851.081, 1863.742, 1872.703), stdev = 7.994
[info]   CI (99.9%): [1832.961, 1894.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19640.690 ±(99.9%) 239.890 B/op [Average]
[info]   (min, avg, max) = (19563.306, 19640.690, 19720.485), stdev = 62.299
[info]   CI (99.9%): [19400.800, 19880.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1850.518 ±(99.9%) 1135.339 MB/sec [Average]
[info]   (min, avg, max) = (1323.117, 1850.518, 1987.779), stdev = 294.844
[info]   CI (99.9%): [715.179, 2985.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19507.425 ±(99.9%) 12111.630 B/op [Average]
[info]   (min, avg, max) = (13887.775, 19507.425, 21176.793), stdev = 3145.352
[info]   CI (99.9%): [7395.795, 31619.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.425 ±(99.9%) 7.495 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.425, 4.518), stdev = 1.946
[info]   CI (99.9%): [≈ 0, 8.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.116 ±(99.9%) 79.788 B/op [Average]
[info]   (min, avg, max) = (0.219, 15.116, 48.133), stdev = 20.721
[info]   CI (99.9%): [≈ 0, 94.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 17.000), stdev = 5.404
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54146.452 ops/s
[info] # Warmup Iteration   2: 171152.202 ops/s
[info] # Warmup Iteration   3: 194426.939 ops/s
[info] # Warmup Iteration   4: 204949.197 ops/s
[info] # Warmup Iteration   5: 205807.874 ops/s
[info] Iteration   1: 206204.168 ops/s
[info]                  ·gc.alloc.rate:                   1190.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              9085.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10089.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 202898.576 ops/s
[info]                  ·gc.alloc.rate:               1142.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          8859.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5128.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 206016.790 ops/s
[info]                  ·gc.alloc.rate:                   1184.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              9047.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10112.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 206479.767 ops/s
[info]                  ·gc.alloc.rate:                   1176.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              8968.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10099.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 207630.842 ops/s
[info]                  ·gc.alloc.rate:                   1177.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              8921.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5008.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   205846.029 ±(99.9%) 6788.523 ops/s [Average]
[info]   (min, avg, max) = (202898.576, 205846.029, 207630.842), stdev = 1762.958
[info]   CI (99.9%): [199057.506, 212634.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1174.425 ±(99.9%) 72.191 MB/sec [Average]
[info]   (min, avg, max) = (1142.534, 1174.425, 1190.887), stdev = 18.748
[info]   CI (99.9%): [1102.234, 1246.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8976.739 ±(99.9%) 353.803 B/op [Average]
[info]   (min, avg, max) = (8859.674, 8976.739, 9085.826), stdev = 91.881
[info]   CI (99.9%): [8622.936, 9330.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1058.770 ±(99.9%) 1397.428 MB/sec [Average]
[info]   (min, avg, max) = (661.062, 1058.770, 1324.955), stdev = 362.907
[info]   CI (99.9%): [≈ 0, 2456.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8087.778 ±(99.9%) 10613.560 B/op [Average]
[info]   (min, avg, max) = (5008.848, 8087.778, 10112.312), stdev = 2756.308
[info]   CI (99.9%): [≈ 0, 18701.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.953 ±(99.9%) 7.720 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.953, 4.538), stdev = 2.005
[info]   CI (99.9%): [≈ 0, 8.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.266 ±(99.9%) 58.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.266, 34.592), stdev = 15.283
[info]   CI (99.9%): [≈ 0, 66.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 3.209
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180215.972 ops/s
[info] # Warmup Iteration   2: 406125.133 ops/s
[info] # Warmup Iteration   3: 446972.702 ops/s
[info] # Warmup Iteration   4: 445902.568 ops/s
[info] # Warmup Iteration   5: 445687.028 ops/s
[info] Iteration   1: 446842.641 ops/s
[info]                  ·gc.alloc.rate:                   892.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              3143.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2341.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 445366.848 ops/s
[info]                  ·gc.alloc.rate:               884.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          3125.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2351.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 444708.569 ops/s
[info]                  ·gc.alloc.rate:                   904.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              3200.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4711.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 446700.599 ops/s
[info]                  ·gc.alloc.rate:               883.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          3112.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2345.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 444632.030 ops/s
[info]                  ·gc.alloc.rate:               883.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          3126.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2359.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   445650.137 ±(99.9%) 4097.310 ops/s [Average]
[info]   (min, avg, max) = (444632.030, 445650.137, 446842.641), stdev = 1064.058
[info]   CI (99.9%): [441552.827, 449747.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   889.797 ±(99.9%) 34.602 MB/sec [Average]
[info]   (min, avg, max) = (883.451, 889.797, 904.470), stdev = 8.986
[info]   CI (99.9%): [855.196, 924.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3141.749 ±(99.9%) 132.733 B/op [Average]
[info]   (min, avg, max) = (3112.749, 3141.749, 3200.292), stdev = 34.470
[info]   CI (99.9%): [3009.017, 3274.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   798.949 ±(99.9%) 1146.558 MB/sec [Average]
[info]   (min, avg, max) = (664.795, 798.949, 1331.592), stdev = 297.757
[info]   CI (99.9%): [≈ 0, 1945.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2821.959 ±(99.9%) 4067.633 B/op [Average]
[info]   (min, avg, max) = (2341.551, 2821.959, 4711.581), stdev = 1056.351
[info]   CI (99.9%): [≈ 0, 6889.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.147), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1764.116 ops/s
[info] # Warmup Iteration   2: 60623.096 ops/s
[info] # Warmup Iteration   3: 98441.994 ops/s
[info] # Warmup Iteration   4: 102157.307 ops/s
[info] # Warmup Iteration   5: 101917.009 ops/s
[info] Iteration   1: 102312.693 ops/s
[info]                  ·gc.alloc.rate:                   3261.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              50165.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51335.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 103214.465 ops/s
[info]                  ·gc.alloc.rate:                   3272.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              49904.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51016.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 103850.002 ops/s
[info]                  ·gc.alloc.rate:                   3320.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              50308.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50886.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 103765.704 ops/s
[info]                  ·gc.alloc.rate:                   3304.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              50113.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40887.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 101147.746 ops/s
[info]                  ·gc.alloc.rate:                   3250.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              50573.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52580.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   102858.122 ±(99.9%) 4372.385 ops/s [Average]
[info]   (min, avg, max) = (101147.746, 102858.122, 103850.002), stdev = 1135.495
[info]   CI (99.9%): [98485.737, 107230.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3281.710 ±(99.9%) 113.690 MB/sec [Average]
[info]   (min, avg, max) = (3250.170, 3281.710, 3320.177), stdev = 29.525
[info]   CI (99.9%): [3168.020, 3395.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50212.991 ±(99.9%) 955.837 B/op [Average]
[info]   (min, avg, max) = (49904.714, 50212.991, 50573.693), stdev = 248.228
[info]   CI (99.9%): [49257.153, 51168.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3223.284 ±(99.9%) 1136.728 MB/sec [Average]
[info]   (min, avg, max) = (2695.961, 3223.284, 3379.148), stdev = 295.205
[info]   CI (99.9%): [2086.556, 4360.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49341.418 ±(99.9%) 18379.064 B/op [Average]
[info]   (min, avg, max) = (40887.856, 49341.418, 52580.644), stdev = 4772.984
[info]   CI (99.9%): [30962.355, 67720.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.358 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.229), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.959 ±(99.9%) 5.518 B/op [Average]
[info]   (min, avg, max) = (0.315, 0.959, 3.522), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:46:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49732.750 ops/s
[info] # Warmup Iteration   2: 193962.600 ops/s
[info] # Warmup Iteration   3: 226489.049 ops/s
[info] # Warmup Iteration   4: 243715.531 ops/s
[info] # Warmup Iteration   5: 243658.039 ops/s
[info] Iteration   1: 244358.132 ops/s
[info]                  ·gc.alloc.rate:                   1549.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              9978.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8606.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 241862.215 ops/s
[info]                  ·gc.alloc.rate:                   1555.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              10121.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13052.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.234 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 245035.169 ops/s
[info]                  ·gc.alloc.rate:                   1541.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              9901.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8583.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 243667.774 ops/s
[info]                  ·gc.alloc.rate:                   1532.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              9895.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8613.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 244151.666 ops/s
[info]                  ·gc.alloc.rate:                   1545.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              9964.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8588.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   243814.991 ±(99.9%) 4609.607 ops/s [Average]
[info]   (min, avg, max) = (241862.215, 243814.991, 245035.169), stdev = 1197.100
[info]   CI (99.9%): [239205.385, 248424.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1544.965 ±(99.9%) 34.006 MB/sec [Average]
[info]   (min, avg, max) = (1532.143, 1544.965, 1555.694), stdev = 8.831
[info]   CI (99.9%): [1510.959, 1578.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9972.110 ±(99.9%) 351.979 B/op [Average]
[info]   (min, avg, max) = (9895.200, 9972.110, 10121.656), stdev = 91.408
[info]   CI (99.9%): [9620.131, 10324.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1469.040 ±(99.9%) 1156.282 MB/sec [Average]
[info]   (min, avg, max) = (1332.238, 1469.040, 2006.192), stdev = 300.283
[info]   CI (99.9%): [312.757, 2625.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9488.867 ±(99.9%) 7671.546 B/op [Average]
[info]   (min, avg, max) = (8583.241, 9488.867, 13052.687), stdev = 1992.276
[info]   CI (99.9%): [1817.321, 17160.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 5.632 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.904, 3.417), stdev = 1.463
[info]   CI (99.9%): [≈ 0, 6.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.865 ±(99.9%) 36.641 B/op [Average]
[info]   (min, avg, max) = (0.134, 5.865, 22.234), stdev = 9.516
[info]   CI (99.9%): [≈ 0, 42.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211046.436 ops/s
[info] # Warmup Iteration   2: 670413.880 ops/s
[info] # Warmup Iteration   3: 781378.827 ops/s
[info] # Warmup Iteration   4: 777598.193 ops/s
[info] # Warmup Iteration   5: 769419.110 ops/s
[info] Iteration   1: 780281.150 ops/s
[info]                  ·gc.alloc.rate:               599.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          1209.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1340.302 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 783148.880 ops/s
[info]                  ·gc.alloc.rate:                   606.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1217.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1335.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 778359.276 ops/s
[info]                  ·gc.alloc.rate:                   591.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              1196.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1345.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 769641.245 ops/s
[info]                  ·gc.alloc.rate:               587.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1360.823 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 768835.648 ops/s
[info]                  ·gc.alloc.rate:                   595.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              1218.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1363.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   776053.240 ±(99.9%) 24861.898 ops/s [Average]
[info]   (min, avg, max) = (768835.648, 776053.240, 783148.880), stdev = 6456.556
[info]   CI (99.9%): [751191.342, 800915.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   596.132 ±(99.9%) 27.284 MB/sec [Average]
[info]   (min, avg, max) = (587.746, 596.132, 606.003), stdev = 7.086
[info]   CI (99.9%): [568.848, 623.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1208.712 ±(99.9%) 37.007 B/op [Average]
[info]   (min, avg, max) = (1196.749, 1208.712, 1218.132), stdev = 9.611
[info]   CI (99.9%): [1171.705, 1245.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.357 ±(99.9%) 2.812 MB/sec [Average]
[info]   (min, avg, max) = (664.472, 665.357, 666.285), stdev = 0.730
[info]   CI (99.9%): [662.545, 668.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1349.158 ±(99.9%) 48.152 B/op [Average]
[info]   (min, avg, max) = (1335.373, 1349.158, 1363.611), stdev = 12.505
[info]   CI (99.9%): [1301.006, 1397.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.049), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.101), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 565156.473 ops/s
[info] # Warmup Iteration   2: 1284749.559 ops/s
[info] # Warmup Iteration   3: 1392797.914 ops/s
[info] # Warmup Iteration   4: 1408099.307 ops/s
[info] # Warmup Iteration   5: 1416837.650 ops/s
[info] Iteration   1: 1401025.691 ops/s
[info]                  ·gc.alloc.rate:                   1072.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1204.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1412481.103 ops/s
[info]                  ·gc.alloc.rate:                   1065.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              1187.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1414688.097 ops/s
[info]                  ·gc.alloc.rate:                   1082.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1204.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1491.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1424829.268 ops/s
[info]                  ·gc.alloc.rate:               1072.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          1184.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 740.589 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1413382.854 ops/s
[info]                  ·gc.alloc.rate:                   1089.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1493.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.561 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1413281.403 ±(99.9%) 32570.690 ops/s [Average]
[info]   (min, avg, max) = (1401025.691, 1413281.403, 1424829.268), stdev = 8458.505
[info]   CI (99.9%): [1380710.713, 1445852.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1076.587 ±(99.9%) 35.849 MB/sec [Average]
[info]   (min, avg, max) = (1065.955, 1076.587, 1089.287), stdev = 9.310
[info]   CI (99.9%): [1040.738, 1112.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1198.763 ±(99.9%) 47.510 B/op [Average]
[info]   (min, avg, max) = (1184.303, 1198.763, 1212.993), stdev = 12.338
[info]   CI (99.9%): [1151.253, 1246.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.183 ±(99.9%) 1413.530 MB/sec [Average]
[info]   (min, avg, max) = (669.659, 1072.183, 1341.311), stdev = 367.089
[info]   CI (99.9%): [≈ 0, 2485.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1194.993 ±(99.9%) 1588.012 B/op [Average]
[info]   (min, avg, max) = (740.589, 1194.993, 1503.724), stdev = 412.402
[info]   CI (99.9%): [≈ 0, 2783.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.646 ±(99.9%) 5.493 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.646, 3.198), stdev = 1.426
[info]   CI (99.9%): [≈ 0, 6.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.720 ±(99.9%) 6.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.561), stdev = 1.588
[info]   CI (99.9%): [≈ 0, 6.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 829278.111 ops/s
[info] # Warmup Iteration   2: 1317439.329 ops/s
[info] # Warmup Iteration   3: 1498610.600 ops/s
[info] # Warmup Iteration   4: 1498881.930 ops/s
[info] # Warmup Iteration   5: 1494443.308 ops/s
[info] Iteration   1: 1498845.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1493927.379 ops/s
[info]                  ·gc.alloc.rate:      1.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.179 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1497796.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1499072.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1498143.796 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1497557.329 ±(99.9%) 8062.340 ops/s [Average]
[info]   (min, avg, max) = (1493927.379, 1497557.329, 1499072.996), stdev = 2093.764
[info]   CI (99.9%): [1489494.989, 1505619.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.224 ±(99.9%) 1.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.224, 1.119), stdev = 0.500
[info]   CI (99.9%): [≈ 0, 2.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.236 ±(99.9%) 2.030 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.236, 1.179), stdev = 0.527
[info]   CI (99.9%): [≈ 0, 2.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53700.256 ops/s
[info] # Warmup Iteration   2: 544402.831 ops/s
[info] # Warmup Iteration   3: 561374.296 ops/s
[info] # Warmup Iteration   4: 627787.560 ops/s
[info] # Warmup Iteration   5: 629484.073 ops/s
[info] Iteration   1: 631378.338 ops/s
[info]                  ·gc.alloc.rate:                   1542.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              3845.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3322.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 631595.437 ops/s
[info]                  ·gc.alloc.rate:               1535.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          3826.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3326.647 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 622978.124 ops/s
[info]                  ·gc.alloc.rate:                   1551.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              3917.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5068.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 632024.947 ops/s
[info]                  ·gc.alloc.rate:                   1556.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              3874.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3334.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 630425.938 ops/s
[info]                  ·gc.alloc.rate:                   1539.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              3842.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3346.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   629680.557 ±(99.9%) 14602.472 ops/s [Average]
[info]   (min, avg, max) = (622978.124, 629680.557, 632024.947), stdev = 3792.216
[info]   CI (99.9%): [615078.085, 644283.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1545.098 ±(99.9%) 32.510 MB/sec [Average]
[info]   (min, avg, max) = (1535.838, 1545.098, 1556.087), stdev = 8.443
[info]   CI (99.9%): [1512.587, 1577.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3861.444 ±(99.9%) 138.519 B/op [Average]
[info]   (min, avg, max) = (3826.562, 3861.444, 3917.728), stdev = 35.973
[info]   CI (99.9%): [3722.925, 3999.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.943 ±(99.9%) 1153.981 MB/sec [Average]
[info]   (min, avg, max) = (1333.204, 1470.943, 2007.012), stdev = 299.685
[info]   CI (99.9%): [316.963, 2624.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3679.593 ±(99.9%) 2989.381 B/op [Average]
[info]   (min, avg, max) = (3322.656, 3679.593, 5068.247), stdev = 776.333
[info]   CI (99.9%): [690.212, 6668.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.306 ±(99.9%) 2.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.306, 1.427), stdev = 0.627
[info]   CI (99.9%): [≈ 0, 2.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.773 ±(99.9%) 6.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.603), stdev = 1.584
[info]   CI (99.9%): [≈ 0, 6.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186.748 ops/s
[info] # Warmup Iteration   2: 518.464 ops/s
[info] # Warmup Iteration   3: 931.177 ops/s
[info] # Warmup Iteration   4: 966.000 ops/s
[info] # Warmup Iteration   5: 961.179 ops/s
[info] Iteration   1: 962.662 ops/s
[info]                  ·gc.alloc.rate:                   2054.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              3358562.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3263325.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8596.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 953.741 ops/s
[info]                  ·gc.alloc.rate:                   2063.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              3402884.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4368883.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2436.155 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 987.422 ops/s
[info]                  ·gc.alloc.rate:                   2111.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              3364050.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3156341.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 867.218 ops/s
[info]                  ·gc.alloc.rate:                   2040.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              3701318.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3594513.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2212.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 964.685 ops/s
[info]                  ·gc.alloc.rate:                   2089.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              3407605.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3240806.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   947.146 ±(99.9%) 178.573 ops/s [Average]
[info]   (min, avg, max) = (867.218, 947.146, 987.422), stdev = 46.375
[info]   CI (99.9%): [768.573, 1125.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   2071.696 ±(99.9%) 109.294 MB/sec [Average]
[info]   (min, avg, max) = (2040.005, 2071.696, 2111.159), stdev = 28.383
[info]   CI (99.9%): [1962.402, 2180.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3446884.224 ±(99.9%) 554272.372 B/op [Average]
[info]   (min, avg, max) = (3358562.002, 3446884.224, 3701318.977), stdev = 143942.775
[info]   CI (99.9%): [2892611.852, 4001156.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2118.929 ±(99.9%) 1142.998 MB/sec [Average]
[info]   (min, avg, max) = (1980.808, 2118.929, 2649.805), stdev = 296.833
[info]   CI (99.9%): [975.931, 3261.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3524773.985 ±(99.9%) 1927362.412 B/op [Average]
[info]   (min, avg, max) = (3156341.117, 3524773.985, 4368883.669), stdev = 500529.898
[info]   CI (99.9%): [1597411.573, 5452136.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.603 ±(99.9%) 8.273 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.603, 5.258), stdev = 2.148
[info]   CI (99.9%): [≈ 0, 9.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2669.147 ±(99.9%) 13491.868 B/op [Average]
[info]   (min, avg, max) = (33.166, 2669.147, 8596.087), stdev = 3503.795
[info]   CI (99.9%): [≈ 0, 16161.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 16.000), stdev = 5.070
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91.658 ops/s
[info] # Warmup Iteration   2: 498.756 ops/s
[info] # Warmup Iteration   3: 906.555 ops/s
[info] # Warmup Iteration   4: 899.211 ops/s
[info] # Warmup Iteration   5: 903.715 ops/s
[info] Iteration   1: 909.271 ops/s
[info]                  ·gc.alloc.rate:                   1935.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              3348830.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3441288.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 900.168 ops/s
[info]                  ·gc.alloc.rate:                   1906.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              3330653.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3488464.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1039.831 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 866.045 ops/s
[info]                  ·gc.alloc.rate:                   1891.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              3436543.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3636151.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 850.621 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 893.764 ops/s
[info]                  ·gc.alloc.rate:                   1882.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              3315244.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2356363.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 896.959 ops/s
[info]                  ·gc.alloc.rate:                   1900.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              3332899.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3526975.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   893.241 ±(99.9%) 62.644 ops/s [Average]
[info]   (min, avg, max) = (866.045, 893.241, 909.271), stdev = 16.268
[info]   CI (99.9%): [830.597, 955.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1903.102 ±(99.9%) 76.604 MB/sec [Average]
[info]   (min, avg, max) = (1882.752, 1903.102, 1935.051), stdev = 19.894
[info]   CI (99.9%): [1826.499, 1979.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3352834.253 ±(99.9%) 185927.691 B/op [Average]
[info]   (min, avg, max) = (3315244.412, 3352834.253, 3436543.806), stdev = 48284.831
[info]   CI (99.9%): [3166906.562, 3538761.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1867.041 ±(99.9%) 1138.801 MB/sec [Average]
[info]   (min, avg, max) = (1338.197, 1867.041, 2010.639), stdev = 295.743
[info]   CI (99.9%): [728.241, 3005.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3289848.738 ±(99.9%) 2028389.782 B/op [Average]
[info]   (min, avg, max) = (2356363.740, 3289848.738, 3636151.954), stdev = 526766.385
[info]   CI (99.9%): [1261458.956, 5318238.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.225 ±(99.9%) 1.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.225, 0.595), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   399.921 ±(99.9%) 1934.056 B/op [Average]
[info]   (min, avg, max) = (36.009, 399.921, 1039.831), stdev = 502.268
[info]   CI (99.9%): [≈ 0, 2333.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14102.026 ops/s
[info] # Warmup Iteration   2: 34035.469 ops/s
[info] # Warmup Iteration   3: 39561.174 ops/s
[info] # Warmup Iteration   4: 38586.896 ops/s
[info] # Warmup Iteration   5: 38466.440 ops/s
[info] Iteration   1: 38527.955 ops/s
[info]                  ·gc.alloc.rate:                   642.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              26243.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27034.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.850 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38648.347 ops/s
[info]                  ·gc.alloc.rate:               651.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          26543.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26950.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 39049.839 ops/s
[info]                  ·gc.alloc.rate:                   656.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              26470.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26700.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38663.956 ops/s
[info]                  ·gc.alloc.rate:               651.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          26520.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26966.172 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 38632.505 ops/s
[info]                  ·gc.alloc.rate:               658.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          26833.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27014.943 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   38704.520 ±(99.9%) 771.109 ops/s [Average]
[info]   (min, avg, max) = (38527.955, 38704.520, 39049.839), stdev = 200.255
[info]   CI (99.9%): [37933.411, 39475.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   652.337 ±(99.9%) 24.337 MB/sec [Average]
[info]   (min, avg, max) = (642.545, 652.337, 658.929), stdev = 6.320
[info]   CI (99.9%): [628.000, 676.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26522.128 ±(99.9%) 811.665 B/op [Average]
[info]   (min, avg, max) = (26243.175, 26522.128, 26833.222), stdev = 210.787
[info]   CI (99.9%): [25710.463, 27333.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   662.439 ±(99.9%) 2.402 MB/sec [Average]
[info]   (min, avg, max) = (661.831, 662.439, 663.392), stdev = 0.624
[info]   CI (99.9%): [660.037, 664.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26933.440 ±(99.9%) 518.877 B/op [Average]
[info]   (min, avg, max) = (26700.349, 26933.440, 27034.833), stdev = 134.751
[info]   CI (99.9%): [26414.563, 27452.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.338 ±(99.9%) 1.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 0.850), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 2.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120.438 ops/s
[info] # Warmup Iteration   2: 518.700 ops/s
[info] # Warmup Iteration   3: 846.370 ops/s
[info] # Warmup Iteration   4: 920.414 ops/s
[info] # Warmup Iteration   5: 899.079 ops/s
[info] Iteration   1: 915.322 ops/s
[info]                  ·gc.alloc.rate:                   2041.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              3507859.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3429049.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 926.784 ops/s
[info]                  ·gc.alloc.rate:                   2028.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              3444931.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3399671.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2120.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 927.122 ops/s
[info]                  ·gc.alloc.rate:                   2036.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              3454469.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3400527.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.931 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 888.317 ops/s
[info]                  ·gc.alloc.rate:               2053.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          3636800.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3557963.447 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 910.092 ops/s
[info]                  ·gc.alloc.rate:                   2046.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              3538371.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3478947.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 359.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   913.527 ±(99.9%) 61.221 ops/s [Average]
[info]   (min, avg, max) = (888.317, 913.527, 927.122), stdev = 15.899
[info]   CI (99.9%): [852.306, 974.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2041.153 ±(99.9%) 36.051 MB/sec [Average]
[info]   (min, avg, max) = (2028.749, 2041.153, 2053.066), stdev = 9.362
[info]   CI (99.9%): [2005.102, 2077.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3516486.383 ±(99.9%) 298239.155 B/op [Average]
[info]   (min, avg, max) = (3444931.426, 3516486.383, 3636800.405), stdev = 77451.761
[info]   CI (99.9%): [3218247.228, 3814725.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.516 ±(99.9%) 24.644 MB/sec [Average]
[info]   (min, avg, max) = (1995.426, 2004.516, 2012.193), stdev = 6.400
[info]   CI (99.9%): [1979.872, 2029.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3453231.779 ±(99.9%) 257311.726 B/op [Average]
[info]   (min, avg, max) = (3399671.163, 3453231.779, 3557963.447), stdev = 66823.038
[info]   CI (99.9%): [3195920.053, 3710543.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.312 ±(99.9%) 2.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.249), stdev = 0.530
[info]   CI (99.9%): [≈ 0, 2.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   531.615 ±(99.9%) 3460.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 531.615, 2120.906), stdev = 898.734
[info]   CI (99.9%): [≈ 0, 3992.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1972.803 ops/s
[info] # Warmup Iteration   2: 12335.373 ops/s
[info] # Warmup Iteration   3: 16110.810 ops/s
[info] # Warmup Iteration   4: 16720.753 ops/s
[info] # Warmup Iteration   5: 16751.559 ops/s
[info] Iteration   1: 16621.153 ops/s
[info]                  ·gc.alloc.rate:                   1332.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              126165.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123313.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 16600.781 ops/s
[info]                  ·gc.alloc.rate:               1323.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          125495.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1303.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123595.930 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   3: 15709.379 ops/s
[info]                  ·gc.alloc.rate:                   1670.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              167290.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130805.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 522.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 15721.189 ops/s
[info]                  ·gc.alloc.rate:                   1683.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              168507.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1954.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195591.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 801.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 16683.975 ops/s
[info]                  ·gc.alloc.rate:                   1368.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              129050.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1298.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122533.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 294.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16267.295 ±(99.9%) 1944.053 ops/s [Average]
[info]   (min, avg, max) = (15709.379, 16267.295, 16683.975), stdev = 504.865
[info]   CI (99.9%): [14323.242, 18211.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1475.831 ±(99.9%) 711.197 MB/sec [Average]
[info]   (min, avg, max) = (1323.876, 1475.831, 1683.994), stdev = 184.696
[info]   CI (99.9%): [764.634, 2187.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   143302.030 ±(99.9%) 86629.957 B/op [Average]
[info]   (min, avg, max) = (125495.966, 143302.030, 168507.661), stdev = 22497.525
[info]   CI (99.9%): [56672.073, 229931.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1433.244 ±(99.9%) 1122.419 MB/sec [Average]
[info]   (min, avg, max) = (1298.951, 1433.244, 1954.653), stdev = 291.489
[info]   CI (99.9%): [310.825, 2555.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   139167.913 ±(99.9%) 122133.428 B/op [Average]
[info]   (min, avg, max) = (122533.901, 139167.913, 195591.033), stdev = 31717.663
[info]   CI (99.9%): [17034.484, 261301.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   3.275 ±(99.9%) 13.271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.275, 8.007), stdev = 3.446
[info]   CI (99.9%): [≈ 0, 16.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   324.176 ±(99.9%) 1329.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 324.176, 801.223), stdev = 345.228
[info]   CI (99.9%): [≈ 0, 1653.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.400, 15.000), stdev = 4.219
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4194.759 ops/s
[info] # Warmup Iteration   2: 14150.779 ops/s
[info] # Warmup Iteration   3: 18611.836 ops/s
[info] # Warmup Iteration   4: 19218.232 ops/s
[info] # Warmup Iteration   5: 18804.981 ops/s
[info] Iteration   1: 19131.323 ops/s
[info]                  ·gc.alloc.rate:                   1108.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              91156.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106123.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 17937.852 ops/s
[info]                  ·gc.alloc.rate:               1382.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          121192.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1291.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113238.282 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     15.000 ms
[info] Iteration   3: 18130.530 ops/s
[info]                  ·gc.alloc.rate:                   1365.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              118509.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1297.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112617.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 18923.142 ops/s
[info]                  ·gc.alloc.rate:                   1137.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              94587.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108093.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 18434.158 ops/s
[info]                  ·gc.alloc.rate:                   1042.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              89002.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55533.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18511.401 ±(99.9%) 1957.611 ops/s [Average]
[info]   (min, avg, max) = (17937.852, 18511.401, 19131.323), stdev = 508.385
[info]   CI (99.9%): [16553.790, 20469.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1207.301 ±(99.9%) 601.782 MB/sec [Average]
[info]   (min, avg, max) = (1042.755, 1207.301, 1382.575), stdev = 156.281
[info]   CI (99.9%): [605.519, 1809.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   102889.660 ±(99.9%) 60222.493 B/op [Average]
[info]   (min, avg, max) = (89002.898, 102889.660, 121192.243), stdev = 15639.590
[info]   CI (99.9%): [42667.167, 163112.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1166.012 ±(99.9%) 1109.501 MB/sec [Average]
[info]   (min, avg, max) = (650.634, 1166.012, 1299.676), stdev = 288.134
[info]   CI (99.9%): [56.511, 2275.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99121.379 ±(99.9%) 94533.796 B/op [Average]
[info]   (min, avg, max) = (55533.923, 99121.379, 113238.282), stdev = 24550.127
[info]   CI (99.9%): [4587.583, 193655.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 3.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 2.180), stdev = 0.978
[info]   CI (99.9%): [≈ 0, 4.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   75.036 ±(99.9%) 317.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.036, 181.340), stdev = 82.396
[info]   CI (99.9%): [≈ 0, 392.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 12.400, 15.000), stdev = 3.130
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132117.782 ops/s
[info] # Warmup Iteration   2: 299615.007 ops/s
[info] # Warmup Iteration   3: 321566.131 ops/s
[info] # Warmup Iteration   4: 323002.333 ops/s
[info] # Warmup Iteration   5: 318727.113 ops/s
[info] Iteration   1: 316552.328 ops/s
[info]                  ·gc.alloc.rate:                   1193.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              5933.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6643.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 318685.357 ops/s
[info]                  ·gc.alloc.rate:               1178.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          5822.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3299.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 312306.829 ops/s
[info]                  ·gc.alloc.rate:                   1160.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              5849.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6735.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 318527.558 ops/s
[info]                  ·gc.alloc.rate:                   1206.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              5963.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6607.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 323271.110 ops/s
[info]                  ·gc.alloc.rate:                   1222.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              5951.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6495.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   317868.637 ±(99.9%) 15276.225 ops/s [Average]
[info]   (min, avg, max) = (312306.829, 317868.637, 323271.110), stdev = 3967.187
[info]   CI (99.9%): [302592.411, 333144.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1192.476 ±(99.9%) 91.943 MB/sec [Average]
[info]   (min, avg, max) = (1160.881, 1192.476, 1222.269), stdev = 23.877
[info]   CI (99.9%): [1100.533, 1284.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5903.992 ±(99.9%) 245.540 B/op [Average]
[info]   (min, avg, max) = (5822.036, 5903.992, 5963.573), stdev = 63.766
[info]   CI (99.9%): [5658.452, 6149.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1202.521 ±(99.9%) 1150.274 MB/sec [Average]
[info]   (min, avg, max) = (668.154, 1202.521, 1337.292), stdev = 298.722
[info]   CI (99.9%): [52.247, 2352.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5956.603 ±(99.9%) 5728.772 B/op [Average]
[info]   (min, avg, max) = (3299.685, 5956.603, 6735.779), stdev = 1487.744
[info]   CI (99.9%): [227.831, 11685.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.194 ±(99.9%) 8.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.194, 5.069), stdev = 2.195
[info]   CI (99.9%): [≈ 0, 9.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.888 ±(99.9%) 41.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.888, 25.046), stdev = 10.845
[info]   CI (99.9%): [≈ 0, 47.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168001.711 ops/s
[info] # Warmup Iteration   2: 345031.223 ops/s
[info] # Warmup Iteration   3: 355254.114 ops/s
[info] # Warmup Iteration   4: 358275.104 ops/s
[info] # Warmup Iteration   5: 357342.401 ops/s
[info] Iteration   1: 357910.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 350604.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 358930.694 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 358659.439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 358783.520 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   356977.840 ±(99.9%) 13801.564 ops/s [Average]
[info]   (min, avg, max) = (350604.886, 356977.840, 358930.694), stdev = 3584.222
[info]   CI (99.9%): [343176.276, 370779.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4257.140 ops/s
[info] # Warmup Iteration   2: 12354.848 ops/s
[info] # Warmup Iteration   3: 14423.210 ops/s
[info] # Warmup Iteration   4: 16897.631 ops/s
[info] # Warmup Iteration   5: 19303.019 ops/s
[info] Iteration   1: 19153.524 ops/s
[info]                  ·gc.alloc.rate:                   1181.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              97057.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1281.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105290.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 18956.076 ops/s
[info]                  ·gc.alloc.rate:               1420.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          117886.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1285.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106688.280 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   3: 17960.421 ops/s
[info]                  ·gc.alloc.rate:                   1555.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              136268.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1287.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112772.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 18294.035 ops/s
[info]                  ·gc.alloc.rate:                   1214.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              104528.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1287.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110806.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 18745.383 ops/s
[info]                  ·gc.alloc.rate:                   1139.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              95630.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1287.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108134.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18621.888 ±(99.9%) 1881.105 ops/s [Average]
[info]   (min, avg, max) = (17960.421, 18621.888, 19153.524), stdev = 488.517
[info]   CI (99.9%): [16740.783, 20502.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1302.291 ±(99.9%) 686.495 MB/sec [Average]
[info]   (min, avg, max) = (1139.062, 1302.291, 1555.751), stdev = 178.281
[info]   CI (99.9%): [615.795, 1988.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   110274.253 ±(99.9%) 65454.901 B/op [Average]
[info]   (min, avg, max) = (95630.993, 110274.253, 136268.801), stdev = 16998.430
[info]   CI (99.9%): [44819.352, 175729.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1286.076 ±(99.9%) 10.833 MB/sec [Average]
[info]   (min, avg, max) = (1281.379, 1286.076, 1287.996), stdev = 2.813
[info]   CI (99.9%): [1275.242, 1296.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108738.436 ±(99.9%) 11712.848 B/op [Average]
[info]   (min, avg, max) = (105290.036, 108738.436, 112772.703), stdev = 3041.789
[info]   CI (99.9%): [97025.588, 120451.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.716 ±(99.9%) 13.406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.716, 7.365), stdev = 3.481
[info]   CI (99.9%): [≈ 0, 16.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   235.090 ±(99.9%) 1160.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 235.090, 633.643), stdev = 301.507
[info]   CI (99.9%): [≈ 0, 1396.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.800, 14.000), stdev = 2.950
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 706318.780 ops/s
[info] # Warmup Iteration   2: 1285784.897 ops/s
[info] # Warmup Iteration   3: 1402169.540 ops/s
[info] # Warmup Iteration   4: 1403730.798 ops/s
[info] # Warmup Iteration   5: 1403866.457 ops/s
[info] Iteration   1: 1403774.590 ops/s
[info]                  ·gc.alloc.rate:      57.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1403456.121 ops/s
[info]                  ·gc.alloc.rate:      57.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1403719.226 ops/s
[info]                  ·gc.alloc.rate:      57.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1404002.864 ops/s
[info]                  ·gc.alloc.rate:      57.094 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1383726.813 ops/s
[info]                  ·gc.alloc.rate:                   70.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1399735.923 ±(99.9%) 34468.952 ops/s [Average]
[info]   (min, avg, max) = (1383726.813, 1399735.923, 1404002.864), stdev = 8951.477
[info]   CI (99.9%): [1365266.971, 1434204.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   59.870 ±(99.9%) 23.906 MB/sec [Average]
[info]   (min, avg, max) = (57.085, 59.870, 70.976), stdev = 6.208
[info]   CI (99.9%): [35.964, 83.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   67.346 ±(99.9%) 28.809 B/op [Average]
[info]   (min, avg, max) = (64.000, 67.346, 80.730), stdev = 7.482
[info]   CI (99.9%): [38.538, 96.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.317 ±(99.9%) 880.982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.317, 511.586), stdev = 228.788
[info]   CI (99.9%): [≈ 0, 983.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   116.378 ±(99.9%) 1002.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.378, 581.891), stdev = 260.230
[info]   CI (99.9%): [≈ 0, 1118.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.352 ±(99.9%) 3.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.762), stdev = 0.788
[info]   CI (99.9%): [≈ 0, 3.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.401 ±(99.9%) 3.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.401, 2.004), stdev = 0.896
[info]   CI (99.9%): [≈ 0, 3.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3926.612 ops/s
[info] # Warmup Iteration   2: 80178.954 ops/s
[info] # Warmup Iteration   3: 120440.115 ops/s
[info] # Warmup Iteration   4: 133489.617 ops/s
[info] # Warmup Iteration   5: 136970.362 ops/s
[info] Iteration   1: 134692.839 ops/s
[info]                  ·gc.alloc.rate:                   4599.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              53733.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4696.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54872.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 135608.275 ops/s
[info]                  ·gc.alloc.rate:                   4656.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              54034.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4045.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46942.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 133905.226 ops/s
[info]                  ·gc.alloc.rate:                   4627.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              54391.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4737.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55685.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.734 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 135991.765 ops/s
[info]                  ·gc.alloc.rate:                   4670.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              54055.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47127.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 136480.496 ops/s
[info]                  ·gc.alloc.rate:                   4714.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              54366.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4758.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54878.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.720 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   135335.720 ±(99.9%) 3980.717 ops/s [Average]
[info]   (min, avg, max) = (133905.226, 135335.720, 136480.496), stdev = 1033.780
[info]   CI (99.9%): [131355.003, 139316.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4653.670 ±(99.9%) 168.018 MB/sec [Average]
[info]   (min, avg, max) = (4599.219, 4653.670, 4714.355), stdev = 43.634
[info]   CI (99.9%): [4485.651, 4821.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54116.052 ±(99.9%) 1045.678 B/op [Average]
[info]   (min, avg, max) = (53733.254, 54116.052, 54391.074), stdev = 271.559
[info]   CI (99.9%): [53070.374, 55161.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4462.124 ±(99.9%) 1421.423 MB/sec [Average]
[info]   (min, avg, max) = (4045.237, 4462.124, 4758.797), stdev = 369.139
[info]   CI (99.9%): [3040.701, 5883.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51901.164 ±(99.9%) 17155.260 B/op [Average]
[info]   (min, avg, max) = (46942.106, 51901.164, 55685.610), stdev = 4455.167
[info]   CI (99.9%): [34745.904, 69056.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.582 ±(99.9%) 0.840 B/op [Average]
[info]   (min, avg, max) = (0.241, 0.582, 0.734), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 1.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.000, 11.000), stdev = 0.707
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413679.102 ops/s
[info] # Warmup Iteration   2: 1973425.835 ops/s
[info] # Warmup Iteration   3: 2215780.478 ops/s
[info] # Warmup Iteration   4: 2210763.146 ops/s
[info] # Warmup Iteration   5: 2232391.773 ops/s
[info] Iteration   1: 2233564.231 ops/s
[info]                  ·gc.alloc.rate:      601.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2226238.419 ops/s
[info]                  ·gc.alloc.rate:               622.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.347 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2237691.871 ops/s
[info]                  ·gc.alloc.rate:                   621.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              436.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2234326.580 ops/s
[info]                  ·gc.alloc.rate:               622.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.588 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2229488.704 ops/s
[info]                  ·gc.alloc.rate:                   623.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   2232261.961 ±(99.9%) 17157.685 ops/s [Average]
[info]   (min, avg, max) = (2226238.419, 2232261.961, 2237691.871), stdev = 4455.796
[info]   CI (99.9%): [2215104.276, 2249419.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   618.345 ±(99.9%) 35.892 MB/sec [Average]
[info]   (min, avg, max) = (601.721, 618.345, 623.316), stdev = 9.321
[info]   CI (99.9%): [582.453, 654.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   435.927 ±(99.9%) 26.223 B/op [Average]
[info]   (min, avg, max) = (424.000, 435.927, 440.393), stdev = 6.810
[info]   CI (99.9%): [409.704, 462.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.051 ±(99.9%) 1143.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.051, 664.791), stdev = 296.868
[info]   CI (99.9%): [≈ 0, 1674.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   374.428 ±(99.9%) 805.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 374.428, 469.306), stdev = 209.314
[info]   CI (99.9%): [≈ 0, 1180.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029549.194 ops/s
[info] # Warmup Iteration   2: 1681403.639 ops/s
[info] # Warmup Iteration   3: 1955130.580 ops/s
[info] # Warmup Iteration   4: 1953922.148 ops/s
[info] # Warmup Iteration   5: 1957786.505 ops/s
[info] Iteration   1: 1959738.090 ops/s
[info]                  ·gc.alloc.rate:               551.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 536.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1927947.032 ops/s
[info]                  ·gc.alloc.rate:      519.511 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1948332.871 ops/s
[info]                  ·gc.alloc.rate:               545.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 539.997 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1940020.878 ops/s
[info]                  ·gc.alloc.rate:               544.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 542.844 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1959091.819 ops/s
[info]                  ·gc.alloc.rate:                   541.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              435.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     537.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1947026.138 ±(99.9%) 51732.361 ops/s [Average]
[info]   (min, avg, max) = (1927947.032, 1947026.138, 1959738.090), stdev = 13434.730
[info]   CI (99.9%): [1895293.776, 1998758.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   540.511 ±(99.9%) 47.424 MB/sec [Average]
[info]   (min, avg, max) = (519.511, 540.511, 551.750), stdev = 12.316
[info]   CI (99.9%): [493.087, 587.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.808 ±(99.9%) 29.960 B/op [Average]
[info]   (min, avg, max) = (424.000, 436.808, 443.018), stdev = 7.780
[info]   CI (99.9%): [406.848, 466.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.147 ±(99.9%) 1151.944 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.147, 669.425), stdev = 299.156
[info]   CI (99.9%): [≈ 0, 1687.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   431.456 ±(99.9%) 928.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 431.456, 542.844), stdev = 241.202
[info]   CI (99.9%): [≈ 0, 1360.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 908149.666 ops/s
[info] # Warmup Iteration   2: 1656639.596 ops/s
[info] # Warmup Iteration   3: 1959992.268 ops/s
[info] # Warmup Iteration   4: 1960232.177 ops/s
[info] # Warmup Iteration   5: 1959564.870 ops/s
[info] Iteration   1: 1960045.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1961146.288 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1960139.890 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1952304.972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1960427.902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1958812.868 ±(99.9%) 14106.940 ops/s [Average]
[info]   (min, avg, max) = (1952304.972, 1958812.868, 1961146.288), stdev = 3663.528
[info]   CI (99.9%): [1944705.928, 1972919.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5293.899 ops/s
[info] # Warmup Iteration   2: 28456.787 ops/s
[info] # Warmup Iteration   3: 56856.816 ops/s
[info] # Warmup Iteration   4: 50370.921 ops/s
[info] # Warmup Iteration   5: 56535.059 ops/s
[info] Iteration   1: 56866.200 ops/s
[info]                  ·gc.alloc.rate:                   1998.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              55291.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55529.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 57466.678 ops/s
[info]                  ·gc.alloc.rate:                   2022.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              55376.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55006.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 57493.525 ops/s
[info]                  ·gc.alloc.rate:                   2008.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              54970.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54979.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 57790.499 ops/s
[info]                  ·gc.alloc.rate:                   2015.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              54885.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54770.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 57405.714 ops/s
[info]                  ·gc.alloc.rate:                   2014.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              55235.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55212.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   57404.523 ±(99.9%) 1292.341 ops/s [Average]
[info]   (min, avg, max) = (56866.200, 57404.523, 57790.499), stdev = 335.617
[info]   CI (99.9%): [56112.182, 58696.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2011.874 ±(99.9%) 34.572 MB/sec [Average]
[info]   (min, avg, max) = (1998.308, 2011.874, 2022.136), stdev = 8.978
[info]   CI (99.9%): [1977.302, 2046.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55151.959 ±(99.9%) 819.850 B/op [Average]
[info]   (min, avg, max) = (54885.048, 55151.959, 55376.539), stdev = 212.913
[info]   CI (99.9%): [54332.109, 55971.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2009.952 ±(99.9%) 10.633 MB/sec [Average]
[info]   (min, avg, max) = (2006.902, 2009.952, 2014.025), stdev = 2.761
[info]   CI (99.9%): [1999.318, 2020.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55099.924 ±(99.9%) 1103.813 B/op [Average]
[info]   (min, avg, max) = (54770.943, 55099.924, 55529.765), stdev = 286.657
[info]   CI (99.9%): [53996.110, 56203.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.478 ±(99.9%) 2.019 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.478, 1.247), stdev = 0.524
[info]   CI (99.9%): [≈ 0, 2.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.166 ±(99.9%) 55.800 B/op [Average]
[info]   (min, avg, max) = (0.571, 13.166, 34.492), stdev = 14.491
[info]   CI (99.9%): [≈ 0, 68.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61658.465 ops/s
[info] # Warmup Iteration   2: 517426.327 ops/s
[info] # Warmup Iteration   3: 1169276.540 ops/s
[info] # Warmup Iteration   4: 1085157.563 ops/s
[info] # Warmup Iteration   5: 1207951.526 ops/s
[info] Iteration   1: 1220320.704 ops/s
[info]                  ·gc.alloc.rate:                   3481.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              4489.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3324.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4287.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1214426.114 ops/s
[info]                  ·gc.alloc.rate:                   3487.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              4520.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4318.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1204486.560 ops/s
[info]                  ·gc.alloc.rate:                   3487.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              4556.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4373.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1194130.681 ops/s
[info]                  ·gc.alloc.rate:                   3485.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              4593.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4433.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1184603.184 ops/s
[info]                  ·gc.alloc.rate:                   3447.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              4578.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4485.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   1203593.448 ±(99.9%) 56070.171 ops/s [Average]
[info]   (min, avg, max) = (1184603.184, 1203593.448, 1220320.704), stdev = 14561.245
[info]   CI (99.9%): [1147523.277, 1259663.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3477.955 ±(99.9%) 65.690 MB/sec [Average]
[info]   (min, avg, max) = (3447.749, 3477.955, 3487.800), stdev = 17.059
[info]   CI (99.9%): [3412.265, 3543.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4547.798 ±(99.9%) 163.818 B/op [Average]
[info]   (min, avg, max) = (4489.975, 4547.798, 4593.646), stdev = 42.543
[info]   CI (99.9%): [4383.980, 4711.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3349.053 ±(99.9%) 84.021 MB/sec [Average]
[info]   (min, avg, max) = (3324.348, 3349.053, 3377.243), stdev = 21.820
[info]   CI (99.9%): [3265.033, 3433.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4379.659 ±(99.9%) 312.278 B/op [Average]
[info]   (min, avg, max) = (4287.164, 4379.659, 4485.039), stdev = 81.098
[info]   CI (99.9%): [4067.381, 4691.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.172 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.065, 0.134), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.510 ops/s
[info] # Warmup Iteration   2: 4276585.734 ops/s
[info] # Warmup Iteration   3: 4525652.579 ops/s
[info] # Warmup Iteration   4: 5327008.915 ops/s
[info] # Warmup Iteration   5: 5320885.390 ops/s
[info] Iteration   1: 5220887.468 ops/s
[info]                  ·gc.alloc.rate:      318.513 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5244239.287 ops/s
[info]                  ·gc.alloc.rate:      319.879 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5215636.288 ops/s
[info]                  ·gc.alloc.rate:                   333.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5346793.738 ops/s
[info]                  ·gc.alloc.rate:      326.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5328646.792 ops/s
[info]                  ·gc.alloc.rate:               337.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195.768 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5271240.715 ±(99.9%) 238616.421 ops/s [Average]
[info]   (min, avg, max) = (5215636.288, 5271240.715, 5346793.738), stdev = 61967.927
[info]   CI (99.9%): [5032624.293, 5509857.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   327.145 ±(99.9%) 32.043 MB/sec [Average]
[info]   (min, avg, max) = (318.513, 327.145, 337.288), stdev = 8.321
[info]   CI (99.9%): [295.102, 359.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   97.673 ±(99.9%) 8.949 B/op [Average]
[info]   (min, avg, max) = (96.000, 97.673, 100.739), stdev = 2.324
[info]   CI (99.9%): [88.723, 106.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   265.149 ±(99.9%) 1398.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.149, 662.957), stdev = 363.071
[info]   CI (99.9%): [≈ 0, 1663.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   79.156 ±(99.9%) 417.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.156, 200.010), stdev = 108.399
[info]   CI (99.9%): [≈ 0, 496.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29752.209 ops/s
[info] # Warmup Iteration   2: 464808.697 ops/s
[info] # Warmup Iteration   3: 1029163.144 ops/s
[info] # Warmup Iteration   4: 1115259.569 ops/s
[info] # Warmup Iteration   5: 1120297.903 ops/s
[info] Iteration   1: 1113454.810 ops/s
[info]                  ·gc.alloc.rate:               1267.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          1790.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1876.681 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1097334.687 ops/s
[info]                  ·gc.alloc.rate:                   1250.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              1793.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1908.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1113715.058 ops/s
[info]                  ·gc.alloc.rate:               1266.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          1789.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1884.648 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1033451.994 ops/s
[info]                  ·gc.alloc.rate:               1160.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          1766.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2035.610 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1118773.261 ops/s
[info]                  ·gc.alloc.rate:                   1236.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1740.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.347 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1095345.962 ±(99.9%) 136806.430 ops/s [Average]
[info]   (min, avg, max) = (1033451.994, 1095345.962, 1118773.261), stdev = 35528.195
[info]   CI (99.9%): [958539.532, 1232152.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1236.270 ±(99.9%) 171.003 MB/sec [Average]
[info]   (min, avg, max) = (1160.033, 1236.270, 1267.434), stdev = 44.409
[info]   CI (99.9%): [1065.267, 1407.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1776.168 ±(99.9%) 87.778 B/op [Average]
[info]   (min, avg, max) = (1740.264, 1776.168, 1793.664), stdev = 22.796
[info]   CI (99.9%): [1688.390, 1863.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.529 ±(99.9%) 1142.587 MB/sec [Average]
[info]   (min, avg, max) = (668.761, 1199.529, 1336.665), stdev = 296.726
[info]   CI (99.9%): [56.942, 2342.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1729.173 ±(99.9%) 1714.832 B/op [Average]
[info]   (min, avg, max) = (940.848, 1729.173, 2035.610), stdev = 445.337
[info]   CI (99.9%): [14.341, 3444.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.196 ±(99.9%) 1.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.958), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 1.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 2.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.347), stdev = 0.599
[info]   CI (99.9%): [≈ 0, 2.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2708971.330 ops/s
[info] # Warmup Iteration   2: 9089466.838 ops/s
[info] # Warmup Iteration   3: 10524301.700 ops/s
[info] # Warmup Iteration   4: 10508414.879 ops/s
[info] # Warmup Iteration   5: 10518097.193 ops/s
[info] Iteration   1: 10369484.238 ops/s
[info]                  ·gc.alloc.rate:               515.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          78.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77.652 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 10530024.551 ops/s
[info]                  ·gc.alloc.rate:                   499.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10530023.982 ops/s
[info]                  ·gc.alloc.rate:                   501.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10594026.563 ops/s
[info]                  ·gc.alloc.rate:      484.762 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10534183.182 ops/s
[info]                  ·gc.alloc.rate:               498.556 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   10511548.503 ±(99.9%) 323201.420 ops/s [Average]
[info]   (min, avg, max) = (10369484.238, 10511548.503, 10594026.563), stdev = 83934.382
[info]   CI (99.9%): [10188347.083, 10834749.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   499.847 ±(99.9%) 41.726 MB/sec [Average]
[info]   (min, avg, max) = (484.762, 499.847, 515.295), stdev = 10.836
[info]   CI (99.9%): [458.120, 541.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.849 ±(99.9%) 8.521 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.849, 78.211), stdev = 2.213
[info]   CI (99.9%): [66.328, 83.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.041 ±(99.9%) 1116.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.041, 670.161), stdev = 289.946
[info]   CI (99.9%): [≈ 0, 1620.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   75.562 ±(99.9%) 166.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.562, 100.129), stdev = 43.340
[info]   CI (99.9%): [≈ 0, 242.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.388), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1392.489 ops/s
[info] # Warmup Iteration   2: 245580.430 ops/s
[info] # Warmup Iteration   3: 765390.594 ops/s
[info] # Warmup Iteration   4: 780002.317 ops/s
[info] # Warmup Iteration   5: 807596.410 ops/s
[info] Iteration   1: 808281.803 ops/s
[info]                  ·gc.alloc.rate:                   2992.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              5825.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6498.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 803417.612 ops/s
[info]                  ·gc.alloc.rate:                   2945.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              5769.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5233.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 807585.413 ops/s
[info]                  ·gc.alloc.rate:               2973.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          5794.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5218.960 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 806443.866 ops/s
[info]                  ·gc.alloc.rate:               2996.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          5848.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5243.192 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 809837.548 ops/s
[info]                  ·gc.alloc.rate:               3036.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          5900.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6547.362 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   807113.248 ±(99.9%) 9256.788 ops/s [Average]
[info]   (min, avg, max) = (803417.612, 807113.248, 809837.548), stdev = 2403.959
[info]   CI (99.9%): [797856.460, 816370.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2989.072 ±(99.9%) 128.389 MB/sec [Average]
[info]   (min, avg, max) = (2945.986, 2989.072, 3036.797), stdev = 33.342
[info]   CI (99.9%): [2860.683, 3117.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   5827.752 ±(99.9%) 194.765 B/op [Average]
[info]   (min, avg, max) = (5769.411, 5827.752, 5900.509), stdev = 50.580
[info]   CI (99.9%): [5632.987, 6022.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.925 ±(99.9%) 1423.755 MB/sec [Average]
[info]   (min, avg, max) = (2672.357, 2948.925, 3369.710), stdev = 369.745
[info]   CI (99.9%): [1525.170, 4372.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5748.309 ±(99.9%) 2723.914 B/op [Average]
[info]   (min, avg, max) = (5218.960, 5748.309, 6547.362), stdev = 707.392
[info]   CI (99.9%): [3024.396, 8472.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.583), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.235 ±(99.9%) 1.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.235, 1.135), stdev = 0.503
[info]   CI (99.9%): [≈ 0, 2.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331.583 ops/s
[info] # Warmup Iteration   2: 3699.455 ops/s
[info] # Warmup Iteration   3: 5048.880 ops/s
[info] # Warmup Iteration   4: 5443.993 ops/s
[info] # Warmup Iteration   5: 5453.860 ops/s
[info] Iteration   1: 5479.075 ops/s
[info]                  ·gc.alloc.rate:                   2419.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              694855.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575559.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5485.081 ops/s
[info]                  ·gc.alloc.rate:                   2430.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              697004.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768133.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.571 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5516.224 ops/s
[info]                  ·gc.alloc.rate:                   2440.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              696362.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574179.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5479.673 ops/s
[info]                  ·gc.alloc.rate:                   2478.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              711773.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772131.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.849 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5528.589 ops/s
[info]                  ·gc.alloc.rate:                   2472.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              703882.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575579.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   5497.728 ±(99.9%) 88.824 ops/s [Average]
[info]   (min, avg, max) = (5479.075, 5497.728, 5528.589), stdev = 23.067
[info]   CI (99.9%): [5408.905, 5586.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2448.203 ±(99.9%) 100.420 MB/sec [Average]
[info]   (min, avg, max) = (2419.215, 2448.203, 2478.357), stdev = 26.079
[info]   CI (99.9%): [2347.782, 2548.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   700775.910 ±(99.9%) 27183.372 B/op [Average]
[info]   (min, avg, max) = (694855.874, 700775.910, 711773.638), stdev = 7059.435
[info]   CI (99.9%): [673592.538, 727959.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2280.980 ±(99.9%) 1414.743 MB/sec [Average]
[info]   (min, avg, max) = (2003.872, 2280.980, 2688.520), stdev = 367.404
[info]   CI (99.9%): [866.237, 3695.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   653116.686 ±(99.9%) 411369.745 B/op [Average]
[info]   (min, avg, max) = (574179.463, 653116.686, 772131.497), stdev = 106831.416
[info]   CI (99.9%): [241746.941, 1064486.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.378 ±(99.9%) 1.499 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.378, 1.020), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   108.317 ±(99.9%) 430.966 B/op [Average]
[info]   (min, avg, max) = (23.702, 108.317, 292.945), stdev = 111.920
[info]   CI (99.9%): [≈ 0, 539.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315.689 ops/s
[info] # Warmup Iteration   2: 5784.567 ops/s
[info] # Warmup Iteration   3: 7714.035 ops/s
[info] # Warmup Iteration   4: 7787.141 ops/s
[info] # Warmup Iteration   5: 7816.818 ops/s
[info] Iteration   1: 7832.733 ops/s
[info]                  ·gc.alloc.rate:                   3172.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              637247.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     536533.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.734 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7644.700 ops/s
[info]                  ·gc.alloc.rate:                   3139.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              646291.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     688787.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.571 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7854.464 ops/s
[info]                  ·gc.alloc.rate:               3171.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          635447.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 538169.352 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 7806.139 ops/s
[info]                  ·gc.alloc.rate:                   3203.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              645656.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679063.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 7701.695 ops/s
[info]                  ·gc.alloc.rate:                   3202.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              654199.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690701.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.762 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7767.946 ±(99.9%) 348.266 ops/s [Average]
[info]   (min, avg, max) = (7644.700, 7767.946, 7854.464), stdev = 90.444
[info]   CI (99.9%): [7419.681, 8116.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3177.722 ±(99.9%) 101.643 MB/sec [Average]
[info]   (min, avg, max) = (3139.382, 3177.722, 3203.220), stdev = 26.396
[info]   CI (99.9%): [3076.079, 3279.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   643768.415 ±(99.9%) 29231.564 B/op [Average]
[info]   (min, avg, max) = (635447.226, 643768.415, 654199.947), stdev = 7591.344
[info]   CI (99.9%): [614536.851, 672999.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3090.514 ±(99.9%) 1449.379 MB/sec [Average]
[info]   (min, avg, max) = (2670.686, 3090.514, 3380.871), stdev = 376.399
[info]   CI (99.9%): [1641.134, 4539.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   626651.141 ±(99.9%) 314368.303 B/op [Average]
[info]   (min, avg, max) = (536533.655, 626651.141, 690701.626), stdev = 81640.450
[info]   CI (99.9%): [312282.838, 941019.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.312), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.653 ±(99.9%) 98.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.653, 62.734), stdev = 25.649
[info]   CI (99.9%): [≈ 0, 116.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16673.528 ops/s
[info] # Warmup Iteration   2: 48442.323 ops/s
[info] # Warmup Iteration   3: 55109.343 ops/s
[info] # Warmup Iteration   4: 56129.276 ops/s
[info] # Warmup Iteration   5: 57110.105 ops/s
[info] Iteration   1: 57150.011 ops/s
[info]                  ·gc.alloc.rate:               952.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          26225.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18418.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 56994.513 ops/s
[info]                  ·gc.alloc.rate:               946.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          26136.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18478.204 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 53405.944 ops/s
[info]                  ·gc.alloc.rate:               906.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          26720.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39448.711 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 57162.237 ops/s
[info]                  ·gc.alloc.rate:                   946.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              26058.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18432.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 56805.227 ops/s
[info]                  ·gc.alloc.rate:               951.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          26351.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37115.611 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   56303.586 ±(99.9%) 6262.202 ops/s [Average]
[info]   (min, avg, max) = (53405.944, 56303.586, 57162.237), stdev = 1626.274
[info]   CI (99.9%): [50041.384, 62565.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   940.840 ±(99.9%) 73.760 MB/sec [Average]
[info]   (min, avg, max) = (906.909, 940.840, 952.743), stdev = 19.155
[info]   CI (99.9%): [867.080, 1014.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26298.791 ±(99.9%) 1000.611 B/op [Average]
[info]   (min, avg, max) = (26058.469, 26298.791, 26720.730), stdev = 259.856
[info]   CI (99.9%): [25298.180, 27299.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.318 ±(99.9%) 1412.864 MB/sec [Average]
[info]   (min, avg, max) = (669.115, 937.318, 1339.610), stdev = 366.916
[info]   CI (99.9%): [≈ 0, 2350.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26378.711 ±(99.9%) 41962.776 B/op [Average]
[info]   (min, avg, max) = (18418.599, 26378.711, 39448.711), stdev = 10897.600
[info]   CI (99.9%): [≈ 0, 68341.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.263 ±(99.9%) 2.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.263, 1.317), stdev = 0.589
[info]   CI (99.9%): [≈ 0, 2.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1026.451 ops/s
[info] # Warmup Iteration   2: 3164.204 ops/s
[info] # Warmup Iteration   3: 4715.374 ops/s
[info] # Warmup Iteration   4: 5474.006 ops/s
[info] # Warmup Iteration   5: 5464.136 ops/s
[info] Iteration   1: 5438.268 ops/s
[info]                  ·gc.alloc.rate:                   969.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              280534.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192595.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5486.545 ops/s
[info]                  ·gc.alloc.rate:                   998.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              286283.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381847.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 5412.355 ops/s
[info]                  ·gc.alloc.rate:               966.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          281037.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193581.772 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 5289.565 ops/s
[info]                  ·gc.alloc.rate:                        945.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                   281316.350 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.018 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 5.303 B/op
[info]                  ·gc.churn.Metaspace:                   0.051 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              15.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:               679.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          202096.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      1599.862 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              48.000 ms
[info] Iteration   5: 5530.184 ops/s
[info]                  ·gc.alloc.rate:               1004.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          285914.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 379473.816 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   5431.383 ±(99.9%) 351.477 ops/s [Average]
[info]   (min, avg, max) = (5289.565, 5431.383, 5530.184), stdev = 91.277
[info]   CI (99.9%): [5079.906, 5782.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   976.997 ±(99.9%) 93.911 MB/sec [Average]
[info]   (min, avg, max) = (945.540, 976.997, 1004.976), stdev = 24.388
[info]   CI (99.9%): [883.086, 1070.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   283017.226 ±(99.9%) 10898.732 B/op [Average]
[info]   (min, avg, max) = (280534.289, 283017.226, 286283.918), stdev = 2830.366
[info]   CI (99.9%): [272118.494, 293915.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   1.061 ±(99.9%) 9.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.061, 5.303), stdev = 2.371
[info]   CI (99.9%): [≈ 0, 10.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.Metaspace.norm":
[info]   3.045 ±(99.9%) 26.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.045, 15.224), stdev = 6.809
[info]   CI (99.9%): [≈ 0, 29.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   935.199 ±(99.9%) 1397.045 MB/sec [Average]
[info]   (min, avg, max) = (665.506, 935.199, 1333.832), stdev = 362.808
[info]   CI (99.9%): [≈ 0, 2332.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   269919.011 ±(99.9%) 389545.692 B/op [Average]
[info]   (min, avg, max) = (192595.592, 269919.011, 381847.510), stdev = 101163.779
[info]   CI (99.9%): [≈ 0, 659464.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.093 ±(99.9%) 9.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.093, 5.377), stdev = 2.395
[info]   CI (99.9%): [≈ 0, 10.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   324.932 ±(99.9%) 2744.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 324.932, 1599.862), stdev = 712.749
[info]   CI (99.9%): [≈ 0, 3069.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 14.400, 48.000), stdev = 19.021
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 671.670 ops/s
[info] # Warmup Iteration   2: 4174.283 ops/s
[info] # Warmup Iteration   3: 5164.293 ops/s
[info] # Warmup Iteration   4: 5405.127 ops/s
[info] # Warmup Iteration   5: 5382.418 ops/s
[info] Iteration   1: 5398.128 ops/s
[info]                  ·gc.alloc.rate:                   582.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              169777.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192760.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5300.305 ops/s
[info]                  ·gc.alloc.rate:               588.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          174735.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196719.267 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5364.349 ops/s
[info]                  ·gc.alloc.rate:               588.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          172755.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194372.569 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5294.631 ops/s
[info]                  ·gc.alloc.rate:                   574.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              170894.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197300.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5441.973 ops/s
[info]                  ·gc.alloc.rate:      574.574 MB/sec
[info]                  ·gc.alloc.rate.norm: 166165.131 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5359.877 ±(99.9%) 243.756 ops/s [Average]
[info]   (min, avg, max) = (5294.631, 5359.877, 5441.973), stdev = 63.303
[info]   CI (99.9%): [5116.121, 5603.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   581.897 ±(99.9%) 27.040 MB/sec [Average]
[info]   (min, avg, max) = (574.574, 581.897, 588.867), stdev = 7.022
[info]   CI (99.9%): [554.856, 608.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   170865.646 ±(99.9%) 12452.019 B/op [Average]
[info]   (min, avg, max) = (166165.131, 170865.646, 174735.834), stdev = 3233.750
[info]   CI (99.9%): [158413.627, 183317.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.068 ±(99.9%) 1141.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.068, 663.814), stdev = 296.318
[info]   CI (99.9%): [≈ 0, 1671.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   156230.579 ±(99.9%) 336371.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 156230.579, 197300.979), stdev = 87354.624
[info]   CI (99.9%): [≈ 0, 492602.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.451 ±(99.9%) 12.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.451, 6.187), stdev = 3.357
[info]   CI (99.9%): [≈ 0, 15.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3382.755 ops/s
[info] # Warmup Iteration   2: 5818.431 ops/s
[info] # Warmup Iteration   3: 6860.290 ops/s
[info] # Warmup Iteration   4: 6798.632 ops/s
[info] # Warmup Iteration   5: 6860.607 ops/s
[info] Iteration   1: 6815.103 ops/s
[info]                  ·gc.alloc.rate:               228.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          52743.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118149.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 6859.893 ops/s
[info]                  ·gc.alloc.rate:      221.269 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6863.612 ops/s
[info]                  ·gc.alloc.rate:      221.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6804.723 ops/s
[info]                  ·gc.alloc.rate:               227.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          52627.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118323.004 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 6756.080 ops/s
[info]                  ·gc.alloc.rate:      286.131 MB/sec
[info]                  ·gc.alloc.rate.norm: 66649.414 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6819.882 ±(99.9%) 170.437 ops/s [Average]
[info]   (min, avg, max) = (6756.080, 6819.882, 6863.612), stdev = 44.262
[info]   CI (99.9%): [6649.445, 6990.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   236.960 ±(99.9%) 106.614 MB/sec [Average]
[info]   (min, avg, max) = (221.269, 236.960, 286.131), stdev = 27.687
[info]   CI (99.9%): [130.345, 343.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   54704.927 ±(99.9%) 25979.979 B/op [Average]
[info]   (min, avg, max) = (50752.063, 54704.927, 66649.414), stdev = 6746.918
[info]   CI (99.9%): [28724.948, 80684.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.646 ±(99.9%) 1079.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.646, 511.622), stdev = 280.223
[info]   CI (99.9%): [≈ 0, 1283.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   47294.483 ±(99.9%) 249370.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47294.483, 118323.004), stdev = 64760.666
[info]   CI (99.9%): [≈ 0, 296664.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3571.077 ops/s
[info] # Warmup Iteration   2: 5682.821 ops/s
[info] # Warmup Iteration   3: 6962.247 ops/s
[info] # Warmup Iteration   4: 6956.476 ops/s
[info] # Warmup Iteration   5: 6945.032 ops/s
[info] Iteration   1: 6968.262 ops/s
[info]                  ·gc.alloc.rate:      173.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6974.797 ops/s
[info]                  ·gc.alloc.rate:      174.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6925.878 ops/s
[info]                  ·gc.alloc.rate:               190.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          43238.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116256.152 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6959.851 ops/s
[info]                  ·gc.alloc.rate:      173.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6782.243 ops/s
[info]                  ·gc.alloc.rate:               268.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          62364.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118706.717 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6922.206 ±(99.9%) 309.894 ops/s [Average]
[info]   (min, avg, max) = (6782.243, 6922.206, 6974.797), stdev = 80.479
[info]   CI (99.9%): [6612.312, 7232.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   196.084 ±(99.9%) 158.914 MB/sec [Average]
[info]   (min, avg, max) = (173.561, 196.084, 268.793), stdev = 41.270
[info]   CI (99.9%): [37.170, 354.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   44669.374 ±(99.9%) 38666.554 B/op [Average]
[info]   (min, avg, max) = (39248.062, 44669.374, 62364.394), stdev = 10041.581
[info]   CI (99.9%): [6002.819, 83335.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.653 ±(99.9%) 1079.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.653, 511.632), stdev = 280.232
[info]   CI (99.9%): [≈ 0, 1283.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   46992.574 ±(99.9%) 247800.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46992.574, 118706.717), stdev = 64353.064
[info]   CI (99.9%): [≈ 0, 294793.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 836.186 ops/s
[info] # Warmup Iteration   2: 3710.310 ops/s
[info] # Warmup Iteration   3: 6965.879 ops/s
[info] # Warmup Iteration   4: 9308.004 ops/s
[info] # Warmup Iteration   5: 9364.665 ops/s
[info] Iteration   1: 9287.336 ops/s
[info]                  ·gc.alloc.rate:                   1956.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              331498.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     338030.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 9333.598 ops/s
[info]                  ·gc.alloc.rate:                   1958.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              330146.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336532.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772.647 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 9325.714 ops/s
[info]                  ·gc.alloc.rate:                   1946.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              328536.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336034.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9110.510 ops/s
[info]                  ·gc.alloc.rate:                   2024.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              349734.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343637.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9104.575 ops/s
[info]                  ·gc.alloc.rate:                   1924.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              332669.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344440.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   9232.347 ±(99.9%) 443.923 ops/s [Average]
[info]   (min, avg, max) = (9104.575, 9232.347, 9333.598), stdev = 115.285
[info]   CI (99.9%): [8788.424, 9676.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1962.136 ±(99.9%) 143.720 MB/sec [Average]
[info]   (min, avg, max) = (1924.512, 1962.136, 2024.378), stdev = 37.324
[info]   CI (99.9%): [1818.415, 2105.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334517.039 ±(99.9%) 33289.884 B/op [Average]
[info]   (min, avg, max) = (328536.449, 334517.039, 349734.440), stdev = 8645.277
[info]   CI (99.9%): [301227.155, 367806.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1992.870 ±(99.9%) 11.477 MB/sec [Average]
[info]   (min, avg, max) = (1989.089, 1992.870, 1996.725), stdev = 2.980
[info]   CI (99.9%): [1981.393, 2004.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   339735.043 ±(99.9%) 15429.573 B/op [Average]
[info]   (min, avg, max) = (336034.487, 339735.043, 344440.003), stdev = 4007.011
[info]   CI (99.9%): [324305.470, 355164.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.261 ±(99.9%) 7.394 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 1.261, 4.584), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 8.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   213.670 ±(99.9%) 1246.022 B/op [Average]
[info]   (min, avg, max) = (14.392, 213.670, 772.647), stdev = 323.588
[info]   CI (99.9%): [≈ 0, 1459.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 15.000), stdev = 4.658
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.636 ops/s
[info] # Warmup Iteration   2: 15349.114 ops/s
[info] # Warmup Iteration   3: 17629.383 ops/s
[info] # Warmup Iteration   4: 17673.442 ops/s
[info] # Warmup Iteration   5: 17813.063 ops/s
[info] Iteration   1: 17807.726 ops/s
[info]                  ·gc.alloc.rate:               453.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          40070.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58489.712 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 17411.779 ops/s
[info]                  ·gc.alloc.rate:               513.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          46395.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59823.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17496.955 ops/s
[info]                  ·gc.alloc.rate:      478.621 MB/sec
[info]                  ·gc.alloc.rate.norm: 43049.912 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17760.297 ops/s
[info]                  ·gc.alloc.rate:                   452.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              40106.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58703.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17600.663 ops/s
[info]                  ·gc.alloc.rate:               458.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          40994.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59237.039 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   17615.484 ±(99.9%) 649.185 ops/s [Average]
[info]   (min, avg, max) = (17411.779, 17615.484, 17807.726), stdev = 168.591
[info]   CI (99.9%): [16966.299, 18264.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   471.314 ±(99.9%) 99.519 MB/sec [Average]
[info]   (min, avg, max) = (452.594, 471.314, 513.519), stdev = 25.845
[info]   CI (99.9%): [371.795, 570.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   42123.080 ±(99.9%) 10308.420 B/op [Average]
[info]   (min, avg, max) = (40070.241, 42123.080, 46395.124), stdev = 2677.064
[info]   CI (99.9%): [31814.660, 52431.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   529.775 ±(99.9%) 1140.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.775, 662.465), stdev = 296.153
[info]   CI (99.9%): [≈ 0, 1670.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   47250.678 ±(99.9%) 101730.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47250.678, 59823.146), stdev = 26418.976
[info]   CI (99.9%): [≈ 0, 148980.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.105 ±(99.9%) 0.902 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.524), stdev = 0.234
[info]   CI (99.9%): [≈ 0, 1.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   9.282 ±(99.9%) 79.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.282, 46.411), stdev = 20.756
[info]   CI (99.9%): [≈ 0, 89.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2138.958 ops/s
[info] # Warmup Iteration   2: 11543.080 ops/s
[info] # Warmup Iteration   3: 14357.955 ops/s
[info] # Warmup Iteration   4: 14474.613 ops/s
[info] # Warmup Iteration   5: 14442.930 ops/s
[info] Iteration   1: 14424.166 ops/s
[info]                  ·gc.alloc.rate:               398.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          43480.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72172.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 14502.297 ops/s
[info]                  ·gc.alloc.rate:      385.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 41800.032 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14383.859 ops/s
[info]                  ·gc.alloc.rate:                   403.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              44164.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72378.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13370.802 ops/s
[info]                  ·gc.alloc.rate:               509.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          59991.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77978.676 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14555.404 ops/s
[info]                  ·gc.alloc.rate:      387.549 MB/sec
[info]                  ·gc.alloc.rate.norm: 41896.235 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14247.306 ±(99.9%) 1904.152 ops/s [Average]
[info]   (min, avg, max) = (13370.802, 14247.306, 14555.404), stdev = 494.502
[info]   CI (99.9%): [12343.153, 16151.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   416.947 ±(99.9%) 201.953 MB/sec [Average]
[info]   (min, avg, max) = (385.239, 416.947, 509.775), stdev = 52.447
[info]   CI (99.9%): [214.994, 618.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   46266.457 ±(99.9%) 29801.994 B/op [Average]
[info]   (min, avg, max) = (41800.032, 46266.457, 59991.247), stdev = 7739.483
[info]   CI (99.9%): [16464.463, 76068.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.129 ±(99.9%) 1395.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.129, 662.623), stdev = 362.528
[info]   CI (99.9%): [≈ 0, 1793.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44505.965 ±(99.9%) 156701.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44505.965, 77978.676), stdev = 40694.926
[info]   CI (99.9%): [≈ 0, 201207.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.367 ±(99.9%) 11.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.367, 6.833), stdev = 3.056
[info]   CI (99.9%): [≈ 0, 13.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11858.536 ops/s
[info] # Warmup Iteration   2: 20403.663 ops/s
[info] # Warmup Iteration   3: 23231.025 ops/s
[info] # Warmup Iteration   4: 22042.217 ops/s
[info] # Warmup Iteration   5: 23109.317 ops/s
[info] Iteration   1: 21218.840 ops/s
[info]                  ·gc.alloc.rate:               572.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          42434.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49506.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 23020.250 ops/s
[info]                  ·gc.alloc.rate:                   436.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              29852.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45635.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.448 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 23113.992 ops/s
[info]                  ·gc.alloc.rate:      425.841 MB/sec
[info]                  ·gc.alloc.rate.norm: 28994.258 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23067.086 ops/s
[info]                  ·gc.alloc.rate:               440.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          30020.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45540.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 23190.277 ops/s
[info]                  ·gc.alloc.rate:                   449.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              30499.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45299.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22722.089 ±(99.9%) 3244.877 ops/s [Average]
[info]   (min, avg, max) = (21218.840, 22722.089, 23190.277), stdev = 842.684
[info]   CI (99.9%): [19477.212, 25966.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   464.867 ±(99.9%) 233.487 MB/sec [Average]
[info]   (min, avg, max) = (425.841, 464.867, 572.287), stdev = 60.636
[info]   CI (99.9%): [231.380, 698.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   32360.184 ±(99.9%) 21786.946 B/op [Average]
[info]   (min, avg, max) = (28994.258, 32360.184, 42434.689), stdev = 5658.001
[info]   CI (99.9%): [10573.238, 54147.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.074 ±(99.9%) 1149.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.074, 667.762), stdev = 298.557
[info]   CI (99.9%): [≈ 0, 1683.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   37196.472 ±(99.9%) 80348.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37196.472, 49506.345), stdev = 20866.350
[info]   CI (99.9%): [≈ 0, 117545.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.367), stdev = 0.611
[info]   CI (99.9%): [≈ 0, 2.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.795 ±(99.9%) 160.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.795, 93.448), stdev = 41.733
[info]   CI (99.9%): [≈ 0, 179.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131.755 ops/s
[info] # Warmup Iteration   2: 2284.202 ops/s
[info] # Warmup Iteration   3: 5400.380 ops/s
[info] # Warmup Iteration   4: 5814.997 ops/s
[info] # Warmup Iteration   5: 5950.541 ops/s
[info] Iteration   1: 6165.414 ops/s
[info]                  ·gc.alloc.rate:                   2367.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              604274.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     511450.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 661.609 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6195.171 ops/s
[info]                  ·gc.alloc.rate:                   2380.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              604609.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     678351.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6239.336 ops/s
[info]                  ·gc.alloc.rate:                   2392.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              603441.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     505218.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6223.799 ops/s
[info]                  ·gc.alloc.rate:                   2399.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              606777.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676201.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.579 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6243.478 ops/s
[info]                  ·gc.alloc.rate:                   2407.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              606723.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     506825.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   6213.440 ±(99.9%) 126.552 ops/s [Average]
[info]   (min, avg, max) = (6165.414, 6213.440, 6243.478), stdev = 32.865
[info]   CI (99.9%): [6086.887, 6339.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2389.480 ±(99.9%) 61.097 MB/sec [Average]
[info]   (min, avg, max) = (2367.212, 2389.480, 2407.378), stdev = 15.867
[info]   CI (99.9%): [2328.383, 2450.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   605165.204 ±(99.9%) 5807.316 B/op [Average]
[info]   (min, avg, max) = (603441.807, 605165.204, 606777.194), stdev = 1508.142
[info]   CI (99.9%): [599357.888, 610972.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2272.584 ±(99.9%) 1406.547 MB/sec [Average]
[info]   (min, avg, max) = (2002.927, 2272.584, 2674.335), stdev = 365.276
[info]   CI (99.9%): [866.037, 3679.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   575609.538 ±(99.9%) 357493.971 B/op [Average]
[info]   (min, avg, max) = (505218.400, 575609.538, 678351.006), stdev = 92840.049
[info]   CI (99.9%): [218115.568, 933103.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 4.116 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.704, 2.592), stdev = 1.069
[info]   CI (99.9%): [≈ 0, 4.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   179.226 ±(99.9%) 1051.240 B/op [Average]
[info]   (min, avg, max) = (5.247, 179.226, 661.609), stdev = 273.004
[info]   CI (99.9%): [≈ 0, 1230.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.121
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1371.394 ops/s
[info] # Warmup Iteration   2: 9299.014 ops/s
[info] # Warmup Iteration   3: 10551.513 ops/s
[info] # Warmup Iteration   4: 11976.128 ops/s
[info] # Warmup Iteration   5: 11731.101 ops/s
[info] Iteration   1: 12234.673 ops/s
[info]                  ·gc.alloc.rate:                   2309.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              297061.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253596.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11683.388 ops/s
[info]                  ·gc.alloc.rate:                   2278.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              306961.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265576.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11895.881 ops/s
[info]                  ·gc.alloc.rate:                   2277.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              301243.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2634.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348555.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11936.476 ops/s
[info]                  ·gc.alloc.rate:                   2253.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              297120.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261485.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11578.465 ops/s
[info]                  ·gc.alloc.rate:                   2482.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              337233.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361175.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.977 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   11865.776 ±(99.9%) 977.569 ops/s [Average]
[info]   (min, avg, max) = (11578.465, 11865.776, 12234.673), stdev = 253.872
[info]   CI (99.9%): [10888.208, 12843.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2320.237 ±(99.9%) 356.853 MB/sec [Average]
[info]   (min, avg, max) = (2253.649, 2320.237, 2482.170), stdev = 92.674
[info]   CI (99.9%): [1963.384, 2677.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   307924.178 ±(99.9%) 64987.471 B/op [Average]
[info]   (min, avg, max) = (297061.382, 307924.178, 337233.857), stdev = 16877.040
[info]   CI (99.9%): [242936.707, 372911.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2243.921 ±(99.9%) 1415.842 MB/sec [Average]
[info]   (min, avg, max) = (1971.513, 2243.921, 2658.388), stdev = 367.690
[info]   CI (99.9%): [828.079, 3659.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   298077.876 ±(99.9%) 201039.450 B/op [Average]
[info]   (min, avg, max) = (253596.525, 298077.876, 361175.172), stdev = 52209.307
[info]   CI (99.9%): [97038.426, 499117.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.355 ±(99.9%) 1.515 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.355, 0.899), stdev = 0.393
[info]   CI (99.9%): [≈ 0, 1.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.979 ±(99.9%) 201.466 B/op [Average]
[info]   (min, avg, max) = (2.744, 46.979, 121.148), stdev = 52.320
[info]   CI (99.9%): [≈ 0, 248.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.819 ops/s
[info] # Warmup Iteration   2: 51891.115 ops/s
[info] # Warmup Iteration   3: 66923.612 ops/s
[info] # Warmup Iteration   4: 66088.679 ops/s
[info] # Warmup Iteration   5: 67729.949 ops/s
[info] Iteration   1: 68271.687 ops/s
[info]                  ·gc.alloc.rate:               656.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          15127.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15249.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 69197.767 ops/s
[info]                  ·gc.alloc.rate:                   660.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              15020.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15061.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 68969.484 ops/s
[info]                  ·gc.alloc.rate:                   662.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              15117.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15110.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 68923.571 ops/s
[info]                  ·gc.alloc.rate:               665.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          15199.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15143.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 69006.625 ops/s
[info]                  ·gc.alloc.rate:               668.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          15251.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15124.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   68873.827 ±(99.9%) 1357.004 ops/s [Average]
[info]   (min, avg, max) = (68271.687, 68873.827, 69197.767), stdev = 352.410
[info]   CI (99.9%): [67516.823, 70230.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   662.719 ±(99.9%) 18.448 MB/sec [Average]
[info]   (min, avg, max) = (656.214, 662.719, 668.695), stdev = 4.791
[info]   CI (99.9%): [644.271, 681.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15143.270 ±(99.9%) 338.867 B/op [Average]
[info]   (min, avg, max) = (15020.048, 15143.270, 15251.708), stdev = 88.003
[info]   CI (99.9%): [14804.403, 15482.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   662.466 ±(99.9%) 2.776 MB/sec [Average]
[info]   (min, avg, max) = (661.494, 662.466, 663.233), stdev = 0.721
[info]   CI (99.9%): [659.690, 665.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15137.730 ±(99.9%) 267.618 B/op [Average]
[info]   (min, avg, max) = (15061.045, 15137.730, 15249.502), stdev = 69.500
[info]   CI (99.9%): [14870.112, 15405.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.251), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10070.052 ops/s
[info] # Warmup Iteration   2: 41398.742 ops/s
[info] # Warmup Iteration   3: 45201.737 ops/s
[info] # Warmup Iteration   4: 43696.750 ops/s
[info] # Warmup Iteration   5: 46634.844 ops/s
[info] Iteration   1: 45078.389 ops/s
[info]                  ·gc.alloc.rate:                   693.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              24212.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23118.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 46615.003 ops/s
[info]                  ·gc.alloc.rate:               720.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          24325.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22356.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 46750.161 ops/s
[info]                  ·gc.alloc.rate:                   725.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              24418.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22347.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.701 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46797.204 ops/s
[info]                  ·gc.alloc.rate:               725.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          24386.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22324.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 46705.961 ops/s
[info]                  ·gc.alloc.rate:               714.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          24084.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22413.528 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   46389.343 ±(99.9%) 2833.763 ops/s [Average]
[info]   (min, avg, max) = (45078.389, 46389.343, 46797.204), stdev = 735.919
[info]   CI (99.9%): [43555.580, 49223.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   715.973 ±(99.9%) 51.264 MB/sec [Average]
[info]   (min, avg, max) = (693.520, 715.973, 725.614), stdev = 13.313
[info]   CI (99.9%): [664.709, 767.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   24285.589 ±(99.9%) 527.683 B/op [Average]
[info]   (min, avg, max) = (24084.848, 24285.589, 24418.966), stdev = 137.038
[info]   CI (99.9%): [23757.906, 24813.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.545 ±(99.9%) 4.922 MB/sec [Average]
[info]   (min, avg, max) = (662.171, 663.545, 665.131), stdev = 1.278
[info]   CI (99.9%): [658.623, 668.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22512.107 ±(99.9%) 1310.748 B/op [Average]
[info]   (min, avg, max) = (22324.666, 22512.107, 23118.211), stdev = 340.397
[info]   CI (99.9%): [21201.359, 23822.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.286 ±(99.9%) 1.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 0.727), stdev = 0.391
[info]   CI (99.9%): [≈ 0, 1.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38607.968 ops/s
[info] # Warmup Iteration   2: 95549.933 ops/s
[info] # Warmup Iteration   3: 100986.207 ops/s
[info] # Warmup Iteration   4: 104522.892 ops/s
[info] # Warmup Iteration   5: 104767.939 ops/s
[info] Iteration   1: 104438.752 ops/s
[info]                  ·gc.alloc.rate:               812.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          12245.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10058.909 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 104806.056 ops/s
[info]                  ·gc.alloc.rate:                   808.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              12133.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10023.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 105558.789 ops/s
[info]                  ·gc.alloc.rate:                   813.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              12124.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9956.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 104918.712 ops/s
[info]                  ·gc.alloc.rate:                   826.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              12400.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20040.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 103702.985 ops/s
[info]                  ·gc.alloc.rate:               799.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          12126.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10139.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   104685.059 ±(99.9%) 2624.219 ops/s [Average]
[info]   (min, avg, max) = (103702.985, 104685.059, 105558.789), stdev = 681.501
[info]   CI (99.9%): [102060.840, 107309.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   811.963 ±(99.9%) 38.460 MB/sec [Average]
[info]   (min, avg, max) = (799.037, 811.963, 826.659), stdev = 9.988
[info]   CI (99.9%): [773.503, 850.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12206.158 ±(99.9%) 462.816 B/op [Average]
[info]   (min, avg, max) = (12124.245, 12206.158, 12400.767), stdev = 120.192
[info]   CI (99.9%): [11743.342, 12668.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   801.422 ±(99.9%) 1150.600 MB/sec [Average]
[info]   (min, avg, max) = (667.497, 801.422, 1335.945), stdev = 298.807
[info]   CI (99.9%): [≈ 0, 1952.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12043.840 ±(99.9%) 17215.470 B/op [Average]
[info]   (min, avg, max) = (9956.973, 12043.840, 20040.589), stdev = 4470.803
[info]   CI (99.9%): [≈ 0, 29259.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.156 ±(99.9%) 1.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.625), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59447.343 ops/s
[info] # Warmup Iteration   2: 120478.658 ops/s
[info] # Warmup Iteration   3: 125574.516 ops/s
[info] # Warmup Iteration   4: 136788.070 ops/s
[info] # Warmup Iteration   5: 136405.345 ops/s
[info] Iteration   1: 137007.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 136586.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 136782.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 136835.152 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 136742.374 ops/s
[info]                  ·gc.alloc.rate:      0.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 9.770 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   136790.819 ±(99.9%) 587.824 ops/s [Average]
[info]   (min, avg, max) = (136586.249, 136790.819, 137007.588), stdev = 152.656
[info]   CI (99.9%): [136202.994, 137378.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.849), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 1.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.957 ±(99.9%) 16.819 B/op [Average]
[info]   (min, avg, max) = (0.003, 1.957, 9.770), stdev = 4.368
[info]   CI (99.9%): [≈ 0, 18.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597.647 ops/s
[info] # Warmup Iteration   2: 5938.986 ops/s
[info] # Warmup Iteration   3: 8865.536 ops/s
[info] # Warmup Iteration   4: 9093.066 ops/s
[info] # Warmup Iteration   5: 9166.686 ops/s
[info] Iteration   1: 9319.466 ops/s
[info]                  ·gc.alloc.rate:                   2426.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              409719.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452121.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 360.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9389.699 ops/s
[info]                  ·gc.alloc.rate:                   2424.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              406386.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336611.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9369.486 ops/s
[info]                  ·gc.alloc.rate:                   2445.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              410785.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450045.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.987 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9371.594 ops/s
[info]                  ·gc.alloc.rate:                   2445.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              410764.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     338096.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.974 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9370.517 ops/s
[info]                  ·gc.alloc.rate:                   2486.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              417577.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451794.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.496 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   9364.152 ±(99.9%) 101.401 ops/s [Average]
[info]   (min, avg, max) = (9319.466, 9364.152, 9389.699), stdev = 26.334
[info]   CI (99.9%): [9262.751, 9465.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2445.737 ±(99.9%) 95.683 MB/sec [Average]
[info]   (min, avg, max) = (2424.726, 2445.737, 2486.278), stdev = 24.849
[info]   CI (99.9%): [2350.054, 2541.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   411046.613 ±(99.9%) 15674.194 B/op [Average]
[info]   (min, avg, max) = (406386.499, 411046.613, 417577.442), stdev = 4070.538
[info]   CI (99.9%): [395372.419, 426720.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2413.644 ±(99.9%) 1416.128 MB/sec [Average]
[info]   (min, avg, max) = (2008.411, 2413.644, 2690.011), stdev = 367.764
[info]   CI (99.9%): [997.515, 3829.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   405734.089 ±(99.9%) 240392.295 B/op [Average]
[info]   (min, avg, max) = (336611.652, 405734.089, 452121.762), stdev = 62429.116
[info]   CI (99.9%): [165341.794, 646126.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.562 ±(99.9%) 3.442 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.562, 2.134), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 4.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   94.762 ±(99.9%) 581.495 B/op [Average]
[info]   (min, avg, max) = (3.496, 94.762, 360.337), stdev = 151.012
[info]   CI (99.9%): [≈ 0, 676.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 628730.801 ops/s
[info] # Warmup Iteration   2: 7596106.310 ops/s
[info] # Warmup Iteration   3: 12746872.624 ops/s
[info] # Warmup Iteration   4: 13351611.455 ops/s
[info] # Warmup Iteration   5: 13394353.247 ops/s
[info] Iteration   1: 13339675.613 ops/s
[info]                  ·gc.alloc.rate:                   5910.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5384.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     635.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 13238109.142 ops/s
[info]                  ·gc.alloc.rate:                   5908.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              702.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6092.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 13389838.100 ops/s
[info]                  ·gc.alloc.rate:                   5935.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5434.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     638.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 13390835.232 ops/s
[info]                  ·gc.alloc.rate:                   5934.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5442.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     639.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 13399311.423 ops/s
[info]                  ·gc.alloc.rate:               5968.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          700.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      6129.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 719.673 B/op
[info]                  ·gc.count:                    9.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   13351553.902 ±(99.9%) 260454.797 ops/s [Average]
[info]   (min, avg, max) = (13238109.142, 13351553.902, 13399311.423), stdev = 67639.284
[info]   CI (99.9%): [13091099.105, 13612008.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   5931.383 ±(99.9%) 92.612 MB/sec [Average]
[info]   (min, avg, max) = (5908.498, 5931.383, 5968.027), stdev = 24.051
[info]   CI (99.9%): [5838.771, 6023.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   699.027 ±(99.9%) 8.991 B/op [Average]
[info]   (min, avg, max) = (697.202, 699.027, 702.288), stdev = 2.335
[info]   CI (99.9%): [690.036, 708.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   5696.547 ±(99.9%) 1459.653 MB/sec [Average]
[info]   (min, avg, max) = (5384.587, 5696.547, 6129.344), stdev = 379.067
[info]   CI (99.9%): [4236.895, 7156.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   671.429 ±(99.9%) 177.653 B/op [Average]
[info]   (min, avg, max) = (635.133, 671.429, 724.139), stdev = 46.136
[info]   CI (99.9%): [493.776, 849.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.167), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.020), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.600, 14.000), stdev = 1.517
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.551 ops/s
[info] # Warmup Iteration   2: 39774009.413 ops/s
[info] # Warmup Iteration   3: 39966675.017 ops/s
[info] # Warmup Iteration   4: 42780267.754 ops/s
[info] # Warmup Iteration   5: 42747321.856 ops/s
[info] Iteration   1: 42696353.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32890594.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42848640.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42770399.627 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41539054.825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   40549008.665 ±(99.9%) 16614253.233 ops/s [Average]
[info]   (min, avg, max) = (32890594.862, 40549008.665, 42848640.134), stdev = 4314668.804
[info]   CI (99.9%): [23934755.432, 57163261.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313931.380 ops/s
[info] # Warmup Iteration   2: 19316891.408 ops/s
[info] # Warmup Iteration   3: 19654216.103 ops/s
[info] # Warmup Iteration   4: 25944097.628 ops/s
[info] # Warmup Iteration   5: 25924231.390 ops/s
[info] Iteration   1: 25961980.926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25901299.817 ops/s
[info]                  ·gc.alloc.rate:      1.183 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25906250.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25863568.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20355283.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   24797676.626 ±(99.9%) 9563543.039 ops/s [Average]
[info]   (min, avg, max) = (20355283.363, 24797676.626, 25961980.926), stdev = 2483621.757
[info]   CI (99.9%): [15234133.587, 34361219.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   0.237 ±(99.9%) 2.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.237, 1.183), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   0.014 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12378637.897 ops/s
[info] # Warmup Iteration   2: 32969624.298 ops/s
[info] # Warmup Iteration   3: 47615102.947 ops/s
[info] # Warmup Iteration   4: 47635238.993 ops/s
[info] # Warmup Iteration   5: 47670515.962 ops/s
[info] Iteration   1: 47328440.962 ops/s
[info]                  ·gc.alloc.rate:      13.609 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.453 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47599647.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47581965.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47531214.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47545325.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   47517318.845 ±(99.9%) 420097.605 ops/s [Average]
[info]   (min, avg, max) = (47328440.962, 47517318.845, 47599647.103), stdev = 109098.014
[info]   CI (99.9%): [47097221.240, 47937416.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2.722 ±(99.9%) 23.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.722, 13.609), stdev = 6.086
[info]   CI (99.9%): [≈ 0, 26.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.091 ±(99.9%) 0.779 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.091, 0.453), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7709720.123 ops/s
[info] # Warmup Iteration   2: 29592246.443 ops/s
[info] # Warmup Iteration   3: 26773486.858 ops/s
[info] # Warmup Iteration   4: 31448719.765 ops/s
[info] # Warmup Iteration   5: 31398341.936 ops/s
[info] Iteration   1: 31207901.612 ops/s
[info]                  ·gc.alloc.rate:               847.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          42.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67.523 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 31424669.174 ops/s
[info]                  ·gc.alloc.rate:               822.905 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 31508666.134 ops/s
[info]                  ·gc.alloc.rate:                   822.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 31524398.393 ops/s
[info]                  ·gc.alloc.rate:               819.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.457 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31541857.633 ops/s
[info]                  ·gc.alloc.rate:                   818.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31441498.589 ±(99.9%) 531844.088 ops/s [Average]
[info]   (min, avg, max) = (31207901.612, 31441498.589, 31541857.633), stdev = 138118.221
[info]   CI (99.9%): [30909654.502, 31973342.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   826.276 ±(99.9%) 46.251 MB/sec [Average]
[info]   (min, avg, max) = (818.608, 826.276, 847.521), stdev = 12.011
[info]   CI (99.9%): [780.025, 872.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.357 ±(99.9%) 3.029 B/op [Average]
[info]   (min, avg, max) = (40.840, 41.357, 42.743), stdev = 0.787
[info]   CI (99.9%): [38.328, 44.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   804.067 ±(99.9%) 1151.236 MB/sec [Average]
[info]   (min, avg, max) = (670.068, 804.067, 1338.885), stdev = 298.972
[info]   CI (99.9%): [≈ 0, 1955.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.294 ±(99.9%) 58.612 B/op [Average]
[info]   (min, avg, max) = (33.457, 40.294, 67.523), stdev = 15.221
[info]   CI (99.9%): [≈ 0, 98.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700572.393 ops/s
[info] # Warmup Iteration   2: 23086723.593 ops/s
[info] # Warmup Iteration   3: 24818081.127 ops/s
[info] # Warmup Iteration   4: 25403912.643 ops/s
[info] # Warmup Iteration   5: 25406538.372 ops/s
[info] Iteration   1: 25374214.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25338085.297 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25080489.149 ops/s
[info]                  ·gc.alloc.rate:      0.940 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25493263.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25417812.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   25340773.081 ±(99.9%) 602910.864 ops/s [Average]
[info]   (min, avg, max) = (25080489.149, 25340773.081, 25493263.508), stdev = 156574.037
[info]   CI (99.9%): [24737862.218, 25943683.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   0.188 ±(99.9%) 1.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.188, 0.940), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   0.012 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.012, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1072552.287 ops/s
[info] # Warmup Iteration   2: 20257926.605 ops/s
[info] # Warmup Iteration   3: 21559541.014 ops/s
[info] # Warmup Iteration   4: 22096994.058 ops/s
[info] # Warmup Iteration   5: 21548609.706 ops/s
[info] Iteration   1: 21463033.118 ops/s
[info]                  ·gc.alloc.rate:                   1682.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 22168120.644 ops/s
[info]                  ·gc.alloc.rate:                   1757.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              124.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 21694617.581 ops/s
[info]                  ·gc.alloc.rate:                   1723.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              125.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22386853.260 ops/s
[info]                  ·gc.alloc.rate:                   1757.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22464590.378 ops/s
[info]                  ·gc.alloc.rate:                   1752.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22035442.996 ±(99.9%) 1688448.131 ops/s [Average]
[info]   (min, avg, max) = (21463033.118, 22035442.996, 22464590.378), stdev = 438484.618
[info]   CI (99.9%): [20346994.865, 23723891.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1734.875 ±(99.9%) 123.937 MB/sec [Average]
[info]   (min, avg, max) = (1682.993, 1734.875, 1757.476), stdev = 32.186
[info]   CI (99.9%): [1610.938, 1858.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123.889 ±(99.9%) 3.608 B/op [Average]
[info]   (min, avg, max) = (122.790, 123.889, 125.007), stdev = 0.937
[info]   CI (99.9%): [120.281, 127.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1602.679 ±(99.9%) 1411.380 MB/sec [Average]
[info]   (min, avg, max) = (1333.209, 1602.679, 2007.536), stdev = 366.531
[info]   CI (99.9%): [191.299, 3014.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   114.266 ±(99.9%) 96.139 B/op [Average]
[info]   (min, avg, max) = (93.406, 114.266, 142.470), stdev = 24.967
[info]   CI (99.9%): [18.127, 210.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.855 ±(99.9%) 7.109 MB/sec [Average]
[info]   (min, avg, max) = (0.013, 0.855, 4.157), stdev = 1.846
[info]   CI (99.9%): [≈ 0, 7.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.504 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.061, 0.295), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.695 ops/s
[info] # Warmup Iteration   2: 48105791.940 ops/s
[info] # Warmup Iteration   3: 52970662.633 ops/s
[info] # Warmup Iteration   4: 58181493.942 ops/s
[info] # Warmup Iteration   5: 57016504.541 ops/s
[info] Iteration   1: 55430865.415 ops/s
[info]                  ·gc.alloc.rate:               1171.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.790 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 55687601.915 ops/s
[info]                  ·gc.alloc.rate:               1152.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 58599337.758 ops/s
[info]                  ·gc.alloc.rate:                   1239.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 58368032.051 ops/s
[info]                  ·gc.alloc.rate:                   1215.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 58206891.520 ops/s
[info]                  ·gc.alloc.rate:                   1223.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   57258545.732 ±(99.9%) 6007597.739 ops/s [Average]
[info]   (min, avg, max) = (55430865.415, 57258545.732, 58599337.758), stdev = 1560154.055
[info]   CI (99.9%): [51250947.993, 63266143.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1200.400 ±(99.9%) 141.173 MB/sec [Average]
[info]   (min, avg, max) = (1152.784, 1200.400, 1239.265), stdev = 36.662
[info]   CI (99.9%): [1059.227, 1341.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.990 ±(99.9%) 1.179 B/op [Average]
[info]   (min, avg, max) = (32.575, 32.990, 33.281), stdev = 0.306
[info]   CI (99.9%): [31.811, 34.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1199.480 ±(99.9%) 1147.800 MB/sec [Average]
[info]   (min, avg, max) = (666.261, 1199.480, 1333.852), stdev = 298.080
[info]   CI (99.9%): [51.680, 2347.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   32.884 ±(99.9%) 30.420 B/op [Average]
[info]   (min, avg, max) = (18.827, 32.884, 37.790), stdev = 7.900
[info]   CI (99.9%): [2.464, 63.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 8.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.728), stdev = 2.110
[info]   CI (99.9%): [≈ 0, 9.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1360808.943 ops/s
[info] # Warmup Iteration   2: 11566071.029 ops/s
[info] # Warmup Iteration   3: 27834395.254 ops/s
[info] # Warmup Iteration   4: 26498197.058 ops/s
[info] # Warmup Iteration   5: 27004748.548 ops/s
[info] Iteration   1: 27821410.741 ops/s
[info]                  ·gc.alloc.rate:               583.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.684 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 27707625.535 ops/s
[info]                  ·gc.alloc.rate:               587.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.839 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 27659564.525 ops/s
[info]                  ·gc.alloc.rate:               584.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.942 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 28192820.461 ops/s
[info]                  ·gc.alloc.rate:      573.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 27962148.145 ops/s
[info]                  ·gc.alloc.rate:               586.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.532 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   27868713.881 ±(99.9%) 829689.867 ops/s [Average]
[info]   (min, avg, max) = (27659564.525, 27868713.881, 28192820.461), stdev = 215467.824
[info]   CI (99.9%): [27039024.014, 28698403.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   583.045 ±(99.9%) 21.908 MB/sec [Average]
[info]   (min, avg, max) = (573.323, 583.045, 587.894), stdev = 5.689
[info]   CI (99.9%): [561.137, 604.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32.925 ±(99.9%) 2.094 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.925, 33.388), stdev = 0.544
[info]   CI (99.9%): [30.832, 35.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.255 ±(99.9%) 1147.872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.255, 666.929), stdev = 298.099
[info]   CI (99.9%): [≈ 0, 1681.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.199 ±(99.9%) 65.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.199, 37.942), stdev = 16.883
[info]   CI (99.9%): [≈ 0, 95.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12446540.498 ops/s
[info] # Warmup Iteration   2: 48048343.389 ops/s
[info] # Warmup Iteration   3: 50692973.760 ops/s
[info] # Warmup Iteration   4: 50723151.399 ops/s
[info] # Warmup Iteration   5: 50674434.410 ops/s
[info] Iteration   1: 50997612.566 ops/s
[info]                  ·gc.alloc.rate:               1061.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 50622715.564 ops/s
[info]                  ·gc.alloc.rate:               1068.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41.629 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 50675786.015 ops/s
[info]                  ·gc.alloc.rate:                   1067.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 50863437.336 ops/s
[info]                  ·gc.alloc.rate:               1057.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 50736717.122 ops/s
[info]                  ·gc.alloc.rate:                   1082.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   50779253.721 ±(99.9%) 583301.349 ops/s [Average]
[info]   (min, avg, max) = (50622715.564, 50779253.721, 50997612.566), stdev = 151481.508
[info]   CI (99.9%): [50195952.372, 51362555.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1067.685 ±(99.9%) 36.963 MB/sec [Average]
[info]   (min, avg, max) = (1057.512, 1067.685, 1082.854), stdev = 9.599
[info]   CI (99.9%): [1030.722, 1104.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   33.091 ±(99.9%) 1.373 B/op [Average]
[info]   (min, avg, max) = (32.722, 33.091, 33.590), stdev = 0.356
[info]   CI (99.9%): [31.718, 34.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.765 ±(99.9%) 1414.136 MB/sec [Average]
[info]   (min, avg, max) = (668.791, 1071.765, 1340.893), stdev = 367.247
[info]   CI (99.9%): [≈ 0, 2485.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   33.241 ±(99.9%) 44.127 B/op [Average]
[info]   (min, avg, max) = (20.641, 33.241, 41.629), stdev = 11.460
[info]   CI (99.9%): [≈ 0, 77.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.722 ±(99.9%) 6.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 3.573), stdev = 1.593
[info]   CI (99.9%): [≈ 0, 6.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15117255.073 ops/s
[info] # Warmup Iteration   2: 61181179.770 ops/s
[info] # Warmup Iteration   3: 65623503.064 ops/s
[info] # Warmup Iteration   4: 65589559.586 ops/s
[info] # Warmup Iteration   5: 65648194.260 ops/s
[info] Iteration   1: 65615946.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 65629638.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 65613770.517 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 65578263.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 65574792.537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   65602482.281 ±(99.9%) 94310.129 ops/s [Average]
[info]   (min, avg, max) = (65574792.537, 65602482.281, 65629638.464), stdev = 24492.041
[info]   CI (99.9%): [65508172.152, 65696792.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5264214.686 ops/s
[info] # Warmup Iteration   2: 23565772.131 ops/s
[info] # Warmup Iteration   3: 26766118.070 ops/s
[info] # Warmup Iteration   4: 26292328.088 ops/s
[info] # Warmup Iteration   5: 26724219.516 ops/s
[info] Iteration   1: 26782541.639 ops/s
[info]                  ·gc.alloc.rate:                   2102.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 26815352.067 ops/s
[info]                  ·gc.alloc.rate:                   2110.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26903092.932 ops/s
[info]                  ·gc.alloc.rate:                   2102.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26696782.033 ops/s
[info]                  ·gc.alloc.rate:               2117.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          124.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.679 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 26860281.468 ops/s
[info]                  ·gc.alloc.rate:                   2124.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              124.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   26811610.028 ±(99.9%) 303092.848 ops/s [Average]
[info]   (min, avg, max) = (26696782.033, 26811610.028, 26903092.932), stdev = 78712.250
[info]   CI (99.9%): [26508517.180, 27114702.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2111.621 ±(99.9%) 37.732 MB/sec [Average]
[info]   (min, avg, max) = (2102.328, 2111.621, 2124.953), stdev = 9.799
[info]   CI (99.9%): [2073.889, 2149.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   123.942 ±(99.9%) 2.876 B/op [Average]
[info]   (min, avg, max) = (122.985, 123.942, 124.863), stdev = 0.747
[info]   CI (99.9%): [121.065, 126.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2014.879 ±(99.9%) 9.828 MB/sec [Average]
[info]   (min, avg, max) = (2012.541, 2014.879, 2018.664), stdev = 2.552
[info]   CI (99.9%): [2005.050, 2024.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   118.263 ±(99.9%) 1.479 B/op [Average]
[info]   (min, avg, max) = (117.732, 118.263, 118.679), stdev = 0.384
[info]   CI (99.9%): [116.784, 119.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.646 ±(99.9%) 5.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.646, 3.165), stdev = 1.409
[info]   CI (99.9%): [≈ 0, 6.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367519.875 ops/s
[info] # Warmup Iteration   2: 1776844.337 ops/s
[info] # Warmup Iteration   3: 3735163.175 ops/s
[info] # Warmup Iteration   4: 3756979.153 ops/s
[info] # Warmup Iteration   5: 3764002.170 ops/s
[info] Iteration   1: 3753438.307 ops/s
[info]                  ·gc.alloc.rate:                   1553.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              651.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3679218.549 ops/s
[info]                  ·gc.alloc.rate:               1548.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          662.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 571.641 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 3768631.807 ops/s
[info]                  ·gc.alloc.rate:                   1558.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              650.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3788283.475 ops/s
[info]                  ·gc.alloc.rate:                   1561.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3769839.161 ops/s
[info]                  ·gc.alloc.rate:                   1554.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     555.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   3751882.260 ±(99.9%) 163487.865 ops/s [Average]
[info]   (min, avg, max) = (3679218.549, 3751882.260, 3788283.475), stdev = 42457.279
[info]   CI (99.9%): [3588394.395, 3915370.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1555.410 ±(99.9%) 18.716 MB/sec [Average]
[info]   (min, avg, max) = (1548.851, 1555.410, 1561.350), stdev = 4.861
[info]   CI (99.9%): [1536.694, 1574.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   652.408 ±(99.9%) 22.286 B/op [Average]
[info]   (min, avg, max) = (648.447, 652.408, 662.534), stdev = 5.788
[info]   CI (99.9%): [630.122, 674.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.916 ±(99.9%) 1153.678 MB/sec [Average]
[info]   (min, avg, max) = (1331.158, 1467.916, 2003.855), stdev = 299.607
[info]   CI (99.9%): [314.237, 2621.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   615.483 ±(99.9%) 477.208 B/op [Average]
[info]   (min, avg, max) = (553.518, 615.483, 836.820), stdev = 123.929
[info]   CI (99.9%): [138.275, 1092.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 4.372), stdev = 1.935
[info]   CI (99.9%): [≈ 0, 8.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.381 ±(99.9%) 3.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.826), stdev = 0.808
[info]   CI (99.9%): [≈ 0, 3.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51514.816 ops/s
[info] # Warmup Iteration   2: 158214.334 ops/s
[info] # Warmup Iteration   3: 180775.901 ops/s
[info] # Warmup Iteration   4: 193633.220 ops/s
[info] # Warmup Iteration   5: 193621.495 ops/s
[info] Iteration   1: 195374.952 ops/s
[info]                  ·gc.alloc.rate:               3676.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          29616.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3994.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32175.542 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 195107.841 ops/s
[info]                  ·gc.alloc.rate:                   3711.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              29940.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26950.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.504 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 194322.418 ops/s
[info]                  ·gc.alloc.rate:               3698.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          29953.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3354.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27167.599 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 195251.951 ops/s
[info]                  ·gc.alloc.rate:                   3743.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              30171.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4044.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32602.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 195705.955 ops/s
[info]                  ·gc.alloc.rate:                   3726.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              29957.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27203.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   195152.623 ±(99.9%) 1979.170 ops/s [Average]
[info]   (min, avg, max) = (194322.418, 195152.623, 195705.955), stdev = 513.984
[info]   CI (99.9%): [193173.453, 197131.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3711.330 ±(99.9%) 98.328 MB/sec [Average]
[info]   (min, avg, max) = (3676.479, 3711.330, 3743.228), stdev = 25.535
[info]   CI (99.9%): [3613.002, 3809.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29927.927 ±(99.9%) 765.628 B/op [Average]
[info]   (min, avg, max) = (29616.339, 29927.927, 30171.531), stdev = 198.831
[info]   CI (99.9%): [29162.299, 30693.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3623.728 ±(99.9%) 1394.126 MB/sec [Average]
[info]   (min, avg, max) = (3341.053, 3623.728, 4044.812), stdev = 362.050
[info]   CI (99.9%): [2229.602, 5017.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29219.910 ±(99.9%) 11161.022 B/op [Average]
[info]   (min, avg, max) = (26950.840, 29219.910, 32602.391), stdev = 2898.482
[info]   CI (99.9%): [18058.888, 40380.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.201 ±(99.9%) 0.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.504), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 1.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1138.392 ops/s
[info] # Warmup Iteration   2: 16859.223 ops/s
[info] # Warmup Iteration   3: 37087.015 ops/s
[info] # Warmup Iteration   4: 45257.865 ops/s
[info] # Warmup Iteration   5: 41671.725 ops/s
[info] Iteration   1: 45147.021 ops/s
[info]                  ·gc.alloc.rate:                   2969.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              103536.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92888.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.889 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 44908.619 ops/s
[info]                  ·gc.alloc.rate:                   2954.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              103526.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116941.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.648 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 45066.548 ops/s
[info]                  ·gc.alloc.rate:                   2925.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              102154.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93425.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 45569.000 ops/s
[info]                  ·gc.alloc.rate:                   2981.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              102968.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92348.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 45548.214 ops/s
[info]                  ·gc.alloc.rate:                   3008.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              103883.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115289.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.718 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   45247.881 ±(99.9%) 1141.426 ops/s [Average]
[info]   (min, avg, max) = (44908.619, 45247.881, 45569.000), stdev = 296.425
[info]   CI (99.9%): [44106.455, 46389.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2967.906 ±(99.9%) 119.644 MB/sec [Average]
[info]   (min, avg, max) = (2925.214, 2967.906, 3008.747), stdev = 31.071
[info]   CI (99.9%): [2848.261, 3087.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   103213.860 ±(99.9%) 2606.528 B/op [Average]
[info]   (min, avg, max) = (102154.592, 103213.860, 103883.740), stdev = 676.907
[info]   CI (99.9%): [100607.332, 105820.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2937.971 ±(99.9%) 1406.666 MB/sec [Average]
[info]   (min, avg, max) = (2664.413, 2937.971, 3339.084), stdev = 365.307
[info]   CI (99.9%): [1531.306, 4344.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   102178.938 ±(99.9%) 49062.533 B/op [Average]
[info]   (min, avg, max) = (92348.862, 102178.938, 116941.648), stdev = 12741.384
[info]   CI (99.9%): [53116.406, 151241.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.006 ±(99.9%) 4.673 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.006, 2.783), stdev = 1.213
[info]   CI (99.9%): [≈ 0, 5.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.079 ±(99.9%) 163.183 B/op [Average]
[info]   (min, avg, max) = (0.718, 35.079, 97.198), stdev = 42.378
[info]   CI (99.9%): [≈ 0, 198.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.400, 14.000), stdev = 3.050
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13186.691 ops/s
[info] # Warmup Iteration   2: 159473.090 ops/s
[info] # Warmup Iteration   3: 208200.040 ops/s
[info] # Warmup Iteration   4: 230323.050 ops/s
[info] # Warmup Iteration   5: 229378.173 ops/s
[info] Iteration   1: 229422.101 ops/s
[info]                  ·gc.alloc.rate:                   856.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              5875.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9079.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 231755.872 ops/s
[info]                  ·gc.alloc.rate:               839.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          5698.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4507.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 232288.927 ops/s
[info]                  ·gc.alloc.rate:               839.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          5689.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4497.624 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 229317.425 ops/s
[info]                  ·gc.alloc.rate:                   843.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              5788.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4564.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 231594.669 ops/s
[info]                  ·gc.alloc.rate:                   865.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              5880.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9049.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   230875.799 ±(99.9%) 5387.461 ops/s [Average]
[info]   (min, avg, max) = (229317.425, 230875.799, 232288.927), stdev = 1399.107
[info]   CI (99.9%): [225488.337, 236263.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   848.983 ±(99.9%) 44.850 MB/sec [Average]
[info]   (min, avg, max) = (839.148, 848.983, 865.523), stdev = 11.648
[info]   CI (99.9%): [804.133, 893.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5786.597 ±(99.9%) 354.643 B/op [Average]
[info]   (min, avg, max) = (5689.680, 5786.597, 5880.750), stdev = 92.100
[info]   CI (99.9%): [5431.953, 6141.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.778 ±(99.9%) 1399.551 MB/sec [Average]
[info]   (min, avg, max) = (663.818, 929.778, 1331.871), stdev = 363.459
[info]   CI (99.9%): [≈ 0, 2329.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6339.945 ±(99.9%) 9578.053 B/op [Average]
[info]   (min, avg, max) = (4497.624, 6339.945, 9079.826), stdev = 2487.390
[info]   CI (99.9%): [≈ 0, 15917.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.143), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183826.744 ops/s
[info] # Warmup Iteration   2: 432625.256 ops/s
[info] # Warmup Iteration   3: 528089.250 ops/s
[info] # Warmup Iteration   4: 525551.590 ops/s
[info] # Warmup Iteration   5: 526824.784 ops/s
[info] Iteration   1: 535660.180 ops/s
[info]                  ·gc.alloc.rate:               978.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          2874.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1961.162 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 529293.681 ops/s
[info]                  ·gc.alloc.rate:                   986.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              2930.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3970.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 528005.214 ops/s
[info]                  ·gc.alloc.rate:               962.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          2870.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1990.588 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 521648.191 ops/s
[info]                  ·gc.alloc.rate:               1021.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          3082.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4031.895 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 526270.450 ops/s
[info]                  ·gc.alloc.rate:                   957.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              2862.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2000.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   528175.543 ±(99.9%) 19590.541 ops/s [Average]
[info]   (min, avg, max) = (521648.191, 528175.543, 535660.180), stdev = 5087.601
[info]   CI (99.9%): [508585.002, 547766.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   981.278 ±(99.9%) 98.024 MB/sec [Average]
[info]   (min, avg, max) = (957.137, 981.278, 1021.809), stdev = 25.457
[info]   CI (99.9%): [883.254, 1079.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2924.201 ±(99.9%) 357.149 B/op [Average]
[info]   (min, avg, max) = (2862.278, 2924.201, 3082.876), stdev = 92.750
[info]   CI (99.9%): [2567.052, 3281.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.273 ±(99.9%) 1409.003 MB/sec [Average]
[info]   (min, avg, max) = (667.476, 935.273, 1336.359), stdev = 365.914
[info]   CI (99.9%): [≈ 0, 2344.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2790.853 ±(99.9%) 4255.695 B/op [Average]
[info]   (min, avg, max) = (1961.162, 2790.853, 4031.895), stdev = 1105.190
[info]   CI (99.9%): [≈ 0, 7046.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 5.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.935), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.768 ±(99.9%) 15.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.768, 8.778), stdev = 3.919
[info]   CI (99.9%): [≈ 0, 16.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214787.732 ops/s
[info] # Warmup Iteration   2: 451056.711 ops/s
[info] # Warmup Iteration   3: 569235.591 ops/s
[info] # Warmup Iteration   4: 567120.203 ops/s
[info] # Warmup Iteration   5: 568063.091 ops/s
[info] Iteration   1: 571102.451 ops/s
[info]                  ·gc.alloc.rate:      394.787 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 564682.805 ops/s
[info]                  ·gc.alloc.rate:               409.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          1141.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1858.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 570437.939 ops/s
[info]                  ·gc.alloc.rate:      394.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.335 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 567719.763 ops/s
[info]                  ·gc.alloc.rate:               411.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          1140.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1848.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 568970.925 ops/s
[info]                  ·gc.alloc.rate:                   410.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1136.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1844.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   568582.776 ±(99.9%) 9797.528 ops/s [Average]
[info]   (min, avg, max) = (564682.805, 568582.776, 571102.451), stdev = 2544.387
[info]   CI (99.9%): [558785.249, 578380.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   404.206 ±(99.9%) 33.785 MB/sec [Average]
[info]   (min, avg, max) = (394.467, 404.206, 411.500), stdev = 8.774
[info]   CI (99.9%): [370.421, 437.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1118.896 ±(99.9%) 108.262 B/op [Average]
[info]   (min, avg, max) = (1088.001, 1118.896, 1141.036), stdev = 28.115
[info]   CI (99.9%): [1010.634, 1227.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   400.115 ±(99.9%) 1406.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.115, 667.006), stdev = 365.254
[info]   CI (99.9%): [≈ 0, 1806.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1110.317 ±(99.9%) 3902.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1110.317, 1858.542), stdev = 1013.589
[info]   CI (99.9%): [≈ 0, 5013.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5025.130 ops/s
[info] # Warmup Iteration   2: 34876.554 ops/s
[info] # Warmup Iteration   3: 70028.033 ops/s
[info] # Warmup Iteration   4: 75277.010 ops/s
[info] # Warmup Iteration   5: 74126.515 ops/s
[info] Iteration   1: 70209.737 ops/s
[info]                  ·gc.alloc.rate:                   1905.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              42713.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44035.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.472 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 76593.545 ops/s
[info]                  ·gc.alloc.rate:                   1641.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              33714.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1294.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26582.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 77537.357 ops/s
[info]                  ·gc.alloc.rate:                   1683.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              34166.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1936.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39293.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   4: 77827.739 ops/s
[info]                  ·gc.alloc.rate:                   1672.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              33828.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26086.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 76435.868 ops/s
[info]                  ·gc.alloc.rate:                   1655.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              34074.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1939.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39919.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   75720.849 ±(99.9%) 12082.664 ops/s [Average]
[info]   (min, avg, max) = (70209.737, 75720.849, 77827.739), stdev = 3137.829
[info]   CI (99.9%): [63638.185, 87803.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1711.710 ±(99.9%) 421.620 MB/sec [Average]
[info]   (min, avg, max) = (1641.477, 1711.710, 1905.457), stdev = 109.493
[info]   CI (99.9%): [1290.091, 2133.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35699.258 ±(99.9%) 15114.654 B/op [Average]
[info]   (min, avg, max) = (33714.016, 35699.258, 42713.366), stdev = 3925.228
[info]   CI (99.9%): [20584.604, 50813.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1684.819 ±(99.9%) 1381.101 MB/sec [Average]
[info]   (min, avg, max) = (1289.950, 1684.819, 1964.432), stdev = 358.668
[info]   CI (99.9%): [303.718, 3065.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35183.544 ±(99.9%) 31893.721 B/op [Average]
[info]   (min, avg, max) = (26086.426, 35183.544, 44035.354), stdev = 8282.698
[info]   CI (99.9%): [3289.823, 67077.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.037 ±(99.9%) 5.461 MB/sec [Average]
[info]   (min, avg, max) = (0.198, 2.037, 3.488), stdev = 1.418
[info]   CI (99.9%): [≈ 0, 7.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   42.680 ±(99.9%) 113.761 B/op [Average]
[info]   (min, avg, max) = (4.023, 42.680, 71.791), stdev = 29.543
[info]   CI (99.9%): [≈ 0, 156.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   91.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 18.200, 24.000), stdev = 4.382
[info]   CI (99.9%): [91.000, 91.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36905.338 ops/s
[info] # Warmup Iteration   2: 308868.561 ops/s
[info] # Warmup Iteration   3: 337369.583 ops/s
[info] # Warmup Iteration   4: 364217.144 ops/s
[info] # Warmup Iteration   5: 366578.780 ops/s
[info] Iteration   1: 366402.325 ops/s
[info]                  ·gc.alloc.rate:                   2662.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              11433.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11411.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.493 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 367061.405 ops/s
[info]                  ·gc.alloc.rate:                   2664.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              11420.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11379.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 370220.851 ops/s
[info]                  ·gc.alloc.rate:                   2685.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              11414.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2652.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11274.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 370249.331 ops/s
[info]                  ·gc.alloc.rate:               2713.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          11530.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2658.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11298.273 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 370838.603 ops/s
[info]                  ·gc.alloc.rate:               2717.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          11531.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2668.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11325.962 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   368954.503 ±(99.9%) 7921.356 ops/s [Average]
[info]   (min, avg, max) = (366402.325, 368954.503, 370838.603), stdev = 2057.151
[info]   CI (99.9%): [361033.147, 376875.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2688.552 ±(99.9%) 100.596 MB/sec [Average]
[info]   (min, avg, max) = (2662.071, 2688.552, 2717.230), stdev = 26.124
[info]   CI (99.9%): [2587.956, 2789.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11466.139 ±(99.9%) 229.873 B/op [Average]
[info]   (min, avg, max) = (11414.220, 11466.139, 11531.911), stdev = 59.697
[info]   CI (99.9%): [11236.266, 11696.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2658.348 ±(99.9%) 24.059 MB/sec [Average]
[info]   (min, avg, max) = (2652.496, 2658.348, 2668.703), stdev = 6.248
[info]   CI (99.9%): [2634.289, 2682.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11337.717 ±(99.9%) 218.316 B/op [Average]
[info]   (min, avg, max) = (11274.036, 11337.717, 11411.126), stdev = 56.696
[info]   CI (99.9%): [11119.400, 11556.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.855 ±(99.9%) 4.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.855, 2.443), stdev = 1.160
[info]   CI (99.9%): [≈ 0, 5.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.670 ±(99.9%) 19.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.670, 10.493), stdev = 4.979
[info]   CI (99.9%): [≈ 0, 22.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 13.000), stdev = 3.493
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22763.409 ops/s
[info] # Warmup Iteration   2: 541583.146 ops/s
[info] # Warmup Iteration   3: 758477.617 ops/s
[info] # Warmup Iteration   4: 845228.327 ops/s
[info] # Warmup Iteration   5: 844592.852 ops/s
[info] Iteration   1: 842152.660 ops/s
[info]                  ·gc.alloc.rate:               1835.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          3430.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3731.033 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 844447.896 ops/s
[info]                  ·gc.alloc.rate:                   1829.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              3409.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3732.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 842463.680 ops/s
[info]                  ·gc.alloc.rate:                   1815.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              3391.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2497.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 830983.614 ops/s
[info]                  ·gc.alloc.rate:               1794.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          3396.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3803.993 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 844499.477 ops/s
[info]                  ·gc.alloc.rate:                   1834.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              3419.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3751.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   840909.465 ±(99.9%) 21773.367 ops/s [Average]
[info]   (min, avg, max) = (830983.614, 840909.465, 844499.477), stdev = 5654.474
[info]   CI (99.9%): [819136.098, 862682.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1822.002 ±(99.9%) 67.369 MB/sec [Average]
[info]   (min, avg, max) = (1794.207, 1822.002, 1835.712), stdev = 17.496
[info]   CI (99.9%): [1754.633, 1889.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3409.784 ±(99.9%) 61.477 B/op [Average]
[info]   (min, avg, max) = (3391.854, 3409.784, 3430.457), stdev = 15.965
[info]   CI (99.9%): [3348.307, 3471.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1871.571 ±(99.9%) 1150.909 MB/sec [Average]
[info]   (min, avg, max) = (1337.020, 1871.571, 2012.569), stdev = 298.887
[info]   CI (99.9%): [720.663, 3022.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3503.182 ±(99.9%) 2167.346 B/op [Average]
[info]   (min, avg, max) = (2497.718, 3503.182, 3803.993), stdev = 562.853
[info]   CI (99.9%): [1335.836, 5670.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.241 ±(99.9%) 1.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.241, 1.124), stdev = 0.494
[info]   CI (99.9%): [≈ 0, 2.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.450 ±(99.9%) 3.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.095), stdev = 0.921
[info]   CI (99.9%): [≈ 0, 3.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711105.266 ops/s
[info] # Warmup Iteration   2: 1533977.766 ops/s
[info] # Warmup Iteration   3: 1655911.200 ops/s
[info] # Warmup Iteration   4: 1635538.769 ops/s
[info] # Warmup Iteration   5: 1668582.692 ops/s
[info] Iteration   1: 1677617.593 ops/s
[info]                  ·gc.alloc.rate:                   3366.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              3157.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3138.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1661191.517 ops/s
[info]                  ·gc.alloc.rate:                   3376.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              3197.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3178.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1673954.718 ops/s
[info]                  ·gc.alloc.rate:               3402.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          3198.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3367.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3164.404 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1671438.295 ops/s
[info]                  ·gc.alloc.rate:                   3398.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3180.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1675228.238 ops/s
[info]                  ·gc.alloc.rate:                   3404.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3181.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1671886.072 ±(99.9%) 24571.341 ops/s [Average]
[info]   (min, avg, max) = (1661191.517, 1671886.072, 1677617.593), stdev = 6381.099
[info]   CI (99.9%): [1647314.731, 1696457.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3389.761 ±(99.9%) 66.234 MB/sec [Average]
[info]   (min, avg, max) = (3366.814, 3389.761, 3404.866), stdev = 17.201
[info]   CI (99.9%): [3323.527, 3455.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3190.272 ±(99.9%) 69.822 B/op [Average]
[info]   (min, avg, max) = (3157.844, 3190.272, 3198.905), stdev = 18.133
[info]   CI (99.9%): [3120.450, 3260.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3366.703 ±(99.9%) 63.568 MB/sec [Average]
[info]   (min, avg, max) = (3346.155, 3366.703, 3386.243), stdev = 16.508
[info]   CI (99.9%): [3303.135, 3430.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3168.574 ±(99.9%) 69.997 B/op [Average]
[info]   (min, avg, max) = (3138.467, 3168.574, 3181.408), stdev = 18.178
[info]   CI (99.9%): [3098.577, 3238.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.039), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8449.083 ops/s
[info] # Warmup Iteration   2: 122677.014 ops/s
[info] # Warmup Iteration   3: 182238.131 ops/s
[info] # Warmup Iteration   4: 187588.547 ops/s
[info] # Warmup Iteration   5: 188374.319 ops/s
[info] Iteration   1: 188198.523 ops/s
[info]                  ·gc.alloc.rate:                   4934.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              41263.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4721.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39484.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 186895.978 ops/s
[info]                  ·gc.alloc.rate:                   4902.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              41277.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4740.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39907.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 188502.956 ops/s
[info]                  ·gc.alloc.rate:               4944.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          41277.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4752.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39672.481 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 186692.427 ops/s
[info]                  ·gc.alloc.rate:                   4899.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              41303.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40124.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 186249.206 ops/s
[info]                  ·gc.alloc.rate:                   4889.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              41294.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4767.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40264.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   187307.818 ±(99.9%) 3797.664 ops/s [Average]
[info]   (min, avg, max) = (186249.206, 187307.818, 188502.956), stdev = 986.241
[info]   CI (99.9%): [183510.154, 191105.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4914.088 ±(99.9%) 92.482 MB/sec [Average]
[info]   (min, avg, max) = (4889.131, 4914.088, 4944.706), stdev = 24.017
[info]   CI (99.9%): [4821.607, 5006.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41283.253 ±(99.9%) 61.498 B/op [Average]
[info]   (min, avg, max) = (41263.477, 41283.253, 41303.681), stdev = 15.971
[info]   CI (99.9%): [41221.754, 41344.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4748.179 ±(99.9%) 68.825 MB/sec [Average]
[info]   (min, avg, max) = (4721.516, 4748.179, 4767.079), stdev = 17.874
[info]   CI (99.9%): [4679.354, 4817.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39890.623 ±(99.9%) 1228.363 B/op [Average]
[info]   (min, avg, max) = (39484.342, 39890.623, 40264.030), stdev = 319.002
[info]   CI (99.9%): [38662.260, 41118.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.280 ±(99.9%) 0.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.280, 0.528), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 1.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102391.084 ops/s
[info] # Warmup Iteration   2: 388428.301 ops/s
[info] # Warmup Iteration   3: 438592.505 ops/s
[info] # Warmup Iteration   4: 480912.056 ops/s
[info] # Warmup Iteration   5: 473691.524 ops/s
[info] Iteration   1: 480471.519 ops/s
[info]                  ·gc.alloc.rate:                   1570.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              5143.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4377.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 477606.575 ops/s
[info]                  ·gc.alloc.rate:                   1573.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              5184.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6607.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 476697.106 ops/s
[info]                  ·gc.alloc.rate:                   1548.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4409.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 477725.498 ops/s
[info]                  ·gc.alloc.rate:               1550.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          5106.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4389.312 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 477169.342 ops/s
[info]                  ·gc.alloc.rate:                   1587.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5235.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6584.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   477934.008 ±(99.9%) 5680.284 ops/s [Average]
[info]   (min, avg, max) = (476697.106, 477934.008, 480471.519), stdev = 1475.152
[info]   CI (99.9%): [472253.724, 483614.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1565.972 ±(99.9%) 63.147 MB/sec [Average]
[info]   (min, avg, max) = (1548.878, 1565.972, 1587.418), stdev = 16.399
[info]   CI (99.9%): [1502.825, 1629.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5156.384 ±(99.9%) 207.178 B/op [Average]
[info]   (min, avg, max) = (5106.739, 5156.384, 5235.243), stdev = 53.804
[info]   CI (99.9%): [4949.206, 5363.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1601.267 ±(99.9%) 1404.552 MB/sec [Average]
[info]   (min, avg, max) = (1332.314, 1601.267, 2005.091), stdev = 364.758
[info]   CI (99.9%): [196.715, 3005.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5273.648 ±(99.9%) 4648.601 B/op [Average]
[info]   (min, avg, max) = (4377.113, 5273.648, 6607.464), stdev = 1207.227
[info]   CI (99.9%): [625.047, 9922.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 5.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 3.448), stdev = 1.487
[info]   CI (99.9%): [≈ 0, 6.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.918 ±(99.9%) 18.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.918, 11.362), stdev = 4.901
[info]   CI (99.9%): [≈ 0, 21.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 15.000), stdev = 4.980
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310920.848 ops/s
[info] # Warmup Iteration   2: 915057.814 ops/s
[info] # Warmup Iteration   3: 1006201.900 ops/s
[info] # Warmup Iteration   4: 1002305.558 ops/s
[info] # Warmup Iteration   5: 988017.667 ops/s
[info] Iteration   1: 1010929.768 ops/s
[info]                  ·gc.alloc.rate:               487.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          759.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1026.734 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1009489.164 ops/s
[info]                  ·gc.alloc.rate:               483.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          753.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1028.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1010696.471 ops/s
[info]                  ·gc.alloc.rate:      480.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 747.406 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1010369.901 ops/s
[info]                  ·gc.alloc.rate:                   475.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              740.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1028.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1009305.151 ops/s
[info]                  ·gc.alloc.rate:               490.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          764.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1029.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   1010158.091 ±(99.9%) 2793.491 ops/s [Average]
[info]   (min, avg, max) = (1009305.151, 1010158.091, 1010929.768), stdev = 725.461
[info]   CI (99.9%): [1007364.600, 1012951.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   483.441 ±(99.9%) 22.668 MB/sec [Average]
[info]   (min, avg, max) = (475.544, 483.441, 490.199), stdev = 5.887
[info]   CI (99.9%): [460.772, 506.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   753.142 ±(99.9%) 36.243 B/op [Average]
[info]   (min, avg, max) = (740.626, 753.142, 764.307), stdev = 9.412
[info]   CI (99.9%): [716.899, 789.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.040 ±(99.9%) 1136.648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.040, 660.616), stdev = 295.184
[info]   CI (99.9%): [≈ 0, 1664.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   822.742 ±(99.9%) 1771.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 822.742, 1029.935), stdev = 459.928
[info]   CI (99.9%): [≈ 0, 2593.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.162), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1257169.587 ops/s
[info] # Warmup Iteration   2: 2610026.051 ops/s
[info] # Warmup Iteration   3: 2708436.687 ops/s
[info] # Warmup Iteration   4: 2696404.586 ops/s
[info] # Warmup Iteration   5: 2723114.856 ops/s
[info] Iteration   1: 2725903.714 ops/s
[info]                  ·gc.alloc.rate:                   1295.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2751765.897 ops/s
[info]                  ·gc.alloc.rate:               1298.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 383.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2661386.395 ops/s
[info]                  ·gc.alloc.rate:                   1282.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     792.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2777016.747 ops/s
[info]                  ·gc.alloc.rate:                   1324.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     760.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2781823.058 ops/s
[info]                  ·gc.alloc.rate:                   1327.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2739579.162 ±(99.9%) 188993.302 ops/s [Average]
[info]   (min, avg, max) = (2661386.395, 2739579.162, 2781823.058), stdev = 49080.960
[info]   CI (99.9%): [2550585.860, 2928572.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1305.521 ±(99.9%) 75.455 MB/sec [Average]
[info]   (min, avg, max) = (1282.027, 1305.521, 1327.239), stdev = 19.595
[info]   CI (99.9%): [1230.066, 1380.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.995 ±(99.9%) 21.779 B/op [Average]
[info]   (min, avg, max) = (742.530, 749.995, 758.157), stdev = 5.656
[info]   CI (99.9%): [728.216, 771.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.352 ±(99.9%) 1154.239 MB/sec [Average]
[info]   (min, avg, max) = (670.142, 1206.352, 1341.585), stdev = 299.752
[info]   CI (99.9%): [52.113, 2360.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   693.519 ±(99.9%) 669.978 B/op [Average]
[info]   (min, avg, max) = (383.284, 693.519, 792.977), stdev = 173.991
[info]   CI (99.9%): [23.541, 1363.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.777 ±(99.9%) 6.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.739), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.441 ±(99.9%) 3.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 2.119), stdev = 0.938
[info]   CI (99.9%): [≈ 0, 4.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1318821.371 ops/s
[info] # Warmup Iteration   2: 2833033.415 ops/s
[info] # Warmup Iteration   3: 2948523.787 ops/s
[info] # Warmup Iteration   4: 2948138.039 ops/s
[info] # Warmup Iteration   5: 2940810.969 ops/s
[info] Iteration   1: 2943671.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2947684.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2947045.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2942774.537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2914900.730 ops/s
[info]                  ·gc.alloc.rate:      18.616 MB/sec
[info]                  ·gc.alloc.rate.norm: 10.051 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2939215.296 ±(99.9%) 52964.215 ops/s [Average]
[info]   (min, avg, max) = (2914900.730, 2939215.296, 2947684.603), stdev = 13754.638
[info]   CI (99.9%): [2886251.081, 2992179.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.723 ±(99.9%) 32.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.723, 18.616), stdev = 8.325
[info]   CI (99.9%): [≈ 0, 35.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.010 ±(99.9%) 17.308 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.010, 10.051), stdev = 4.495
[info]   CI (99.9%): [≈ 0, 19.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71707.536 ops/s
[info] # Warmup Iteration   2: 549220.594 ops/s
[info] # Warmup Iteration   3: 539890.223 ops/s
[info] # Warmup Iteration   4: 614773.633 ops/s
[info] # Warmup Iteration   5: 700797.812 ops/s
[info] Iteration   1: 686845.849 ops/s
[info]                  ·gc.alloc.rate:               942.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          2159.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1514.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 683126.391 ops/s
[info]                  ·gc.alloc.rate:                   957.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              2205.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3048.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 685754.070 ops/s
[info]                  ·gc.alloc.rate:               958.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          2198.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1518.960 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 672350.716 ops/s
[info]                  ·gc.alloc.rate:                   954.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              2234.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3099.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 673666.686 ops/s
[info]                  ·gc.alloc.rate:                   936.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              2188.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1546.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   680348.742 ±(99.9%) 26382.082 ops/s [Average]
[info]   (min, avg, max) = (672350.716, 680348.742, 686845.849), stdev = 6851.343
[info]   CI (99.9%): [653966.660, 706730.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   949.915 ±(99.9%) 37.441 MB/sec [Average]
[info]   (min, avg, max) = (936.859, 949.915, 958.476), stdev = 9.723
[info]   CI (99.9%): [912.474, 987.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2197.390 ±(99.9%) 105.535 B/op [Average]
[info]   (min, avg, max) = (2159.268, 2197.390, 2234.961), stdev = 27.407
[info]   CI (99.9%): [2091.856, 2302.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   926.475 ±(99.9%) 1395.572 MB/sec [Average]
[info]   (min, avg, max) = (661.117, 926.475, 1323.918), stdev = 362.426
[info]   CI (99.9%): [≈ 0, 2322.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2145.616 ±(99.9%) 3263.174 B/op [Average]
[info]   (min, avg, max) = (1514.948, 2145.616, 3099.117), stdev = 847.436
[info]   CI (99.9%): [≈ 0, 5408.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 6.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 3.989), stdev = 1.739
[info]   CI (99.9%): [≈ 0, 7.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.115 ±(99.9%) 15.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.115, 9.338), stdev = 4.071
[info]   CI (99.9%): [≈ 0, 17.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.633
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8533.199 ops/s
[info] # Warmup Iteration   2: 53678.952 ops/s
[info] # Warmup Iteration   3: 76029.222 ops/s
[info] # Warmup Iteration   4: 78084.643 ops/s
[info] # Warmup Iteration   5: 78726.468 ops/s
[info] Iteration   1: 78076.319 ops/s
[info]                  ·gc.alloc.rate:                   2285.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              46047.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53639.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.241 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 78564.048 ops/s
[info]                  ·gc.alloc.rate:                   2279.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              45649.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40061.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.753 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 78577.975 ops/s
[info]                  ·gc.alloc.rate:                   2277.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              45607.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40139.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 78885.825 ops/s
[info]                  ·gc.alloc.rate:                   2313.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              46131.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53453.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.831 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 78784.999 ops/s
[info]                  ·gc.alloc.rate:                   2295.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              45876.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40258.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   78577.833 ±(99.9%) 1201.566 ops/s [Average]
[info]   (min, avg, max) = (78076.319, 78577.833, 78885.825), stdev = 312.043
[info]   CI (99.9%): [77376.267, 79779.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2290.238 ±(99.9%) 56.635 MB/sec [Average]
[info]   (min, avg, max) = (2277.582, 2290.238, 2313.227), stdev = 14.708
[info]   CI (99.9%): [2233.603, 2346.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45862.595 ±(99.9%) 897.109 B/op [Average]
[info]   (min, avg, max) = (45607.644, 45862.595, 46131.262), stdev = 232.976
[info]   CI (99.9%): [44965.486, 46759.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2272.384 ±(99.9%) 1402.400 MB/sec [Average]
[info]   (min, avg, max) = (2000.240, 2272.384, 2680.396), stdev = 364.199
[info]   CI (99.9%): [869.984, 3674.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   45510.587 ±(99.9%) 28249.505 B/op [Average]
[info]   (min, avg, max) = (40061.918, 45510.587, 53639.362), stdev = 7336.307
[info]   CI (99.9%): [17261.082, 73760.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.283 ±(99.9%) 1.783 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.283, 1.104), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 2.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.698 ±(99.9%) 35.941 B/op [Average]
[info]   (min, avg, max) = (0.831, 5.698, 22.241), stdev = 9.334
[info]   CI (99.9%): [≈ 0, 41.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6763.273 ops/s
[info] # Warmup Iteration   2: 58561.668 ops/s
[info] # Warmup Iteration   3: 94296.549 ops/s
[info] # Warmup Iteration   4: 105543.339 ops/s
[info] # Warmup Iteration   5: 106553.778 ops/s
[info] Iteration   1: 107764.799 ops/s
[info]                  ·gc.alloc.rate:                   1971.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              28792.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29162.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 108470.699 ops/s
[info]                  ·gc.alloc.rate:                   1965.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              28516.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29054.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.821 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 107656.540 ops/s
[info]                  ·gc.alloc.rate:                   1957.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              28615.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29322.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 107840.549 ops/s
[info]                  ·gc.alloc.rate:                   1973.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              28799.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29326.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 107724.153 ops/s
[info]                  ·gc.alloc.rate:                   1958.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              28603.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29406.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   107891.348 ±(99.9%) 1273.237 ops/s [Average]
[info]   (min, avg, max) = (107656.540, 107891.348, 108470.699), stdev = 330.656
[info]   CI (99.9%): [106618.111, 109164.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1965.250 ±(99.9%) 28.560 MB/sec [Average]
[info]   (min, avg, max) = (1957.393, 1965.250, 1973.401), stdev = 7.417
[info]   CI (99.9%): [1936.690, 1993.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28665.523 ±(99.9%) 482.450 B/op [Average]
[info]   (min, avg, max) = (28516.187, 28665.523, 28799.939), stdev = 125.291
[info]   CI (99.9%): [28183.073, 29147.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2005.634 ±(99.9%) 23.935 MB/sec [Average]
[info]   (min, avg, max) = (1997.135, 2005.634, 2013.229), stdev = 6.216
[info]   CI (99.9%): [1981.699, 2029.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29254.686 ±(99.9%) 549.475 B/op [Average]
[info]   (min, avg, max) = (29054.887, 29254.686, 29406.922), stdev = 142.697
[info]   CI (99.9%): [28705.211, 29804.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.287 ±(99.9%) 2.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.287, 1.228), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.173 ±(99.9%) 29.536 B/op [Average]
[info]   (min, avg, max) = (0.304, 4.173, 17.821), stdev = 7.671
[info]   CI (99.9%): [≈ 0, 33.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28641.883 ops/s
[info] # Warmup Iteration   2: 137809.059 ops/s
[info] # Warmup Iteration   3: 160747.280 ops/s
[info] # Warmup Iteration   4: 160349.798 ops/s
[info] # Warmup Iteration   5: 163128.472 ops/s
[info] Iteration   1: 162363.606 ops/s
[info]                  ·gc.alloc.rate:                   2560.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              24806.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25806.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 163755.314 ops/s
[info]                  ·gc.alloc.rate:                   2564.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              24645.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25642.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.000 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 165640.602 ops/s
[info]                  ·gc.alloc.rate:                   2584.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              24551.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19001.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 163685.109 ops/s
[info]                  ·gc.alloc.rate:                   2594.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              24943.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25625.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 164781.139 ops/s
[info]                  ·gc.alloc.rate:               2625.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          25069.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25509.462 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   164045.154 ±(99.9%) 4766.241 ops/s [Average]
[info]   (min, avg, max) = (162363.606, 164045.154, 165640.602), stdev = 1237.778
[info]   CI (99.9%): [159278.913, 168811.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2585.687 ±(99.9%) 100.342 MB/sec [Average]
[info]   (min, avg, max) = (2560.401, 2585.687, 2625.009), stdev = 26.059
[info]   CI (99.9%): [2485.345, 2686.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24803.161 ±(99.9%) 813.727 B/op [Average]
[info]   (min, avg, max) = (24551.845, 24803.161, 25069.239), stdev = 211.322
[info]   CI (99.9%): [23989.433, 25616.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2533.636 ±(99.9%) 1148.280 MB/sec [Average]
[info]   (min, avg, max) = (2000.216, 2533.636, 2671.105), stdev = 298.205
[info]   CI (99.9%): [1385.356, 3681.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24317.015 ±(99.9%) 11450.073 B/op [Average]
[info]   (min, avg, max) = (19001.148, 24317.015, 25806.655), stdev = 2973.547
[info]   CI (99.9%): [12866.943, 35767.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.703 ±(99.9%) 4.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.703, 2.601), stdev = 1.090
[info]   CI (99.9%): [≈ 0, 4.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.750 ±(99.9%) 40.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.750, 25.000), stdev = 10.479
[info]   CI (99.9%): [≈ 0, 47.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 12.000), stdev = 3.435
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1135.422 ops/s
[info] # Warmup Iteration   2: 23547.200 ops/s
[info] # Warmup Iteration   3: 47407.949 ops/s
[info] # Warmup Iteration   4: 46920.236 ops/s
[info] # Warmup Iteration   5: 46883.487 ops/s
[info] Iteration   1: 46941.242 ops/s
[info]                  ·gc.alloc.rate:                   2648.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              88721.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89439.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 47562.097 ops/s
[info]                  ·gc.alloc.rate:                   2645.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              87527.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66351.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 47601.650 ops/s
[info]                  ·gc.alloc.rate:                   2668.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              88226.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88537.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47599.897 ops/s
[info]                  ·gc.alloc.rate:                   2681.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              88646.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88811.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 47678.538 ops/s
[info]                  ·gc.alloc.rate:                   2700.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              89123.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88918.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   47476.685 ±(99.9%) 1164.042 ops/s [Average]
[info]   (min, avg, max) = (46941.242, 47476.685, 47678.538), stdev = 302.298
[info]   CI (99.9%): [46312.643, 48640.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2668.849 ±(99.9%) 88.783 MB/sec [Average]
[info]   (min, avg, max) = (2645.639, 2668.849, 2700.485), stdev = 23.057
[info]   CI (99.9%): [2580.066, 2757.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88449.087 ±(99.9%) 2333.001 B/op [Average]
[info]   (min, avg, max) = (87527.146, 88449.087, 89123.863), stdev = 605.873
[info]   CI (99.9%): [86116.087, 90782.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2546.759 ±(99.9%) 1165.477 MB/sec [Average]
[info]   (min, avg, max) = (2005.577, 2546.759, 2694.267), stdev = 302.671
[info]   CI (99.9%): [1381.282, 3712.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84411.765 ±(99.9%) 38896.227 B/op [Average]
[info]   (min, avg, max) = (66351.618, 84411.765, 89439.725), stdev = 10101.227
[info]   CI (99.9%): [45515.538, 123307.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.764 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.125, 0.478), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.168 ±(99.9%) 25.613 B/op [Average]
[info]   (min, avg, max) = (0.687, 4.168, 16.023), stdev = 6.652
[info]   CI (99.9%): [≈ 0, 29.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25999.421 ops/s
[info] # Warmup Iteration   2: 157093.422 ops/s
[info] # Warmup Iteration   3: 233574.592 ops/s
[info] # Warmup Iteration   4: 239194.473 ops/s
[info] # Warmup Iteration   5: 241236.356 ops/s
[info] Iteration   1: 240003.457 ops/s
[info]                  ·gc.alloc.rate:               1104.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          7237.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8688.843 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 237878.457 ops/s
[info]                  ·gc.alloc.rate:                   1092.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              7226.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8783.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 240581.919 ops/s
[info]                  ·gc.alloc.rate:               1077.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          7050.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4351.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 240193.096 ops/s
[info]                  ·gc.alloc.rate:                   1095.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              7178.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8725.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 243966.514 ops/s
[info]                  ·gc.alloc.rate:                   1108.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              7147.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8607.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   240524.689 ±(99.9%) 8443.719 ops/s [Average]
[info]   (min, avg, max) = (237878.457, 240524.689, 243966.514), stdev = 2192.807
[info]   CI (99.9%): [232080.970, 248968.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1095.616 ±(99.9%) 45.178 MB/sec [Average]
[info]   (min, avg, max) = (1077.935, 1095.616, 1108.051), stdev = 11.733
[info]   CI (99.9%): [1050.438, 1140.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7168.054 ±(99.9%) 288.726 B/op [Average]
[info]   (min, avg, max) = (7050.591, 7168.054, 7237.295), stdev = 74.981
[info]   CI (99.9%): [6879.328, 7456.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1196.944 ±(99.9%) 1144.573 MB/sec [Average]
[info]   (min, avg, max) = (665.256, 1196.944, 1334.382), stdev = 297.242
[info]   CI (99.9%): [52.372, 2341.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7831.392 ±(99.9%) 7495.146 B/op [Average]
[info]   (min, avg, max) = (4351.327, 7831.392, 8783.970), stdev = 1946.466
[info]   CI (99.9%): [336.246, 15326.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 1.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.812), stdev = 0.359
[info]   CI (99.9%): [≈ 0, 1.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.102 ±(99.9%) 8.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.102, 5.237), stdev = 2.313
[info]   CI (99.9%): [≈ 0, 10.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212175.883 ops/s
[info] # Warmup Iteration   2: 451380.644 ops/s
[info] # Warmup Iteration   3: 576355.354 ops/s
[info] # Warmup Iteration   4: 574129.620 ops/s
[info] # Warmup Iteration   5: 581891.569 ops/s
[info] Iteration   1: 584335.056 ops/s
[info]                  ·gc.alloc.rate:               664.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          1789.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1787.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 579726.919 ops/s
[info]                  ·gc.alloc.rate:      639.458 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 583139.577 ops/s
[info]                  ·gc.alloc.rate:               663.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          1791.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1791.643 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 583865.931 ops/s
[info]                  ·gc.alloc.rate:               668.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          1803.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1792.069 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 577835.833 ops/s
[info]                  ·gc.alloc.rate:                   659.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1796.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1810.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   581780.663 ±(99.9%) 10975.933 ops/s [Average]
[info]   (min, avg, max) = (577835.833, 581780.663, 584335.056), stdev = 2850.415
[info]   CI (99.9%): [570804.730, 592756.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   659.273 ±(99.9%) 44.460 MB/sec [Average]
[info]   (min, avg, max) = (639.458, 659.273, 668.944), stdev = 11.546
[info]   CI (99.9%): [614.813, 703.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1783.400 ±(99.9%) 104.131 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1783.400, 1803.312), stdev = 27.043
[info]   CI (99.9%): [1679.268, 1887.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   531.483 ±(99.9%) 1144.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.483, 664.859), stdev = 297.108
[info]   CI (99.9%): [≈ 0, 1675.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1436.499 ±(99.9%) 3092.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1436.499, 1810.802), stdev = 803.077
[info]   CI (99.9%): [≈ 0, 4528.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199295.770 ops/s
[info] # Warmup Iteration   2: 530111.842 ops/s
[info] # Warmup Iteration   3: 601104.229 ops/s
[info] # Warmup Iteration   4: 633367.995 ops/s
[info] # Warmup Iteration   5: 633027.459 ops/s
[info] Iteration   1: 633784.955 ops/s
[info]                  ·gc.alloc.rate:      6.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 633876.129 ops/s
[info]                  ·gc.alloc.rate:      6.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 633949.364 ops/s
[info]                  ·gc.alloc.rate:      6.445 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 633341.823 ops/s
[info]                  ·gc.alloc.rate:      6.440 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 633022.292 ops/s
[info]                  ·gc.alloc.rate:      6.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   633594.913 ±(99.9%) 1531.549 ops/s [Average]
[info]   (min, avg, max) = (633022.292, 633594.913, 633949.364), stdev = 397.739
[info]   CI (99.9%): [632063.363, 635126.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.442 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (6.435, 6.442, 6.445), stdev = 0.004
[info]   CI (99.9%): [6.426, 6.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5568.833 ops/s
[info] # Warmup Iteration   2: 34866.276 ops/s
[info] # Warmup Iteration   3: 73038.268 ops/s
[info] # Warmup Iteration   4: 79663.195 ops/s
[info] # Warmup Iteration   5: 88791.000 ops/s
[info] Iteration   1: 88564.263 ops/s
[info]                  ·gc.alloc.rate:                   1664.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35442.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 88206.295 ops/s
[info]                  ·gc.alloc.rate:                   1634.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              29161.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23742.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.371 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 86946.557 ops/s
[info]                  ·gc.alloc.rate:                   1666.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              30171.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36193.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 85025.105 ops/s
[info]                  ·gc.alloc.rate:                   1586.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              29370.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24723.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 88462.818 ops/s
[info]                  ·gc.alloc.rate:                   1638.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              29145.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23810.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   87441.008 ±(99.9%) 5767.145 ops/s [Average]
[info]   (min, avg, max) = (85025.105, 87441.008, 88564.263), stdev = 1497.709
[info]   CI (99.9%): [81673.863, 93208.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1638.080 ±(99.9%) 124.350 MB/sec [Average]
[info]   (min, avg, max) = (1586.710, 1638.080, 1666.882), stdev = 32.293
[info]   CI (99.9%): [1513.730, 1762.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29485.109 ±(99.9%) 1624.870 B/op [Average]
[info]   (min, avg, max) = (29145.062, 29485.109, 30171.181), stdev = 421.974
[info]   CI (99.9%): [27860.239, 31109.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1599.720 ±(99.9%) 1396.593 MB/sec [Average]
[info]   (min, avg, max) = (1330.600, 1599.720, 1999.614), stdev = 362.691
[info]   CI (99.9%): [203.127, 2996.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28782.580 ±(99.9%) 24797.209 B/op [Average]
[info]   (min, avg, max) = (23742.667, 28782.580, 36193.761), stdev = 6439.756
[info]   CI (99.9%): [3985.370, 53579.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.428 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.291), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.882 ±(99.9%) 7.750 B/op [Average]
[info]   (min, avg, max) = (0.370, 1.882, 5.276), stdev = 2.013
[info]   CI (99.9%): [≈ 0, 9.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208805.459 ops/s
[info] # Warmup Iteration   2: 1688556.778 ops/s
[info] # Warmup Iteration   3: 7718955.387 ops/s
[info] # Warmup Iteration   4: 8272845.163 ops/s
[info] # Warmup Iteration   5: 8421789.903 ops/s
[info] Iteration   1: 8441970.688 ops/s
[info]                  ·gc.alloc.rate:                   7461.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1390.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7393.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1377.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8320128.907 ops/s
[info]                  ·gc.alloc.rate:                   7334.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6770.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1280.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 8435553.185 ops/s
[info]                  ·gc.alloc.rate:                   7458.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7475.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1394.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 8424255.695 ops/s
[info]                  ·gc.alloc.rate:                   7424.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6808.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 8457701.068 ops/s
[info]                  ·gc.alloc.rate:                   7478.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7492.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1394.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   8415921.908 ±(99.9%) 211392.769 ops/s [Average]
[info]   (min, avg, max) = (8320128.907, 8415921.908, 8457701.068), stdev = 54898.031
[info]   CI (99.9%): [8204529.140, 8627314.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   7431.526 ±(99.9%) 222.671 MB/sec [Average]
[info]   (min, avg, max) = (7334.226, 7431.526, 7478.439), stdev = 57.827
[info]   CI (99.9%): [7208.854, 7654.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1389.517 ±(99.9%) 9.735 B/op [Average]
[info]   (min, avg, max) = (1386.741, 1389.517, 1391.675), stdev = 2.528
[info]   CI (99.9%): [1379.781, 1399.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   7188.017 ±(99.9%) 1409.303 MB/sec [Average]
[info]   (min, avg, max) = (6770.920, 7188.017, 7492.757), stdev = 365.991
[info]   CI (99.9%): [5778.714, 8597.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1343.777 ±(99.9%) 240.109 B/op [Average]
[info]   (min, avg, max) = (1271.610, 1343.777, 1394.652), stdev = 62.356
[info]   CI (99.9%): [1103.667, 1583.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.013, 0.019), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 13.000, 14.000), stdev = 0.707
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.623 ops/s
[info] # Warmup Iteration   2: 765530.143 ops/s
[info] # Warmup Iteration   3: 923366.872 ops/s
[info] # Warmup Iteration   4: 983793.951 ops/s
[info] # Warmup Iteration   5: 1002262.729 ops/s
[info] Iteration   1: 998875.066 ops/s
[info]                  ·gc.alloc.rate:                   624.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 977378.445 ops/s
[info]                  ·gc.alloc.rate:               611.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          985.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1065.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 965525.148 ops/s
[info]                  ·gc.alloc.rate:               603.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1078.291 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 953397.634 ops/s
[info]                  ·gc.alloc.rate:               608.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          1004.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1093.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 955897.079 ops/s
[info]                  ·gc.alloc.rate:               613.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          1009.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1090.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   970214.674 ±(99.9%) 71588.216 ops/s [Average]
[info]   (min, avg, max) = (953397.634, 970214.674, 998875.066), stdev = 18591.232
[info]   CI (99.9%): [898626.458, 1041802.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   612.393 ±(99.9%) 29.570 MB/sec [Average]
[info]   (min, avg, max) = (603.727, 612.393, 624.511), stdev = 7.679
[info]   CI (99.9%): [582.823, 641.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   993.510 ±(99.9%) 48.554 B/op [Average]
[info]   (min, avg, max) = (984.000, 993.510, 1009.439), stdev = 12.609
[info]   CI (99.9%): [944.957, 1042.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   661.729 ±(99.9%) 3.290 MB/sec [Average]
[info]   (min, avg, max) = (660.498, 661.729, 662.564), stdev = 0.854
[info]   CI (99.9%): [658.439, 665.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1073.724 ±(99.9%) 83.313 B/op [Average]
[info]   (min, avg, max) = (1040.703, 1073.724, 1093.661), stdev = 21.636
[info]   CI (99.9%): [990.411, 1157.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20735.330 ops/s
[info] # Warmup Iteration   2: 167766.501 ops/s
[info] # Warmup Iteration   3: 342070.657 ops/s
[info] # Warmup Iteration   4: 446687.631 ops/s
[info] # Warmup Iteration   5: 456991.406 ops/s
[info] Iteration   1: 459534.077 ops/s
[info]                  ·gc.alloc.rate:               990.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          3391.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2274.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 458034.221 ops/s
[info]                  ·gc.alloc.rate:                   987.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              3392.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4571.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 437908.973 ops/s
[info]                  ·gc.alloc.rate:               947.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          3405.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2394.266 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 444934.335 ops/s
[info]                  ·gc.alloc.rate:                   972.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              3437.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4705.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 363096.868 ops/s
[info]                  ·gc.alloc.rate:               775.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          3359.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2891.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   432701.695 ±(99.9%) 153824.655 ops/s [Average]
[info]   (min, avg, max) = (363096.868, 432701.695, 459534.077), stdev = 39947.774
[info]   CI (99.9%): [278877.039, 586526.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   934.708 ±(99.9%) 349.158 MB/sec [Average]
[info]   (min, avg, max) = (775.346, 934.708, 990.489), stdev = 90.675
[info]   CI (99.9%): [585.550, 1283.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3397.263 ±(99.9%) 108.091 B/op [Average]
[info]   (min, avg, max) = (3359.658, 3397.263, 3437.452), stdev = 28.071
[info]   CI (99.9%): [3289.172, 3505.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   931.959 ±(99.9%) 1402.077 MB/sec [Average]
[info]   (min, avg, max) = (664.397, 931.959, 1331.205), stdev = 364.115
[info]   CI (99.9%): [≈ 0, 2334.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3367.461 ±(99.9%) 4558.475 B/op [Average]
[info]   (min, avg, max) = (2274.747, 3367.461, 4705.091), stdev = 1183.822
[info]   CI (99.9%): [≈ 0, 7925.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.073), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328789.312 ops/s
[info] # Warmup Iteration   2: 639142.530 ops/s
[info] # Warmup Iteration   3: 743926.615 ops/s
[info] # Warmup Iteration   4: 740515.052 ops/s
[info] # Warmup Iteration   5: 746881.782 ops/s
[info] Iteration   1: 747968.819 ops/s
[info]                  ·gc.alloc.rate:                   682.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              1436.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1409.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 748143.868 ops/s
[info]                  ·gc.alloc.rate:               680.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          1431.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1409.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 736956.533 ops/s
[info]                  ·gc.alloc.rate:               692.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          1477.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1431.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 852988.514 ops/s
[info]                  ·gc.alloc.rate:               776.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          1432.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1237.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 856281.245 ops/s
[info]                  ·gc.alloc.rate:               788.988 MB/sec
[info]                  ·gc.alloc.rate.norm:          1449.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1232.978 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   788467.796 ±(99.9%) 233283.432 ops/s [Average]
[info]   (min, avg, max) = (736956.533, 788467.796, 856281.245), stdev = 60582.967
[info]   CI (99.9%): [555184.364, 1021751.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   724.109 ±(99.9%) 207.000 MB/sec [Average]
[info]   (min, avg, max) = (680.654, 724.109, 788.988), stdev = 53.757
[info]   CI (99.9%): [517.109, 931.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1445.563 ±(99.9%) 75.031 B/op [Average]
[info]   (min, avg, max) = (1431.855, 1445.563, 1477.834), stdev = 19.485
[info]   CI (99.9%): [1370.532, 1520.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.425 ±(99.9%) 1.787 MB/sec [Average]
[info]   (min, avg, max) = (669.794, 670.425, 670.931), stdev = 0.464
[info]   CI (99.9%): [668.638, 672.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1344.221 ±(99.9%) 384.228 B/op [Average]
[info]   (min, avg, max) = (1232.978, 1344.221, 1431.218), stdev = 99.783
[info]   CI (99.9%): [959.992, 1728.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 886382.958 ops/s
[info] # Warmup Iteration   2: 4043967.196 ops/s
[info] # Warmup Iteration   3: 4510749.492 ops/s
[info] # Warmup Iteration   4: 4546593.579 ops/s
[info] # Warmup Iteration   5: 4602584.871 ops/s
[info] Iteration   1: 4595524.719 ops/s
[info]                  ·gc.alloc.rate:                   2764.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              946.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4523220.445 ops/s
[info]                  ·gc.alloc.rate:                   2723.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              947.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4520604.882 ops/s
[info]                  ·gc.alloc.rate:                   2722.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              947.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8980966.942 ops/s
[info]                  ·gc.alloc.rate:                   5214.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              913.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4713.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8793519.906 ops/s
[info]                  ·gc.alloc.rate:                   5150.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              921.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4733.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     847.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   6282767.379 ±(99.9%) 9159387.949 ops/s [Average]
[info]   (min, avg, max) = (4520604.882, 6282767.379, 8980966.942), stdev = 2378663.964
[info]   CI (99.9%): [≈ 0, 15442155.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   3714.991 ±(99.9%) 5159.458 MB/sec [Average]
[info]   (min, avg, max) = (2722.181, 3714.991, 5214.750), stdev = 1339.895
[info]   CI (99.9%): [≈ 0, 8874.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   935.503 ±(99.9%) 63.116 B/op [Average]
[info]   (min, avg, max) = (913.864, 935.503, 947.624), stdev = 16.391
[info]   CI (99.9%): [872.387, 998.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   3497.598 ±(99.9%) 4308.663 MB/sec [Average]
[info]   (min, avg, max) = (2678.633, 3497.598, 4733.495), stdev = 1118.946
[info]   CI (99.9%): [≈ 0, 7806.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   891.361 ±(99.9%) 196.337 B/op [Average]
[info]   (min, avg, max) = (825.957, 891.361, 934.293), stdev = 50.988
[info]   CI (99.9%): [695.024, 1087.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.008, 0.015), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2156082.056 ops/s
[info] # Warmup Iteration   2: 8514111.073 ops/s
[info] # Warmup Iteration   3: 41534662.451 ops/s
[info] # Warmup Iteration   4: 42166762.430 ops/s
[info] # Warmup Iteration   5: 42193950.271 ops/s
[info] Iteration   1: 42657579.464 ops/s
[info]                  ·gc.alloc.rate:                   3815.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4014.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 42460789.448 ops/s
[info]                  ·gc.alloc.rate:                   3802.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 42554387.891 ops/s
[info]                  ·gc.alloc.rate:               3837.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          141.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4037.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149.336 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 41964618.957 ops/s
[info]                  ·gc.alloc.rate:                   3761.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              141.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 42435793.154 ops/s
[info]                  ·gc.alloc.rate:                   3828.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              141.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4063.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   42414633.783 ±(99.9%) 1025394.779 ops/s [Average]
[info]   (min, avg, max) = (41964618.957, 42414633.783, 42657579.464), stdev = 266291.768
[info]   CI (99.9%): [41389239.004, 43440028.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   3808.964 ±(99.9%) 114.600 MB/sec [Average]
[info]   (min, avg, max) = (3761.089, 3808.964, 3837.138), stdev = 29.761
[info]   CI (99.9%): [3694.364, 3923.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   141.325 ±(99.9%) 2.195 B/op [Average]
[info]   (min, avg, max) = (140.760, 141.325, 141.966), stdev = 0.570
[info]   CI (99.9%): [139.131, 143.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   3769.105 ±(99.9%) 1423.531 MB/sec [Average]
[info]   (min, avg, max) = (3352.448, 3769.105, 4063.686), stdev = 369.686
[info]   CI (99.9%): [2345.575, 5192.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   139.805 ±(99.9%) 50.688 B/op [Average]
[info]   (min, avg, max) = (124.248, 139.805, 150.702), stdev = 13.164
[info]   CI (99.9%): [89.117, 190.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 340.777 ops/s
[info] # Warmup Iteration   2: 39906.500 ops/s
[info] # Warmup Iteration   3: 275833.940 ops/s
[info] # Warmup Iteration   4: 332489.773 ops/s
[info] # Warmup Iteration   5: 393858.828 ops/s
[info] Iteration   1: 389327.861 ops/s
[info]                  ·gc.alloc.rate:                   2758.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              11149.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10801.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 383562.420 ops/s
[info]                  ·gc.alloc.rate:                   2696.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              11066.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10966.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.769 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 390816.149 ops/s
[info]                  ·gc.alloc.rate:                   2756.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              11100.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10773.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 390510.133 ops/s
[info]                  ·gc.alloc.rate:               2781.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          11208.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10805.966 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 390481.626 ops/s
[info]                  ·gc.alloc.rate:                   2794.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              11264.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10841.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   388939.638 ±(99.9%) 11779.236 ops/s [Average]
[info]   (min, avg, max) = (383562.420, 388939.638, 390816.149), stdev = 3059.030
[info]   CI (99.9%): [377160.402, 400718.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2757.856 ±(99.9%) 144.545 MB/sec [Average]
[info]   (min, avg, max) = (2696.993, 2757.856, 2794.802), stdev = 37.538
[info]   CI (99.9%): [2613.311, 2902.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11157.912 ±(99.9%) 308.745 B/op [Average]
[info]   (min, avg, max) = (11066.125, 11157.912, 11264.668), stdev = 80.180
[info]   CI (99.9%): [10849.167, 11466.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2678.517 ±(99.9%) 28.159 MB/sec [Average]
[info]   (min, avg, max) = (2672.633, 2678.517, 2689.835), stdev = 7.313
[info]   CI (99.9%): [2650.358, 2706.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10837.681 ±(99.9%) 291.880 B/op [Average]
[info]   (min, avg, max) = (10773.500, 10837.681, 10966.172), stdev = 75.800
[info]   CI (99.9%): [10545.801, 11129.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.558 ±(99.9%) 4.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.499), stdev = 1.087
[info]   CI (99.9%): [≈ 0, 4.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.257 ±(99.9%) 16.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.257, 10.098), stdev = 4.393
[info]   CI (99.9%): [≈ 0, 19.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846632.086 ops/s
[info] # Warmup Iteration   2: 1182995.572 ops/s
[info] # Warmup Iteration   3: 1464047.199 ops/s
[info] # Warmup Iteration   4: 1469372.363 ops/s
[info] # Warmup Iteration   5: 1471234.781 ops/s
[info] Iteration   1: 1469712.270 ops/s
[info]                  ·gc.alloc.rate:      44.823 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1472066.252 ops/s
[info]                  ·gc.alloc.rate:      44.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.089 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1472133.176 ops/s
[info]                  ·gc.alloc.rate:      44.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1470816.853 ops/s
[info]                  ·gc.alloc.rate:      44.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1474258.671 ops/s
[info]                  ·gc.alloc.rate:      44.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1471797.444 ±(99.9%) 6543.864 ops/s [Average]
[info]   (min, avg, max) = (1469712.270, 1471797.444, 1474258.671), stdev = 1699.421
[info]   CI (99.9%): [1465253.580, 1478341.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   44.905 ±(99.9%) 0.265 MB/sec [Average]
[info]   (min, avg, max) = (44.823, 44.905, 44.987), stdev = 0.069
[info]   CI (99.9%): [44.640, 45.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.018 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.018, 48.089), stdev = 0.040
[info]   CI (99.9%): [47.865, 48.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1462.265 ops/s
[info] # Warmup Iteration   2: 61585.418 ops/s
[info] # Warmup Iteration   3: 106275.678 ops/s
[info] # Warmup Iteration   4: 108519.661 ops/s
[info] # Warmup Iteration   5: 109378.528 ops/s
[info] Iteration   1: 109561.574 ops/s
[info]                  ·gc.alloc.rate:                   4011.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              57631.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4016.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57703.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.495 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 109345.146 ops/s
[info]                  ·gc.alloc.rate:                   4016.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              57813.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48363.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.899 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 108076.688 ops/s
[info]                  ·gc.alloc.rate:                   4036.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              58782.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4049.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58960.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 108759.449 ops/s
[info]                  ·gc.alloc.rate:                   4042.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              58488.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4063.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58792.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 109281.521 ops/s
[info]                  ·gc.alloc.rate:                   4072.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              58632.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58649.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   109004.876 ±(99.9%) 2297.512 ops/s [Average]
[info]   (min, avg, max) = (108076.688, 109004.876, 109561.574), stdev = 596.657
[info]   CI (99.9%): [106707.364, 111302.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4035.956 ±(99.9%) 92.504 MB/sec [Average]
[info]   (min, avg, max) = (4011.750, 4035.956, 4072.125), stdev = 24.023
[info]   CI (99.9%): [3943.452, 4128.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   58269.700 ±(99.9%) 1979.968 B/op [Average]
[info]   (min, avg, max) = (57631.679, 58269.700, 58782.460), stdev = 514.191
[info]   CI (99.9%): [56289.732, 60249.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3912.540 ±(99.9%) 1191.901 MB/sec [Average]
[info]   (min, avg, max) = (3360.151, 3912.540, 4073.278), stdev = 309.533
[info]   CI (99.9%): [2720.639, 5104.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56494.032 ±(99.9%) 17601.342 B/op [Average]
[info]   (min, avg, max) = (48363.805, 56494.032, 58960.755), stdev = 4571.013
[info]   CI (99.9%): [38892.689, 74095.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.780 ±(99.9%) 1.740 B/op [Average]
[info]   (min, avg, max) = (0.303, 0.780, 1.495), stdev = 0.452
[info]   CI (99.9%): [≈ 0, 2.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274123.822 ops/s
[info] # Warmup Iteration   2: 1775427.185 ops/s
[info] # Warmup Iteration   3: 2031923.350 ops/s
[info] # Warmup Iteration   4: 2125080.568 ops/s
[info] # Warmup Iteration   5: 2131028.083 ops/s
[info] Iteration   1: 2075143.916 ops/s
[info]                  ·gc.alloc.rate:               612.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          464.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 502.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2141858.772 ops/s
[info]                  ·gc.alloc.rate:               595.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 486.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2147989.986 ops/s
[info]                  ·gc.alloc.rate:                   599.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2129160.689 ops/s
[info]                  ·gc.alloc.rate:               594.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 490.676 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1843744.691 ops/s
[info]                  ·gc.alloc.rate:      496.676 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   2067579.611 ±(99.9%) 494379.574 ops/s [Average]
[info]   (min, avg, max) = (1843744.691, 2067579.611, 2147989.986), stdev = 128388.805
[info]   CI (99.9%): [1573200.037, 2561959.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   579.570 ±(99.9%) 180.522 MB/sec [Average]
[info]   (min, avg, max) = (496.676, 579.570, 612.228), stdev = 46.881
[info]   CI (99.9%): [399.048, 760.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   440.833 ±(99.9%) 56.201 B/op [Average]
[info]   (min, avg, max) = (424.000, 440.833, 464.318), stdev = 14.595
[info]   CI (99.9%): [384.632, 497.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.542 ±(99.9%) 1142.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.542, 663.829), stdev = 296.583
[info]   CI (99.9%): [≈ 0, 1672.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   393.269 ±(99.9%) 846.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 393.269, 502.477), stdev = 219.940
[info]   CI (99.9%): [≈ 0, 1240.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1093479.720 ops/s
[info] # Warmup Iteration   2: 1793248.151 ops/s
[info] # Warmup Iteration   3: 1971033.980 ops/s
[info] # Warmup Iteration   4: 2009040.209 ops/s
[info] # Warmup Iteration   5: 2007334.672 ops/s
[info] Iteration   1: 2010262.315 ops/s
[info]                  ·gc.alloc.rate:                   555.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              435.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2018440.342 ops/s
[info]                  ·gc.alloc.rate:      543.871 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2010775.929 ops/s
[info]                  ·gc.alloc.rate:               566.901 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 523.776 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2008177.110 ops/s
[info]                  ·gc.alloc.rate:                   566.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              443.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2010084.280 ops/s
[info]                  ·gc.alloc.rate:               556.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 524.214 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   2011547.995 ±(99.9%) 15313.130 ops/s [Average]
[info]   (min, avg, max) = (2008177.110, 2011547.995, 2018440.342), stdev = 3976.771
[info]   CI (99.9%): [1996234.865, 2026861.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   557.779 ±(99.9%) 36.081 MB/sec [Average]
[info]   (min, avg, max) = (543.871, 557.779, 566.901), stdev = 9.370
[info]   CI (99.9%): [521.698, 593.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.370 ±(99.9%) 31.025 B/op [Average]
[info]   (min, avg, max) = (424.000, 436.370, 443.645), stdev = 8.057
[info]   CI (99.9%): [405.345, 467.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.395 ±(99.9%) 1152.477 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.395, 669.542), stdev = 299.295
[info]   CI (99.9%): [≈ 0, 1687.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   419.213 ±(99.9%) 902.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 419.213, 524.435), stdev = 234.347
[info]   CI (99.9%): [≈ 0, 1321.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.016), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1055974.683 ops/s
[info] # Warmup Iteration   2: 1847581.501 ops/s
[info] # Warmup Iteration   3: 2033605.724 ops/s
[info] # Warmup Iteration   4: 2047626.483 ops/s
[info] # Warmup Iteration   5: 1942385.090 ops/s
[info] Iteration   1: 2047163.619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2040237.377 ops/s
[info]                  ·gc.alloc.rate:      10.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.852 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2044750.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2035145.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2035997.312 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2040658.894 ±(99.9%) 20317.310 ops/s [Average]
[info]   (min, avg, max) = (2035145.523, 2040658.894, 2047163.619), stdev = 5276.341
[info]   CI (99.9%): [2020341.584, 2060976.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.036 ±(99.9%) 17.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.036, 10.180), stdev = 4.552
[info]   CI (99.9%): [≈ 0, 19.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.571 ±(99.9%) 13.521 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.571, 7.852), stdev = 3.511
[info]   CI (99.9%): [≈ 0, 15.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3012.830 ops/s
[info] # Warmup Iteration   2: 34686.212 ops/s
[info] # Warmup Iteration   3: 55520.103 ops/s
[info] # Warmup Iteration   4: 52005.044 ops/s
[info] # Warmup Iteration   5: 57985.258 ops/s
[info] Iteration   1: 58059.062 ops/s
[info]                  ·gc.alloc.rate:                   2040.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              55314.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54345.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 58240.257 ops/s
[info]                  ·gc.alloc.rate:                   2043.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              55228.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54274.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 58363.589 ops/s
[info]                  ·gc.alloc.rate:                   2036.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              54910.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54179.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 57880.071 ops/s
[info]                  ·gc.alloc.rate:                   2019.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              54888.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54711.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 58214.561 ops/s
[info]                  ·gc.alloc.rate:                   2041.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              55190.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54470.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   58151.508 ±(99.9%) 717.954 ops/s [Average]
[info]   (min, avg, max) = (57880.071, 58151.508, 58363.589), stdev = 186.450
[info]   CI (99.9%): [57433.554, 58869.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2036.287 ±(99.9%) 38.441 MB/sec [Average]
[info]   (min, avg, max) = (2019.132, 2036.287, 2043.939), stdev = 9.983
[info]   CI (99.9%): [1997.846, 2074.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55106.573 ±(99.9%) 747.588 B/op [Average]
[info]   (min, avg, max) = (54888.960, 55106.573, 55314.364), stdev = 194.146
[info]   CI (99.9%): [54358.985, 55854.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2010.021 ±(99.9%) 15.070 MB/sec [Average]
[info]   (min, avg, max) = (2004.746, 2010.021, 2014.946), stdev = 3.914
[info]   CI (99.9%): [1994.951, 2025.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54396.236 ±(99.9%) 791.259 B/op [Average]
[info]   (min, avg, max) = (54179.391, 54396.236, 54711.069), stdev = 205.487
[info]   CI (99.9%): [53604.977, 55187.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.404 ±(99.9%) 2.021 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.404, 1.249), stdev = 0.525
[info]   CI (99.9%): [≈ 0, 2.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.938 ±(99.9%) 54.775 B/op [Average]
[info]   (min, avg, max) = (0.563, 10.938, 33.859), stdev = 14.225
[info]   CI (99.9%): [≈ 0, 65.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86736.336 ops/s
[info] # Warmup Iteration   2: 263606.271 ops/s
[info] # Warmup Iteration   3: 273197.815 ops/s
[info] # Warmup Iteration   4: 274804.630 ops/s
[info] # Warmup Iteration   5: 275400.355 ops/s
[info] Iteration   1: 274676.613 ops/s
[info]                  ·gc.alloc.rate:                   1118.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              6404.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7667.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 274774.509 ops/s
[info]                  ·gc.alloc.rate:                   1110.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              6360.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7671.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 276186.818 ops/s
[info]                  ·gc.alloc.rate:               1097.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          6252.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3816.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 273212.049 ops/s
[info]                  ·gc.alloc.rate:                   1106.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              6373.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7720.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 275903.861 ops/s
[info]                  ·gc.alloc.rate:                   1104.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              6298.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3826.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   274950.770 ±(99.9%) 4542.119 ops/s [Average]
[info]   (min, avg, max) = (273212.049, 274950.770, 276186.818), stdev = 1179.574
[info]   CI (99.9%): [270408.651, 279492.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1107.375 ±(99.9%) 30.052 MB/sec [Average]
[info]   (min, avg, max) = (1097.138, 1107.375, 1118.211), stdev = 7.804
[info]   CI (99.9%): [1077.322, 1137.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6338.048 ±(99.9%) 237.511 B/op [Average]
[info]   (min, avg, max) = (6252.116, 6338.048, 6404.870), stdev = 61.681
[info]   CI (99.9%): [6100.537, 6575.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.863 ±(99.9%) 1411.302 MB/sec [Average]
[info]   (min, avg, max) = (669.805, 1071.863, 1340.267), stdev = 366.511
[info]   CI (99.9%): [≈ 0, 2483.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6140.745 ±(99.9%) 8151.924 B/op [Average]
[info]   (min, avg, max) = (3816.931, 6140.745, 7720.953), stdev = 2117.029
[info]   CI (99.9%): [≈ 0, 14292.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.648 ±(99.9%) 5.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.648, 3.165), stdev = 1.407
[info]   CI (99.9%): [≈ 0, 6.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.694 ±(99.9%) 30.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.694, 18.050), stdev = 8.026
[info]   CI (99.9%): [≈ 0, 34.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 738.733 ops/s
[info] # Warmup Iteration   2: 21767.437 ops/s
[info] # Warmup Iteration   3: 48827.044 ops/s
[info] # Warmup Iteration   4: 51338.055 ops/s
[info] # Warmup Iteration   5: 53975.342 ops/s
[info] Iteration   1: 53369.029 ops/s
[info]                  ·gc.alloc.rate:                   2275.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              67091.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58931.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 54463.834 ops/s
[info]                  ·gc.alloc.rate:                   2266.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              65497.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57750.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 54406.638 ops/s
[info]                  ·gc.alloc.rate:                   2269.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              65632.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77094.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 54733.911 ops/s
[info]                  ·gc.alloc.rate:                   2259.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              64964.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57603.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 54461.489 ops/s
[info]                  ·gc.alloc.rate:                   2261.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              65313.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58030.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   54286.980 ±(99.9%) 2036.141 ops/s [Average]
[info]   (min, avg, max) = (53369.029, 54286.980, 54733.911), stdev = 528.779
[info]   CI (99.9%): [52250.840, 56323.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2266.289 ±(99.9%) 24.568 MB/sec [Average]
[info]   (min, avg, max) = (2259.349, 2266.289, 2275.102), stdev = 6.380
[info]   CI (99.9%): [2241.721, 2290.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65699.930 ±(99.9%) 3147.936 B/op [Average]
[info]   (min, avg, max) = (64964.335, 65699.930, 67091.830), stdev = 817.509
[info]   CI (99.9%): [62551.994, 68847.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2134.971 ±(99.9%) 1142.535 MB/sec [Average]
[info]   (min, avg, max) = (1998.398, 2134.971, 2665.690), stdev = 296.713
[info]   CI (99.9%): [992.436, 3277.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61882.222 ±(99.9%) 32806.711 B/op [Average]
[info]   (min, avg, max) = (57603.016, 61882.222, 77094.942), stdev = 8519.799
[info]   CI (99.9%): [29075.510, 94688.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 3.623 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.600, 2.227), stdev = 0.941
[info]   CI (99.9%): [≈ 0, 4.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.586 ±(99.9%) 106.908 B/op [Average]
[info]   (min, avg, max) = (0.602, 17.586, 65.685), stdev = 27.764
[info]   CI (99.9%): [≈ 0, 124.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28239.997 ops/s
[info] # Warmup Iteration   2: 134853.259 ops/s
[info] # Warmup Iteration   3: 176492.470 ops/s
[info] # Warmup Iteration   4: 161659.886 ops/s
[info] # Warmup Iteration   5: 161393.123 ops/s
[info] Iteration   1: 161236.605 ops/s
[info]                  ·gc.alloc.rate:               1621.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          15829.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12985.200 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 160481.985 ops/s
[info]                  ·gc.alloc.rate:                   1600.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              15691.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13072.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 161696.749 ops/s
[info]                  ·gc.alloc.rate:                   1624.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              15812.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19507.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 162392.171 ops/s
[info]                  ·gc.alloc.rate:                   1626.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              15759.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12970.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 157005.971 ops/s
[info]                  ·gc.alloc.rate:               1566.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          15703.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13428.728 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   160562.696 ±(99.9%) 8110.158 ops/s [Average]
[info]   (min, avg, max) = (157005.971, 160562.696, 162392.171), stdev = 2106.182
[info]   CI (99.9%): [152452.539, 168672.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1607.946 ±(99.9%) 98.191 MB/sec [Average]
[info]   (min, avg, max) = (1566.473, 1607.946, 1626.717), stdev = 25.500
[info]   CI (99.9%): [1509.755, 1706.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15759.177 ±(99.9%) 240.017 B/op [Average]
[info]   (min, avg, max) = (15691.016, 15759.177, 15829.673), stdev = 62.332
[info]   CI (99.9%): [15519.159, 15999.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.215 ±(99.9%) 1151.825 MB/sec [Average]
[info]   (min, avg, max) = (1330.328, 1469.215, 2004.262), stdev = 299.125
[info]   CI (99.9%): [317.390, 2621.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14392.744 ±(99.9%) 11032.669 B/op [Average]
[info]   (min, avg, max) = (12970.011, 14392.744, 19507.290), stdev = 2865.149
[info]   CI (99.9%): [3360.075, 25425.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.217 ±(99.9%) 1.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 0.999), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 1.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.107 ±(99.9%) 16.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.107, 9.726), stdev = 4.266
[info]   CI (99.9%): [≈ 0, 18.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151580.607 ops/s
[info] # Warmup Iteration   2: 385033.783 ops/s
[info] # Warmup Iteration   3: 393617.682 ops/s
[info] # Warmup Iteration   4: 391458.349 ops/s
[info] # Warmup Iteration   5: 392630.599 ops/s
[info] Iteration   1: 390733.010 ops/s
[info]                  ·gc.alloc.rate:                   537.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              2166.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2691.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 391262.165 ops/s
[info]                  ·gc.alloc.rate:               537.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          2159.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2687.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 390497.968 ops/s
[info]                  ·gc.alloc.rate:                   543.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              2190.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2695.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 390633.893 ops/s
[info]                  ·gc.alloc.rate:      522.328 MB/sec
[info]                  ·gc.alloc.rate.norm: 2104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 389759.503 ops/s
[info]                  ·gc.alloc.rate:               539.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          2179.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2700.512 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   390577.308 ±(99.9%) 2083.954 ops/s [Average]
[info]   (min, avg, max) = (389759.503, 390577.308, 391262.165), stdev = 541.196
[info]   CI (99.9%): [388493.354, 392661.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   536.131 ±(99.9%) 31.269 MB/sec [Average]
[info]   (min, avg, max) = (522.328, 536.131, 543.648), stdev = 8.120
[info]   CI (99.9%): [504.862, 567.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.115 ±(99.9%) 129.125 B/op [Average]
[info]   (min, avg, max) = (2104.001, 2160.115, 2190.837), stdev = 33.533
[info]   CI (99.9%): [2030.991, 2289.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.827 ±(99.9%) 1151.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.827, 668.891), stdev = 298.978
[info]   CI (99.9%): [≈ 0, 1686.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2154.982 ±(99.9%) 4638.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2154.982, 2700.512), stdev = 1204.681
[info]   CI (99.9%): [≈ 0, 6793.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.084), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 2.074
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262075.882 ops/s
[info] # Warmup Iteration   2: 538059.547 ops/s
[info] # Warmup Iteration   3: 584504.474 ops/s
[info] # Warmup Iteration   4: 584482.463 ops/s
[info] # Warmup Iteration   5: 584940.647 ops/s
[info] Iteration   1: 584900.702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 585008.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 584892.236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 545337.816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 582114.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   576450.856 ±(99.9%) 67138.140 ops/s [Average]
[info]   (min, avg, max) = (545337.816, 576450.856, 585008.701), stdev = 17435.562
[info]   CI (99.9%): [509312.716, 643588.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5665.728 ops/s
[info] # Warmup Iteration   2: 46544.264 ops/s
[info] # Warmup Iteration   3: 64543.178 ops/s
[info] # Warmup Iteration   4: 68967.043 ops/s
[info] # Warmup Iteration   5: 76231.730 ops/s
[info] Iteration   1: 78246.881 ops/s
[info]                  ·gc.alloc.rate:                   1923.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              38687.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40156.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 78531.432 ops/s
[info]                  ·gc.alloc.rate:                   1937.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              38821.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40010.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 78893.037 ops/s
[info]                  ·gc.alloc.rate:                   1932.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              38535.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39827.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 77766.358 ops/s
[info]                  ·gc.alloc.rate:                   1922.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              38913.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40438.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 77983.612 ops/s
[info]                  ·gc.alloc.rate:                   1902.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              38379.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26927.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   78284.264 ±(99.9%) 1713.116 ops/s [Average]
[info]   (min, avg, max) = (77766.358, 78284.264, 78893.037), stdev = 444.891
[info]   CI (99.9%): [76571.148, 79997.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1923.533 ±(99.9%) 51.750 MB/sec [Average]
[info]   (min, avg, max) = (1902.087, 1923.533, 1937.116), stdev = 13.439
[info]   CI (99.9%): [1871.783, 1975.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38667.580 ±(99.9%) 829.136 B/op [Average]
[info]   (min, avg, max) = (38379.086, 38667.580, 38913.999), stdev = 215.324
[info]   CI (99.9%): [37838.444, 39496.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1864.514 ±(99.9%) 1140.802 MB/sec [Average]
[info]   (min, avg, max) = (1334.545, 1864.514, 1998.047), stdev = 296.263
[info]   CI (99.9%): [723.712, 3005.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37472.075 ±(99.9%) 22714.096 B/op [Average]
[info]   (min, avg, max) = (26927.584, 37472.075, 40438.218), stdev = 5898.779
[info]   CI (99.9%): [14757.979, 60186.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 2.660 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.575, 1.686), stdev = 0.691
[info]   CI (99.9%): [≈ 0, 3.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.537 ±(99.9%) 53.500 B/op [Average]
[info]   (min, avg, max) = (0.840, 11.537, 33.916), stdev = 13.894
[info]   CI (99.9%): [≈ 0, 65.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5410.748 ops/s
[info] # Warmup Iteration   2: 77166.408 ops/s
[info] # Warmup Iteration   3: 97293.376 ops/s
[info] # Warmup Iteration   4: 103076.552 ops/s
[info] # Warmup Iteration   5: 104171.147 ops/s
[info] Iteration   1: 103646.605 ops/s
[info]                  ·gc.alloc.rate:                   1644.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              24972.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30441.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 103922.457 ops/s
[info]                  ·gc.alloc.rate:                   1621.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              24552.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20252.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 104929.433 ops/s
[info]                  ·gc.alloc.rate:                   1647.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              24704.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30035.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 105060.387 ops/s
[info]                  ·gc.alloc.rate:               1656.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          24817.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19939.420 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 104404.690 ops/s
[info]                  ·gc.alloc.rate:                   1634.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              24632.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20063.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   104392.714 ±(99.9%) 2367.299 ops/s [Average]
[info]   (min, avg, max) = (103646.605, 104392.714, 105060.387), stdev = 614.780
[info]   CI (99.9%): [102025.415, 106760.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1640.946 ±(99.9%) 51.897 MB/sec [Average]
[info]   (min, avg, max) = (1621.400, 1640.946, 1656.748), stdev = 13.478
[info]   CI (99.9%): [1589.049, 1692.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24735.929 ±(99.9%) 632.302 B/op [Average]
[info]   (min, avg, max) = (24552.373, 24735.929, 24972.097), stdev = 164.207
[info]   CI (99.9%): [24103.627, 25368.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1601.518 ±(99.9%) 1414.207 MB/sec [Average]
[info]   (min, avg, max) = (1331.078, 1601.518, 2004.749), stdev = 367.265
[info]   CI (99.9%): [187.312, 3015.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24146.546 ±(99.9%) 21426.131 B/op [Average]
[info]   (min, avg, max) = (19939.420, 24146.546, 30441.811), stdev = 5564.298
[info]   CI (99.9%): [2720.415, 45572.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.929 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.929, 3.875), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.049 ±(99.9%) 97.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.049, 58.678), stdev = 25.315
[info]   CI (99.9%): [≈ 0, 111.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 15.000), stdev = 5.431
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9646.305 ops/s
[info] # Warmup Iteration   2: 93248.149 ops/s
[info] # Warmup Iteration   3: 147578.158 ops/s
[info] # Warmup Iteration   4: 153490.420 ops/s
[info] # Warmup Iteration   5: 159489.678 ops/s
[info] Iteration   1: 158877.726 ops/s
[info]                  ·gc.alloc.rate:                   763.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              7565.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13098.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 158604.945 ops/s
[info]                  ·gc.alloc.rate:               753.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          7470.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6567.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 158913.113 ops/s
[info]                  ·gc.alloc.rate:               752.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          7454.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6554.713 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 159587.724 ops/s
[info]                  ·gc.alloc.rate:               753.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          7427.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6536.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 159282.112 ops/s
[info]                  ·gc.alloc.rate:                   755.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              7459.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6549.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   159053.124 ±(99.9%) 1478.197 ops/s [Average]
[info]   (min, avg, max) = (158604.945, 159053.124, 159587.724), stdev = 383.883
[info]   CI (99.9%): [157574.927, 160531.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   755.628 ±(99.9%) 17.718 MB/sec [Average]
[info]   (min, avg, max) = (752.891, 755.628, 763.707), stdev = 4.601
[info]   CI (99.9%): [737.910, 773.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7475.434 ±(99.9%) 202.758 B/op [Average]
[info]   (min, avg, max) = (7427.044, 7475.434, 7565.107), stdev = 52.656
[info]   CI (99.9%): [7272.676, 7678.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   794.469 ±(99.9%) 1136.316 MB/sec [Average]
[info]   (min, avg, max) = (661.966, 794.469, 1322.355), stdev = 295.098
[info]   CI (99.9%): [≈ 0, 1930.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7861.348 ±(99.9%) 11274.416 B/op [Average]
[info]   (min, avg, max) = (6536.479, 7861.348, 13098.951), stdev = 2927.930
[info]   CI (99.9%): [≈ 0, 19135.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.193 ±(99.9%) 1.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.193, 0.689), stdev = 0.302
[info]   CI (99.9%): [≈ 0, 1.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29089.532 ops/s
[info] # Warmup Iteration   2: 285580.955 ops/s
[info] # Warmup Iteration   3: 318380.838 ops/s
[info] # Warmup Iteration   4: 350265.720 ops/s
[info] # Warmup Iteration   5: 351395.659 ops/s
[info] Iteration   1: 349865.014 ops/s
[info]                  ·gc.alloc.rate:                   1477.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              6642.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 349446.250 ops/s
[info]                  ·gc.alloc.rate:                   1470.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              6623.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6029.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 349903.082 ops/s
[info]                  ·gc.alloc.rate:                   1485.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              6682.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9040.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 350461.276 ops/s
[info]                  ·gc.alloc.rate:                   1471.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              6607.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6001.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 350289.763 ops/s
[info]                  ·gc.alloc.rate:                   1486.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              6675.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5997.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   349993.077 ±(99.9%) 1529.089 ops/s [Average]
[info]   (min, avg, max) = (349446.250, 349993.077, 350461.276), stdev = 397.100
[info]   CI (99.9%): [348463.988, 351522.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1478.193 ±(99.9%) 28.879 MB/sec [Average]
[info]   (min, avg, max) = (1470.740, 1478.193, 1486.348), stdev = 7.500
[info]   CI (99.9%): [1449.314, 1507.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6646.161 ±(99.9%) 123.996 B/op [Average]
[info]   (min, avg, max) = (6607.240, 6646.161, 6682.036), stdev = 32.201
[info]   CI (99.9%): [6522.165, 6770.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1471.737 ±(99.9%) 1158.122 MB/sec [Average]
[info]   (min, avg, max) = (1335.537, 1471.737, 2009.748), stdev = 300.761
[info]   CI (99.9%): [313.615, 2629.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6617.420 ±(99.9%) 5215.390 B/op [Average]
[info]   (min, avg, max) = (5997.814, 6617.420, 9040.172), stdev = 1354.420
[info]   CI (99.9%): [1402.030, 11832.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.725 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.824, 3.947), stdev = 1.746
[info]   CI (99.9%): [≈ 0, 7.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.706 ±(99.9%) 30.248 B/op [Average]
[info]   (min, avg, max) = (0.035, 3.706, 17.756), stdev = 7.855
[info]   CI (99.9%): [≈ 0, 33.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 840.454 ops/s
[info] # Warmup Iteration   2: 18258.592 ops/s
[info] # Warmup Iteration   3: 46211.619 ops/s
[info] # Warmup Iteration   4: 52478.619 ops/s
[info] # Warmup Iteration   5: 42898.071 ops/s
[info] Iteration   1: 43322.541 ops/s
[info]                  ·gc.alloc.rate:                   1960.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              71215.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72817.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 44310.563 ops/s
[info]                  ·gc.alloc.rate:                   1967.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              69858.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71146.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.963 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 44675.493 ops/s
[info]                  ·gc.alloc.rate:                   1989.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              70080.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70566.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 44755.836 ops/s
[info]                  ·gc.alloc.rate:                   1956.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              68810.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47003.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44732.379 ops/s
[info]                  ·gc.alloc.rate:                   1968.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              69243.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70629.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   44359.362 ±(99.9%) 2337.226 ops/s [Average]
[info]   (min, avg, max) = (43322.541, 44359.362, 44755.836), stdev = 606.970
[info]   CI (99.9%): [42022.136, 46696.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1968.388 ±(99.9%) 49.337 MB/sec [Average]
[info]   (min, avg, max) = (1956.685, 1968.388, 1989.673), stdev = 12.813
[info]   CI (99.9%): [1919.050, 2017.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69841.866 ±(99.9%) 3532.954 B/op [Average]
[info]   (min, avg, max) = (68810.612, 69841.866, 71215.878), stdev = 917.497
[info]   CI (99.9%): [66308.912, 73374.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.073 ±(99.9%) 1150.552 MB/sec [Average]
[info]   (min, avg, max) = (1336.581, 1871.073, 2007.453), stdev = 298.795
[info]   CI (99.9%): [720.521, 3021.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66432.625 ±(99.9%) 41969.321 B/op [Average]
[info]   (min, avg, max) = (47003.435, 66432.625, 72817.106), stdev = 10899.299
[info]   CI (99.9%): [24463.303, 108401.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.554 ±(99.9%) 3.219 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.554, 1.998), stdev = 0.836
[info]   CI (99.9%): [≈ 0, 3.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.978 ±(99.9%) 117.068 B/op [Average]
[info]   (min, avg, max) = (1.464, 19.978, 72.599), stdev = 30.402
[info]   CI (99.9%): [≈ 0, 137.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33518.384 ops/s
[info] # Warmup Iteration   2: 210504.999 ops/s
[info] # Warmup Iteration   3: 234537.844 ops/s
[info] # Warmup Iteration   4: 258737.334 ops/s
[info] # Warmup Iteration   5: 258913.536 ops/s
[info] Iteration   1: 255086.815 ops/s
[info]                  ·gc.alloc.rate:               910.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          5616.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4091.553 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 256572.970 ops/s
[info]                  ·gc.alloc.rate:                   921.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              5649.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8143.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 257492.345 ops/s
[info]                  ·gc.alloc.rate:               909.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          5560.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4061.455 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 257749.709 ops/s
[info]                  ·gc.alloc.rate:                   909.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4065.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 258100.122 ops/s
[info]                  ·gc.alloc.rate:               925.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          5643.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8128.370 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   257000.392 ±(99.9%) 4659.663 ops/s [Average]
[info]   (min, avg, max) = (255086.815, 257000.392, 258100.122), stdev = 1210.100
[info]   CI (99.9%): [252340.729, 261660.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   915.392 ±(99.9%) 29.126 MB/sec [Average]
[info]   (min, avg, max) = (909.349, 915.392, 925.521), stdev = 7.564
[info]   CI (99.9%): [886.266, 944.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5604.882 ±(99.9%) 175.917 B/op [Average]
[info]   (min, avg, max) = (5552.693, 5604.882, 5649.985), stdev = 45.685
[info]   CI (99.9%): [5428.966, 5780.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   930.993 ±(99.9%) 1404.736 MB/sec [Average]
[info]   (min, avg, max) = (663.388, 930.993, 1332.952), stdev = 364.806
[info]   CI (99.9%): [≈ 0, 2335.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5698.206 ±(99.9%) 8569.956 B/op [Average]
[info]   (min, avg, max) = (4061.455, 5698.206, 8143.986), stdev = 2225.590
[info]   CI (99.9%): [≈ 0, 14268.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.128), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173249.732 ops/s
[info] # Warmup Iteration   2: 613380.881 ops/s
[info] # Warmup Iteration   3: 663764.376 ops/s
[info] # Warmup Iteration   4: 670824.260 ops/s
[info] # Warmup Iteration   5: 669381.612 ops/s
[info] Iteration   1: 667723.804 ops/s
[info]                  ·gc.alloc.rate:                   752.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1774.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1574.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 662712.997 ops/s
[info]                  ·gc.alloc.rate:               748.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          1777.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1588.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 670322.694 ops/s
[info]                  ·gc.alloc.rate:                   747.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              1754.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1570.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 674485.286 ops/s
[info]                  ·gc.alloc.rate:               760.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          1774.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1562.192 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 649125.110 ops/s
[info]                  ·gc.alloc.rate:                   748.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              1814.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3246.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   664873.978 ±(99.9%) 37673.585 ops/s [Average]
[info]   (min, avg, max) = (649125.110, 664873.978, 674485.286), stdev = 9783.710
[info]   CI (99.9%): [627200.393, 702547.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   751.556 ±(99.9%) 21.075 MB/sec [Average]
[info]   (min, avg, max) = (747.506, 751.556, 760.677), stdev = 5.473
[info]   CI (99.9%): [730.481, 772.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1778.989 ±(99.9%) 83.759 B/op [Average]
[info]   (min, avg, max) = (1754.282, 1778.989, 1814.174), stdev = 21.752
[info]   CI (99.9%): [1695.230, 1862.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.969 ±(99.9%) 1153.962 MB/sec [Average]
[info]   (min, avg, max) = (668.161, 802.969, 1339.052), stdev = 299.680
[info]   CI (99.9%): [≈ 0, 1956.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1908.447 ±(99.9%) 2880.321 B/op [Average]
[info]   (min, avg, max) = (1562.192, 1908.447, 3246.420), stdev = 748.010
[info]   CI (99.9%): [≈ 0, 4788.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.052), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.123), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223799.309 ops/s
[info] # Warmup Iteration   2: 729567.596 ops/s
[info] # Warmup Iteration   3: 745277.716 ops/s
[info] # Warmup Iteration   4: 746668.919 ops/s
[info] # Warmup Iteration   5: 747046.345 ops/s
[info] Iteration   1: 747847.152 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 748530.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 744514.734 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 749465.316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 746183.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   747308.216 ±(99.9%) 7581.347 ops/s [Average]
[info]   (min, avg, max) = (744514.734, 747308.216, 749465.316), stdev = 1968.852
[info]   CI (99.9%): [739726.869, 754889.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4243.162 ops/s
[info] # Warmup Iteration   2: 50681.340 ops/s
[info] # Warmup Iteration   3: 80159.340 ops/s
[info] # Warmup Iteration   4: 79793.362 ops/s
[info] # Warmup Iteration   5: 79060.035 ops/s
[info] Iteration   1: 86782.634 ops/s
[info]                  ·gc.alloc.rate:                   1872.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              33951.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36244.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 90046.083 ops/s
[info]                  ·gc.alloc.rate:                   1806.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              31564.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23286.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 89451.545 ops/s
[info]                  ·gc.alloc.rate:                   1804.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              31744.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35127.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 89987.864 ops/s
[info]                  ·gc.alloc.rate:                   1822.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              31870.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34928.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.456 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 89644.718 ops/s
[info]                  ·gc.alloc.rate:                   1800.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              31596.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23402.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   89182.569 ±(99.9%) 5251.498 ops/s [Average]
[info]   (min, avg, max) = (86782.634, 89182.569, 90046.083), stdev = 1363.797
[info]   CI (99.9%): [83931.071, 94434.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1821.022 ±(99.9%) 114.425 MB/sec [Average]
[info]   (min, avg, max) = (1800.546, 1821.022, 1872.082), stdev = 29.716
[info]   CI (99.9%): [1706.597, 1935.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32145.565 ±(99.9%) 3914.823 B/op [Average]
[info]   (min, avg, max) = (31564.990, 32145.565, 33951.058), stdev = 1016.667
[info]   CI (99.9%): [28230.743, 36060.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1731.625 ±(99.9%) 1401.254 MB/sec [Average]
[info]   (min, avg, max) = (1332.387, 1731.625, 1998.564), stdev = 363.901
[info]   CI (99.9%): [330.371, 3132.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30598.097 ±(99.9%) 25570.596 B/op [Average]
[info]   (min, avg, max) = (23286.682, 30598.097, 36244.864), stdev = 6640.603
[info]   CI (99.9%): [5027.501, 56168.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.185 ±(99.9%) 8.480 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.185, 5.112), stdev = 2.202
[info]   CI (99.9%): [≈ 0, 9.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.384 ±(99.9%) 153.974 B/op [Average]
[info]   (min, avg, max) = (0.365, 21.384, 92.702), stdev = 39.987
[info]   CI (99.9%): [≈ 0, 175.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13152.216 ops/s
[info] # Warmup Iteration   2: 81508.992 ops/s
[info] # Warmup Iteration   3: 121997.521 ops/s
[info] # Warmup Iteration   4: 122202.934 ops/s
[info] # Warmup Iteration   5: 126680.452 ops/s
[info] Iteration   1: 115227.198 ops/s
[info]                  ·gc.alloc.rate:                   2221.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              30331.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36377.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.527 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 123686.975 ops/s
[info]                  ·gc.alloc.rate:                   1998.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              25425.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25360.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 123762.461 ops/s
[info]                  ·gc.alloc.rate:                   2006.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              25508.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25312.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 123248.615 ops/s
[info]                  ·gc.alloc.rate:               1997.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          25505.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16944.621 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 123774.889 ops/s
[info]                  ·gc.alloc.rate:                   1999.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              25425.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25360.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   121940.028 ±(99.9%) 14473.798 ops/s [Average]
[info]   (min, avg, max) = (115227.198, 121940.028, 123774.889), stdev = 3758.799
[info]   CI (99.9%): [107466.229, 136413.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2044.609 ±(99.9%) 380.116 MB/sec [Average]
[info]   (min, avg, max) = (1997.383, 2044.609, 2221.080), stdev = 98.715
[info]   CI (99.9%): [1664.493, 2424.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26439.253 ±(99.9%) 8379.309 B/op [Average]
[info]   (min, avg, max) = (25425.053, 26439.253, 30331.248), stdev = 2176.080
[info]   CI (99.9%): [18059.944, 34818.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1993.958 ±(99.9%) 1820.083 MB/sec [Average]
[info]   (min, avg, max) = (1326.948, 1993.958, 2663.849), stdev = 472.670
[info]   CI (99.9%): [173.875, 3814.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25871.238 ±(99.9%) 26601.830 B/op [Average]
[info]   (min, avg, max) = (16944.621, 25871.238, 36377.738), stdev = 6908.411
[info]   CI (99.9%): [≈ 0, 52473.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.556 ±(99.9%) 8.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.556, 4.505), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 9.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.636 ±(99.9%) 107.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.636, 61.527), stdev = 28.026
[info]   CI (99.9%): [≈ 0, 128.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.336
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19270.827 ops/s
[info] # Warmup Iteration   2: 135390.386 ops/s
[info] # Warmup Iteration   3: 198908.791 ops/s
[info] # Warmup Iteration   4: 208350.448 ops/s
[info] # Warmup Iteration   5: 208965.766 ops/s
[info] Iteration   1: 209236.713 ops/s
[info]                  ·gc.alloc.rate:                   873.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              6569.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4963.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 207699.699 ops/s
[info]                  ·gc.alloc.rate:               896.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          6793.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10019.898 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 209204.924 ops/s
[info]                  ·gc.alloc.rate:               878.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          6607.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4984.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 207977.246 ops/s
[info]                  ·gc.alloc.rate:               872.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          6603.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5013.287 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 208250.814 ops/s
[info]                  ·gc.alloc.rate:               870.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          6577.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5016.881 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   208473.879 ±(99.9%) 2731.041 ops/s [Average]
[info]   (min, avg, max) = (207699.699, 208473.879, 209236.713), stdev = 709.243
[info]   CI (99.9%): [205742.839, 211204.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   878.355 ±(99.9%) 40.940 MB/sec [Average]
[info]   (min, avg, max) = (870.382, 878.355, 896.635), stdev = 10.632
[info]   CI (99.9%): [837.414, 919.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6630.447 ±(99.9%) 356.456 B/op [Average]
[info]   (min, avg, max) = (6569.869, 6630.447, 6793.481), stdev = 92.570
[info]   CI (99.9%): [6273.991, 6986.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   794.283 ±(99.9%) 1136.979 MB/sec [Average]
[info]   (min, avg, max) = (659.983, 794.283, 1322.472), stdev = 295.270
[info]   CI (99.9%): [≈ 0, 1931.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5999.450 ±(99.9%) 8654.733 B/op [Average]
[info]   (min, avg, max) = (4963.178, 5999.450, 10019.898), stdev = 2247.607
[info]   CI (99.9%): [≈ 0, 14654.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71197.019 ops/s
[info] # Warmup Iteration   2: 192171.813 ops/s
[info] # Warmup Iteration   3: 262657.588 ops/s
[info] # Warmup Iteration   4: 286887.848 ops/s
[info] # Warmup Iteration   5: 285177.335 ops/s
[info] Iteration   1: 283506.779 ops/s
[info]                  ·gc.alloc.rate:                   1046.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              5809.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3709.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 283996.431 ops/s
[info]                  ·gc.alloc.rate:                   1047.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              5807.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7405.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 284465.946 ops/s
[info]                  ·gc.alloc.rate:               1029.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          5696.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3696.620 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 284294.707 ops/s
[info]                  ·gc.alloc.rate:                   1059.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              5865.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7397.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 273561.209 ops/s
[info]                  ·gc.alloc.rate:                   1152.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              6632.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7695.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   281965.015 ±(99.9%) 18144.029 ops/s [Average]
[info]   (min, avg, max) = (273561.209, 281965.015, 284465.946), stdev = 4711.947
[info]   CI (99.9%): [263820.986, 300109.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1067.262 ±(99.9%) 188.561 MB/sec [Average]
[info]   (min, avg, max) = (1029.700, 1067.262, 1152.781), stdev = 48.969
[info]   CI (99.9%): [878.701, 1255.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5962.206 ±(99.9%) 1461.192 B/op [Average]
[info]   (min, avg, max) = (5696.870, 5962.206, 6632.170), stdev = 379.467
[info]   CI (99.9%): [4501.013, 7423.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1069.299 ±(99.9%) 1410.132 MB/sec [Average]
[info]   (min, avg, max) = (668.122, 1069.299, 1337.652), stdev = 366.207
[info]   CI (99.9%): [≈ 0, 2479.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5980.922 ±(99.9%) 8021.065 B/op [Average]
[info]   (min, avg, max) = (3696.620, 5980.922, 7695.774), stdev = 2083.045
[info]   CI (99.9%): [≈ 0, 14001.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.730 ±(99.9%) 6.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.730, 3.573), stdev = 1.589
[info]   CI (99.9%): [≈ 0, 6.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.195 ±(99.9%) 35.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.195, 20.555), stdev = 9.146
[info]   CI (99.9%): [≈ 0, 39.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5822.898 ops/s
[info] # Warmup Iteration   2: 47094.535 ops/s
[info] # Warmup Iteration   3: 100545.420 ops/s
[info] # Warmup Iteration   4: 81015.862 ops/s
[info] # Warmup Iteration   5: 100260.623 ops/s
[info] Iteration   1: 101453.984 ops/s
[info]                  ·gc.alloc.rate:                   3261.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              50596.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2648.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41086.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.615 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 101626.133 ops/s
[info]                  ·gc.alloc.rate:                   3268.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              50610.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3327.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51514.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.579 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 101624.991 ops/s
[info]                  ·gc.alloc.rate:               3306.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          51199.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3343.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51783.505 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 101625.604 ops/s
[info]                  ·gc.alloc.rate:                   3333.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              51620.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52052.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 99990.761 ops/s
[info]                  ·gc.alloc.rate:                   3254.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              51220.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42487.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   101264.295 ±(99.9%) 2756.268 ops/s [Average]
[info]   (min, avg, max) = (99990.761, 101264.295, 101626.133), stdev = 715.794
[info]   CI (99.9%): [98508.027, 104020.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3285.013 ±(99.9%) 129.832 MB/sec [Average]
[info]   (min, avg, max) = (3254.787, 3285.013, 3333.838), stdev = 33.717
[info]   CI (99.9%): [3155.181, 3414.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51049.604 ±(99.9%) 1694.756 B/op [Average]
[info]   (min, avg, max) = (50596.760, 51049.604, 51620.203), stdev = 440.123
[info]   CI (99.9%): [49354.848, 52744.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3076.227 ±(99.9%) 1415.554 MB/sec [Average]
[info]   (min, avg, max) = (2648.623, 3076.227, 3361.774), stdev = 367.615
[info]   CI (99.9%): [1660.673, 4491.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47785.180 ±(99.9%) 21181.677 B/op [Average]
[info]   (min, avg, max) = (41086.992, 47785.180, 52052.757), stdev = 5500.814
[info]   CI (99.9%): [26603.503, 68966.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.167), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.969 ±(99.9%) 4.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.969, 2.579), stdev = 1.093
[info]   CI (99.9%): [≈ 0, 5.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68748.874 ops/s
[info] # Warmup Iteration   2: 218072.498 ops/s
[info] # Warmup Iteration   3: 249880.466 ops/s
[info] # Warmup Iteration   4: 248210.658 ops/s
[info] # Warmup Iteration   5: 249697.050 ops/s
[info] Iteration   1: 251236.366 ops/s
[info]                  ·gc.alloc.rate:                   1705.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              10685.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8354.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 251584.196 ops/s
[info]                  ·gc.alloc.rate:                   1719.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              10757.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12510.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 252863.615 ops/s
[info]                  ·gc.alloc.rate:                   1704.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              10606.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8280.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 252486.407 ops/s
[info]                  ·gc.alloc.rate:                   1713.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12432.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 253233.679 ops/s
[info]                  ·gc.alloc.rate:               1703.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          10590.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8267.783 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   252280.853 ±(99.9%) 3259.443 ops/s [Average]
[info]   (min, avg, max) = (251236.366, 252280.853, 253233.679), stdev = 846.467
[info]   CI (99.9%): [249021.410, 255540.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1709.469 ±(99.9%) 26.598 MB/sec [Average]
[info]   (min, avg, max) = (1703.966, 1709.469, 1719.595), stdev = 6.907
[info]   CI (99.9%): [1682.872, 1736.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10664.217 ±(99.9%) 259.317 B/op [Average]
[info]   (min, avg, max) = (10590.288, 10664.217, 10757.294), stdev = 67.344
[info]   CI (99.9%): [10404.900, 10923.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1597.778 ±(99.9%) 1404.263 MB/sec [Average]
[info]   (min, avg, max) = (1330.277, 1597.778, 1999.801), stdev = 364.683
[info]   CI (99.9%): [193.515, 3002.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9969.018 ±(99.9%) 8797.800 B/op [Average]
[info]   (min, avg, max) = (8267.783, 9969.018, 12510.185), stdev = 2284.761
[info]   CI (99.9%): [1171.218, 18766.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.860 ±(99.9%) 7.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.860, 4.176), stdev = 1.854
[info]   CI (99.9%): [≈ 0, 7.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.381 ±(99.9%) 44.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.381, 26.127), stdev = 11.598
[info]   CI (99.9%): [≈ 0, 50.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145320.522 ops/s
[info] # Warmup Iteration   2: 712623.397 ops/s
[info] # Warmup Iteration   3: 783259.074 ops/s
[info] # Warmup Iteration   4: 781944.283 ops/s
[info] # Warmup Iteration   5: 779539.691 ops/s
[info] Iteration   1: 781575.458 ops/s
[info]                  ·gc.alloc.rate:               425.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1030.207 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 772917.684 ops/s
[info]                  ·gc.alloc.rate:                   422.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              859.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1344.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 783576.811 ops/s
[info]                  ·gc.alloc.rate:      414.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 782388.903 ops/s
[info]                  ·gc.alloc.rate:               437.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1327.934 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 777078.486 ops/s
[info]                  ·gc.alloc.rate:      410.776 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   779507.468 ±(99.9%) 17054.485 ops/s [Average]
[info]   (min, avg, max) = (772917.684, 779507.468, 783576.811), stdev = 4428.996
[info]   CI (99.9%): [762452.983, 796561.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   421.968 ±(99.9%) 39.722 MB/sec [Average]
[info]   (min, avg, max) = (410.776, 421.968, 437.208), stdev = 10.316
[info]   CI (99.9%): [382.246, 461.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   851.888 ±(99.9%) 77.829 B/op [Average]
[info]   (min, avg, max) = (832.001, 851.888, 879.494), stdev = 20.212
[info]   CI (99.9%): [774.059, 929.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.404 ±(99.9%) 1308.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.404, 660.270), stdev = 339.936
[info]   CI (99.9%): [≈ 0, 1675.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   740.477 ±(99.9%) 2647.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 740.477, 1344.243), stdev = 687.422
[info]   CI (99.9%): [≈ 0, 3387.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 448614.814 ops/s
[info] # Warmup Iteration   2: 812042.303 ops/s
[info] # Warmup Iteration   3: 887776.168 ops/s
[info] # Warmup Iteration   4: 891369.468 ops/s
[info] # Warmup Iteration   5: 897898.729 ops/s
[info] Iteration   1: 880487.000 ops/s
[info]                  ·gc.alloc.rate:      465.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 894506.520 ops/s
[info]                  ·gc.alloc.rate:               485.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          853.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1174.996 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 892927.258 ops/s
[info]                  ·gc.alloc.rate:               490.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          863.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1177.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 898225.761 ops/s
[info]                  ·gc.alloc.rate:      474.872 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 883896.107 ops/s
[info]                  ·gc.alloc.rate:                   489.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1190.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   890008.529 ±(99.9%) 28834.549 ops/s [Average]
[info]   (min, avg, max) = (880487.000, 890008.529, 898225.761), stdev = 7488.241
[info]   CI (99.9%): [861173.980, 918843.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   481.137 ±(99.9%) 41.258 MB/sec [Average]
[info]   (min, avg, max) = (465.486, 481.137, 490.055), stdev = 10.715
[info]   CI (99.9%): [439.879, 522.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   850.800 ±(99.9%) 70.798 B/op [Average]
[info]   (min, avg, max) = (832.000, 850.800, 872.442), stdev = 18.386
[info]   CI (99.9%): [780.002, 921.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.836 ±(99.9%) 1408.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.836, 668.495), stdev = 365.912
[info]   CI (99.9%): [≈ 0, 1809.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   708.478 ±(99.9%) 2490.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 708.478, 1190.289), stdev = 646.776
[info]   CI (99.9%): [≈ 0, 3198.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 396540.833 ops/s
[info] # Warmup Iteration   2: 801578.843 ops/s
[info] # Warmup Iteration   3: 943052.575 ops/s
[info] # Warmup Iteration   4: 941733.517 ops/s
[info] # Warmup Iteration   5: 938491.865 ops/s
[info] Iteration   1: 939849.284 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 938294.291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 929256.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 942462.038 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 937559.914 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   937484.372 ±(99.9%) 19130.791 ops/s [Average]
[info]   (min, avg, max) = (929256.333, 937484.372, 942462.038), stdev = 4968.206
[info]   CI (99.9%): [918353.581, 956615.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6443.124 ops/s
[info] # Warmup Iteration   2: 22192.853 ops/s
[info] # Warmup Iteration   3: 39420.013 ops/s
[info] # Warmup Iteration   4: 39165.752 ops/s
[info] # Warmup Iteration   5: 35295.009 ops/s
[info] Iteration   1: 37414.769 ops/s
[info]                  ·gc.alloc.rate:                   1879.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              79067.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83754.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 40057.535 ops/s
[info]                  ·gc.alloc.rate:                   1872.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              73559.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52057.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 40165.548 ops/s
[info]                  ·gc.alloc.rate:                   1892.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              74156.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77784.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 40205.936 ops/s
[info]                  ·gc.alloc.rate:                   1888.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              73930.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77733.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 40205.131 ops/s
[info]                  ·gc.alloc.rate:                   1881.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              73659.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77837.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   39609.784 ±(99.9%) 4730.686 ops/s [Average]
[info]   (min, avg, max) = (37414.769, 39609.784, 40205.936), stdev = 1228.544
[info]   CI (99.9%): [34879.098, 44340.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1882.958 ±(99.9%) 30.471 MB/sec [Average]
[info]   (min, avg, max) = (1872.280, 1882.958, 1892.520), stdev = 7.913
[info]   CI (99.9%): [1852.486, 1913.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74874.694 ±(99.9%) 9070.460 B/op [Average]
[info]   (min, avg, max) = (73559.556, 74874.694, 79067.634), stdev = 2355.570
[info]   CI (99.9%): [65804.234, 83945.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1855.078 ±(99.9%) 1141.095 MB/sec [Average]
[info]   (min, avg, max) = (1324.988, 1855.078, 1991.066), stdev = 296.339
[info]   CI (99.9%): [713.984, 2996.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73833.423 ±(99.9%) 47920.529 B/op [Average]
[info]   (min, avg, max) = (52057.150, 73833.423, 83754.941), stdev = 12444.809
[info]   CI (99.9%): [25912.894, 121753.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.227 ±(99.9%) 7.279 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.227, 4.576), stdev = 1.890
[info]   CI (99.9%): [≈ 0, 8.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.744 ±(99.9%) 307.706 B/op [Average]
[info]   (min, avg, max) = (1.630, 50.744, 192.476), stdev = 79.910
[info]   CI (99.9%): [≈ 0, 358.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.400, 21.000), stdev = 5.983
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47957.248 ops/s
[info] # Warmup Iteration   2: 419826.098 ops/s
[info] # Warmup Iteration   3: 1038626.976 ops/s
[info] # Warmup Iteration   4: 1111752.753 ops/s
[info] # Warmup Iteration   5: 1124368.111 ops/s
[info] Iteration   1: 1137980.206 ops/s
[info]                  ·gc.alloc.rate:                   2620.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              3623.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3677.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 1132186.872 ops/s
[info]                  ·gc.alloc.rate:                   2586.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              3595.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3685.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1148880.902 ops/s
[info]                  ·gc.alloc.rate:                   2637.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              3612.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3637.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1148755.164 ops/s
[info]                  ·gc.alloc.rate:               2650.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          3631.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3650.741 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1150149.304 ops/s
[info]                  ·gc.alloc.rate:                   2640.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              3612.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2746.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   1143590.490 ±(99.9%) 30996.975 ops/s [Average]
[info]   (min, avg, max) = (1132186.872, 1143590.490, 1150149.304), stdev = 8049.816
[info]   CI (99.9%): [1112593.515, 1174587.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2627.262 ±(99.9%) 96.520 MB/sec [Average]
[info]   (min, avg, max) = (2586.756, 2627.262, 2650.966), stdev = 25.066
[info]   CI (99.9%): [2530.742, 2723.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3615.275 ±(99.9%) 52.267 B/op [Average]
[info]   (min, avg, max) = (3595.841, 3615.275, 3631.860), stdev = 13.574
[info]   CI (99.9%): [3563.008, 3667.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2527.772 ±(99.9%) 1121.512 MB/sec [Average]
[info]   (min, avg, max) = (2006.839, 2527.772, 2664.748), stdev = 291.253
[info]   CI (99.9%): [1406.260, 3649.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3479.536 ±(99.9%) 1580.539 B/op [Average]
[info]   (min, avg, max) = (2746.111, 3479.536, 3685.537), stdev = 410.461
[info]   CI (99.9%): [1898.997, 5060.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.981 ±(99.9%) 7.960 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.981, 4.678), stdev = 2.067
[info]   CI (99.9%): [≈ 0, 8.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.357 ±(99.9%) 11.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.357, 6.467), stdev = 2.858
[info]   CI (99.9%): [≈ 0, 12.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 11.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45385.769 ops/s
[info] # Warmup Iteration   2: 1182389.489 ops/s
[info] # Warmup Iteration   3: 1811389.246 ops/s
[info] # Warmup Iteration   4: 1885688.446 ops/s
[info] # Warmup Iteration   5: 1866554.690 ops/s
[info] Iteration   1: 1886245.207 ops/s
[info]                  ·gc.alloc.rate:                   1186.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              990.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1875565.731 ops/s
[info]                  ·gc.alloc.rate:               1169.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          981.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1117.402 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1871464.084 ops/s
[info]                  ·gc.alloc.rate:                   1168.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              982.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1122.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1877709.748 ops/s
[info]                  ·gc.alloc.rate:                   1151.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              965.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1869574.609 ops/s
[info]                  ·gc.alloc.rate:                   1160.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1876111.876 ±(99.9%) 25093.801 ops/s [Average]
[info]   (min, avg, max) = (1869574.609, 1876111.876, 1886245.207), stdev = 6516.780
[info]   CI (99.9%): [1851018.075, 1901205.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1167.415 ±(99.9%) 49.507 MB/sec [Average]
[info]   (min, avg, max) = (1151.867, 1167.415, 1186.544), stdev = 12.857
[info]   CI (99.9%): [1117.907, 1216.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   979.154 ±(99.9%) 35.046 B/op [Average]
[info]   (min, avg, max) = (965.269, 979.154, 990.052), stdev = 9.101
[info]   CI (99.9%): [944.108, 1014.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.405 ±(99.9%) 1146.242 MB/sec [Average]
[info]   (min, avg, max) = (667.943, 1200.405, 1338.428), stdev = 297.675
[info]   CI (99.9%): [54.163, 2346.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1006.949 ±(99.9%) 962.986 B/op [Average]
[info]   (min, avg, max) = (559.739, 1006.949, 1126.601), stdev = 250.084
[info]   CI (99.9%): [43.964, 1969.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.250 ±(99.9%) 1.928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.145), stdev = 0.501
[info]   CI (99.9%): [≈ 0, 2.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 1.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 0.964), stdev = 0.422
[info]   CI (99.9%): [≈ 0, 1.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2641235.601 ops/s
[info] # Warmup Iteration   2: 8060311.503 ops/s
[info] # Warmup Iteration   3: 9685168.240 ops/s
[info] # Warmup Iteration   4: 9735141.165 ops/s
[info] # Warmup Iteration   5: 9768789.549 ops/s
[info] Iteration   1: 9815267.235 ops/s
[info]                  ·gc.alloc.rate:      299.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9675388.332 ops/s
[info]                  ·gc.alloc.rate:               323.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          52.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9753068.399 ops/s
[info]                  ·gc.alloc.rate:                   308.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9815851.009 ops/s
[info]                  ·gc.alloc.rate:      299.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9774683.973 ops/s
[info]                  ·gc.alloc.rate:                   311.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   9766851.789 ±(99.9%) 222554.793 ops/s [Average]
[info]   (min, avg, max) = (9675388.332, 9766851.789, 9815851.009), stdev = 57796.773
[info]   CI (99.9%): [9544296.997, 9989406.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   308.516 ±(99.9%) 38.358 MB/sec [Average]
[info]   (min, avg, max) = (299.375, 308.516, 323.409), stdev = 9.961
[info]   CI (99.9%): [270.158, 346.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.713 ±(99.9%) 7.288 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.713, 52.581), stdev = 1.893
[info]   CI (99.9%): [42.425, 57.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.609 ±(99.9%) 1215.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.609, 669.494), stdev = 315.741
[info]   CI (99.9%): [≈ 0, 1554.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   54.717 ±(99.9%) 196.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.717, 107.798), stdev = 50.974
[info]   CI (99.9%): [≈ 0, 251.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1933.358 ops/s
[info] # Warmup Iteration   2: 198712.054 ops/s
[info] # Warmup Iteration   3: 480688.917 ops/s
[info] # Warmup Iteration   4: 485432.719 ops/s
[info] # Warmup Iteration   5: 497616.970 ops/s
[info] Iteration   1: 508072.815 ops/s
[info]                  ·gc.alloc.rate:                   2210.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              6846.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6204.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 510608.088 ops/s
[info]                  ·gc.alloc.rate:                   2224.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              6855.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6176.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 509035.098 ops/s
[info]                  ·gc.alloc.rate:                   2243.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              6935.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8256.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 513774.247 ops/s
[info]                  ·gc.alloc.rate:               2236.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          6850.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6141.278 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 510290.956 ops/s
[info]                  ·gc.alloc.rate:               2235.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          6893.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6199.419 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   510356.241 ±(99.9%) 8327.970 ops/s [Average]
[info]   (min, avg, max) = (508072.815, 510356.241, 513774.247), stdev = 2162.747
[info]   CI (99.9%): [502028.270, 518684.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2230.052 ±(99.9%) 49.924 MB/sec [Average]
[info]   (min, avg, max) = (2210.382, 2230.052, 2243.737), stdev = 12.965
[info]   CI (99.9%): [2180.128, 2279.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6876.374 ±(99.9%) 147.278 B/op [Average]
[info]   (min, avg, max) = (6846.399, 6876.374, 6935.987), stdev = 38.248
[info]   CI (99.9%): [6729.097, 7023.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.590 ±(99.9%) 1145.595 MB/sec [Average]
[info]   (min, avg, max) = (2003.032, 2138.590, 2670.764), stdev = 297.507
[info]   CI (99.9%): [992.995, 3284.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6595.431 ±(99.9%) 3575.872 B/op [Average]
[info]   (min, avg, max) = (6141.278, 6595.431, 8256.042), stdev = 928.643
[info]   CI (99.9%): [3019.559, 10171.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.618 ±(99.9%) 4.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.618, 2.572), stdev = 1.110
[info]   CI (99.9%): [≈ 0, 4.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.914 ±(99.9%) 13.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.914, 7.965), stdev = 3.440
[info]   CI (99.9%): [≈ 0, 15.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 9.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58414.104 ops/s
[info] # Warmup Iteration   2: 967217.057 ops/s
[info] # Warmup Iteration   3: 1573117.172 ops/s
[info] # Warmup Iteration   4: 1944368.797 ops/s
[info] # Warmup Iteration   5: 1943064.217 ops/s
[info] Iteration   1: 1948424.938 ops/s
[info]                  ·gc.alloc.rate:                   1991.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1954.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1578.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 1913111.637 ops/s
[info]                  ·gc.alloc.rate:                   1948.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1602.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1611.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 1942390.621 ops/s
[info]                  ·gc.alloc.rate:                   1987.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              1610.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1587.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.435 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1976318.694 ops/s
[info]                  ·gc.alloc.rate:                   2021.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1947.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1550.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1978239.817 ops/s
[info]                  ·gc.alloc.rate:                   2022.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1944.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1546.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1951697.141 ±(99.9%) 103626.228 ops/s [Average]
[info]   (min, avg, max) = (1913111.637, 1951697.141, 1978239.817), stdev = 26911.402
[info]   CI (99.9%): [1848070.914, 2055323.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1994.340 ±(99.9%) 116.703 MB/sec [Average]
[info]   (min, avg, max) = (1948.598, 1994.340, 2022.500), stdev = 30.307
[info]   CI (99.9%): [1877.637, 2111.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1608.110 ±(99.9%) 11.736 B/op [Average]
[info]   (min, avg, max) = (1602.841, 1608.110, 1610.691), stdev = 3.048
[info]   CI (99.9%): [1596.374, 1619.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1953.003 ±(99.9%) 26.159 MB/sec [Average]
[info]   (min, avg, max) = (1944.430, 1953.003, 1959.543), stdev = 6.793
[info]   CI (99.9%): [1926.844, 1979.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1575.098 ±(99.9%) 103.533 B/op [Average]
[info]   (min, avg, max) = (1546.981, 1575.098, 1611.476), stdev = 26.887
[info]   CI (99.9%): [1471.565, 1678.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.223 ±(99.9%) 13.011 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.223, 7.942), stdev = 3.379
[info]   CI (99.9%): [≈ 0, 15.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.808 ±(99.9%) 10.547 B/op [Average]
[info]   (min, avg, max) = (0.017, 1.808, 6.435), stdev = 2.739
[info]   CI (99.9%): [≈ 0, 12.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.000, 20.000), stdev = 7.483
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155062.632 ops/s
[info] # Warmup Iteration   2: 2087227.646 ops/s
[info] # Warmup Iteration   3: 2829758.149 ops/s
[info] # Warmup Iteration   4: 3238775.166 ops/s
[info] # Warmup Iteration   5: 3247072.655 ops/s
[info] Iteration   1: 3243606.061 ops/s
[info]                  ·gc.alloc.rate:                   1276.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              619.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     643.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3299904.616 ops/s
[info]                  ·gc.alloc.rate:                   1300.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              620.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3231821.889 ops/s
[info]                  ·gc.alloc.rate:                   1265.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              616.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3243429.964 ops/s
[info]                  ·gc.alloc.rate:               1251.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          607.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 323.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3301275.324 ops/s
[info]                  ·gc.alloc.rate:                   1288.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              614.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   3264007.571 ±(99.9%) 129913.743 ops/s [Average]
[info]   (min, avg, max) = (3231821.889, 3264007.571, 3301275.324), stdev = 33738.187
[info]   CI (99.9%): [3134093.828, 3393921.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1276.715 ±(99.9%) 73.420 MB/sec [Average]
[info]   (min, avg, max) = (1251.954, 1276.715, 1300.603), stdev = 19.067
[info]   CI (99.9%): [1203.295, 1350.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   615.493 ±(99.9%) 19.565 B/op [Average]
[info]   (min, avg, max) = (607.392, 615.493, 620.248), stdev = 5.081
[info]   CI (99.9%): [595.928, 635.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.152 ±(99.9%) 1142.852 MB/sec [Average]
[info]   (min, avg, max) = (667.264, 1198.152, 1335.587), stdev = 296.795
[info]   CI (99.9%): [55.301, 2341.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   577.274 ±(99.9%) 546.225 B/op [Average]
[info]   (min, avg, max) = (323.727, 577.274, 648.488), stdev = 141.853
[info]   CI (99.9%): [31.049, 1123.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.970 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.583), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.278), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 946968.467 ops/s
[info] # Warmup Iteration   2: 7893137.425 ops/s
[info] # Warmup Iteration   3: 8857983.639 ops/s
[info] # Warmup Iteration   4: 9167283.580 ops/s
[info] # Warmup Iteration   5: 9047362.149 ops/s
[info] Iteration   1: 8936034.398 ops/s
[info]                  ·gc.alloc.rate:                   744.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9142959.252 ops/s
[info]                  ·gc.alloc.rate:               757.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          130.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.017 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9197424.013 ops/s
[info]                  ·gc.alloc.rate:                   766.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9196891.805 ops/s
[info]                  ·gc.alloc.rate:                   773.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9075961.097 ops/s
[info]                  ·gc.alloc.rate:                   779.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              135.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   9109854.113 ±(99.9%) 420505.599 ops/s [Average]
[info]   (min, avg, max) = (8936034.398, 9109854.113, 9197424.013), stdev = 109203.969
[info]   CI (99.9%): [8689348.514, 9530359.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   764.102 ±(99.9%) 52.030 MB/sec [Average]
[info]   (min, avg, max) = (744.859, 764.102, 779.099), stdev = 13.512
[info]   CI (99.9%): [712.072, 816.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   131.994 ±(99.9%) 7.206 B/op [Average]
[info]   (min, avg, max) = (130.312, 131.994, 135.085), stdev = 1.871
[info]   CI (99.9%): [124.788, 139.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.275 ±(99.9%) 1153.416 MB/sec [Average]
[info]   (min, avg, max) = (667.805, 802.275, 1338.105), stdev = 299.538
[info]   CI (99.9%): [≈ 0, 1955.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   138.686 ±(99.9%) 200.950 B/op [Average]
[info]   (min, avg, max) = (114.333, 138.686, 232.009), stdev = 52.186
[info]   CI (99.9%): [≈ 0, 339.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.022 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.042), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 870925.906 ops/s
[info] # Warmup Iteration   2: 8604110.917 ops/s
[info] # Warmup Iteration   3: 8993474.911 ops/s
[info] # Warmup Iteration   4: 9051826.013 ops/s
[info] # Warmup Iteration   5: 9042386.428 ops/s
[info] Iteration   1: 9107144.073 ops/s
[info]                  ·gc.alloc.rate:      277.794 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8642592.921 ops/s
[info]                  ·gc.alloc.rate:               275.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93.163 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9068210.820 ops/s
[info]                  ·gc.alloc.rate:      276.562 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9034916.880 ops/s
[info]                  ·gc.alloc.rate:                   290.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9077144.378 ops/s
[info]                  ·gc.alloc.rate:      276.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   8986001.814 ±(99.9%) 745830.780 ops/s [Average]
[info]   (min, avg, max) = (8642592.921, 8986001.814, 9107144.073), stdev = 193689.885
[info]   CI (99.9%): [8240171.035, 9731832.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   279.454 ±(99.9%) 24.418 MB/sec [Average]
[info]   (min, avg, max) = (275.366, 279.454, 290.691), stdev = 6.341
[info]   CI (99.9%): [255.035, 303.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   48.950 ±(99.9%) 5.057 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.950, 50.629), stdev = 1.313
[info]   CI (99.9%): [43.893, 54.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.707 ±(99.9%) 1079.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.707, 511.835), stdev = 280.306
[info]   CI (99.9%): [≈ 0, 1284.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   36.457 ±(99.9%) 192.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.457, 93.163), stdev = 49.941
[info]   CI (99.9%): [≈ 0, 228.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.302
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9697.168 ops/s
[info] # Warmup Iteration   2: 304651.742 ops/s
[info] # Warmup Iteration   3: 466353.935 ops/s
[info] # Warmup Iteration   4: 524005.527 ops/s
[info] # Warmup Iteration   5: 518710.234 ops/s
[info] Iteration   1: 514187.935 ops/s
[info]                  ·gc.alloc.rate:                   2580.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              7894.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6147.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 527981.291 ops/s
[info]                  ·gc.alloc.rate:                   2671.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              7961.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7983.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.869 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 526116.241 ops/s
[info]                  ·gc.alloc.rate:                   2673.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              7998.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8022.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 527169.146 ops/s
[info]                  ·gc.alloc.rate:                   2706.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              8079.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8026.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 528196.815 ops/s
[info]                  ·gc.alloc.rate:               2712.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          8080.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8032.179 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   524730.286 ±(99.9%) 22910.193 ops/s [Average]
[info]   (min, avg, max) = (514187.935, 524730.286, 528196.815), stdev = 5949.704
[info]   CI (99.9%): [501820.093, 547640.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2668.825 ±(99.9%) 203.547 MB/sec [Average]
[info]   (min, avg, max) = (2580.313, 2668.825, 2712.663), stdev = 52.861
[info]   CI (99.9%): [2465.278, 2872.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8002.768 ±(99.9%) 306.064 B/op [Average]
[info]   (min, avg, max) = (7894.873, 8002.768, 8080.164), stdev = 79.484
[info]   CI (99.9%): [7696.704, 8308.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2551.005 ±(99.9%) 1166.520 MB/sec [Average]
[info]   (min, avg, max) = (2009.224, 2551.005, 2696.554), stdev = 302.941
[info]   CI (99.9%): [1384.486, 3717.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7642.571 ±(99.9%) 3219.025 B/op [Average]
[info]   (min, avg, max) = (6147.536, 7642.571, 8032.179), stdev = 835.971
[info]   CI (99.9%): [4423.546, 10861.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.200 ±(99.9%) 1.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.666), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.606 ±(99.9%) 3.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.606, 2.039), stdev = 0.878
[info]   CI (99.9%): [≈ 0, 3.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13595.923 ops/s
[info] # Warmup Iteration   2: 74658.340 ops/s
[info] # Warmup Iteration   3: 95333.608 ops/s
[info] # Warmup Iteration   4: 91443.926 ops/s
[info] # Warmup Iteration   5: 97708.443 ops/s
[info] Iteration   1: 98471.350 ops/s
[info]                  ·gc.alloc.rate:                   2723.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              43520.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2638.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42171.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 98946.338 ops/s
[info]                  ·gc.alloc.rate:                   2724.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              43328.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2642.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42024.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.702 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 99258.566 ops/s
[info]                  ·gc.alloc.rate:                   2736.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              43395.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2637.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41827.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 99287.639 ops/s
[info]                  ·gc.alloc.rate:               2736.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          43382.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2642.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41888.132 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 99057.557 ops/s
[info]                  ·gc.alloc.rate:               2765.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          43937.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2653.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42166.574 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   99004.290 ±(99.9%) 1270.075 ops/s [Average]
[info]   (min, avg, max) = (98471.350, 99004.290, 99287.639), stdev = 329.835
[info]   CI (99.9%): [97734.215, 100274.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2737.320 ±(99.9%) 65.632 MB/sec [Average]
[info]   (min, avg, max) = (2723.376, 2737.320, 2765.471), stdev = 17.044
[info]   CI (99.9%): [2671.688, 2802.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   43512.994 ±(99.9%) 953.572 B/op [Average]
[info]   (min, avg, max) = (43328.982, 43512.994, 43937.785), stdev = 247.640
[info]   CI (99.9%): [42559.421, 44466.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2643.102 ±(99.9%) 24.642 MB/sec [Average]
[info]   (min, avg, max) = (2637.943, 2643.102, 2653.990), stdev = 6.400
[info]   CI (99.9%): [2618.460, 2667.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42015.541 ±(99.9%) 605.263 B/op [Average]
[info]   (min, avg, max) = (41827.276, 42015.541, 42171.304), stdev = 157.185
[info]   CI (99.9%): [41410.277, 42620.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.913 ±(99.9%) 6.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.913, 3.816), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.535 ±(99.9%) 101.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.535, 60.702), stdev = 26.287
[info]   CI (99.9%): [≈ 0, 115.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 14.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14664.946 ops/s
[info] # Warmup Iteration   2: 91441.179 ops/s
[info] # Warmup Iteration   3: 141035.652 ops/s
[info] # Warmup Iteration   4: 143759.454 ops/s
[info] # Warmup Iteration   5: 146561.669 ops/s
[info] Iteration   1: 145865.988 ops/s
[info]                  ·gc.alloc.rate:                   2311.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              24938.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28692.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 145558.477 ops/s
[info]                  ·gc.alloc.rate:                   2272.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              24565.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21647.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 144719.365 ops/s
[info]                  ·gc.alloc.rate:               2286.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          24865.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21816.959 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 145758.312 ops/s
[info]                  ·gc.alloc.rate:                   2315.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              25007.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28987.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 146661.054 ops/s
[info]                  ·gc.alloc.rate:               2317.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          24869.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21663.494 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   145712.639 ±(99.9%) 2678.519 ops/s [Average]
[info]   (min, avg, max) = (144719.365, 145712.639, 146661.054), stdev = 695.603
[info]   CI (99.9%): [143034.120, 148391.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2300.797 ±(99.9%) 77.036 MB/sec [Average]
[info]   (min, avg, max) = (2272.880, 2300.797, 2317.466), stdev = 20.006
[info]   CI (99.9%): [2223.760, 2377.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24849.287 ±(99.9%) 651.247 B/op [Average]
[info]   (min, avg, max) = (24565.290, 24849.287, 25007.808), stdev = 169.127
[info]   CI (99.9%): [24198.040, 25500.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2274.300 ±(99.9%) 1398.022 MB/sec [Average]
[info]   (min, avg, max) = (2002.947, 2274.300, 2684.531), stdev = 363.062
[info]   CI (99.9%): [876.278, 3672.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24561.764 ±(99.9%) 15047.018 B/op [Average]
[info]   (min, avg, max) = (21647.858, 24561.764, 28987.846), stdev = 3907.663
[info]   CI (99.9%): [9514.746, 39608.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.221 ±(99.9%) 1.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 0.833), stdev = 0.355
[info]   CI (99.9%): [≈ 0, 1.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.382 ±(99.9%) 14.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.382, 8.984), stdev = 3.830
[info]   CI (99.9%): [≈ 0, 17.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38145.566 ops/s
[info] # Warmup Iteration   2: 136619.249 ops/s
[info] # Warmup Iteration   3: 164903.162 ops/s
[info] # Warmup Iteration   4: 168248.472 ops/s
[info] # Warmup Iteration   5: 171781.590 ops/s
[info] Iteration   1: 171254.902 ops/s
[info]                  ·gc.alloc.rate:                   2560.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              23529.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18328.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 174263.309 ops/s
[info]                  ·gc.alloc.rate:                   2615.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              23612.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24004.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.642 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 174453.541 ops/s
[info]                  ·gc.alloc.rate:                   2629.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              23718.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23918.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 172976.060 ops/s
[info]                  ·gc.alloc.rate:                   2646.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              24079.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24147.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 174467.681 ops/s
[info]                  ·gc.alloc.rate:                   2669.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              24078.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24025.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   173483.099 ±(99.9%) 5357.046 ops/s [Average]
[info]   (min, avg, max) = (171254.902, 173483.099, 174467.681), stdev = 1391.208
[info]   CI (99.9%): [168126.052, 178840.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2624.110 ±(99.9%) 158.233 MB/sec [Average]
[info]   (min, avg, max) = (2560.292, 2624.110, 2669.692), stdev = 41.093
[info]   CI (99.9%): [2465.878, 2782.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23803.734 ±(99.9%) 1001.872 B/op [Average]
[info]   (min, avg, max) = (23529.409, 23803.734, 24079.296), stdev = 260.183
[info]   CI (99.9%): [22801.862, 24805.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2524.374 ±(99.9%) 1140.916 MB/sec [Average]
[info]   (min, avg, max) = (1994.417, 2524.374, 2663.729), stdev = 296.292
[info]   CI (99.9%): [1383.457, 3665.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22885.064 ±(99.9%) 9812.439 B/op [Average]
[info]   (min, avg, max) = (18328.944, 22885.064, 24147.554), stdev = 2548.259
[info]   CI (99.9%): [13072.624, 32697.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.934 ±(99.9%) 4.924 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.934, 2.729), stdev = 1.279
[info]   CI (99.9%): [≈ 0, 5.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.495 ±(99.9%) 44.671 B/op [Average]
[info]   (min, avg, max) = (0.188, 8.495, 24.642), stdev = 11.601
[info]   CI (99.9%): [≈ 0, 53.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5202.593 ops/s
[info] # Warmup Iteration   2: 44663.460 ops/s
[info] # Warmup Iteration   3: 77123.837 ops/s
[info] # Warmup Iteration   4: 79971.200 ops/s
[info] # Warmup Iteration   5: 86071.652 ops/s
[info] Iteration   1: 85591.017 ops/s
[info]                  ·gc.alloc.rate:                   3628.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              66718.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4004.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73635.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.680 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 85984.143 ops/s
[info]                  ·gc.alloc.rate:                   3665.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              67080.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61314.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 86049.625 ops/s
[info]                  ·gc.alloc.rate:                   3682.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              67333.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61524.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 85394.364 ops/s
[info]                  ·gc.alloc.rate:                   3695.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              68115.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4052.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74682.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 86432.697 ops/s
[info]                  ·gc.alloc.rate:                   3712.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              67597.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61661.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.758 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   85890.369 ±(99.9%) 1568.763 ops/s [Average]
[info]   (min, avg, max) = (85394.364, 85890.369, 86432.697), stdev = 407.403
[info]   CI (99.9%): [84321.606, 87459.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3677.011 ±(99.9%) 124.352 MB/sec [Average]
[info]   (min, avg, max) = (3628.322, 3677.011, 3712.906), stdev = 32.294
[info]   CI (99.9%): [3552.659, 3801.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67369.118 ±(99.9%) 2034.383 B/op [Average]
[info]   (min, avg, max) = (66718.760, 67369.118, 68115.537), stdev = 528.323
[info]   CI (99.9%): [65334.735, 69403.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3631.738 ±(99.9%) 1396.451 MB/sec [Average]
[info]   (min, avg, max) = (3350.508, 3631.738, 4052.159), stdev = 362.654
[info]   CI (99.9%): [2235.286, 5028.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66563.606 ±(99.9%) 26741.666 B/op [Average]
[info]   (min, avg, max) = (61314.066, 66563.606, 74682.557), stdev = 6944.726
[info]   CI (99.9%): [39821.939, 93305.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.993 ±(99.9%) 3.703 B/op [Average]
[info]   (min, avg, max) = (0.381, 0.993, 2.680), stdev = 0.962
[info]   CI (99.9%): [≈ 0, 4.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24642.840 ops/s
[info] # Warmup Iteration   2: 187701.338 ops/s
[info] # Warmup Iteration   3: 240948.667 ops/s
[info] # Warmup Iteration   4: 261198.346 ops/s
[info] # Warmup Iteration   5: 259921.142 ops/s
[info] Iteration   1: 259529.510 ops/s
[info]                  ·gc.alloc.rate:                   1765.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              10706.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8075.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 261153.301 ops/s
[info]                  ·gc.alloc.rate:                   1789.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              10782.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12058.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 259745.542 ops/s
[info]                  ·gc.alloc.rate:                   1787.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12157.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 262468.866 ops/s
[info]                  ·gc.alloc.rate:               1795.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          10762.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8028.760 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 262034.896 ops/s
[info]                  ·gc.alloc.rate:                   1799.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              10806.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12071.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   260986.423 ±(99.9%) 5089.250 ops/s [Average]
[info]   (min, avg, max) = (259529.510, 260986.423, 262468.866), stdev = 1321.662
[info]   CI (99.9%): [255897.173, 266075.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1787.673 ±(99.9%) 50.390 MB/sec [Average]
[info]   (min, avg, max) = (1765.771, 1787.673, 1799.415), stdev = 13.086
[info]   CI (99.9%): [1737.283, 1838.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10777.962 ±(99.9%) 184.623 B/op [Average]
[info]   (min, avg, max) = (10706.201, 10777.962, 10832.557), stdev = 47.946
[info]   CI (99.9%): [10593.339, 10962.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1737.904 ±(99.9%) 1413.750 MB/sec [Average]
[info]   (min, avg, max) = (1331.933, 1737.904, 2010.107), stdev = 367.146
[info]   CI (99.9%): [324.154, 3151.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10478.298 ±(99.9%) 8529.373 B/op [Average]
[info]   (min, avg, max) = (8028.760, 10478.298, 12157.496), stdev = 2215.051
[info]   CI (99.9%): [1948.924, 19007.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.355 ±(99.9%) 2.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.355, 1.598), stdev = 0.696
[info]   CI (99.9%): [≈ 0, 3.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.150 ±(99.9%) 16.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.150, 9.683), stdev = 4.218
[info]   CI (99.9%): [≈ 0, 18.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147187.529 ops/s
[info] # Warmup Iteration   2: 712920.235 ops/s
[info] # Warmup Iteration   3: 737075.336 ops/s
[info] # Warmup Iteration   4: 798952.338 ops/s
[info] # Warmup Iteration   5: 827033.290 ops/s
[info] Iteration   1: 828255.256 ops/s
[info]                  ·gc.alloc.rate:                   492.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1253.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 831008.963 ops/s
[info]                  ·gc.alloc.rate:      481.564 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 828456.333 ops/s
[info]                  ·gc.alloc.rate:               494.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          939.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1253.522 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 809721.309 ops/s
[info]                  ·gc.alloc.rate:               490.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          952.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1286.411 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 825560.219 ops/s
[info]                  ·gc.alloc.rate:               497.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          948.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1261.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   824600.416 ±(99.9%) 32877.627 ops/s [Average]
[info]   (min, avg, max) = (809721.309, 824600.416, 831008.963), stdev = 8538.215
[info]   CI (99.9%): [791722.789, 857478.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   491.395 ±(99.9%) 23.739 MB/sec [Average]
[info]   (min, avg, max) = (481.564, 491.395, 497.840), stdev = 6.165
[info]   CI (99.9%): [467.657, 515.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   937.895 ±(99.9%) 61.265 B/op [Average]
[info]   (min, avg, max) = (912.001, 937.895, 952.617), stdev = 15.910
[info]   CI (99.9%): [876.630, 999.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.715 ±(99.9%) 1138.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.715, 661.925), stdev = 295.562
[info]   CI (99.9%): [≈ 0, 1666.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1011.079 ±(99.9%) 2177.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1011.079, 1286.411), stdev = 565.370
[info]   CI (99.9%): [≈ 0, 3188.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 306353.449 ops/s
[info] # Warmup Iteration   2: 681569.696 ops/s
[info] # Warmup Iteration   3: 796303.440 ops/s
[info] # Warmup Iteration   4: 818643.145 ops/s
[info] # Warmup Iteration   5: 813248.148 ops/s
[info] Iteration   1: 818278.610 ops/s
[info]                  ·gc.alloc.rate:                   456.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              878.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 822718.021 ops/s
[info]                  ·gc.alloc.rate:      443.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 797441.123 ops/s
[info]                  ·gc.alloc.rate:               449.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          887.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1317.429 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 823868.839 ops/s
[info]                  ·gc.alloc.rate:                   462.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              882.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 819941.999 ops/s
[info]                  ·gc.alloc.rate:      441.803 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   816449.719 ±(99.9%) 41793.348 ops/s [Average]
[info]   (min, avg, max) = (797441.123, 816449.719, 823868.839), stdev = 10853.600
[info]   CI (99.9%): [774656.370, 858243.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   450.796 ±(99.9%) 33.524 MB/sec [Average]
[info]   (min, avg, max) = (441.803, 450.796, 462.116), stdev = 8.706
[info]   CI (99.9%): [417.272, 484.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   869.072 ±(99.9%) 75.077 B/op [Average]
[info]   (min, avg, max) = (848.001, 869.072, 887.793), stdev = 19.497
[info]   CI (99.9%): [793.995, 944.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.646 ±(99.9%) 1408.329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.646, 668.199), stdev = 365.739
[info]   CI (99.9%): [≈ 0, 1808.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   775.542 ±(99.9%) 2726.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 775.542, 1317.429), stdev = 708.138
[info]   CI (99.9%): [≈ 0, 3502.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201850.759 ops/s
[info] # Warmup Iteration   2: 650499.177 ops/s
[info] # Warmup Iteration   3: 835198.988 ops/s
[info] # Warmup Iteration   4: 835974.523 ops/s
[info] # Warmup Iteration   5: 833956.607 ops/s
[info] Iteration   1: 835669.213 ops/s
[info]                  ·gc.alloc.rate:      8.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 840636.507 ops/s
[info]                  ·gc.alloc.rate:      13.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 25.693 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 825109.620 ops/s
[info]                  ·gc.alloc.rate:                   14.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              27.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     975.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.362 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 832168.374 ops/s
[info]                  ·gc.alloc.rate:      8.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 834552.898 ops/s
[info]                  ·gc.alloc.rate:      8.484 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   833627.323 ±(99.9%) 21853.419 ops/s [Average]
[info]   (min, avg, max) = (825109.620, 833627.323, 840636.507), stdev = 5675.263
[info]   CI (99.9%): [811773.904, 855480.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.742 ±(99.9%) 11.975 MB/sec [Average]
[info]   (min, avg, max) = (8.460, 10.742, 14.543), stdev = 3.110
[info]   CI (99.9%): [≈ 0, 22.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   20.285 ±(99.9%) 22.761 B/op [Average]
[info]   (min, avg, max) = (16.001, 20.285, 27.731), stdev = 5.911
[info]   CI (99.9%): [≈ 0, 43.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.355 ±(99.9%) 881.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.355, 511.776), stdev = 228.873
[info]   CI (99.9%): [≈ 0, 983.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   195.174 ±(99.9%) 1680.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 195.174, 975.871), stdev = 436.423
[info]   CI (99.9%): [≈ 0, 1875.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.248 ±(99.9%) 2.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.248, 1.238), stdev = 0.554
[info]   CI (99.9%): [≈ 0, 2.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.472 ±(99.9%) 4.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.472, 2.362), stdev = 1.056
[info]   CI (99.9%): [≈ 0, 4.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6024.235 ops/s
[info] # Warmup Iteration   2: 26042.805 ops/s
[info] # Warmup Iteration   3: 34569.756 ops/s
[info] # Warmup Iteration   4: 39334.922 ops/s
[info] # Warmup Iteration   5: 37813.512 ops/s
[info] Iteration   1: 38177.511 ops/s
[info]                  ·gc.alloc.rate:                   2069.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              85193.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81810.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.998 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 38465.837 ops/s
[info]                  ·gc.alloc.rate:                   1728.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              70727.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54318.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 39044.894 ops/s
[info]                  ·gc.alloc.rate:                   1789.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              72117.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80314.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 39174.496 ops/s
[info]                  ·gc.alloc.rate:                   1790.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              71941.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79939.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 38937.644 ops/s
[info]                  ·gc.alloc.rate:                   1766.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              71400.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53474.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   38760.076 ±(99.9%) 1622.710 ops/s [Average]
[info]   (min, avg, max) = (38177.511, 38760.076, 39174.496), stdev = 421.413
[info]   CI (99.9%): [37137.367, 40382.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1828.918 ±(99.9%) 526.675 MB/sec [Average]
[info]   (min, avg, max) = (1728.615, 1828.918, 2069.427), stdev = 136.776
[info]   CI (99.9%): [1302.243, 2355.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74276.096 ±(99.9%) 23592.880 B/op [Average]
[info]   (min, avg, max) = (70727.433, 74276.096, 85193.440), stdev = 6126.996
[info]   CI (99.9%): [50683.216, 97868.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1724.071 ±(99.9%) 1401.841 MB/sec [Average]
[info]   (min, avg, max) = (1322.978, 1724.071, 1992.628), stdev = 364.054
[info]   CI (99.9%): [322.230, 3125.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69971.660 ±(99.9%) 56580.986 B/op [Average]
[info]   (min, avg, max) = (53474.872, 69971.660, 81810.591), stdev = 14693.902
[info]   CI (99.9%): [13390.674, 126552.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.490 ±(99.9%) 3.414 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.490, 2.337), stdev = 0.887
[info]   CI (99.9%): [≈ 0, 4.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60.436 ±(99.9%) 137.613 B/op [Average]
[info]   (min, avg, max) = (0.841, 60.436, 94.182), stdev = 35.738
[info]   CI (99.9%): [≈ 0, 198.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 15.000), stdev = 4.494
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1224790.879 ops/s
[info] # Warmup Iteration   2: 3407549.090 ops/s
[info] # Warmup Iteration   3: 3718126.763 ops/s
[info] # Warmup Iteration   4: 4239311.492 ops/s
[info] # Warmup Iteration   5: 4187029.025 ops/s
[info] Iteration   1: 4281112.838 ops/s
[info]                  ·gc.alloc.rate:                   3314.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              1218.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1225.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4304511.506 ops/s
[info]                  ·gc.alloc.rate:                   3358.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              1227.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4263012.105 ops/s
[info]                  ·gc.alloc.rate:                   3313.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              1223.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     991.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4284276.296 ops/s
[info]                  ·gc.alloc.rate:               3357.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          1233.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1237.450 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 4280788.360 ops/s
[info]                  ·gc.alloc.rate:                   3355.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              1233.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1242.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4282740.221 ±(99.9%) 56854.242 ops/s [Average]
[info]   (min, avg, max) = (4263012.105, 4282740.221, 4304511.506), stdev = 14764.866
[info]   CI (99.9%): [4225885.979, 4339594.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3339.849 ±(99.9%) 90.255 MB/sec [Average]
[info]   (min, avg, max) = (3313.993, 3339.849, 3358.332), stdev = 23.439
[info]   CI (99.9%): [3249.595, 3430.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1227.263 ±(99.9%) 25.411 B/op [Average]
[info]   (min, avg, max) = (1218.183, 1227.263, 1233.582), stdev = 6.599
[info]   CI (99.9%): [1201.852, 1252.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3222.449 ±(99.9%) 1159.627 MB/sec [Average]
[info]   (min, avg, max) = (2684.659, 3222.449, 3379.155), stdev = 301.151
[info]   CI (99.9%): [2062.822, 4382.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1183.913 ±(99.9%) 416.177 B/op [Average]
[info]   (min, avg, max) = (991.116, 1183.913, 1242.409), stdev = 108.080
[info]   CI (99.9%): [767.736, 1600.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 5168964.345 ops/s
[info] # Warmup Iteration   3: 6065921.424 ops/s
[info] # Warmup Iteration   4: 6377128.747 ops/s
[info] # Warmup Iteration   5: 6458934.358 ops/s
[info] Iteration   1: 6464369.913 ops/s
[info]                  ·gc.alloc.rate:                   1255.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6257506.662 ops/s
[info]                  ·gc.alloc.rate:                   1212.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6422048.775 ops/s
[info]                  ·gc.alloc.rate:               1237.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 326.821 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 6458020.801 ops/s
[info]                  ·gc.alloc.rate:                   1229.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              299.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6419157.997 ops/s
[info]                  ·gc.alloc.rate:                   1247.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     326.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6404220.830 ±(99.9%) 325478.230 ops/s [Average]
[info]   (min, avg, max) = (6257506.662, 6404220.830, 6464369.913), stdev = 84525.663
[info]   CI (99.9%): [6078742.600, 6729699.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1236.267 ±(99.9%) 64.225 MB/sec [Average]
[info]   (min, avg, max) = (1212.139, 1236.267, 1255.249), stdev = 16.679
[info]   CI (99.9%): [1172.042, 1300.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.781 ±(99.9%) 9.843 B/op [Average]
[info]   (min, avg, max) = (299.515, 303.781, 305.737), stdev = 2.556
[info]   CI (99.9%): [293.938, 313.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1199.894 ±(99.9%) 1146.033 MB/sec [Average]
[info]   (min, avg, max) = (667.494, 1199.894, 1333.632), stdev = 297.621
[info]   CI (99.9%): [53.861, 2345.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   295.150 ±(99.9%) 285.610 B/op [Average]
[info]   (min, avg, max) = (162.669, 295.150, 335.088), stdev = 74.172
[info]   CI (99.9%): [9.540, 580.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.976 ±(99.9%) 8.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.976, 4.800), stdev = 2.137
[info]   CI (99.9%): [≈ 0, 9.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.239 ±(99.9%) 2.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 1.177), stdev = 0.524
[info]   CI (99.9%): [≈ 0, 2.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 718541.733 ops/s
[info] # Warmup Iteration   2: 4515486.522 ops/s
[info] # Warmup Iteration   3: 5125012.605 ops/s
[info] # Warmup Iteration   4: 5100859.627 ops/s
[info] # Warmup Iteration   5: 5148281.167 ops/s
[info] Iteration   1: 5164222.769 ops/s
[info]                  ·gc.alloc.rate:                   1060.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     405.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 5178167.502 ops/s
[info]                  ·gc.alloc.rate:               1045.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          317.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 202.166 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5170190.182 ops/s
[info]                  ·gc.alloc.rate:                        1045.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                   318.129 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.030 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.009 B/op
[info]                  ·gc.churn.Metaspace:                   0.083 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1116.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          339.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      1.464 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              38.000 ms
[info] Iteration   4: 4901559.042 ops/s
[info]                  ·gc.alloc.rate:               1070.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          343.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 426.912 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 5140285.215 ops/s
[info]                  ·gc.alloc.rate:               1042.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          319.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 203.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5110884.942 ±(99.9%) 453864.533 ops/s [Average]
[info]   (min, avg, max) = (4901559.042, 5110884.942, 5178167.502), stdev = 117867.178
[info]   CI (99.9%): [4657020.409, 5564749.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1052.950 ±(99.9%) 47.658 MB/sec [Average]
[info]   (min, avg, max) = (1042.531, 1052.950, 1070.920), stdev = 12.377
[info]   CI (99.9%): [1005.293, 1100.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   324.394 ±(99.9%) 42.599 B/op [Average]
[info]   (min, avg, max) = (317.626, 324.394, 343.782), stdev = 11.063
[info]   CI (99.9%): [281.795, 366.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.006 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1021.101 ±(99.9%) 1296.807 MB/sec [Average]
[info]   (min, avg, max) = (664.212, 1021.101, 1329.880), stdev = 336.777
[info]   CI (99.9%): [≈ 0, 2317.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   315.484 ±(99.9%) 415.062 B/op [Average]
[info]   (min, avg, max) = (202.166, 315.484, 426.912), stdev = 107.790
[info]   CI (99.9%): [≈ 0, 730.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.974 ±(99.9%) 8.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.974, 4.809), stdev = 2.144
[info]   CI (99.9%): [≈ 0, 9.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.297 ±(99.9%) 2.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.297, 1.464), stdev = 0.653
[info]   CI (99.9%): [≈ 0, 2.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 11.000, 38.000), stdev = 15.362
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2383498.606 ops/s
[info] # Warmup Iteration   2: 6342458.841 ops/s
[info] # Warmup Iteration   3: 6599679.167 ops/s
[info] # Warmup Iteration   4: 6633703.663 ops/s
[info] # Warmup Iteration   5: 6684574.237 ops/s
[info] Iteration   1: 6648739.059 ops/s
[info]                  ·gc.alloc.rate:                   1288.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6651409.599 ops/s
[info]                  ·gc.alloc.rate:                   1282.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6651948.541 ops/s
[info]                  ·gc.alloc.rate:                   1290.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6626391.552 ops/s
[info]                  ·gc.alloc.rate:                   1273.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6620008.237 ops/s
[info]                  ·gc.alloc.rate:                   1285.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6639699.398 ±(99.9%) 58831.940 ops/s [Average]
[info]   (min, avg, max) = (6620008.237, 6639699.398, 6651948.541), stdev = 15278.468
[info]   CI (99.9%): [6580867.457, 6698531.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1284.062 ±(99.9%) 25.418 MB/sec [Average]
[info]   (min, avg, max) = (1273.799, 1284.062, 1290.893), stdev = 6.601
[info]   CI (99.9%): [1258.644, 1309.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.360 ±(99.9%) 5.213 B/op [Average]
[info]   (min, avg, max) = (302.549, 304.360, 305.574), stdev = 1.354
[info]   CI (99.9%): [299.147, 309.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1340.867 ±(99.9%) 4.920 MB/sec [Average]
[info]   (min, avg, max) = (1338.959, 1340.867, 1342.251), stdev = 1.278
[info]   CI (99.9%): [1335.947, 1345.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   317.826 ±(99.9%) 2.697 B/op [Average]
[info]   (min, avg, max) = (317.268, 317.826, 318.808), stdev = 0.700
[info]   CI (99.9%): [315.129, 320.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.806 ±(99.9%) 6.762 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.806, 3.947), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 7.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.191 ±(99.9%) 1.606 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.191, 0.938), stdev = 0.417
[info]   CI (99.9%): [≈ 0, 1.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1269985.460 ops/s
[info] # Warmup Iteration   2: 5224867.826 ops/s
[info] # Warmup Iteration   3: 5444451.261 ops/s
[info] # Warmup Iteration   4: 5541018.681 ops/s
[info] # Warmup Iteration   5: 5536489.116 ops/s
[info] Iteration   1: 5539974.726 ops/s
[info]                  ·gc.alloc.rate:               1055.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          299.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189.629 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5505305.362 ops/s
[info]                  ·gc.alloc.rate:                   1077.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5478863.371 ops/s
[info]                  ·gc.alloc.rate:               1100.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 382.351 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 5518094.690 ops/s
[info]                  ·gc.alloc.rate:               1064.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5525642.967 ops/s
[info]                  ·gc.alloc.rate:                   1067.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     380.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5513576.223 ±(99.9%) 88988.477 ops/s [Average]
[info]   (min, avg, max) = (5478863.371, 5513576.223, 5539974.726), stdev = 23110.025
[info]   CI (99.9%): [5424587.746, 5602564.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1073.217 ±(99.9%) 66.913 MB/sec [Average]
[info]   (min, avg, max) = (1055.574, 1073.217, 1100.975), stdev = 17.377
[info]   CI (99.9%): [1006.304, 1140.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   306.262 ±(99.9%) 23.256 B/op [Average]
[info]   (min, avg, max) = (299.882, 306.262, 315.767), stdev = 6.040
[info]   CI (99.9%): [283.006, 329.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.505 ±(99.9%) 1407.831 MB/sec [Average]
[info]   (min, avg, max) = (667.486, 1068.505, 1337.518), stdev = 365.609
[info]   CI (99.9%): [≈ 0, 2476.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   305.093 ±(99.9%) 404.069 B/op [Average]
[info]   (min, avg, max) = (189.629, 305.093, 382.351), stdev = 104.935
[info]   CI (99.9%): [≈ 0, 709.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.788 ±(99.9%) 6.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.788, 3.913), stdev = 1.747
[info]   CI (99.9%): [≈ 0, 7.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.225 ±(99.9%) 1.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 1.115), stdev = 0.498
[info]   CI (99.9%): [≈ 0, 2.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 836650.282 ops/s
[info] # Warmup Iteration   2: 3079783.741 ops/s
[info] # Warmup Iteration   3: 3656808.630 ops/s
[info] # Warmup Iteration   4: 3660290.429 ops/s
[info] # Warmup Iteration   5: 3473893.505 ops/s
[info] Iteration   1: 3665232.770 ops/s
[info]                  ·gc.alloc.rate:                   2006.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     861.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3660355.982 ops/s
[info]                  ·gc.alloc.rate:                   2010.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     861.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3674926.350 ops/s
[info]                  ·gc.alloc.rate:                   2014.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     856.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3644636.001 ops/s
[info]                  ·gc.alloc.rate:                   2011.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              868.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     864.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3689772.153 ops/s
[info]                  ·gc.alloc.rate:                   2022.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     854.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3666984.651 ±(99.9%) 64686.559 ops/s [Average]
[info]   (min, avg, max) = (3644636.001, 3666984.651, 3689772.153), stdev = 16798.894
[info]   CI (99.9%): [3602298.093, 3731671.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2012.991 ±(99.9%) 23.339 MB/sec [Average]
[info]   (min, avg, max) = (2006.193, 2012.991, 2022.559), stdev = 6.061
[info]   CI (99.9%): [1989.652, 2036.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   863.956 ±(99.9%) 10.868 B/op [Average]
[info]   (min, avg, max) = (861.445, 863.956, 868.640), stdev = 2.822
[info]   CI (99.9%): [853.088, 874.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2003.503 ±(99.9%) 10.447 MB/sec [Average]
[info]   (min, avg, max) = (2000.499, 2003.503, 2007.094), stdev = 2.713
[info]   CI (99.9%): [1993.056, 2013.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   859.889 ±(99.9%) 15.059 B/op [Average]
[info]   (min, avg, max) = (854.844, 859.889, 864.157), stdev = 3.911
[info]   CI (99.9%): [844.830, 874.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 5.685 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.854, 3.435), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.367 ±(99.9%) 2.441 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.367, 1.475), stdev = 0.634
[info]   CI (99.9%): [≈ 0, 2.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.756 ops/s
[info] # Warmup Iteration   2: 5857184.974 ops/s
[info] # Warmup Iteration   3: 6949770.014 ops/s
[info] # Warmup Iteration   4: 6546464.080 ops/s
[info] # Warmup Iteration   5: 6821273.428 ops/s
[info] Iteration   1: 6841381.591 ops/s
[info]                  ·gc.alloc.rate:                   678.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6836708.155 ops/s
[info]                  ·gc.alloc.rate:               672.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          154.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6836727.051 ops/s
[info]                  ·gc.alloc.rate:                   685.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6825215.607 ops/s
[info]                  ·gc.alloc.rate:               675.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.381 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6816130.526 ops/s
[info]                  ·gc.alloc.rate:                   676.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6831232.586 ±(99.9%) 39805.749 ops/s [Average]
[info]   (min, avg, max) = (6816130.526, 6831232.586, 6841381.591), stdev = 10337.427
[info]   CI (99.9%): [6791426.837, 6871038.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   677.869 ±(99.9%) 18.180 MB/sec [Average]
[info]   (min, avg, max) = (672.783, 677.869, 685.405), stdev = 4.721
[info]   CI (99.9%): [659.689, 696.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   156.178 ±(99.9%) 4.032 B/op [Average]
[info]   (min, avg, max) = (154.883, 156.178, 157.785), stdev = 1.047
[info]   CI (99.9%): [152.146, 160.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.608 ±(99.9%) 2.157 MB/sec [Average]
[info]   (min, avg, max) = (663.802, 664.608, 665.148), stdev = 0.560
[info]   CI (99.9%): [662.451, 666.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   153.123 ±(99.9%) 1.358 B/op [Average]
[info]   (min, avg, max) = (152.710, 153.123, 153.585), stdev = 0.353
[info]   CI (99.9%): [151.765, 154.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.032), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1296166.774 ops/s
[info] # Warmup Iteration   2: 5631076.694 ops/s
[info] # Warmup Iteration   3: 6357664.338 ops/s
[info] # Warmup Iteration   4: 6391530.826 ops/s
[info] # Warmup Iteration   5: 6258969.334 ops/s
[info] Iteration   1: 6354171.250 ops/s
[info]                  ·gc.alloc.rate:               628.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.760 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 6318932.636 ops/s
[info]                  ·gc.alloc.rate:                   652.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              162.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6370273.821 ops/s
[info]                  ·gc.alloc.rate:               637.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.676 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6260833.286 ops/s
[info]                  ·gc.alloc.rate:               625.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6412804.748 ops/s
[info]                  ·gc.alloc.rate:               633.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   6343403.148 ±(99.9%) 220120.430 ops/s [Average]
[info]   (min, avg, max) = (6260833.286, 6343403.148, 6412804.748), stdev = 57164.577
[info]   CI (99.9%): [6123282.718, 6563523.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   635.716 ±(99.9%) 40.919 MB/sec [Average]
[info]   (min, avg, max) = (625.992, 635.716, 652.983), stdev = 10.627
[info]   CI (99.9%): [594.797, 676.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157.718 ±(99.9%) 11.124 B/op [Average]
[info]   (min, avg, max) = (155.543, 157.718, 162.638), stdev = 2.889
[info]   CI (99.9%): [146.594, 168.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.292 ±(99.9%) 4.383 MB/sec [Average]
[info]   (min, avg, max) = (661.136, 662.292, 663.782), stdev = 1.138
[info]   CI (99.9%): [657.910, 666.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   164.312 ±(99.9%) 5.361 B/op [Average]
[info]   (min, avg, max) = (162.913, 164.312, 166.539), stdev = 1.392
[info]   CI (99.9%): [158.951, 169.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3366581.312 ops/s
[info] # Warmup Iteration   2: 6145658.356 ops/s
[info] # Warmup Iteration   3: 7062155.744 ops/s
[info] # Warmup Iteration   4: 6914789.222 ops/s
[info] # Warmup Iteration   5: 7004864.691 ops/s
[info] Iteration   1: 7036298.708 ops/s
[info]                  ·gc.alloc.rate:               695.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149.523 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 7000122.040 ops/s
[info]                  ·gc.alloc.rate:                   696.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7099433.812 ops/s
[info]                  ·gc.alloc.rate:               711.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148.341 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7129167.950 ops/s
[info]                  ·gc.alloc.rate:                   717.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7160126.263 ops/s
[info]                  ·gc.alloc.rate:               714.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.157 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   7085029.755 ±(99.9%) 253815.405 ops/s [Average]
[info]   (min, avg, max) = (7000122.040, 7085029.755, 7160126.263), stdev = 65915.055
[info]   CI (99.9%): [6831214.350, 7338845.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   706.909 ±(99.9%) 39.435 MB/sec [Average]
[info]   (min, avg, max) = (695.577, 706.909, 717.120), stdev = 10.241
[info]   CI (99.9%): [667.475, 746.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157.021 ±(99.9%) 4.032 B/op [Average]
[info]   (min, avg, max) = (155.588, 157.021, 158.299), stdev = 1.047
[info]   CI (99.9%): [152.989, 161.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.165 ±(99.9%) 1.669 MB/sec [Average]
[info]   (min, avg, max) = (668.465, 669.165, 669.545), stdev = 0.433
[info]   CI (99.9%): [667.496, 670.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   148.652 ±(99.9%) 5.101 B/op [Average]
[info]   (min, avg, max) = (147.157, 148.652, 150.440), stdev = 1.325
[info]   CI (99.9%): [143.550, 153.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3939271.448 ops/s
[info] # Warmup Iteration   2: 6965291.183 ops/s
[info] # Warmup Iteration   3: 7085273.764 ops/s
[info] # Warmup Iteration   4: 7272295.244 ops/s
[info] # Warmup Iteration   5: 7248586.201 ops/s
[info] Iteration   1: 7335762.019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7372538.294 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7398329.653 ops/s
[info]                  ·gc.alloc.rate:      0.094 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7210936.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7367391.536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7336991.552 ±(99.9%) 284541.096 ops/s [Average]
[info]   (min, avg, max) = (7210936.261, 7336991.552, 7398329.653), stdev = 73894.419
[info]   CI (99.9%): [7052450.456, 7621532.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.019 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002294.422 ops/s
[info] # Warmup Iteration   2: 4516243.147 ops/s
[info] # Warmup Iteration   3: 6381645.759 ops/s
[info] # Warmup Iteration   4: 6388912.814 ops/s
[info] # Warmup Iteration   5: 6376370.250 ops/s
[info] Iteration   1: 6384781.122 ops/s
[info]                  ·gc.alloc.rate:                   641.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6377760.175 ops/s
[info]                  ·gc.alloc.rate:               631.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.474 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6369518.989 ops/s
[info]                  ·gc.alloc.rate:               636.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.851 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6387132.978 ops/s
[info]                  ·gc.alloc.rate:               637.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6374207.428 ops/s
[info]                  ·gc.alloc.rate:                   633.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   6378680.138 ±(99.9%) 28128.856 ops/s [Average]
[info]   (min, avg, max) = (6369518.989, 6378680.138, 6387132.978), stdev = 7304.975
[info]   CI (99.9%): [6350551.282, 6406808.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   636.292 ±(99.9%) 14.800 MB/sec [Average]
[info]   (min, avg, max) = (631.713, 636.292, 641.948), stdev = 3.843
[info]   CI (99.9%): [621.492, 651.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   156.975 ±(99.9%) 3.413 B/op [Average]
[info]   (min, avg, max) = (155.888, 156.975, 158.240), stdev = 0.886
[info]   CI (99.9%): [153.562, 160.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   667.101 ±(99.9%) 2.493 MB/sec [Average]
[info]   (min, avg, max) = (666.481, 667.101, 668.048), stdev = 0.647
[info]   CI (99.9%): [664.607, 669.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   164.576 ±(99.9%) 1.048 B/op [Average]
[info]   (min, avg, max) = (164.287, 164.576, 164.879), stdev = 0.272
[info]   CI (99.9%): [163.528, 165.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328754.191 ops/s
[info] # Warmup Iteration   2: 1352366.504 ops/s
[info] # Warmup Iteration   3: 1596969.851 ops/s
[info] # Warmup Iteration   4: 1717577.601 ops/s
[info] # Warmup Iteration   5: 1746332.183 ops/s
[info] Iteration   1: 1777916.424 ops/s
[info]                  ·gc.alloc.rate:                   2275.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              2014.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1767.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1780187.956 ops/s
[info]                  ·gc.alloc.rate:                   2315.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              2047.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2348.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.554 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1790306.874 ops/s
[info]                  ·gc.alloc.rate:                   2299.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              2021.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1748.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1790808.191 ops/s
[info]                  ·gc.alloc.rate:               2314.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          2033.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1749.017 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1787938.365 ops/s
[info]                  ·gc.alloc.rate:                   2350.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              2069.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2341.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1785431.562 ±(99.9%) 23018.154 ops/s [Average]
[info]   (min, avg, max) = (1777916.424, 1785431.562, 1790808.191), stdev = 5977.742
[info]   CI (99.9%): [1762413.408, 1808449.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2311.212 ±(99.9%) 105.482 MB/sec [Average]
[info]   (min, avg, max) = (2275.579, 2311.212, 2350.799), stdev = 27.393
[info]   CI (99.9%): [2205.730, 2416.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2037.105 ±(99.9%) 84.542 B/op [Average]
[info]   (min, avg, max) = (2014.039, 2037.105, 2069.305), stdev = 21.955
[info]   CI (99.9%): [1952.563, 2121.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2258.921 ±(99.9%) 1404.929 MB/sec [Average]
[info]   (min, avg, max) = (1989.336, 2258.921, 2660.553), stdev = 364.856
[info]   CI (99.9%): [853.992, 3663.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1991.254 ±(99.9%) 1245.124 B/op [Average]
[info]   (min, avg, max) = (1748.640, 1991.254, 2348.751), stdev = 323.355
[info]   CI (99.9%): [746.130, 3236.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.266 ±(99.9%) 7.330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.266, 4.404), stdev = 1.904
[info]   CI (99.9%): [≈ 0, 8.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.120 ±(99.9%) 6.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.120, 3.898), stdev = 1.685
[info]   CI (99.9%): [≈ 0, 7.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 12.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.687 ops/s
[info] # Warmup Iteration   2: 2417683.352 ops/s
[info] # Warmup Iteration   3: 2806975.488 ops/s
[info] # Warmup Iteration   4: 2829353.096 ops/s
[info] # Warmup Iteration   5: 3002987.870 ops/s
[info] Iteration   1: 3011039.882 ops/s
[info]                  ·gc.alloc.rate:               579.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 346.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2920017.360 ops/s
[info]                  ·gc.alloc.rate:               578.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          311.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 358.160 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2990018.001 ops/s
[info]                  ·gc.alloc.rate:               578.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 349.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3009353.633 ops/s
[info]                  ·gc.alloc.rate:                   579.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2986707.010 ops/s
[info]                  ·gc.alloc.rate:               582.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 350.496 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2983427.177 ±(99.9%) 142910.825 ops/s [Average]
[info]   (min, avg, max) = (2920017.360, 2983427.177, 3011039.882), stdev = 37113.487
[info]   CI (99.9%): [2840516.352, 3126338.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   579.628 ±(99.9%) 7.218 MB/sec [Average]
[info]   (min, avg, max) = (578.007, 579.628, 582.600), stdev = 1.874
[info]   CI (99.9%): [572.410, 586.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.772 ±(99.9%) 13.749 B/op [Average]
[info]   (min, avg, max) = (303.101, 305.772, 311.540), stdev = 3.571
[info]   CI (99.9%): [292.023, 319.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.627 ±(99.9%) 2.883 MB/sec [Average]
[info]   (min, avg, max) = (663.464, 664.627, 665.417), stdev = 0.749
[info]   CI (99.9%): [661.744, 667.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   350.617 ±(99.9%) 17.196 B/op [Average]
[info]   (min, avg, max) = (346.802, 350.617, 358.160), stdev = 4.466
[info]   CI (99.9%): [333.420, 367.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165525.929 ops/s
[info] # Warmup Iteration   2: 1625489.370 ops/s
[info] # Warmup Iteration   3: 1852684.609 ops/s
[info] # Warmup Iteration   4: 1794470.556 ops/s
[info] # Warmup Iteration   5: 1886757.366 ops/s
[info] Iteration   1: 1889092.229 ops/s
[info]                  ·gc.alloc.rate:               389.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 426.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1895549.085 ops/s
[info]                  ·gc.alloc.rate:      375.781 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1882691.232 ops/s
[info]                  ·gc.alloc.rate:               393.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          329.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1891572.586 ops/s
[info]                  ·gc.alloc.rate:      374.977 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1887993.285 ops/s
[info]                  ·gc.alloc.rate:                   389.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     550.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1889379.683 ±(99.9%) 18225.637 ops/s [Average]
[info]   (min, avg, max) = (1882691.232, 1889379.683, 1895549.085), stdev = 4733.140
[info]   CI (99.9%): [1871154.047, 1907605.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   384.780 ±(99.9%) 33.734 MB/sec [Average]
[info]   (min, avg, max) = (374.977, 384.780, 393.883), stdev = 8.761
[info]   CI (99.9%): [351.045, 418.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   320.492 ±(99.9%) 30.661 B/op [Average]
[info]   (min, avg, max) = (312.000, 320.492, 329.122), stdev = 7.962
[info]   CI (99.9%): [289.832, 351.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.466 ±(99.9%) 1309.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.466, 660.454), stdev = 339.991
[info]   CI (99.9%): [≈ 0, 1675.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   305.683 ±(99.9%) 1092.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 305.683, 551.864), stdev = 283.668
[info]   CI (99.9%): [≈ 0, 1397.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1015053.179 ops/s
[info] # Warmup Iteration   2: 2111531.469 ops/s
[info] # Warmup Iteration   3: 2202486.233 ops/s
[info] # Warmup Iteration   4: 2309528.200 ops/s
[info] # Warmup Iteration   5: 2311643.141 ops/s
[info] Iteration   1: 2308106.885 ops/s
[info]                  ·gc.alloc.rate:               444.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 348.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2319260.457 ops/s
[info]                  ·gc.alloc.rate:      436.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.073 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2311759.015 ops/s
[info]                  ·gc.alloc.rate:                   455.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              310.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2306570.559 ops/s
[info]                  ·gc.alloc.rate:                   451.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2314498.893 ops/s
[info]                  ·gc.alloc.rate:      435.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2312039.162 ±(99.9%) 19600.901 ops/s [Average]
[info]   (min, avg, max) = (2306570.559, 2312039.162, 2319260.457), stdev = 5090.292
[info]   CI (99.9%): [2292438.260, 2331640.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   444.656 ±(99.9%) 34.728 MB/sec [Average]
[info]   (min, avg, max) = (435.278, 444.656, 455.371), stdev = 9.019
[info]   CI (99.9%): [409.929, 479.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   302.674 ±(99.9%) 25.415 B/op [Average]
[info]   (min, avg, max) = (296.000, 302.674, 310.016), stdev = 6.600
[info]   CI (99.9%): [277.259, 328.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.152 ±(99.9%) 1324.591 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.152, 669.579), stdev = 343.992
[info]   CI (99.9%): [≈ 0, 1694.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   252.293 ±(99.9%) 902.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 252.293, 456.807), stdev = 234.451
[info]   CI (99.9%): [≈ 0, 1155.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.014), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157058.274 ops/s
[info] # Warmup Iteration   2: 1779915.913 ops/s
[info] # Warmup Iteration   3: 1802748.339 ops/s
[info] # Warmup Iteration   4: 1968199.847 ops/s
[info] # Warmup Iteration   5: 1963735.551 ops/s
[info] Iteration   1: 1967580.902 ops/s
[info]                  ·gc.alloc.rate:               380.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 409.234 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1974600.534 ops/s
[info]                  ·gc.alloc.rate:      371.419 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1964984.982 ops/s
[info]                  ·gc.alloc.rate:                   383.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     532.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1974931.255 ops/s
[info]                  ·gc.alloc.rate:      371.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1971028.877 ops/s
[info]                  ·gc.alloc.rate:               383.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 531.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1970625.310 ±(99.9%) 16739.029 ops/s [Average]
[info]   (min, avg, max) = (1964984.982, 1970625.310, 1974931.255), stdev = 4347.073
[info]   CI (99.9%): [1953886.281, 1987364.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   378.341 ±(99.9%) 24.800 MB/sec [Average]
[info]   (min, avg, max) = (371.409, 378.341, 383.960), stdev = 6.440
[info]   CI (99.9%): [353.541, 403.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   302.127 ±(99.9%) 21.909 B/op [Average]
[info]   (min, avg, max) = (296.000, 302.127, 307.487), stdev = 5.690
[info]   CI (99.9%): [280.217, 324.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   368.465 ±(99.9%) 1317.464 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.465, 665.258), stdev = 342.141
[info]   CI (99.9%): [≈ 0, 1685.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   294.624 ±(99.9%) 1053.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 294.624, 532.764), stdev = 273.580
[info]   CI (99.9%): [≈ 0, 1348.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429895.663 ops/s
[info] # Warmup Iteration   2: 2284557.561 ops/s
[info] # Warmup Iteration   3: 2447318.005 ops/s
[info] # Warmup Iteration   4: 2506986.417 ops/s
[info] # Warmup Iteration   5: 2519162.554 ops/s
[info] Iteration   1: 2478668.651 ops/s
[info]                  ·gc.alloc.rate:               1794.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          1139.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275.022 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 2515237.773 ops/s
[info]                  ·gc.alloc.rate:                   1791.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     838.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2466499.114 ops/s
[info]                  ·gc.alloc.rate:                   1793.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1144.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1278.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2518216.904 ops/s
[info]                  ·gc.alloc.rate:                   1796.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              1122.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2524547.856 ops/s
[info]                  ·gc.alloc.rate:                   1785.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2500634.059 ±(99.9%) 100817.187 ops/s [Average]
[info]   (min, avg, max) = (2466499.114, 2500634.059, 2524547.856), stdev = 26181.903
[info]   CI (99.9%): [2399816.872, 2601451.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1792.593 ±(99.9%) 16.308 MB/sec [Average]
[info]   (min, avg, max) = (1785.790, 1792.593, 1796.823), stdev = 4.235
[info]   CI (99.9%): [1776.285, 1808.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1128.103 ±(99.9%) 51.244 B/op [Average]
[info]   (min, avg, max) = (1112.880, 1128.103, 1144.507), stdev = 13.308
[info]   CI (99.9%): [1076.858, 1179.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1737.826 ±(99.9%) 1406.755 MB/sec [Average]
[info]   (min, avg, max) = (1335.454, 1737.826, 2008.539), stdev = 365.330
[info]   CI (99.9%): [331.071, 3144.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1094.944 ±(99.9%) 913.911 B/op [Average]
[info]   (min, avg, max) = (832.237, 1094.944, 1278.594), stdev = 237.340
[info]   CI (99.9%): [181.032, 2008.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.943 ±(99.9%) 6.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.943, 4.174), stdev = 1.816
[info]   CI (99.9%): [≈ 0, 7.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.591 ±(99.9%) 4.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.612), stdev = 1.136
[info]   CI (99.9%): [≈ 0, 4.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 2.966
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.695 ops/s
[info] # Warmup Iteration   2: 3283324.944 ops/s
[info] # Warmup Iteration   3: 3549223.131 ops/s
[info] # Warmup Iteration   4: 3633238.691 ops/s
[info] # Warmup Iteration   5: 3666991.568 ops/s
[info] Iteration   1: 3676158.916 ops/s
[info]                  ·gc.alloc.rate:               975.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 284.632 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3561892.230 ops/s
[info]                  ·gc.alloc.rate:                   985.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              435.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     587.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3547005.285 ops/s
[info]                  ·gc.alloc.rate:               947.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          420.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 295.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3650910.303 ops/s
[info]                  ·gc.alloc.rate:               965.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 287.017 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3630895.061 ops/s
[info]                  ·gc.alloc.rate:                   985.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3613372.359 ±(99.9%) 217084.523 ops/s [Average]
[info]   (min, avg, max) = (3547005.285, 3613372.359, 3676158.916), stdev = 56376.161
[info]   CI (99.9%): [3396287.836, 3830456.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   971.987 ±(99.9%) 61.069 MB/sec [Average]
[info]   (min, avg, max) = (947.936, 971.987, 985.786), stdev = 15.859
[info]   CI (99.9%): [910.918, 1033.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   423.359 ±(99.9%) 30.805 B/op [Average]
[info]   (min, avg, max) = (416.126, 423.359, 435.496), stdev = 8.000
[info]   CI (99.9%): [392.554, 454.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   932.070 ±(99.9%) 1404.970 MB/sec [Average]
[info]   (min, avg, max) = (664.843, 932.070, 1332.924), stdev = 364.866
[info]   CI (99.9%): [≈ 0, 2337.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   406.540 ±(99.9%) 619.942 B/op [Average]
[info]   (min, avg, max) = (284.632, 406.540, 587.823), stdev = 160.997
[info]   CI (99.9%): [≈ 0, 1026.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.024), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255282.274 ops/s
[info] # Warmup Iteration   2: 2791144.477 ops/s
[info] # Warmup Iteration   3: 3357637.717 ops/s
[info] # Warmup Iteration   4: 3399518.838 ops/s
[info] # Warmup Iteration   5: 3422242.444 ops/s
[info] Iteration   1: 3393871.799 ops/s
[info]                  ·gc.alloc.rate:               903.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 308.762 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3402204.426 ops/s
[info]                  ·gc.alloc.rate:                   923.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     616.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3277974.881 ops/s
[info]                  ·gc.alloc.rate:                        871.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                   418.082 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.024 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.012 B/op
[info]                  ·gc.churn.Metaspace:                   0.063 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:               708.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          339.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      2.274 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              41.000 ms
[info] Iteration   4: 3412622.617 ops/s
[info]                  ·gc.alloc.rate:               900.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 307.508 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3421393.304 ops/s
[info]                  ·gc.alloc.rate:               903.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 305.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3381613.405 ±(99.9%) 226658.839 ops/s [Average]
[info]   (min, avg, max) = (3277974.881, 3381613.405, 3421393.304), stdev = 58862.581
[info]   CI (99.9%): [3154954.566, 3608272.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   900.468 ±(99.9%) 72.396 MB/sec [Average]
[info]   (min, avg, max) = (871.017, 900.468, 923.436), stdev = 18.801
[info]   CI (99.9%): [828.073, 972.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   419.021 ±(99.9%) 18.464 B/op [Average]
[info]   (min, avg, max) = (415.405, 419.021, 427.110), stdev = 4.795
[info]   CI (99.9%): [400.557, 437.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.005 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.006 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   807.656 ±(99.9%) 1131.949 MB/sec [Average]
[info]   (min, avg, max) = (664.795, 807.656, 1332.494), stdev = 293.964
[info]   CI (99.9%): [≈ 0, 1939.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   375.657 ±(99.9%) 520.868 B/op [Average]
[info]   (min, avg, max) = (305.815, 375.657, 616.309), stdev = 135.268
[info]   CI (99.9%): [≈ 0, 896.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.950 ±(99.9%) 8.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.950, 4.737), stdev = 2.117
[info]   CI (99.9%): [≈ 0, 9.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.456 ±(99.9%) 3.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.456, 2.274), stdev = 1.016
[info]   CI (99.9%): [≈ 0, 4.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 11.000, 41.000), stdev = 17.015
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1427077.264 ops/s
[info] # Warmup Iteration   2: 3355707.835 ops/s
[info] # Warmup Iteration   3: 3617313.155 ops/s
[info] # Warmup Iteration   4: 3641747.056 ops/s
[info] # Warmup Iteration   5: 3646743.166 ops/s
[info] Iteration   1: 3634931.769 ops/s
[info]                  ·gc.alloc.rate:               974.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          422.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 579.464 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3620883.961 ops/s
[info]                  ·gc.alloc.rate:                   958.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3495993.208 ops/s
[info]                  ·gc.alloc.rate:                   941.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     603.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3653551.255 ops/s
[info]                  ·gc.alloc.rate:               963.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 288.678 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3649338.188 ops/s
[info]                  ·gc.alloc.rate:               972.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3610939.676 ±(99.9%) 252337.608 ops/s [Average]
[info]   (min, avg, max) = (3495993.208, 3610939.676, 3653551.255), stdev = 65531.275
[info]   CI (99.9%): [3358602.068, 3863277.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   962.240 ±(99.9%) 50.737 MB/sec [Average]
[info]   (min, avg, max) = (941.992, 962.240, 974.985), stdev = 13.176
[info]   CI (99.9%): [911.502, 1012.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   419.383 ±(99.9%) 14.545 B/op [Average]
[info]   (min, avg, max) = (414.911, 419.383, 423.992), stdev = 3.777
[info]   CI (99.9%): [404.839, 433.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.704 ±(99.9%) 1410.816 MB/sec [Average]
[info]   (min, avg, max) = (669.500, 937.704, 1339.838), stdev = 366.384
[info]   CI (99.9%): [≈ 0, 2348.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   410.271 ±(99.9%) 637.035 B/op [Average]
[info]   (min, avg, max) = (288.678, 410.271, 603.063), stdev = 165.436
[info]   CI (99.9%): [≈ 0, 1047.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1354681.349 ops/s
[info] # Warmup Iteration   2: 3478615.439 ops/s
[info] # Warmup Iteration   3: 3889765.340 ops/s
[info] # Warmup Iteration   4: 3891751.660 ops/s
[info] # Warmup Iteration   5: 3890947.705 ops/s
[info] Iteration   1: 3876702.490 ops/s
[info]                  ·gc.alloc.rate:      4.751 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.929 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3880455.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3880613.575 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3891756.522 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3891474.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3884200.530 ±(99.9%) 26755.114 ops/s [Average]
[info]   (min, avg, max) = (3876702.490, 3884200.530, 3891756.522), stdev = 6948.218
[info]   CI (99.9%): [3857445.416, 3910955.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.951 ±(99.9%) 8.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.951, 4.751), stdev = 2.125
[info]   CI (99.9%): [≈ 0, 9.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.386 ±(99.9%) 3.322 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.386, 1.929), stdev = 0.863
[info]   CI (99.9%): [≈ 0, 3.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 558425.822 ops/s
[info] # Warmup Iteration   2: 2658055.313 ops/s
[info] # Warmup Iteration   3: 3338998.343 ops/s
[info] # Warmup Iteration   4: 3379663.237 ops/s
[info] # Warmup Iteration   5: 3381210.229 ops/s
[info] Iteration   1: 3375224.374 ops/s
[info]                  ·gc.alloc.rate:               892.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.562 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3391508.519 ops/s
[info]                  ·gc.alloc.rate:               901.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.213 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3236231.846 ops/s
[info]                  ·gc.alloc.rate:                   906.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3345101.240 ops/s
[info]                  ·gc.alloc.rate:               891.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 314.832 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3328381.913 ops/s
[info]                  ·gc.alloc.rate:               884.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.567 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   3335289.578 ±(99.9%) 233526.364 ops/s [Average]
[info]   (min, avg, max) = (3236231.846, 3335289.578, 3391508.519), stdev = 60646.055
[info]   CI (99.9%): [3101763.215, 3568815.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   895.390 ±(99.9%) 32.690 MB/sec [Average]
[info]   (min, avg, max) = (884.754, 895.390, 906.021), stdev = 8.489
[info]   CI (99.9%): [862.701, 928.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   422.640 ±(99.9%) 38.981 B/op [Average]
[info]   (min, avg, max) = (416.168, 422.640, 440.611), stdev = 10.123
[info]   CI (99.9%): [383.659, 461.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.608 ±(99.9%) 1151.792 MB/sec [Average]
[info]   (min, avg, max) = (668.200, 802.608, 1337.683), stdev = 299.117
[info]   CI (99.9%): [≈ 0, 1954.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   380.742 ±(99.9%) 580.832 B/op [Average]
[info]   (min, avg, max) = (310.213, 380.742, 650.535), stdev = 150.840
[info]   CI (99.9%): [≈ 0, 961.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1597.271 ops/s
[info] # Warmup Iteration   2: 4847.111 ops/s
[info] # Warmup Iteration   3: 11271.906 ops/s
[info] # Warmup Iteration   4: 12412.673 ops/s
[info] # Warmup Iteration   5: 12192.312 ops/s
[info] Iteration   1: 12378.737 ops/s
[info]                  ·gc.alloc.rate:               1553.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          197459.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169045.933 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 11369.520 ops/s
[info]                  ·gc.alloc.rate:                   1804.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              249651.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275936.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 614.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 12595.692 ops/s
[info]                  ·gc.alloc.rate:                   1587.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              198238.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165967.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 320.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12541.773 ops/s
[info]                  ·gc.alloc.rate:                   1577.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              197972.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166347.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12231.445 ops/s
[info]                  ·gc.alloc.rate:                   1664.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              214104.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255587.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12223.433 ±(99.9%) 1918.829 ops/s [Average]
[info]   (min, avg, max) = (11369.520, 12223.433, 12595.692), stdev = 498.314
[info]   CI (99.9%): [10304.604, 14142.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1637.297 ±(99.9%) 394.184 MB/sec [Average]
[info]   (min, avg, max) = (1553.030, 1637.297, 1804.681), stdev = 102.368
[info]   CI (99.9%): [1243.114, 2031.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   211485.233 ±(99.9%) 86496.568 B/op [Average]
[info]   (min, avg, max) = (197459.089, 211485.233, 249651.342), stdev = 22462.884
[info]   CI (99.9%): [124988.665, 297981.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1593.013 ±(99.9%) 1397.583 MB/sec [Average]
[info]   (min, avg, max) = (1325.667, 1593.013, 1994.690), stdev = 362.948
[info]   CI (99.9%): [195.429, 2990.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   206576.947 ±(99.9%) 209928.878 B/op [Average]
[info]   (min, avg, max) = (165967.657, 206576.947, 275936.205), stdev = 54517.863
[info]   CI (99.9%): [≈ 0, 416505.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.467 ±(99.9%) 7.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.467, 4.439), stdev = 1.973
[info]   CI (99.9%): [≈ 0, 9.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   195.231 ±(99.9%) 1036.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 195.231, 614.018), stdev = 269.191
[info]   CI (99.9%): [≈ 0, 1231.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 19.000), stdev = 6.580
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1721.205 ops/s
[info] # Warmup Iteration   2: 15049.814 ops/s
[info] # Warmup Iteration   3: 22972.751 ops/s
[info] # Warmup Iteration   4: 22483.178 ops/s
[info] # Warmup Iteration   5: 22692.960 ops/s
[info] Iteration   1: 22623.172 ops/s
[info]                  ·gc.alloc.rate:      391.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 27213.035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22177.207 ops/s
[info]                  ·gc.alloc.rate:               471.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          33421.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46873.900 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 23046.788 ops/s
[info]                  ·gc.alloc.rate:      332.981 MB/sec
[info]                  ·gc.alloc.rate.norm: 22731.530 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22996.858 ops/s
[info]                  ·gc.alloc.rate:                   347.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              23764.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45200.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23113.454 ops/s
[info]                  ·gc.alloc.rate:      330.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 22520.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22791.496 ±(99.9%) 1511.945 ops/s [Average]
[info]   (min, avg, max) = (22177.207, 22791.496, 23113.454), stdev = 392.647
[info]   CI (99.9%): [21279.551, 24303.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   374.638 ±(99.9%) 227.637 MB/sec [Average]
[info]   (min, avg, max) = (330.721, 374.638, 471.017), stdev = 59.116
[info]   CI (99.9%): [147.002, 602.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25930.103 ±(99.9%) 17679.881 B/op [Average]
[info]   (min, avg, max) = (22520.019, 25930.103, 33421.889), stdev = 4591.409
[info]   CI (99.9%): [8250.221, 43609.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.214 ±(99.9%) 1393.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.214, 660.598), stdev = 361.790
[info]   CI (99.9%): [≈ 0, 1657.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18414.936 ±(99.9%) 97123.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18414.936, 46873.900), stdev = 25222.627
[info]   CI (99.9%): [≈ 0, 115538.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.224 ±(99.9%) 1.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.224, 1.121), stdev = 0.501
[info]   CI (99.9%): [≈ 0, 2.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.341 ±(99.9%) 132.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.341, 76.707), stdev = 34.304
[info]   CI (99.9%): [≈ 0, 147.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6642.203 ops/s
[info] # Warmup Iteration   2: 18727.207 ops/s
[info] # Warmup Iteration   3: 21813.922 ops/s
[info] # Warmup Iteration   4: 21728.231 ops/s
[info] # Warmup Iteration   5: 20739.845 ops/s
[info] Iteration   1: 21189.947 ops/s
[info]                  ·gc.alloc.rate:               418.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          31089.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37998.696 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 21820.903 ops/s
[info]                  ·gc.alloc.rate:      234.519 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21757.942 ops/s
[info]                  ·gc.alloc.rate:               246.572 MB/sec
[info]                  ·gc.alloc.rate.norm:          17828.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37006.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 21907.002 ops/s
[info]                  ·gc.alloc.rate:      235.428 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21895.304 ops/s
[info]                  ·gc.alloc.rate:      236.414 MB/sec
[info]                  ·gc.alloc.rate.norm: 16993.648 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   21714.220 ±(99.9%) 1152.160 ops/s [Average]
[info]   (min, avg, max) = (21189.947, 21714.220, 21907.002), stdev = 299.212
[info]   CI (99.9%): [20562.060, 22866.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   274.335 ±(99.9%) 311.408 MB/sec [Average]
[info]   (min, avg, max) = (234.519, 274.335, 418.741), stdev = 80.872
[info]   CI (99.9%): [≈ 0, 585.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19947.067 ±(99.9%) 24030.098 B/op [Average]
[info]   (min, avg, max) = (16912.015, 19947.067, 31089.048), stdev = 6240.540
[info]   CI (99.9%): [≈ 0, 43977.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.724 ±(99.9%) 1079.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.724, 511.811), stdev = 280.329
[info]   CI (99.9%): [≈ 0, 1284.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15001.112 ±(99.9%) 79108.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15001.112, 37998.696), stdev = 20544.112
[info]   CI (99.9%): [≈ 0, 94109.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55.898 ops/s
[info] # Warmup Iteration   2: 1196.666 ops/s
[info] # Warmup Iteration   3: 5434.943 ops/s
[info] # Warmup Iteration   4: 8709.663 ops/s
[info] # Warmup Iteration   5: 9265.689 ops/s
[info] Iteration   1: 9324.955 ops/s
[info]                  ·gc.alloc.rate:                   1992.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              336338.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337158.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 9288.606 ops/s
[info]                  ·gc.alloc.rate:                   1974.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              334381.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339142.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 9335.168 ops/s
[info]                  ·gc.alloc.rate:                   1967.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              331734.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224943.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9181.692 ops/s
[info]                  ·gc.alloc.rate:                   1993.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              341703.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342636.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9330.787 ops/s
[info]                  ·gc.alloc.rate:                   2032.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              342793.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337411.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   9292.242 ±(99.9%) 248.307 ops/s [Average]
[info]   (min, avg, max) = (9181.692, 9292.242, 9335.168), stdev = 64.485
[info]   CI (99.9%): [9043.934, 9540.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1992.203 ±(99.9%) 97.003 MB/sec [Average]
[info]   (min, avg, max) = (1967.853, 1992.203, 2032.527), stdev = 25.191
[info]   CI (99.9%): [1895.200, 2089.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   337390.342 ±(99.9%) 18259.589 B/op [Average]
[info]   (min, avg, max) = (331734.367, 337390.342, 342793.497), stdev = 4741.957
[info]   CI (99.9%): [319130.753, 355649.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1866.806 ±(99.9%) 1146.135 MB/sec [Average]
[info]   (min, avg, max) = (1334.368, 1866.806, 2002.493), stdev = 297.648
[info]   CI (99.9%): [720.671, 3012.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   316258.550 ±(99.9%) 196742.769 B/op [Average]
[info]   (min, avg, max) = (224943.529, 316258.550, 342636.822), stdev = 51093.472
[info]   CI (99.9%): [119515.782, 513001.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.727 ±(99.9%) 4.684 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.727, 2.884), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 5.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   123.175 ±(99.9%) 793.133 B/op [Average]
[info]   (min, avg, max) = (3.511, 123.175, 488.471), stdev = 205.974
[info]   CI (99.9%): [≈ 0, 916.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 13.000), stdev = 4.561
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12432.001 ops/s
[info] # Warmup Iteration   2: 59281.958 ops/s
[info] # Warmup Iteration   3: 62553.789 ops/s
[info] # Warmup Iteration   4: 66662.745 ops/s
[info] # Warmup Iteration   5: 65851.379 ops/s
[info] Iteration   1: 66537.364 ops/s
[info]                  ·gc.alloc.rate:               871.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          20605.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15654.268 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 66376.893 ops/s
[info]                  ·gc.alloc.rate:                   892.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              21164.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31447.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 65856.795 ops/s
[info]                  ·gc.alloc.rate:               866.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          20697.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15863.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 63387.587 ops/s
[info]                  ·gc.alloc.rate:               965.994 MB/sec
[info]                  ·gc.alloc.rate.norm:          23984.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16481.427 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 66129.721 ops/s
[info]                  ·gc.alloc.rate:                   890.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              21196.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31676.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   65657.672 ±(99.9%) 4986.139 ops/s [Average]
[info]   (min, avg, max) = (63387.587, 65657.672, 66537.364), stdev = 1294.885
[info]   CI (99.9%): [60671.533, 70643.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   897.373 ±(99.9%) 154.399 MB/sec [Average]
[info]   (min, avg, max) = (866.090, 897.373, 965.994), stdev = 40.097
[info]   CI (99.9%): [742.974, 1051.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21529.576 ±(99.9%) 5383.995 B/op [Average]
[info]   (min, avg, max) = (20605.353, 21529.576, 23984.880), stdev = 1398.206
[info]   CI (99.9%): [16145.581, 26913.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.432 ±(99.9%) 1403.788 MB/sec [Average]
[info]   (min, avg, max) = (661.985, 929.432, 1330.915), stdev = 364.559
[info]   CI (99.9%): [≈ 0, 2333.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22224.513 ±(99.9%) 32843.597 B/op [Average]
[info]   (min, avg, max) = (15654.268, 22224.513, 31676.064), stdev = 8529.378
[info]   CI (99.9%): [≈ 0, 55068.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.183 ±(99.9%) 1.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.893), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.350 ±(99.9%) 36.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.350, 21.257), stdev = 9.454
[info]   CI (99.9%): [≈ 0, 40.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34699.010 ops/s
[info] # Warmup Iteration   2: 97056.572 ops/s
[info] # Warmup Iteration   3: 105484.156 ops/s
[info] # Warmup Iteration   4: 110896.461 ops/s
[info] # Warmup Iteration   5: 111025.015 ops/s
[info] Iteration   1: 110416.116 ops/s
[info]                  ·gc.alloc.rate:               726.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          10352.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9533.113 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 110535.339 ops/s
[info]                  ·gc.alloc.rate:                   727.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              10362.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9532.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 110989.880 ops/s
[info]                  ·gc.alloc.rate:               726.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          10306.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9493.522 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 110172.594 ops/s
[info]                  ·gc.alloc.rate:               750.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          10722.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19127.652 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 111457.202 ops/s
[info]                  ·gc.alloc.rate:               732.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          10348.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9462.901 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   110714.226 ±(99.9%) 1965.559 ops/s [Average]
[info]   (min, avg, max) = (110172.594, 110714.226, 111457.202), stdev = 510.449
[info]   CI (99.9%): [108748.667, 112679.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   732.952 ±(99.9%) 39.291 MB/sec [Average]
[info]   (min, avg, max) = (726.485, 732.952, 750.628), stdev = 10.204
[info]   CI (99.9%): [693.661, 772.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10418.462 ±(99.9%) 660.510 B/op [Average]
[info]   (min, avg, max) = (10306.102, 10418.462, 10722.877), stdev = 171.532
[info]   CI (99.9%): [9757.952, 11078.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.456 ±(99.9%) 1152.764 MB/sec [Average]
[info]   (min, avg, max) = (668.988, 803.456, 1338.984), stdev = 299.369
[info]   CI (99.9%): [≈ 0, 1956.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11429.888 ±(99.9%) 16570.403 B/op [Average]
[info]   (min, avg, max) = (9462.901, 11429.888, 19127.652), stdev = 4303.281
[info]   CI (99.9%): [≈ 0, 28000.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35710.476 ops/s
[info] # Warmup Iteration   2: 101026.397 ops/s
[info] # Warmup Iteration   3: 116710.330 ops/s
[info] # Warmup Iteration   4: 119224.053 ops/s
[info] # Warmup Iteration   5: 119178.963 ops/s
[info] Iteration   1: 119249.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 118887.184 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 118490.299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 119274.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 119369.043 ops/s
[info]                  ·gc.alloc.rate:      1.059 MB/sec
[info]                  ·gc.alloc.rate.norm: 13.959 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   119054.096 ±(99.9%) 1403.867 ops/s [Average]
[info]   (min, avg, max) = (118490.299, 119054.096, 119369.043), stdev = 364.580
[info]   CI (99.9%): [117650.229, 120457.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.212 ±(99.9%) 1.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.212, 1.059), stdev = 0.473
[info]   CI (99.9%): [≈ 0, 2.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.795 ±(99.9%) 24.032 B/op [Average]
[info]   (min, avg, max) = (0.004, 2.795, 13.959), stdev = 6.241
[info]   CI (99.9%): [≈ 0, 26.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66180.590 ops/s
[info] # Warmup Iteration   2: 377997.013 ops/s
[info] # Warmup Iteration   3: 403787.198 ops/s
[info] # Warmup Iteration   4: 375356.008 ops/s
[info] # Warmup Iteration   5: 375673.245 ops/s
[info] Iteration   1: 378310.075 ops/s
[info]                  ·gc.alloc.rate:                   2177.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              9060.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8329.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 377908.270 ops/s
[info]                  ·gc.alloc.rate:                   2176.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              9059.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11063.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.692 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 380142.677 ops/s
[info]                  ·gc.alloc.rate:                   2163.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              8955.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8264.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 380175.347 ops/s
[info]                  ·gc.alloc.rate:               2176.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          9006.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8279.901 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 369762.700 ops/s
[info]                  ·gc.alloc.rate:                   2257.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              9607.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8539.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   377259.814 ±(99.9%) 16622.732 ops/s [Average]
[info]   (min, avg, max) = (369762.700, 377259.814, 380175.347), stdev = 4316.871
[info]   CI (99.9%): [360637.082, 393882.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2190.294 ±(99.9%) 146.722 MB/sec [Average]
[info]   (min, avg, max) = (2163.092, 2190.294, 2257.597), stdev = 38.103
[info]   CI (99.9%): [2043.573, 2337.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9137.941 ±(99.9%) 1025.312 B/op [Average]
[info]   (min, avg, max) = (8955.427, 9137.941, 9607.900), stdev = 266.270
[info]   CI (99.9%): [8112.629, 10163.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2132.751 ±(99.9%) 1131.191 MB/sec [Average]
[info]   (min, avg, max) = (1996.207, 2132.751, 2658.214), stdev = 293.767
[info]   CI (99.9%): [1001.561, 3263.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8895.331 ±(99.9%) 4685.439 B/op [Average]
[info]   (min, avg, max) = (8264.507, 8895.331, 11063.038), stdev = 1216.794
[info]   CI (99.9%): [4209.892, 13580.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.656 ±(99.9%) 3.430 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.656, 2.053), stdev = 0.891
[info]   CI (99.9%): [≈ 0, 4.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.770 ±(99.9%) 14.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.770, 8.739), stdev = 3.783
[info]   CI (99.9%): [≈ 0, 17.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69771.767 ops/s
[info] # Warmup Iteration   2: 603265.202 ops/s
[info] # Warmup Iteration   3: 688069.784 ops/s
[info] # Warmup Iteration   4: 976171.811 ops/s
[info] # Warmup Iteration   5: 974142.493 ops/s
[info] Iteration   1: 987778.872 ops/s
[info]                  ·gc.alloc.rate:               678.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          1081.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1054.447 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 982599.562 ops/s
[info]                  ·gc.alloc.rate:               684.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          1096.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1060.051 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 987226.116 ops/s
[info]                  ·gc.alloc.rate:                   685.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1092.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 985350.629 ops/s
[info]                  ·gc.alloc.rate:               676.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          1080.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1058.150 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 984134.319 ops/s
[info]                  ·gc.alloc.rate:                   685.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              1096.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1061.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   985417.900 ±(99.9%) 8267.453 ops/s [Average]
[info]   (min, avg, max) = (982599.562, 985417.900, 987778.872), stdev = 2147.031
[info]   CI (99.9%): [977150.447, 993685.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   682.250 ±(99.9%) 16.043 MB/sec [Average]
[info]   (min, avg, max) = (676.710, 682.250, 685.913), stdev = 4.166
[info]   CI (99.9%): [666.208, 698.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1089.636 ±(99.9%) 30.070 B/op [Average]
[info]   (min, avg, max) = (1080.901, 1089.636, 1096.987), stdev = 7.809
[info]   CI (99.9%): [1059.565, 1119.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.495 ±(99.9%) 3.048 MB/sec [Average]
[info]   (min, avg, max) = (661.765, 662.495, 663.792), stdev = 0.791
[info]   CI (99.9%): [659.447, 665.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1058.080 ±(99.9%) 11.109 B/op [Average]
[info]   (min, avg, max) = (1054.447, 1058.080, 1061.608), stdev = 2.885
[info]   CI (99.9%): [1046.970, 1069.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.084), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 601962.826 ops/s
[info] # Warmup Iteration   2: 1677950.186 ops/s
[info] # Warmup Iteration   3: 1947923.545 ops/s
[info] # Warmup Iteration   4: 1968391.177 ops/s
[info] # Warmup Iteration   5: 1964453.231 ops/s
[info] Iteration   1: 1972719.330 ops/s
[info]                  ·gc.alloc.rate:               990.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          789.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 533.318 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1954830.842 ops/s
[info]                  ·gc.alloc.rate:                   1006.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              810.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1077.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1927558.024 ops/s
[info]                  ·gc.alloc.rate:                   969.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              791.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1953697.064 ops/s
[info]                  ·gc.alloc.rate:               988.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          796.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 539.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1959111.524 ops/s
[info]                  ·gc.alloc.rate:               995.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          799.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1076.159 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1953583.357 ±(99.9%) 63144.492 ops/s [Average]
[info]   (min, avg, max) = (1927558.024, 1953583.357, 1972719.330), stdev = 16398.424
[info]   CI (99.9%): [1890438.865, 2016727.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   990.016 ±(99.9%) 51.179 MB/sec [Average]
[info]   (min, avg, max) = (969.715, 990.016, 1006.331), stdev = 13.291
[info]   CI (99.9%): [938.837, 1041.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   797.565 ±(99.9%) 30.649 B/op [Average]
[info]   (min, avg, max) = (789.978, 797.565, 810.109), stdev = 7.959
[info]   CI (99.9%): [766.916, 828.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.078 ±(99.9%) 1412.753 MB/sec [Average]
[info]   (min, avg, max) = (668.458, 937.078, 1339.550), stdev = 366.887
[info]   CI (99.9%): [≈ 0, 2349.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   754.573 ±(99.9%) 1132.817 B/op [Average]
[info]   (min, avg, max) = (533.318, 754.573, 1077.440), stdev = 294.189
[info]   CI (99.9%): [≈ 0, 1887.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4433.467 ops/s
[info] # Warmup Iteration   2: 109921.789 ops/s
[info] # Warmup Iteration   3: 177715.367 ops/s
[info] # Warmup Iteration   4: 190742.130 ops/s
[info] # Warmup Iteration   5: 192781.693 ops/s
[info] Iteration   1: 192567.355 ops/s
[info]                  ·gc.alloc.rate:                   4730.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              38649.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4699.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38396.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 189431.091 ops/s
[info]                  ·gc.alloc.rate:                   4657.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              38681.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4048.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33623.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 193307.259 ops/s
[info]                  ·gc.alloc.rate:                   4777.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              38885.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4740.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38581.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 193755.014 ops/s
[info]                  ·gc.alloc.rate:                   4787.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              38875.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4753.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38601.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 185945.496 ops/s
[info]                  ·gc.alloc.rate:                   4643.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              39301.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4751.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40214.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   191001.243 ±(99.9%) 12680.789 ops/s [Average]
[info]   (min, avg, max) = (185945.496, 191001.243, 193755.014), stdev = 3293.161
[info]   CI (99.9%): [178320.454, 203682.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4719.289 ±(99.9%) 255.224 MB/sec [Average]
[info]   (min, avg, max) = (4643.860, 4719.289, 4787.162), stdev = 66.281
[info]   CI (99.9%): [4464.065, 4974.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   38878.823 ±(99.9%) 1000.819 B/op [Average]
[info]   (min, avg, max) = (38649.932, 38878.823, 39301.661), stdev = 259.910
[info]   CI (99.9%): [37878.004, 39879.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4598.610 ±(99.9%) 1186.589 MB/sec [Average]
[info]   (min, avg, max) = (4048.771, 4598.610, 4753.379), stdev = 308.153
[info]   CI (99.9%): [3412.021, 5785.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37883.364 ±(99.9%) 9597.387 B/op [Average]
[info]   (min, avg, max) = (33623.106, 37883.364, 40214.039), stdev = 2492.411
[info]   CI (99.9%): [28285.977, 47480.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 0.371 B/op [Average]
[info]   (min, avg, max) = (0.169, 0.275, 0.352), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 13.000), stdev = 1.483
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107730.397 ops/s
[info] # Warmup Iteration   2: 354682.396 ops/s
[info] # Warmup Iteration   3: 443341.164 ops/s
[info] # Warmup Iteration   4: 439526.783 ops/s
[info] # Warmup Iteration   5: 443122.428 ops/s
[info] Iteration   1: 441242.081 ops/s
[info]                  ·gc.alloc.rate:                   1469.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              5242.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7144.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 439944.787 ops/s
[info]                  ·gc.alloc.rate:               1465.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          5241.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4780.195 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 446295.974 ops/s
[info]                  ·gc.alloc.rate:                   1463.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              5162.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4717.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 442428.597 ops/s
[info]                  ·gc.alloc.rate:                   1477.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              5255.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4748.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 447775.002 ops/s
[info]                  ·gc.alloc.rate:                   1479.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4682.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   443537.288 ±(99.9%) 12911.405 ops/s [Average]
[info]   (min, avg, max) = (439944.787, 443537.288, 447775.002), stdev = 3353.051
[info]   CI (99.9%): [430625.883, 456448.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1471.198 ±(99.9%) 27.261 MB/sec [Average]
[info]   (min, avg, max) = (1463.849, 1471.198, 1479.485), stdev = 7.080
[info]   CI (99.9%): [1443.937, 1498.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5220.601 ±(99.9%) 148.907 B/op [Average]
[info]   (min, avg, max) = (5162.374, 5220.601, 5255.832), stdev = 38.671
[info]   CI (99.9%): [5071.695, 5369.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.858 ±(99.9%) 1150.242 MB/sec [Average]
[info]   (min, avg, max) = (1332.248, 1468.858, 2003.202), stdev = 298.714
[info]   CI (99.9%): [318.616, 2619.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5214.776 ±(99.9%) 4156.637 B/op [Average]
[info]   (min, avg, max) = (4682.773, 5214.776, 7144.695), stdev = 1079.465
[info]   CI (99.9%): [1058.139, 9371.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.855 ±(99.9%) 7.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.855, 4.122), stdev = 1.826
[info]   CI (99.9%): [≈ 0, 7.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.016 ±(99.9%) 24.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.016, 14.536), stdev = 6.440
[info]   CI (99.9%): [≈ 0, 27.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 4.393
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317572.281 ops/s
[info] # Warmup Iteration   2: 742805.668 ops/s
[info] # Warmup Iteration   3: 885992.907 ops/s
[info] # Warmup Iteration   4: 920506.993 ops/s
[info] # Warmup Iteration   5: 921062.182 ops/s
[info] Iteration   1: 921191.644 ops/s
[info]                  ·gc.alloc.rate:      426.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 919627.728 ops/s
[info]                  ·gc.alloc.rate:               448.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          766.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1132.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 918776.196 ops/s
[info]                  ·gc.alloc.rate:                   440.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1133.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 920394.751 ops/s
[info]                  ·gc.alloc.rate:      426.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.222 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 920130.685 ops/s
[info]                  ·gc.alloc.rate:               445.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          762.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1131.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   920024.201 ±(99.9%) 3458.232 ops/s [Average]
[info]   (min, avg, max) = (918776.196, 920024.201, 921191.644), stdev = 898.092
[info]   CI (99.9%): [916565.968, 923482.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   437.289 ±(99.9%) 40.791 MB/sec [Average]
[info]   (min, avg, max) = (426.033, 437.289, 448.128), stdev = 10.593
[info]   CI (99.9%): [396.498, 478.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   747.930 ±(99.9%) 71.609 B/op [Average]
[info]   (min, avg, max) = (728.001, 747.930, 766.746), stdev = 18.597
[info]   CI (99.9%): [676.322, 819.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.972 ±(99.9%) 1395.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.972, 661.658), stdev = 362.384
[info]   CI (99.9%): [≈ 0, 1792.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   679.344 ±(99.9%) 2387.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 679.344, 1133.152), stdev = 620.153
[info]   CI (99.9%): [≈ 0, 3067.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 1.468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.853), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 1.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.292 ±(99.9%) 2.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.292, 1.460), stdev = 0.653
[info]   CI (99.9%): [≈ 0, 2.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 713437.420 ops/s
[info] # Warmup Iteration   2: 1655761.965 ops/s
[info] # Warmup Iteration   3: 1591821.954 ops/s
[info] # Warmup Iteration   4: 1617473.199 ops/s
[info] # Warmup Iteration   5: 1597636.815 ops/s
[info] Iteration   1: 1585937.862 ops/s
[info]                  ·gc.alloc.rate:                   749.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     663.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1562522.432 ops/s
[info]                  ·gc.alloc.rate:                   791.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              797.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1347.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1624405.277 ops/s
[info]                  ·gc.alloc.rate:               769.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 648.313 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1594617.682 ops/s
[info]                  ·gc.alloc.rate:                   760.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     660.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1615090.430 ops/s
[info]                  ·gc.alloc.rate:               766.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652.405 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1596514.737 ±(99.9%) 94200.880 ops/s [Average]
[info]   (min, avg, max) = (1562522.432, 1596514.737, 1624405.277), stdev = 24463.670
[info]   CI (99.9%): [1502313.856, 1690715.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   767.643 ±(99.9%) 59.328 MB/sec [Average]
[info]   (min, avg, max) = (749.817, 767.643, 791.711), stdev = 15.407
[info]   CI (99.9%): [708.315, 826.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   756.811 ±(99.9%) 87.979 B/op [Average]
[info]   (min, avg, max) = (743.768, 756.811, 797.445), stdev = 22.848
[info]   CI (99.9%): [668.832, 844.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.857 ±(99.9%) 1151.248 MB/sec [Average]
[info]   (min, avg, max) = (668.447, 802.857, 1337.680), stdev = 298.976
[info]   CI (99.9%): [≈ 0, 1954.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   794.314 ±(99.9%) 1190.711 B/op [Average]
[info]   (min, avg, max) = (648.313, 794.314, 1347.368), stdev = 309.224
[info]   CI (99.9%): [≈ 0, 1985.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 887530.999 ops/s
[info] # Warmup Iteration   2: 1715425.728 ops/s
[info] # Warmup Iteration   3: 1691580.071 ops/s
[info] # Warmup Iteration   4: 1696326.979 ops/s
[info] # Warmup Iteration   5: 1696262.236 ops/s
[info] Iteration   1: 1694380.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1696434.194 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1695642.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1695640.433 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1696237.175 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1695666.835 ±(99.9%) 3086.846 ops/s [Average]
[info]   (min, avg, max) = (1694380.330, 1695666.835, 1696434.194), stdev = 801.644
[info]   CI (99.9%): [1692579.989, 1698753.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43476.640 ops/s
[info] # Warmup Iteration   2: 561129.957 ops/s
[info] # Warmup Iteration   3: 555502.980 ops/s
[info] # Warmup Iteration   4: 597016.425 ops/s
[info] # Warmup Iteration   5: 627869.870 ops/s
[info] Iteration   1: 667141.563 ops/s
[info]                  ·gc.alloc.rate:               925.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          2182.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1555.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 667105.095 ops/s
[info]                  ·gc.alloc.rate:                   926.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              2185.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1554.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 664061.933 ops/s
[info]                  ·gc.alloc.rate:                   943.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              2236.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3121.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 666999.689 ops/s
[info]                  ·gc.alloc.rate:               921.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          2174.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1553.015 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 666787.599 ops/s
[info]                  ·gc.alloc.rate:               924.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          2181.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1554.297 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   666419.176 ±(99.9%) 5101.795 ops/s [Average]
[info]   (min, avg, max) = (664061.933, 666419.176, 667141.563), stdev = 1324.920
[info]   CI (99.9%): [661317.381, 671520.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   928.267 ±(99.9%) 33.519 MB/sec [Average]
[info]   (min, avg, max) = (921.431, 928.267, 943.475), stdev = 8.705
[info]   CI (99.9%): [894.747, 961.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2191.874 ±(99.9%) 96.392 B/op [Average]
[info]   (min, avg, max) = (2174.169, 2191.874, 2236.050), stdev = 25.033
[info]   CI (99.9%): [2095.482, 2288.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   790.543 ±(99.9%) 1133.366 MB/sec [Average]
[info]   (min, avg, max) = (658.181, 790.543, 1317.058), stdev = 294.332
[info]   CI (99.9%): [≈ 0, 1923.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1867.802 ±(99.9%) 2698.569 B/op [Average]
[info]   (min, avg, max) = (1553.015, 1867.802, 3121.448), stdev = 700.810
[info]   CI (99.9%): [≈ 0, 4566.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.049), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:17
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                      N/A  thrpt    5   1084395.142 ±    46877.358   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      2448.485 ±      155.430  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      3553.491 ±      118.481    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2391.236 ±     1400.386  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      3469.282 ±     1989.759    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.944 ±        7.467  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.359 ±       10.752    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        18.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        30.000                     ms
[info] AdtBenchmark.readJacksonScala                                                               N/A  thrpt    5   1963871.776 ±   145970.678   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1272.814 ±       63.960  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5      1019.965 ±       26.289    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1199.290 ±     1146.963  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       962.641 ±      939.921    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.275 ±        2.234  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.217 ±        1.764    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                      N/A  thrpt    5        17.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                              N/A  thrpt    5   5728072.160 ±   103527.819   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       391.491 ±       50.050  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       107.556 ±       14.933    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       370.073 ±     1324.178  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       101.882 ±      364.453    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.001 ±        0.010    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5         3.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                     N/A  thrpt    5        10.000                     ms
[info] AdtBenchmark.readPlayJson                                                                   N/A  thrpt    5    467327.363 ±     5158.911   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2474.574 ±       88.699  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8333.065 ±      260.926    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2409.359 ±     1420.759  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8112.509 ±     4754.148    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.569 ±        4.295  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         1.922 ±       14.527    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5        18.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                          N/A  thrpt    5        31.000                     ms
[info] AdtBenchmark.writeCirce                                                                     N/A  thrpt    5   1113742.547 ±    45854.652   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2963.729 ±      179.934  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4187.390 ±      135.779    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2909.770 ±     1384.180  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4109.561 ±     1875.879    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         1.482 ±        7.669  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         2.107 ±       10.913    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        22.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        52.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                              N/A  thrpt    5   3004224.134 ±   101147.371   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1197.065 ±       56.023  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       627.104 ±       28.399    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1196.494 ±     1140.994  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       627.321 ±      604.613    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.154 ±        1.149  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.081 ±        0.603    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        16.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  19880867.390 ±  1842634.123   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1041.275 ±      134.071  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        82.410 ±        5.109    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       937.113 ±     1412.011  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        74.051 ±      109.694    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.018 ±        0.083  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.001 ±        0.007    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         7.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        26.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  19294919.800 ±    95120.368   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5         0.129 ±        1.111  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5         0.011 ±        0.091    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                  N/A  thrpt    5   1110468.448 ±    17787.352   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      2547.274 ±       88.451  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5      3610.015 ±      118.178    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2545.698 ±     1157.099  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      3608.635 ±     1668.578    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.487 ±        3.846  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.690 ±        5.448    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        19.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        32.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                  N/A  thrpt    5   4080658.516 ±    69730.858   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3742.848 ±      139.719  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      1443.450 ±       40.417    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3622.395 ±     1470.088  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1396.921 ±      562.365    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.037 ±        0.067  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.014 ±        0.026    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        27.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        36.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                            N/A  thrpt    5  11376926.048 ±  1748162.220   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5      1437.567 ±      109.253  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       198.959 ±       18.458    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1464.041 ±     1145.699  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       203.866 ±      193.211    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.041 ±        7.957  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.142 ±        1.076    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5        11.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        31.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                           N/A  thrpt    5   3849873.197 ±   120665.917   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      2332.248 ±       44.669  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5       953.354 ±       22.406    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2151.769 ±     1157.382  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5       880.100 ±      493.915    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.171 ±        1.253  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.069 ±        0.506    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        16.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        24.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                          N/A  thrpt    5  15027970.312 ±  1019829.208   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5      1969.380 ±       75.670  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5       206.272 ±        9.132    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      2009.747 ±       11.148  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       210.524 ±       14.412    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.754 ±        4.452  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.080 ±        0.474    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5        15.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        26.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                               N/A  thrpt    5   1788194.275 ±    21279.720   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      3104.516 ±       88.156  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      2732.073 ±       60.766    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      3090.298 ±     1405.650  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      2720.149 ±     1258.852    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.083 ±        0.538  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.074 ±        0.476    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        36.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                 N/A  thrpt    5   5130393.533 ±    48645.481   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      2578.290 ±      102.885  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5       790.856 ±       27.357    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2499.438 ±     1131.131  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       766.760 ±      349.790    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         1.429 ±        7.504  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.439 ±        2.306    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        19.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        42.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                           N/A  thrpt    5  23752277.074 ±  1122073.766   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       752.509 ±       86.611  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5        49.868 ±        5.732    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       797.735 ±     1145.046  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        52.910 ±       76.715    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.008 ±        0.072  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.001 ±        0.005    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         6.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5        19.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                          N/A  thrpt    5  10988639.088 ±   410119.186   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       346.078 ±       46.035  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        49.563 ±        5.747    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       396.160 ±     1392.560  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        56.604 ±      198.997    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.008 ±        0.072  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.001 ±        0.010    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         3.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         6.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                         N/A  thrpt    5  34872859.565 ±   664566.880   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5      1098.151 ±       39.031  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5        49.560 ±        2.612    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      1071.030 ±     1412.373  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        48.400 ±       64.543    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.800 ±        6.815  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.036 ±        0.308    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         8.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        29.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5  38438308.749 ±   339430.811   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5         0.424 ±        3.466  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.017 ±        0.142    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                              N/A  thrpt    5   2341978.317 ±    79948.777   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      3336.373 ±      145.037  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5      2241.948 ±       61.378    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      3230.785 ±     1125.036  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      2171.570 ±      779.954    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.075 ±        0.379  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.050 ±        0.252    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        24.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        37.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                    128  thrpt    5    377320.478 ±     6591.724   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2233.427 ±       64.659  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      9314.687 ±      232.780    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2252.266 ±     1393.510  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      9396.530 ±     5913.456    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.005 ±        3.525  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         4.201 ±       14.738    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                           128  thrpt    5        39.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                             128  thrpt    5    915521.985 ±    29938.966   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       778.184 ±       34.144  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5      1337.598 ±       30.593    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       661.702 ±        3.148  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1137.452 ±       36.062    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.015 ±        0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.025 ±        0.115    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         5.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5         9.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                            128  thrpt    5   1715204.192 ±    33900.984   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      1174.455 ±       49.451  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1077.701 ±       64.496    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1072.660 ±     1414.177  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       985.449 ±     1312.383    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.806 ±        5.061  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.743 ±        4.675    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         8.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        25.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                 128  thrpt    5    218242.350 ±     8977.423   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      4034.622 ±      119.169  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5     29090.901 ±      862.219    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      3880.577 ±     1114.456  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     27988.466 ±     8505.812    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.341 ±        2.537  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         2.452 ±       18.210    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        29.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        41.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                   128  thrpt    5    453545.083 ±     7373.946   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1487.090 ±       44.075  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      5160.133 ±      128.876    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1468.840 ±     1143.191  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5095.355 ±     3921.298    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.881 ±        7.163  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3.058 ±       24.859    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                          128  thrpt    5        30.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                            128  thrpt    5   1016552.653 ±    40336.183   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       485.508 ±       52.006  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       751.585 ±       51.997    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       527.846 ±     1136.230  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       813.516 ±     1751.154    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.003 ±        0.022  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.004 ±        0.034    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         4.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5         7.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                           128  thrpt    5   2781744.510 ±   162253.899   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1328.266 ±       42.497  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       751.540 ±       24.123    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1340.020 ±        5.056  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       758.265 ±       46.008    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.816 ±        4.968  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.461 ±        2.815    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        29.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   2809704.933 ±    19247.119   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.290 ±        2.498  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.163 ±        1.404    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                128  thrpt    5    686785.176 ±    15656.816   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       957.227 ±       59.981  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5      2193.515 ±      122.738    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       927.422 ±     1397.951  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2124.959 ±     3199.274    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.142 ±        1.130  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.323 ±        2.574    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        33.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                       128  thrpt    5     21437.290 ±     3157.652   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1859.983 ±      717.869  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    137125.492 ±    75183.781    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1809.734 ±     1121.655  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    133275.617 ±    91032.854    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         5.415 ±       22.747  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       393.720 ±     1652.886    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                              128  thrpt    5        66.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                128  thrpt    5     42366.893 ±      754.416   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1165.640 ±       37.993  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     43300.459 ±     1587.988    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1196.308 ±     1145.490  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     44450.985 ±    42704.064    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.470 ±        2.710  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        17.427 ±      100.522    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         9.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        16.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                               128  thrpt    5     47061.264 ±     4135.553   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       719.098 ±      390.783  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5     24120.973 ±    15651.153    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       647.929 ±        7.223  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     21677.320 ±     2177.832    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.188 ±        1.544  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         6.247 ±       51.347    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         5.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        38.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                    128  thrpt    5     38932.663 ±     1127.354   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1695.647 ±       55.069  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     68545.361 ±     1683.724    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1601.554 ±     1407.994  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     64773.626 ±    57625.696    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.261 ±        1.954  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        10.553 ±       79.153    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        22.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                      128  thrpt    5     35880.443 ±      309.382   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2354.819 ±       35.915  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5    103284.005 ±     2090.561    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2263.602 ±     1406.409  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     99283.567 ±    61711.455    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.987 ±        4.857  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        43.211 ±      212.409    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        17.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        43.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                               128  thrpt    5     34766.141 ±     2271.070   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1906.938 ±       64.410  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     86336.096 ±     4039.304    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1979.252 ±       31.173  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     89613.859 ±     4783.248    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.327 ±        6.721  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        61.023 ±      311.726    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        15.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        57.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                              128  thrpt    5     40077.712 ±     2348.480   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2104.085 ±      220.671  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     82656.786 ±    12755.336    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1967.438 ±       36.560  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     77267.622 ±     3842.944    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.848 ±        6.763  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        34.001 ±      271.838    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        15.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        26.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5     41948.365 ±     2004.032   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      2119.943 ±      125.980  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5     79530.523 ±     1859.708    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      2119.721 ±     1130.706  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5     79490.571 ±    40798.534    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         1.075 ±        8.241  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5        40.942 ±      314.234    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                   128  thrpt    5      9526.513 ±      388.720   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1294.880 ±       43.130  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5    213914.591 ±     8715.995    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1202.671 ±     1148.745  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    198916.836 ±   192905.389    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.962 ±        6.836  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       158.754 ±     1128.640    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         9.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        36.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                           128  thrpt    5     21638.330 ±     3727.092   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1922.576 ±      382.600  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    140188.955 ±    46268.070    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1838.880 ±     1677.050  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    134834.869 ±   142912.033    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         5.225 ±       14.194  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       380.072 ±     1069.320    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                  128  thrpt    5       108.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                    128  thrpt    5     50017.579 ±      639.334   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1405.771 ±        6.224  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     44233.338 ±      557.180    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1279.834 ±       15.316  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     40270.548 ±      520.003    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.375 ±        2.001  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        11.785 ±       63.017    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        73.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                   128  thrpt    5     68417.839 ±     4346.512   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       782.500 ±       33.646  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     17999.573 ±      424.906    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       802.018 ±     1150.320  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     18543.074 ±    28244.268    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.197 ±        1.699    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         6.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        26.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                        128  thrpt    5     42757.901 ±      383.406   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2450.565 ±       43.116  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     90179.338 ±     1788.648    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2407.944 ±     1422.819  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     88621.984 ±    52689.929    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.200 ±        1.155  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.360 ±       42.544    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        18.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        29.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                   128  thrpt    5     43349.447 ±      930.403   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1880.493 ±       50.544  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     68262.440 ±     1126.005    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1862.947 ±     1151.918  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     67673.699 ±    42914.491    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.324 ±        2.351  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        11.814 ±       85.781    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        24.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                  128  thrpt    5     56053.292 ±     4002.682   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1761.977 ±      102.619  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     49462.858 ±     1347.122    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1739.221 ±     1409.901  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     48913.705 ±    41418.295    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.806 ±        4.198  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        23.031 ±      121.100    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        13.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        27.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     57633.790 ±     1605.606   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5      1701.480 ±       33.196  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     46457.589 ±      534.845    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5      1598.716 ±     1405.476  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     43670.220 ±    38797.955    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.841 ±        6.521  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5        23.190 ±      180.087    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5        12.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                          128  thrpt    5    414143.884 ±     7955.848   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2250.089 ±       66.119  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8550.714 ±      187.892    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2133.605 ±     1141.214  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8108.069 ±     4333.419    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.947 ±        7.586  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.596 ±       28.799    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        16.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        36.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                    128  thrpt    5   1897299.909 ±    94522.751   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       613.970 ±       34.797  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       509.271 ±       32.549    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       531.428 ±     1143.939  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       442.379 ±      952.535    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±        0.059  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.007 ±        0.050    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         4.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    828020.529 ±     6411.320   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       314.393 ±       38.711  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       597.546 ±       76.765    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       396.732 ±     1394.571  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       754.879 ±     2653.519    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         3.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   2167568.037 ±    13586.190   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       426.189 ±       26.202  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       309.379 ±       19.415    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       369.840 ±     1323.252  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       268.572 ±      961.139    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.006 ±        0.052    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         3.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        11.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    171565.403 ±     3110.841   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4513.080 ±       78.115  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     41397.128 ±      812.418    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4329.922 ±     1436.189  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     39717.430 ±    13194.066    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.042 ±        0.080  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.382 ±        0.731    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        49.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    480304.437 ±    14754.120   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1581.676 ±       50.794  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5182.074 ±      203.400    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1597.465 ±     1405.734  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5235.423 ±     4643.056    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.037 ±        0.164  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.122 ±        0.534    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        17.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                   128  thrpt    5   2658421.801 ±   111417.579   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5      1264.023 ±       63.315  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       748.191 ±       22.303    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5      1197.564 ±     1148.838  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       707.968 ±      668.371    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.991 ±        8.309  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.586 ±        4.919    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         9.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5        28.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5   1170620.576 ±    84480.788   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       564.933 ±       53.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       759.952 ±      123.259    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       530.081 ±     1141.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       714.550 ±     1539.444    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         7.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3013631.055 ±    75567.951   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1438.210 ±       43.454  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       751.049 ±       23.810    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1340.412 ±        7.801  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       699.992 ±       20.144    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.785 ±        5.539  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.409 ±        2.887    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3234591.168 ±     3401.220   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    968562.403 ±    43658.327   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1038.850 ±       35.927  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      1688.100 ±       66.447    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1057.221 ±     1393.621  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1719.904 ±     2288.755    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.972 ±        8.236  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.600 ±       13.556    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        38.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                             128  thrpt    5    241253.151 ±     6984.382   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3005.697 ±      113.624  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19602.296 ±      571.249    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2940.673 ±     1437.414  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19189.831 ±     9813.369    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.083 ±        0.584  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.543 ±        3.805    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        22.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                    128  thrpt    5        35.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                      128  thrpt    5    424867.805 ±     9524.248   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       294.990 ±       30.043  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      1092.695 ±      106.421    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       263.941 ±     1391.687  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       977.254 ±     5152.778    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                     128  thrpt    5   1303045.446 ±    15159.566   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       257.458 ±       27.806  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       310.946 ±       36.781    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.664 ±     1079.135  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       247.921 ±     1307.219    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±        0.023  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.005 ±        0.028    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                          128  thrpt    5    124889.179 ±     2484.162   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4093.396 ±      131.999  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     51577.321 ±     1212.781    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3921.531 ±     1186.865  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     49416.359 ±    15169.527    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.037 ±        0.067  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.472 ±        0.837    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        29.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        41.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                            128  thrpt    5    342333.027 ±    10316.571   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1870.357 ±       30.807  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      8598.003 ±      222.901    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1863.023 ±     1144.777  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8569.127 ±     5377.773    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.270 ±        1.691  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.247 ±        7.816    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        27.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                     128  thrpt    5   2294442.789 ±    34699.648   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       632.170 ±       29.856  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       433.590 ±       22.647    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       532.264 ±     1145.741  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       365.163 ±      786.075    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.011 ±        0.094  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.007 ±        0.064    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        17.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                    128  thrpt    5   3247193.862 ±   122467.719   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       907.993 ±       55.816  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       440.121 ±       35.348    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.032 ±     1412.577  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       455.368 ±      701.414    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.005 ±        0.031  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±        0.015    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        26.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   3393136.958 ±   125185.038   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.045 ±        0.381  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.021 ±        0.176    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                         128  thrpt    5     58590.842 ±      682.214   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2051.125 ±       49.454  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     55094.790 ±      802.746    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1994.629 ±       12.177  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     53578.046 ±      803.390    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.994 ±        6.290  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        26.711 ±      169.364    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        15.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        31.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                             128  thrpt    5    322881.667 ±     9928.757   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3469.194 ±      113.969  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     16908.228 ±      554.841    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3348.834 ±       71.854  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16322.206 ±      695.186    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.367 ±        2.934  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.783 ±       14.264    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        25.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        33.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                      128  thrpt    5    699911.668 ±    26546.043   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1899.292 ±       82.189  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      4270.120 ±       84.807    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1871.155 ±     1161.348  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4210.029 ±     2680.906    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±        0.044  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.028 ±        0.099    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        14.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        21.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   2931508.684 ±    89132.465   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1041.748 ±       23.033  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       559.051 ±       26.419    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1071.583 ±     1411.078  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       575.575 ±      763.976    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.619 ±        5.284  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.331 ±        2.822    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                          128  thrpt    5    134961.233 ±     1316.059   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4364.819 ±      120.485  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     50889.061 ±     1081.177    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4186.160 ±     1134.028  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     48809.371 ±    13435.359    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.046 ±        0.067  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.534 ±        0.782    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        31.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        49.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                            128  thrpt    5    334154.472 ±     2997.069   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      2644.922 ±       89.388  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     12456.738 ±      450.285    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2541.680 ±     1165.750  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     11972.704 ±     5565.973    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.075 ±        0.333  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.353 ±        1.573    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        19.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        28.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2133642.047 ±    42810.700   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       747.647 ±       29.908  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       551.474 ±       27.684    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       796.972 ±     1147.368  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       588.348 ±      855.985    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.006 ±        0.035  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.004 ±        0.026    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         6.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        24.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   2812565.789 ±   110126.193   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       987.410 ±       68.549  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       552.452 ±       31.458    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       938.014 ±     1413.744  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       524.827 ±      790.852    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.025 ±        0.105  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.014 ±        0.059    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        24.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   2944009.967 ±    17927.687   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.195 ±        1.421  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.104 ±        0.760    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                         128  thrpt    5    797431.998 ±     7205.945   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4878.676 ±       40.567  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9628.014 ±       13.080    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4742.380 ±       78.995  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9359.117 ±      216.427    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.042 ±        0.057  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.082 ±        0.112    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        35.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        51.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                           128  thrpt    5     29142.965 ±      889.603   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1779.817 ±      169.161  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     96108.830 ±    10105.481    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1733.264 ±     1410.213  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     93573.598 ±    75832.623    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.222 ±        6.827  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        66.373 ±      371.669    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        37.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                     128  thrpt    5    102407.183 ±     8550.495   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       884.151 ±      269.016  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5     13610.004 ±     5318.063    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       893.534 ±     1340.058  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     13773.682 ±    21183.312    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.664 ±        5.213  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        10.098 ±       79.100    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                           128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                            128  thrpt    5        56.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                    128  thrpt    5     76702.147 ±    12573.396   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1350.293 ±      729.620  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     27661.818 ±    12892.617    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1296.011 ±       81.407  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     26614.806 ±     3595.480    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.093 ±        2.873  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        22.564 ±       60.945    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        96.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                   128  thrpt    5    140015.101 ±     3597.523   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       850.609 ±       32.869  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      9560.309 ±      341.855    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       752.290 ±     1079.630  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      8459.034 ±    12203.740    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.604 ±        5.131  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         6.711 ±       57.025    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        66.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                        128  thrpt    5     50638.271 ±     2241.218   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2075.872 ±       96.537  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     64515.466 ±     2972.553    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2000.049 ±       38.762  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     62161.863 ±     2799.517    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.046 ±        0.132  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.418 ±        4.079    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        15.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        22.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                          128  thrpt    5     43702.804 ±     1563.086   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5       707.084 ±       22.382  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     25459.831 ±      703.746    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5       661.737 ±        2.099  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     23828.139 ±      919.935    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.010 ±        0.040  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.357 ±        1.460    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        25.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                   128  thrpt    5     44246.065 ±     3045.054   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       557.892 ±      195.194  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     19864.954 ±     7825.253    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       530.931 ±     1142.869  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     18812.480 ±    40518.580    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.166 ±        1.431  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.834 ±       50.229    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        21.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                  128  thrpt    5     48979.033 ±     3476.927   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       535.852 ±      221.099  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     17246.387 ±     8499.055    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       533.566 ±     1148.541  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     17208.872 ±    37069.793    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.002 ±        0.018  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.067 ±        0.575    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        19.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     50073.411 ±     1760.848   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5       537.684 ±      149.300  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     16891.537 ±     4401.023    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5       531.228 ±     1143.508  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     16678.538 ±    35908.907    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.186 ±        1.604  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         5.794 ±       49.892    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                         128  thrpt    5     17348.427 ±     2887.741   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1466.579 ±      854.647  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    133852.341 ±    99613.679    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1457.132 ±     1109.789  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    133225.448 ±   127234.950    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.636 ±        4.152  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       149.859 ±      384.040    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                               128  thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                128  thrpt    5        60.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                  128  thrpt    5     16147.097 ±     3128.147   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1243.506 ±      927.894  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    122306.219 ±   115936.821    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1240.043 ±     1719.501  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    122115.276 ±   185001.343    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1.584 ±       12.305  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       151.999 ±     1171.487    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5       140.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                 128  thrpt    5    163658.224 ±     4082.742   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       436.163 ±       41.681  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      4194.228 ±      370.257    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       401.450 ±     1411.154  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3864.105 ±    13583.667    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        13.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                      128  thrpt    5     16035.109 ±     2651.294   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1517.963 ±      383.619  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    149111.150 ±    41614.261    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1436.201 ±     1116.765  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    141016.165 ±   108255.617    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.950 ±        6.917  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        96.138 ±      696.346    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        19.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                        128  thrpt    5     71557.889 ±     2304.839   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1665.072 ±       39.439  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     36619.638 ±     1277.647    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1598.956 ±     1405.155  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     35193.275 ±    31550.328    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.883 ±        7.065  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        19.653 ±      157.510    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        30.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                 128  thrpt    5    108823.085 ±     2197.778   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1449.180 ±       27.134  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     20955.712 ±      167.300    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1327.682 ±        6.770  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     19199.214 ±      444.526    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.937 ±        7.297  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        13.599 ±      105.961    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5        10.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        33.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                128  thrpt    5    243804.515 ±     5358.212   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       401.553 ±       48.398  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2591.890 ±      356.093    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       369.695 ±     1322.670  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2394.664 ±     8568.850    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.054 ±        0.463    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        12.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    288824.664 ±     1786.736   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                     128  thrpt    5     99257.914 ±    16868.588   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1775.696 ±      460.235  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     28238.620 ±    12260.547    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1753.432 ±     1682.085  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28032.215 ±    31650.903    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         7.816 ±       28.565  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       125.304 ±      454.806    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5       200.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                             128  thrpt    5    132583.625 ±     1949.172   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1666.137 ±       56.111  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19776.317 ±      620.123    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1594.062 ±     1400.393  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18925.002 ±    16715.093    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         1.023 ±        8.011  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        12.181 ±       95.458    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        32.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                      128  thrpt    5    160105.034 ±     5896.020   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       962.533 ±       54.807  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9461.262 ±      357.132    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       921.744 ±     1390.818  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9051.105 ±    13533.342    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.017 ±        0.067  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.163 ±        0.657    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        13.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                     128  thrpt    5    224331.174 ±     7772.583   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       150.514 ±       20.101  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1055.573 ±      116.966    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.690 ±     1079.273  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1422.814 ±     7502.197    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.029 ±        0.251  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.203 ±        1.752    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                          128  thrpt    5     89984.004 ±     5033.240   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2863.461 ±      153.688  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     50079.424 ±     1523.914    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2814.737 ±     1169.210  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     49293.097 ±    23483.942    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.112 ±        0.582  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.958 ±       10.088    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        21.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        34.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                            128  thrpt    5    235905.523 ±     9532.976   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1534.493 ±       52.324  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10236.605 ±      426.733    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1600.357 ±     1402.499  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10681.799 ±     9492.961    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.881 ±        5.405  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.905 ±       36.394    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        31.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                     128  thrpt    5    771374.225 ±    12651.348   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       610.001 ±       13.391  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1244.472 ±       34.537    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       664.627 ±        2.608  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1355.918 ±       26.806    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.017 ±        0.090    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        23.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                    128  thrpt    5    692273.306 ±    22407.267   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       555.230 ±       72.957  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1262.110 ±      169.404    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       535.035 ±     1151.704  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1218.676 ±     2623.600    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.009 ±        0.082    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        15.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    683841.052 ±     2452.284   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                         128  thrpt    5    618481.241 ±    10231.068   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1529.530 ±       40.365  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      3891.456 ±       91.797    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1469.731 ±     1149.535  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3741.241 ±     2981.707    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.504 ±        3.895  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.285 ±        9.936    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        25.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                            128  thrpt    5     42224.320 ±     1659.906   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1951.256 ±       74.693  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     72727.379 ±     2319.385    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1848.159 ±     1127.622  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     68936.261 ±    43243.855    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.685 ±       12.555  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        62.965 ±      468.750    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                      128  thrpt    5    302432.124 ±     4046.291   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       322.468 ±       33.334  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1678.014 ±      181.418    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       367.451 ±     1313.337  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1912.868 ±     6841.492    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.022 ±        0.187    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        11.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                     128  thrpt    5    127415.569 ±     1199.938   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1182.261 ±       31.360  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     14602.192 ±      386.697    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1193.516 ±     1142.007  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     14745.372 ±    14158.937    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.103 ±        0.889    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                    128  thrpt    5    547511.801 ±    34653.828   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       379.071 ±       98.554  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1090.541 ±      350.397    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.501 ±     1321.901  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1059.726 ±     3795.134    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.003 ±        0.022  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.007 ±        0.064    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        12.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                         128  thrpt    5     54871.515 ±     1215.861   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      2350.340 ±       42.270  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     67498.713 ±     1342.426    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2387.742 ±     1399.691  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     68623.854 ±    41697.820    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.425 ±        3.081  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        12.278 ±       89.060    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        18.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        32.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                           128  thrpt    5     96215.897 ±     1057.866   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       765.410 ±       18.008  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     12518.847 ±      263.902    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667.791 ±        1.608  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10922.286 ±      125.187    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        22.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                     128  thrpt    5    121698.342 ±     2217.271   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       464.919 ±       27.770  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5      6012.318 ±      431.878    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       531.457 ±     1144.001  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      6883.674 ±    14817.918    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±        0.095  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.215 ±        1.230    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        14.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                    128  thrpt    5    107196.200 ±     1574.244   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       410.204 ±       27.043  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      6022.584 ±      451.955    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       498.863 ±     1102.331  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      7333.144 ±    16189.404    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.061 ±        0.527    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        18.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                   128  thrpt    5    124743.468 ±     2110.739   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       472.048 ±       31.806  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5955.597 ±      464.406    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       401.038 ±     1409.704  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5071.983 ±    17828.817    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.105 ±        0.906    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        12.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    121349.476 ±    11700.579   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5       368.546 ±       47.835  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5      4781.337 ±      730.444    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   128  thrpt    5       369.050 ±     1320.014  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      4844.524 ±    17375.625    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.113 ±        0.972    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  128  thrpt    5        12.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                          128  thrpt    5     12986.114 ±     4071.318   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2269.888 ±     1247.661  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    279328.225 ±   256353.503    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2173.456 ±     1342.610  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    266436.144 ±   232372.167    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         3.809 ±       22.799  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       457.707 ±     2622.686    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                128  thrpt    5        17.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                 128  thrpt    5        97.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                   128  thrpt    5     13046.071 ±     1791.328   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1983.522 ±      352.413  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    239677.592 ±    66292.237    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1860.913 ±     1142.805  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    225226.315 ±   153274.735    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.271 ±        2.332  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        31.738 ±      273.273    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        14.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        32.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                  128  thrpt    5    229644.751 ±    11891.677   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       617.874 ±       26.033  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      4234.411 ±      134.258    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       665.911 ±        1.203  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      4564.054 ±      240.631    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.057 ±        0.298    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        21.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                       128  thrpt    5      6615.432 ±      199.508   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1690.053 ±       71.774  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    401959.921 ±     7881.326    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1737.793 ±     1409.790  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    413147.847 ±   331554.103    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.342 ±        1.664  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        81.708 ±      399.849    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        25.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                         128  thrpt    5     34270.339 ±     3053.473   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      2115.490 ±      516.062  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     97273.136 ±    33218.427    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2060.623 ±     1071.098  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     94877.692 ±    59287.056    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         2.671 ±       10.058  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       122.346 ±      456.190    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        16.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                128  thrpt    5       111.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                  128  thrpt    5     42060.416 ±    15615.301   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      2126.749 ±      606.347  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     79997.168 ±    31158.975    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      2052.493 ±     1099.306  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     77616.590 ±    58128.129    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         6.571 ±       28.608  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       254.432 ±     1149.053    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        16.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        42.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                 128  thrpt    5    319171.593 ±     4098.483   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       726.862 ±       17.929  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      3583.844 ±      110.080    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       669.795 ±        1.634  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3302.460 ±       46.796    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.041 ±        0.216    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        17.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    348947.187 ±    32586.870   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                      128  thrpt    5     39338.610 ±     8674.282   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      2766.136 ±      883.774  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    111230.788 ±    58980.336    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2637.649 ±     1856.357  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    106568.671 ±   101461.067    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5        19.335 ±       87.470  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       788.967 ±     3507.589    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        23.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5       288.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                              128  thrpt    5    187105.190 ±     6322.794   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2631.384 ±       83.559  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     22130.382 ±      789.768    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2537.077 ±     1163.886  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21345.929 ±    10092.630    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.104 ±        0.631  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.872 ±        5.282    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        19.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                     128  thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                        128  thrpt    5    569221.777 ±     3112.228   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       605.057 ±       31.596  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5      1672.854 ±       93.480    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       530.021 ±     1140.912  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1466.136 ±     3155.979    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.014 ±        0.097  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.038 ±        0.268    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                              128  thrpt    5         4.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                               128  thrpt    5        15.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                       128  thrpt    5    471335.041 ±     6853.120   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       457.487 ±       30.435  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1527.379 ±      123.572    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       397.367 ±     1396.802  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1330.047 ±     4675.319    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.028 ±        0.240    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         3.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        14.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                      128  thrpt    5    683431.334 ±    10713.840   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       469.567 ±       43.192  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1081.162 ±      109.827    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       503.568 ±     1115.133  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1160.908 ±     2571.519    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.005 ±        0.025  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±        0.057    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         4.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        17.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                           128  thrpt    5    111969.974 ±     8725.584   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      3835.538 ±      144.049  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     53918.201 ±     2674.995    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      3646.317 ±     1432.443  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     51315.322 ±    22824.758    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.257 ±        1.948  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.696 ±       28.092    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        27.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        38.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                             128  thrpt    5    248877.115 ±     2311.959   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1767.634 ±       25.941  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     11177.924 ±      171.542    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1733.281 ±     1405.276  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     10959.991 ±     8871.744    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.933 ±        7.718  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.905 ±       48.861    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        30.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                       128  thrpt    5   1224642.745 ±   155903.835   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       684.746 ±       84.377  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       879.842 ±       16.838    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       664.295 ±        1.745  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       854.297 ±      111.286    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.008 ±        0.032  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.011 ±        0.042    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                             128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                              128  thrpt    5        19.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                      128  thrpt    5   1225474.757 ±    75420.242   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       689.358 ±       34.029  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       885.172 ±       32.570    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       666.123 ±        2.320  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       855.450 ±       52.815    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.013 ±        0.046  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.017 ±        0.059    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        21.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1141111.103 ±    16813.842   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       638.799 ±       21.745  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       880.886 ±       21.130    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       668.412 ±        2.011  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       921.742 ±       14.280    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±        0.060    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        19.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1189292.841 ±     9054.436   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         0.104 ±        0.895  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5         0.138 ±        1.189    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                          128  thrpt    5     40368.799 ±     1047.423   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1946.410 ±       45.369  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     75868.230 ±     1776.388    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1986.598 ±       14.531  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     77436.578 ±     2413.002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.775 ±        7.325  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        69.321 ±      285.742    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        15.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        45.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                         128  thrpt    5    142912.055 ±     1484.179   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1791.397 ±       44.043  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     19727.849 ±      409.552    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1724.036 ±     1395.788  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     18979.160 ±    15223.605    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.968 ±        5.870  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        10.687 ±       64.801    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                               128  thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                128  thrpt    5        27.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                  128  thrpt    5    205054.268 ±     6567.575   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1226.334 ±       48.285  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      9410.940 ±      379.235    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1192.418 ±     1142.953  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      9160.530 ±     8899.138    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.153 ±        0.973  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.174 ±        7.432    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         9.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        15.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                 128  thrpt    5    249858.892 ±    22129.968   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1348.064 ±       37.563  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      8492.272 ±      668.037    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1334.867 ±        4.770  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      8409.826 ±      774.373    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.980 ±        4.459  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         6.206 ±       28.085    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        31.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                      128  thrpt    5    105328.330 ±     3549.924   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3496.811 ±      142.567  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     52247.325 ±     1742.174    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3354.467 ±       79.595  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     50122.810 ±     2083.450    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.075 ±        0.423  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.114 ±        6.259    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        25.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        39.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                        128  thrpt    5    240088.484 ±    17609.260   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1560.280 ±       82.418  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10228.420 ±      369.217    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1599.659 ±     1402.659  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10505.027 ±     9610.196    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.883 ±        5.555  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.806 ±       36.659    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        31.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                 128  thrpt    5    844261.199 ±    20867.708   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       669.520 ±       24.422  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      1247.906 ±       23.150    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       663.178 ±        2.597  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      1236.141 ±       32.879    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.017 ±        0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.031 ±        0.125    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         9.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                128  thrpt    5    687060.707 ±    11404.164   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       545.661 ±       52.040  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      1249.785 ±      133.546    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       535.297 ±     1152.267  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1227.841 ±     2643.055    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.011 ±        0.094  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.025 ±        0.215    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        16.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    689535.761 ±    10506.252   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                     128  thrpt    5    626894.396 ±     4712.585   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1551.446 ±       41.858  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      3894.743 ±       92.113    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1606.600 ±     1415.848  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4032.807 ±     3544.866    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.379 ±        2.905  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.953 ±        7.305    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        12.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        23.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                    128  thrpt    5     11969.539 ±     1341.510   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1663.328 ±      752.148  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5    219299.835 ±   122922.192    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1724.983 ±     1399.856  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    226131.671 ±   168131.832    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.264 ±       10.256  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       164.298 ±     1333.503    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        13.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        43.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                             128  thrpt    5     12055.964 ±      661.442   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1534.576 ±      359.013  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5    200435.714 ±    55656.178    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1590.212 ±     1403.977  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5    208141.887 ±   195551.263    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.017 ±        0.036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         2.182 ±        4.698    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        12.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        25.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5    350146.004 ±    12640.801   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      2345.594 ±      118.450  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     10540.865 ±      321.238    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      2270.852 ±     1402.140  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     10214.632 ±     6587.519    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.196 ±        1.553  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.883 ±        6.996    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5        17.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        24.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                 128  thrpt    5     10071.780 ±      491.883   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1767.165 ±       17.090  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5    276149.309 ±    14250.354    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1729.454 ±     1405.597  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    270584.056 ±   226895.598    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.429 ±        2.337  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        66.884 ±      362.182    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        13.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        25.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                   128  thrpt    5     26899.388 ±     3184.032   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1468.933 ±      651.769  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5     86237.619 ±    49033.136    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1433.724 ±     1133.710  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     84101.110 ±    71937.159    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         2.443 ±        5.889  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       141.792 ±      345.150    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        81.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     31553.139 ±     5582.424   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1259.282 ±      325.675  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5     63075.030 ±    28982.229    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1191.699 ±     1138.064  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     59707.358 ±    60232.955    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.588 ±        6.233  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        80.961 ±      323.103    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        32.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    802125.933 ±    28511.554   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1488.716 ±       60.669  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      2920.892 ±       68.758    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1339.153 ±        8.212  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      2627.628 ±      102.157    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.801 ±        6.839  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         1.566 ±       13.362    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        26.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    922143.409 ±    76326.693   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                128  thrpt    5     32726.949 ±     5789.672   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1441.509 ±      433.754  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5     69644.082 ±    35206.249    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1427.488 ±     1153.183  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     69322.200 ±    72085.547    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.268 ±        7.276  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        60.624 ±      340.114    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        81.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                        128  thrpt    5     42484.611 ±    28138.081   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1901.683 ±     1665.558  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     70206.840 ±    32800.505    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1883.579 ±     1739.090  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     69571.151 ±    38323.810    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         5.763 ±       24.650  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       235.180 ±      999.499    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                              128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                               128  thrpt    5        97.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                 128  thrpt    5     42936.396 ±     2191.295   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1488.020 ±       86.170  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     54539.977 ±     1433.431    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1449.082 ±     1140.837  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     53097.245 ±    41201.470    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.916 ±        5.548  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        33.386 ±      201.045    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        50.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                128  thrpt    5    550044.721 ±    26332.921   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1474.256 ±       79.463  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4217.602 ±       75.079    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1474.172 ±     1145.636  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4215.303 ±     3203.265    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.783 ±        6.410  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.224 ±       18.203    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        29.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                     128  thrpt    5     22070.046 ±     4009.052   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2118.639 ±      327.408  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    151540.247 ±    51377.110    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      2129.024 ±     1127.724  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    152315.916 ±    94237.045    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.857 ±        6.226  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        64.808 ±      478.126    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        16.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        32.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                       128  thrpt    5     72099.235 ±     1910.495   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1904.419 ±       67.448  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     41567.069 ±      669.532    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1856.519 ±     1137.272  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40522.961 ±    24838.898    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.396 ±        4.531  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        30.448 ±       98.778    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                128  thrpt    5    209200.478 ±     2197.348   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1629.500 ±       12.137  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     12256.403 ±      198.704    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1466.147 ±     1146.297  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     11031.949 ±     8750.199    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.234 ±        1.705  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.758 ±       12.788    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        19.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                               128  thrpt    5    844947.921 ±    53380.201   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       930.683 ±       29.014  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1733.438 ±       88.374    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       804.350 ±     1154.304  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1504.677 ±     2275.181    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.016 ±        0.137    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         6.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        25.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5    909912.361 ±    22983.887   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         1.097 ±        9.445  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         1.920 ±       16.530    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                    128  thrpt    5     92744.719 ±     2106.726   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      1934.825 ±       25.361  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     32829.585 ±      429.783    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1861.477 ±     1146.448  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     31598.115 ±    19763.009    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.998 ±        5.916  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        17.010 ±      101.154    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        31.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                        128  thrpt    5     17944.435 ±     2615.002   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1751.258 ±      367.907  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5    153879.352 ±    47934.327    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1718.979 ±     1392.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    151833.670 ±   141864.775    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.161 ±        7.460  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       190.881 ±      657.956    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                               128  thrpt    5        42.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                 128  thrpt    5     18934.432 ±     1983.273   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1602.963 ±      275.494  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5    133414.019 ±    35294.508    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1598.716 ±     1407.594  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    133338.693 ±   126461.437    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.299 ±        7.169  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       108.347 ±      591.033    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        12.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        34.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                128  thrpt    5    802146.288 ±    12756.395   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      2146.856 ±       52.047  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4211.520 ±      111.886    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      2007.762 ±       10.475  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3938.683 ±       78.111    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.790 ±        6.574  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.550 ±       12.910    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        15.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        25.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                     128  thrpt    5     14401.093 ±     1202.274   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2041.488 ±      391.768  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    223255.505 ±    54529.906    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1997.180 ±       27.897  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    218328.735 ±    19265.622    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.658 ±        9.615  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       180.633 ±     1057.404    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        27.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                       128  thrpt    5     47629.772 ±     2454.473   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1741.455 ±      395.374  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     57574.469 ±    15779.097    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1664.768 ±     1377.053  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     55071.208 ±    46840.838    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.770 ±        8.199  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        58.730 ±      271.397    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        13.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                              128  thrpt    5       104.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                128  thrpt    5     57972.231 ±     3609.789   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1567.239 ±       88.997  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     42539.786 ±     1536.626    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1443.995 ±     1133.001  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     39237.212 ±    31915.640    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         2.200 ±        6.128  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        60.277 ±      168.971    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        11.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        39.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                               128  thrpt    5   1039008.669 ±    28703.484   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       977.982 ±       59.511  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1481.317 ±       85.464    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.598 ±     1414.618  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1422.954 ±     2160.567    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.013 ±        0.066    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        27.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1114281.622 ±     9157.975   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         0.312 ±        1.650  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         0.442 ±        2.336    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                    128  thrpt    5      4087.500 ±      286.007   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5       560.657 ±       24.656  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5    215879.847 ±     8335.185    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       523.849 ±     1127.624  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    202060.998 ±   435298.564    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.016 ±        0.090  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         6.417 ±       35.297    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5         4.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        33.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                             128  thrpt    5    140909.719 ±     2683.657   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2194.385 ±       66.082  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     24507.859 ±      502.856    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2132.274 ±     1140.961  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     23810.659 ±    12582.298    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.659 ±        1.976  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         7.361 ±       22.086    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        16.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        31.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                       128  thrpt    5    401386.785 ±     4211.681   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       830.817 ±       31.977  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5      3257.134 ±      120.946    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       798.824 ±     1145.548  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3132.199 ±     4500.276    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.018 ±        0.129  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.072 ±        0.505    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5        22.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                      128  thrpt    5    279061.409 ±    14971.252   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       580.750 ±       22.548  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      3274.961 ±      110.403    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       658.525 ±        0.880  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3713.874 ±      199.060    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.021 ±        0.139  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.117 ±        0.776    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         5.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         9.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                     128  thrpt    5    491675.533 ±    15673.465   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       641.626 ±       16.525  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      2053.847 ±       93.064    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       668.839 ±        1.477  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2140.936 ±       69.441    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.027 ±        0.233    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         5.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        19.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                          128  thrpt    5    108228.135 ±     4791.898   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3760.078 ±      176.085  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     54669.675 ±     1874.715    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3648.836 ±     1441.183  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     53029.963 ±    19739.348    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.021 ±        0.080  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.304 ±        1.172    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        27.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        37.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                            128  thrpt    5    217585.573 ±    10164.889   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1874.957 ±       63.683  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     13559.422 ±      281.566    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1867.400 ±     1153.945  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     13510.672 ±     8488.351    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.923 ±        5.758  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.780 ±       42.470    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                      128  thrpt    5    929996.097 ±    43452.825   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       746.141 ±       29.068  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1262.593 ±       35.228    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       664.699 ±        1.726  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1124.876 ±       55.105    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.011 ±        0.092  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.018 ±        0.157    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5        19.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                     128  thrpt    5    621983.542 ±     7402.871   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       497.635 ±       34.579  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1259.125 ±      100.192    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       399.098 ±     1402.887  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1011.923 ±     3557.054    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.010 ±        0.090  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.026 ±        0.227    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        13.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                    128  thrpt    5    781794.240 ±    51716.577   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       634.505 ±       45.961  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1276.915 ±       56.005    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       668.871 ±        1.900  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1346.355 ±       89.038    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.017 ±        0.090    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         5.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        17.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    829921.295 ±    75444.424   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                         128  thrpt    5     35607.978 ±     1769.516   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1610.315 ±      100.676  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     71154.087 ±     2437.359    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1589.885 ±     1397.872  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     70190.237 ±    60226.672    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.283 ±        6.709  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        56.681 ±      296.766    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        12.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        46.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                   128  thrpt    5      9429.698 ±      297.076   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                    128  thrpt    5      1322.649 ±       67.761  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                               128  thrpt    5    220724.809 ±    16102.544    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1328.781 ±        7.656  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    221738.800 ±     7337.790    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.083 ±        0.629  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        13.851 ±      104.483    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                         128  thrpt    5        10.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                          128  thrpt    5        16.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                            128  thrpt    5      9160.242 ±      283.437   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                             128  thrpt    5      1236.118 ±      260.336  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    212381.951 ±    46402.692    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1192.466 ±     1137.637  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    204813.727 ±   194841.123    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.089 ±        0.573  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        15.310 ±       98.776    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                  128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                   128  thrpt    5        16.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                           128  thrpt    5    197423.729 ±     4177.452   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1969.005 ±       35.825  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5     15695.374 ±      354.638    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1859.383 ±     1134.865  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     14827.519 ±     9190.451    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.839 ±        5.425  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         6.706 ±       43.377    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                 128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                  128  thrpt    5        26.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                128  thrpt    5      8559.460 ±      828.431   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                 128  thrpt    5      1344.775 ±       35.944  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            128  thrpt    5    247330.674 ±    22644.971    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1324.572 ±       10.743  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    243637.707 ±    25864.071    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.384 ±        3.037  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        72.845 ±      578.871    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                      128  thrpt    5        10.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                       128  thrpt    5        20.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                  128  thrpt    5     22341.237 ±     1476.207   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                   128  thrpt    5      1423.544 ±      637.906  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                              128  thrpt    5    100365.591 ±    49153.190    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          128  thrpt    5      1426.580 ±     1143.145  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    100425.751 ±    78727.939    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.981 ±        5.599  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        68.593 ±      388.544    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                        128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                         128  thrpt    5       101.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                           128  thrpt    5     24465.427 ±     1922.852   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                            128  thrpt    5      1128.745 ±      666.595  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                       128  thrpt    5     72670.261 ±    44684.159    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1188.150 ±     1135.977  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     76371.511 ±    72425.030    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.362 ±        5.913  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        87.652 ±      384.934    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                 128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                  128  thrpt    5        47.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                          128  thrpt    5    533712.108 ±    24268.444   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           128  thrpt    5      1259.297 ±       51.032  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      128  thrpt    5      3713.748 ±      298.535    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  128  thrpt    5      1207.206 ±     1154.446  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             128  thrpt    5      3552.422 ±     3309.132    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.829 ±        6.287  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         2.428 ±       18.417    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                 128  thrpt    5        26.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                  128  thrpt    5    611892.876 ±     8849.871   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                               128  thrpt    5     25081.843 ±     6890.036   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                128  thrpt    5      1278.514 ±      663.548  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                           128  thrpt    5     80897.507 ±    58018.934    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       128  thrpt    5      1179.840 ±     1131.624  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     74714.023 ±    79624.581    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.575 ±        8.792  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        99.388 ±      538.480    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                     128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                      128  thrpt    5        61.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                       128  thrpt    5     13492.939 ±     2021.147   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1521.566 ±      457.809  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    177822.053 ±    67035.233    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1447.455 ±     1133.626  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    169010.469 ±   134395.502    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         2.041 ±       12.060  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       246.434 ±     1449.913    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                             128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                              128  thrpt    5        63.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                128  thrpt    5     12813.392 ±      547.095   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1309.064 ±      349.163  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5    160827.256 ±    47083.893    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1194.797 ±     1140.204  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    146819.158 ±   141219.003    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.581 ±       13.611  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       197.936 ±     1704.288    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        23.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                               128  thrpt    5    360549.127 ±    26625.959   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1690.153 ±      113.176  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      7376.651 ±      124.746    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1602.271 ±     1409.206  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6988.102 ±     6010.985    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.825 ±        6.201  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.595 ±       27.058    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        12.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        29.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                    128  thrpt    5     13660.803 ±      447.530   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1640.844 ±      352.420  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5    189070.663 ±    46427.817    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1602.461 ±     1408.100  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    184813.593 ±   167443.011    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.591 ±        2.792  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        68.127 ±      322.229    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        31.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                      128  thrpt    5     35487.086 ±     3671.839   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1509.975 ±      497.111  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5     67095.659 ±    28593.529    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1444.491 ±     1134.432  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     64236.161 ±    55047.770    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         2.954 ±       16.066  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       134.426 ±      732.108    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                             128  thrpt    5        35.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                               128  thrpt    5    133686.022 ±     4237.777   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      2519.268 ±      161.388  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     29653.157 ±     1114.321    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      2516.682 ±     1148.138  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     29628.359 ±    13642.915    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.194 ±        7.992  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        14.152 ±       94.604    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                              128  thrpt    5    876827.702 ±    17167.675   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1240.910 ±       46.163  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      2227.041 ±       99.692    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1206.320 ±     1153.339  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      2165.476 ±     2077.242    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.808 ±        5.420  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.455 ±        9.782    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        26.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    989282.074 ±     7565.530   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                   128  thrpt    5    127504.906 ±      766.905   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      2866.986 ±       74.695  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35383.645 ±     1085.313    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2662.936 ±       35.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     32865.188 ±      572.264    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.653 ±        4.797  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         8.045 ±       59.050    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        37.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                           128  thrpt    5     18402.111 ±     2362.535   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1078.449 ±      526.891  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     92587.358 ±    56074.160    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1065.588 ±     1404.038  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     91367.907 ±   122620.495    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.904 ±        5.937  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        75.199 ±      488.488    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        41.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                    128  thrpt    5     18804.717 ±     2567.162   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5       976.191 ±      931.337  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     82297.801 ±    89408.334    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       915.532 ±     1375.755  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     77487.455 ±   126549.276    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.740 ±        4.754  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        61.735 ±      393.541    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        27.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                   128  thrpt    5    165120.950 ±     1385.646   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       424.488 ±       21.839  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      4045.383 ±      240.643    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       397.312 ±     1396.607  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3791.943 ±    13329.229    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.080 ±        0.685    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         3.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        12.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                        128  thrpt    5     17127.554 ±     1258.886   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1249.845 ±      286.651  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    114919.810 ±    32284.540    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1192.655 ±     1143.167  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    109959.620 ±   109781.383    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.417 ±       10.859  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       130.264 ±      998.671    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        37.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                          128  thrpt    5     63373.044 ±     1218.122   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1813.545 ±       41.970  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     45028.494 ±      970.216    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1730.276 ±     1401.471  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     42985.478 ±    35307.647    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.940 ±        6.079  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        23.401 ±      151.510    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        13.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        28.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                   128  thrpt    5    102431.265 ±     2117.231   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1958.946 ±       46.825  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     30098.948 ±     1133.812    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1997.542 ±       11.403  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     30691.637 ±      669.696    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.933 ±        5.521  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        14.348 ±       85.012    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        15.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        31.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                  128  thrpt    5    308775.314 ±    22833.572   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       621.012 ±       72.706  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3167.455 ±      616.123    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       669.833 ±        1.368  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3414.864 ±      255.879    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.090 ±        0.755  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.453 ±        3.815    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        20.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    381968.086 ±     4957.619   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                       128  thrpt    5     94585.785 ±     2621.793   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1962.766 ±       47.554  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     32655.958 ±      417.633    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1995.598 ±       12.077  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     33203.338 ±      992.331    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.962 ±        7.395  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.086 ±      123.713    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5        15.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        30.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                            128  thrpt    5    220769.260 ±     1960.012   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2847.827 ±      125.866  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     20296.534 ±      861.601    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2805.226 ±     1171.009  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19992.795 ±     8335.377    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.100 ±        0.465  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.713 ±        3.318    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        21.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        29.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                      128  thrpt    5    822134.170 ±     7281.515   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       469.271 ±       31.684  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       898.212 ±       61.878    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       398.144 ±     1399.531  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       762.954 ±     2681.893    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.001 ±        0.008  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.002 ±        0.015    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        11.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                     128  thrpt    5    419507.101 ±     5442.684   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       361.190 ±       30.964  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1354.911 ±      128.334    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       366.447 ±     1309.131  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1377.482 ±     4919.585    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.016 ±        0.135    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        15.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                    128  thrpt    5   1086627.124 ±    35849.443   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       385.979 ±       35.115  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       559.038 ±       54.237    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.598 ±     1322.300  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       535.963 ±     1913.451    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.012 ±        0.063    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        12.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                         128  thrpt    5    117741.532 ±     1709.148   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3928.928 ±      121.864  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     52507.931 ±     1455.715    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3779.303 ±     1447.627  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     50514.797 ±    19635.280    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.025 ±        0.067  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.334 ±        0.895    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        28.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        40.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                           128  thrpt    5    316276.596 ±     5059.896   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1863.626 ±       46.448  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      9273.709 ±      218.302    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1865.799 ±     1151.333  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9286.895 ±     5785.551    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.885 ±        5.963  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.428 ±       29.839    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        14.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        29.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2006224.616 ±    78740.699   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       704.883 ±       27.775  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       552.919 ±       35.326    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       664.079 ±        2.197  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       520.901 ±       21.559    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±        0.074  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.009 ±        0.058    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        18.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                    128  thrpt    5   1922586.501 ±    61616.132   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       674.661 ±       23.420  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       552.252 ±       16.015    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       663.081 ±        3.227  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       542.796 ±       19.024    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±        0.029    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                   128  thrpt    5   2251442.897 ±   111911.001   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       784.833 ±       48.575  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       548.509 ±        8.907    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       669.230 ±        0.742  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       467.793 ±       23.326    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.006 ±        0.050    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        17.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2326197.531 ±    22388.468   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                        128  thrpt    5     48538.806 ±     1766.121   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      2000.670 ±       55.147  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     64865.213 ±     1097.670    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1987.904 ±       10.953  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     64454.030 ±     2157.383    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.537 ±        5.365  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        50.041 ±      175.577    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        15.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        54.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                             128  thrpt    5     17521.146 ±     2988.293   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2306.864 ±      486.190  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    207749.304 ±    72347.371    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2277.674 ±     1330.091  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    205240.083 ±   135945.106    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         7.020 ±        7.261  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       633.523 ±      695.531    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        18.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                    128  thrpt    5       176.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                      128  thrpt    5    108529.371 ±     3008.252   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1200.509 ±       47.411  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     17407.022 ±      438.205    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1195.693 ±     1144.423  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     17346.322 ±    16711.937    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.156 ±        1.258  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.292 ±       18.471    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        15.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                     128  thrpt    5    278968.761 ±     4689.170   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       932.647 ±       26.976  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      5260.982 ±      232.964    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       802.016 ±     1151.342  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4529.662 ±     6604.108    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±        0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.071 ±        0.611    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        23.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                          128  thrpt    5     16683.636 ±     1980.719   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2182.139 ±      285.418  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    205933.493 ±    29429.079    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2066.154 ±     1118.353  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    194553.332 ±    86953.132    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         2.098 ±       13.121  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       193.433 ±     1186.736    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        46.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                            128  thrpt    5     43486.104 ±      961.520   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      3412.907 ±       43.139  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    123513.171 ±     2924.779    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3220.230 ±     1133.048  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    116559.201 ±    41974.260    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.067 ±        0.183  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.412 ±        6.615    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        24.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        38.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                     128  thrpt    5    147167.038 ±     2674.657   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      2035.268 ±       36.304  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     21760.716 ±       67.882    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      2010.488 ±       22.799  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     21496.073 ±      390.051    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.194 ±        1.377  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.066 ±       14.689    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        15.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        21.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                    128  thrpt    5    252770.378 ±     6610.685   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       829.887 ±       29.817  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      5166.408 ±      217.731    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       804.168 ±     1154.609  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5008.740 ±     7235.416    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±        0.139  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.130 ±        0.867    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        20.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    280534.468 ±      553.780   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.168 ±        1.440  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.939 ±        8.071    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                         128  thrpt    5     61359.519 ±     1979.888   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4009.897 ±      108.690  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    102847.372 ±     3495.480    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3898.876 ±     1125.435  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     99973.508 ±    27403.094    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.050 ±        0.209  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.277 ±        5.314    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        29.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        41.000                     ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                        128  thrpt    5     37829.263 ±     3934.595   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1676.050 ±      338.041  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     69839.689 ±    21383.864    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1659.025 ±     1345.822  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     69211.049 ±    59670.147    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         3.312 ±       10.966  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       136.465 ±      443.669    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                 counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                               128  thrpt    5       110.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                 128  thrpt    5     39186.320 ±      433.451   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1226.935 ±       22.250  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     49272.892 ±      831.258    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1189.527 ±     1137.223  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     47786.748 ±    45878.447    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.532 ±        4.537  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        21.343 ±      181.967    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5         9.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        13.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                128  thrpt    5    645162.339 ±    36823.087   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1726.177 ±       52.086  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4210.985 ±      155.303    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1737.315 ±     1407.495  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4245.694 ±     3592.063    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.804 ±        6.172  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.950 ±       14.926    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        13.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        28.000                     ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                     128  thrpt    5     35636.071 ±     3288.656   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2193.541 ±      526.257  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     96922.270 ±    25406.639    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      2122.000 ±     1136.839  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     93997.299 ±    60269.815    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.903 ±        9.594  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        85.211 ±      432.295    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        16.000                 counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        35.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                       128  thrpt    5     96908.176 ±     2242.000   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      2156.759 ±       74.365  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     35023.006 ±      730.325    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1998.852 ±       12.593  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     32459.794 ±      666.531    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.902 ±        7.453  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.645 ±      120.992    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                             128  thrpt    5        15.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                              128  thrpt    5        26.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                128  thrpt    5    250121.461 ±    12155.227   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1717.507 ±       58.501  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10806.884 ±      317.295    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1598.452 ±     1404.714  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     10067.912 ±     9067.455    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.919 ±        7.419  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         5.737 ±       46.321    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        28.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                               128  thrpt    5   1117454.484 ±    17284.502   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       949.418 ±       32.626  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1337.048 ±       48.715    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       804.371 ±     1154.309  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1133.010 ±     1630.056    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.014 ±        0.077  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.019 ±        0.108    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         6.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        21.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1184207.811 ±     4255.230   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                    128  thrpt    5    236133.509 ±     5353.579   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      2499.616 ±      128.322  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     16658.435 ±      633.232    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      2546.491 ±     1159.309  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     16975.311 ±     7860.580    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.540 ±        4.467  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.593 ±       29.736    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        19.000                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        30.000                     ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                      128  thrpt    5     52608.809 ±     3617.301   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1438.556 ±       90.776  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     43032.694 ±      689.282    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                     128  thrpt    5         0.003 ±        0.023  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm                128  thrpt    5         0.082 ±        0.702    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Metaspace                                  128  thrpt    5         0.008 ±        0.068  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                             128  thrpt    5         0.245 ±        2.108    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1401.850 ±      763.762  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     42020.862 ±    25973.573    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen                                 128  thrpt    5         0.713 ±        6.139  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm                            128  thrpt    5        21.943 ±      188.940    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.815 ±        7.829  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        54.827 ±      237.602    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        12.000                 counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        85.000                     ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                     128  thrpt    5    776730.852 ±    46138.387   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1560.791 ±      103.044  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3162.082 ±      109.705    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1472.426 ±     1147.509  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2981.533 ±     2267.802    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.812 ±        4.666  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.640 ±        9.445    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        11.000                 counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        26.000                     ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                          128  thrpt    5     47581.682 ±     4397.311   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2632.668 ±      105.780  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     87112.559 ±     9564.926    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2544.950 ±     1162.383  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     84162.601 ±    37819.849    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.040 ±        8.416  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        35.632 ±      289.213    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                 counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        32.000                     ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                     128  thrpt    5    412831.072 ±    10301.780   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1079.115 ±       40.904  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      4113.381 ±      105.174    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1067.400 ±     1407.092  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4070.007 ±     5378.556    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.754 ±        6.426  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.867 ±       24.429    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8.000                 counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        34.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1644764.574 ±    26196.256   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       990.552 ±       39.246  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       947.748 ±       47.690    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       938.168 ±     1413.131  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       898.569 ±     1365.577    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.009 ±        0.035  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.009 ±        0.034    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        27.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1719145.000 ±     3341.870   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                         128  thrpt    5    372790.165 ±     5753.962   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2358.992 ±       84.465  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9956.790 ±      222.133    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2414.834 ±     1415.660  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     10193.390 ±     5995.809    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.413 ±        3.421  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.753 ±       14.531    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        18.000                 counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        29.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                           128  thrpt    5     85261.424 ±     1958.951   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1723.668 ±       59.778  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     31812.701 ±      609.491    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1713.151 ±     1389.264  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     31620.066 ±    25656.853    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.628 ±        7.658  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        30.033 ±      141.387    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        46.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                    128  thrpt    5     94113.819 ±     6929.079   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1263.361 ±      229.329  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     21147.451 ±     5508.628    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1327.305 ±       13.959  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     22202.117 ±     1794.256    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.468 ±        3.545  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         8.070 ±       61.392    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        18.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                   128  thrpt    5    105398.046 ±     4166.890   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1306.775 ±       51.904  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     19510.252 ±      420.207    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1321.227 ±        5.150  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     19727.297 ±      711.864    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.874 ±        6.004  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        12.949 ±       88.866    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        10.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        30.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                        128  thrpt    5     56244.333 ±     1234.582   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2210.761 ±       66.429  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61863.770 ±     2178.926    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2268.651 ±     1412.766  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     63508.444 ±    40326.775    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.404 ±        2.769  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        11.301 ±       77.443    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        17.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        28.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                          128  thrpt    5    163954.257 ±     6918.945   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1548.282 ±       34.719  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     14860.352 ±      326.768    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1466.792 ±     1154.228  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     14072.047 ±    10883.637    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.950 ±        7.775  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         9.064 ±       74.224    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                   128  thrpt    5    412646.695 ±     2931.150   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       526.246 ±       29.805  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2006.825 ±      125.796    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       529.548 ±     1139.898  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2020.966 ±     4350.303    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.016 ±        0.137    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         8.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                  128  thrpt    5    948779.279 ±    72748.431   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1208.413 ±       81.999  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      2004.421 ±       81.284    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1205.885 ±     1152.318  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      2000.957 ±     1922.616    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.869 ±        5.544  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.432 ±        9.184    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    962572.112 ±    13646.020   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.477 ±        4.107  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.778 ±        6.694    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                       128  thrpt    5    293204.045 ±    15807.925   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       898.745 ±       81.813  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      4823.491 ±      258.339    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       924.982 ±     1393.853  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4951.701 ±     7291.097    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.837 ±        7.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4.438 ±       37.487    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        30.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                       128  thrpt    5    149328.933 ±     3564.809   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1863.742 ±       30.781  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     19640.690 ±      239.890    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1850.518 ±     1135.339  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     19507.425 ±    12111.630    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.425 ±        7.495  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.116 ±       79.788    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                              128  thrpt    5        39.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                128  thrpt    5    205846.029 ±     6788.523   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1174.425 ±       72.191  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      8976.739 ±      353.803    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1058.770 ±     1397.428  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      8087.778 ±    10613.560    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.953 ±        7.720  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         7.266 ±       58.850    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        33.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                               128  thrpt    5    445650.137 ±     4097.310   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       889.797 ±       34.602  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      3141.749 ±      132.733    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       798.949 ±     1146.558  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      2821.959 ±     4067.633    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.014 ±        0.076  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.050 ±        0.269    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         6.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        26.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                    128  thrpt    5    102858.122 ±     4372.385   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      3281.710 ±      113.690  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     50212.991 ±      955.837    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      3223.284 ±     1136.728  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     49341.418 ±    18379.064    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.062 ±        0.358  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.959 ±        5.518    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        24.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        37.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                      128  thrpt    5    243814.991 ±     4609.607   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1544.965 ±       34.006  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5      9972.110 ±      351.979    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1469.040 ±     1156.282  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9488.867 ±     7671.546    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.904 ±        5.632  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.865 ±       36.641    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        30.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                               128  thrpt    5    776053.240 ±    24861.898   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       596.132 ±       27.284  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      1208.712 ±       37.007    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       665.357 ±        2.812  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1349.158 ±       48.152    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.017 ±        0.078  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.034 ±        0.160    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         5.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        19.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                              128  thrpt    5   1413281.403 ±    32570.690   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1076.587 ±       35.849  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      1198.763 ±       47.510    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1072.183 ±     1413.530  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1194.993 ±     1588.012    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.646 ±        5.493  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.720 ±        6.117    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         8.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        28.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   1497557.329 ±     8062.340   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         0.224 ±        1.927  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         0.236 ±        2.030    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                   128  thrpt    5    629680.557 ±    14602.472   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1545.098 ±       32.510  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5      3861.444 ±      138.519    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1470.943 ±     1153.981  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3679.593 ±     2989.381    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.306 ±        2.414  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.773 ±        6.098    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        19.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                    128  thrpt    5       947.146 ±      178.573   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2071.696 ±      109.294  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5   3446884.224 ±   554272.372    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2118.929 ±     1142.998  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5   3524773.985 ±  1927362.412    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.603 ±        8.273  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      2669.147 ±    13491.868    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        16.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        39.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                             128  thrpt    5       893.241 ±       62.644   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1903.102 ±       76.604  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5   3352834.253 ±   185927.691    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1867.041 ±     1138.801  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5   3289848.738 ±  2028389.782    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.225 ±        1.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5       399.921 ±     1934.056    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        24.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5     38704.520 ±      771.109   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       652.337 ±       24.337  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     26522.128 ±      811.665    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       662.439 ±        2.402  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     26933.440 ±      518.877    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.338 ±        1.782    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         5.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        26.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                 128  thrpt    5       913.527 ±       61.221   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      2041.153 ±       36.051  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5   3516486.383 ±   298239.155    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      2004.516 ±       24.644  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5   3453231.779 ±   257311.726    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.312 ±        2.039  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       531.615 ±     3460.703    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        15.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        25.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                   128  thrpt    5     16267.295 ±     1944.053   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1475.831 ±      711.197  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5    143302.030 ±    86629.957    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1433.244 ±     1122.419  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    139167.913 ±   122133.428    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         3.275 ±       13.271  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       324.176 ±     1329.352    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        62.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     18511.401 ±     1957.611   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1207.301 ±      601.782  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    102889.660 ±    60222.493    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1166.012 ±     1109.501  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     99121.379 ±    94533.796    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.885 ±        3.767  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        75.036 ±      317.279    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        62.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    317868.637 ±    15276.225   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1192.476 ±       91.943  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      5903.992 ±      245.540    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1202.521 ±     1150.274  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      5956.603 ±     5728.772    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.194 ±        8.450  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         5.888 ±       41.761    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         9.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        34.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    356977.840 ±    13801.564   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                128  thrpt    5     18621.888 ±     1881.105   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1302.291 ±      686.495  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5    110274.253 ±    65454.901    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1286.076 ±       10.833  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    108738.436 ±    11712.848    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         2.716 ±       13.406  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       235.090 ±     1160.996    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        59.000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                           128  thrpt    5   1399735.923 ±    34468.952   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5        59.870 ±       23.906  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5        67.346 ±       28.809    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       102.317 ±      880.982  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       116.378 ±     1002.051    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.352 ±        3.034  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.401 ±        3.451    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         1.000                 counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3.000                     ms
[info] BitSetBenchmark.readPlayJson                                                                128  thrpt    5    135335.720 ±     3980.717   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4653.670 ±      168.018  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     54116.052 ±     1045.678    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4462.124 ±     1421.423  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     51901.164 ±    17155.260    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.050 ±        0.072  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.582 ±        0.840    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        33.000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        50.000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                           128  thrpt    5   2232261.961 ±    17157.685   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       618.345 ±       35.892  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       435.927 ±       26.223    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       531.051 ±     1143.131  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       374.428 ±      805.992    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.011 ±        0.060  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.008 ±        0.042    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        15.000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                          128  thrpt    5   1947026.138 ±    51732.361   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       540.511 ±       47.424  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       436.808 ±       29.960    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       535.147 ±     1151.944  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       431.456 ±      928.784    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±        0.072  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.007 ±        0.058    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        14.000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1958812.868 ±    14106.940   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                               128  thrpt    5     57404.523 ±     1292.341   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2011.874 ±       34.572  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     55151.959 ±      819.850    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2009.952 ±       10.633  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     55099.924 ±     1103.813    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.478 ±        2.019  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        13.166 ±       55.800    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        15.000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        26.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                            N/A  thrpt    5   1203593.448 ±    56070.171   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      3477.955 ±       65.690  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5      4547.798 ±      163.818    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      3349.053 ±       84.021  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      4379.659 ±      312.278    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.050 ±        0.134  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.065 ±        0.172    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        25.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        35.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                      N/A  thrpt    5   5271240.715 ±   238616.421   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       327.145 ±       32.043  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5        97.673 ±        8.949    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       265.149 ±     1398.056  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5        79.156 ±      417.405    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.009 ±        0.076  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.003 ±        0.023    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         2.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5         7.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                     N/A  thrpt    5   1095345.962 ±   136806.430   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5      1236.270 ±      171.003  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5      1776.168 ±       87.778    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1199.529 ±     1142.587  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5      1729.173 ±     1714.832    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.196 ±        1.640  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.275 ±        2.307    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         9.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5        17.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                    N/A  thrpt    5  10511548.503 ±   323201.420   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       499.847 ±       41.726  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5        74.849 ±        8.521    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       504.041 ±     1116.480  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        75.562 ±      166.887    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.083 ±        0.657  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.012 ±        0.098    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        14.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                         N/A  thrpt    5    807113.248 ±     9256.788   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2989.072 ±      128.389  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5      5827.752 ±      194.765    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2948.925 ±     1423.755  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      5748.309 ±     2723.914    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.121 ±        0.996  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.235 ±        1.938    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        22.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        34.000                     ms
[info] GeoJSONBenchmark.readCirce                                                                  N/A  thrpt    5      5497.728 ±       88.824   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2448.203 ±      100.420  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    700775.910 ±    27183.372    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2280.980 ±     1414.743  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    653116.686 ±   411369.745    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.378 ±        1.499  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       108.317 ±      430.966    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        17.000                 counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        28.000                     ms
[info] GeoJSONBenchmark.readJacksonScala                                                           N/A  thrpt    5      7767.946 ±      348.266   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      3177.722 ±      101.643  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5    643768.415 ±    29231.564    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      3090.514 ±     1449.379  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    626651.141 ±   314368.303    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.087 ±        0.492  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        17.653 ±       98.763    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        23.000                 counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        38.000                     ms
[info] GeoJSONBenchmark.readJsoniterScala                                                          N/A  thrpt    5     56303.586 ±     6262.202   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       940.840 ±       73.760  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     26298.791 ±     1000.611    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       937.318 ±     1412.864  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     26378.711 ±    41962.776    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.010 ±        0.082  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.263 ±        2.269    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         7.000                 counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        28.000                     ms
[info] GeoJSONBenchmark.writeCirce                                                                 N/A  thrpt    5      5431.383 ±      351.477   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5       976.997 ±       93.911  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    283017.226 ±    10898.732    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.Compressed_Class_Space                                N/A  thrpt    5         0.004 ±        0.031  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.Compressed_Class_Space.norm                           N/A  thrpt    5         1.061 ±        9.131    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.Metaspace                                             N/A  thrpt    5         0.010 ±        0.088  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.Metaspace.norm                                        N/A  thrpt    5         3.045 ±       26.217    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       935.199 ±     1397.045  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    269919.011 ±   389545.692    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         1.093 ±        9.224  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       324.932 ±     2744.543    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5         9.000                 counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        72.000                     ms
[info] GeoJSONBenchmark.writeJacksonScala                                                          N/A  thrpt    5      5359.877 ±      243.756   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       581.897 ±       27.040  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5    170865.646 ±    12452.019    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       530.068 ±     1141.017  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5    156230.579 ±   336371.552    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         2.451 ±       12.926    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                 counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5        10.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                         N/A  thrpt    5      6819.882 ±      170.437   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       236.960 ±      106.614  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     54704.927 ±    25979.979    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.646 ±     1079.039  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     47294.483 ±   249370.267    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         2.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        10.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5      6922.206 ±      309.894   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5       196.084 ±      158.914  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5     44669.374 ±    38666.554    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         N/A  thrpt    5       204.653 ±     1079.074  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    N/A  thrpt    5     46992.574 ±   247800.737    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5         2.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        N/A  thrpt    5         8.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                            N/A  thrpt    5      9232.347 ±      443.923   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      1962.136 ±      143.720  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5    334517.039 ±    33289.884    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1992.870 ±       11.477  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    339735.043 ±    15429.573    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.261 ±        7.394  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       213.670 ±     1246.022    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        15.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        39.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                      N/A  thrpt    5     17615.484 ±      649.185   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       471.314 ±       99.519  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5     42123.080 ±    10308.420    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       529.775 ±     1140.381  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     47250.678 ±   101730.070    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.105 ±        0.902  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         9.282 ±       79.922    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        16.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                     N/A  thrpt    5     14247.306 ±     1904.152   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5       416.947 ±      201.953  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5     46266.457 ±    29801.994    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       397.129 ±     1395.966  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     44505.965 ±   156701.668    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.012 ±        0.108  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         1.367 ±       11.767    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         3.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5         9.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                    N/A  thrpt    5     22722.089 ±     3244.877   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       464.867 ±      233.487  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5     32360.184 ±    21786.946    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       534.074 ±     1149.635  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     37196.472 ±    80348.885    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.275 ±        2.351  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        18.795 ±      160.698    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                         N/A  thrpt    5      6213.440 ±      126.552   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2389.480 ±       61.097  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5    605165.204 ±     5807.316    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2272.584 ±     1406.547  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5    575609.538 ±   357493.971    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.704 ±        4.116  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5       179.226 ±     1051.240    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        17.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        35.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                           N/A  thrpt    5     11865.776 ±      977.569   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                            N/A  thrpt    5      2320.237 ±      356.853  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                       N/A  thrpt    5    307924.178 ±    64987.471    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2243.921 ±     1415.842  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    298077.876 ±   201039.450    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.355 ±        1.515  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        46.979 ±      201.466    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                 N/A  thrpt    5        17.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                  N/A  thrpt    5        28.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                     N/A  thrpt    5     68873.827 ±     1357.004   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                      N/A  thrpt    5       662.719 ±       18.448  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 N/A  thrpt    5     15143.270 ±      338.867    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       662.466 ±        2.776  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     15137.730 ±      267.618    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.003 ±        0.019  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.071 ±        0.424    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                           N/A  thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                            N/A  thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                    N/A  thrpt    5     46389.343 ±     2833.763   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     N/A  thrpt    5       715.973 ±       51.264  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                N/A  thrpt    5     24285.589 ±      527.683    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       663.545 ±        4.922  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     22512.107 ±     1310.748    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.286 ±        1.506    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                          N/A  thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                           N/A  thrpt    5        12.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                   N/A  thrpt    5    104685.059 ±     2624.219   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    N/A  thrpt    5       811.963 ±       38.460  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               N/A  thrpt    5     12206.158 ±      462.816    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       801.422 ±     1150.600  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5     12043.840 ±    17215.470    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.010 ±        0.069  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.156 ±        1.030    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                         N/A  thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                          N/A  thrpt    5        24.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                           N/A  thrpt    5    136790.819 ±      587.824   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            N/A  thrpt    5         0.170 ±        1.461  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       N/A  thrpt    5         1.957 ±       16.819    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                        N/A  thrpt    5      9364.152 ±      101.401   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                         N/A  thrpt    5      2445.737 ±       95.683  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                    N/A  thrpt    5    411046.613 ±    15674.194    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      2413.644 ±     1416.128  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5    405734.089 ±   240392.295    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.562 ±        3.442  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        94.762 ±      581.495    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                              N/A  thrpt    5        18.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                               N/A  thrpt    5        31.000                     ms
[info] IntBenchmark.readCirce                                                                      N/A  thrpt    5  13351553.902 ±   260454.797   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      5931.383 ±       92.612  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5       699.027 ±        8.991    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      5696.547 ±     1459.653  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       671.429 ±      177.653    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.062 ±        0.241  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.007 ±        0.028    B/op
[info] IntBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        42.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        58.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                N/A  thrpt    5  40549008.665 ± 16614253.233   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                      N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readJacksonScala                                                               N/A  thrpt    5  24797676.626 ±  9563543.039   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5         0.237 ±        2.037  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5         0.014 ±        0.124    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readJsoniterScala                                                              N/A  thrpt    5  47517318.845 ±   420097.605   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5         2.722 ±       23.434  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5         0.091 ±        0.779    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                 N/A  thrpt    5  31441498.589 ±   531844.088   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                  N/A  thrpt    5       826.276 ±       46.251  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        41.357 ±        3.029    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       804.067 ±     1151.236  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40.294 ±       58.612    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.021 ±        0.113  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±        0.006    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                       N/A  thrpt    5         6.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                        N/A  thrpt    5        21.000                     ms
[info] IntBenchmark.readPlayJson                                                                   N/A  thrpt    5  25340773.081 ±   602910.864   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5         0.188 ±        1.618  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5         0.012 ±        0.102    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeCirce                                                                     N/A  thrpt    5  22035442.996 ±  1688448.131   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1734.875 ±      123.937  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5       123.889 ±        3.608    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1602.679 ±     1411.380  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       114.266 ±       96.139    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.855 ±        7.109  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.061 ±        0.504    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        12.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        27.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                               N/A  thrpt    5  57258545.732 ±  6007597.739   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                N/A  thrpt    5      1200.400 ±      141.173  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           N/A  thrpt    5        32.990 ±        1.179    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1199.480 ±     1147.800  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        32.884 ±       30.420    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.954 ±        8.124  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.026 ±        0.220    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                     N/A  thrpt    5         9.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                      N/A  thrpt    5        32.000                     ms
[info] IntBenchmark.writeJacksonScala                                                              N/A  thrpt    5  27868713.881 ±   829689.867   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       583.045 ±       21.908  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        32.925 ±        2.094    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       533.255 ±     1147.872  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        30.199 ±       65.009    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         4.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        17.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  50779253.721 ±   583301.349   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1067.685 ±       36.963  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        33.091 ±        1.373    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1071.765 ±     1414.136  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        33.241 ±       44.127    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.722 ±        6.136  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.022 ±        0.190    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         8.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        28.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  65602482.281 ±    94310.129   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                N/A  thrpt    5  26811610.028 ±   303092.848   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                 N/A  thrpt    5      2111.621 ±       37.732  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       123.942 ±        2.876    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2014.879 ±        9.828  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       118.263 ±        1.479    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.646 ±        5.424  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.038 ±        0.319    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                      N/A  thrpt    5        15.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                       N/A  thrpt    5        22.000                     ms
[info] IntBenchmark.writePlayJson                                                                  N/A  thrpt    5   3751882.260 ±   163487.865   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1555.410 ±       18.716  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5       652.408 ±       22.286    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1467.916 ±     1153.678  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       615.483 ±      477.208    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.912 ±        7.451  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.381 ±        3.112    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        11.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        30.000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    195152.623 ±     1979.170   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      3711.330 ±       98.328  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     29927.927 ±      765.628    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      3623.728 ±     1394.126  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     29219.910 ±    11161.022    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.025 ±        0.105  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.201 ±        0.843    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        27.000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        36.000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     45247.881 ±     1141.426   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2967.906 ±      119.644  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    103213.860 ±     2606.528    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2937.971 ±     1406.666  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    102178.938 ±    49062.533    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.006 ±        4.673  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        35.079 ±      163.183    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        22.000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        52.000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    230875.799 ±     5387.461   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       848.983 ±       44.850  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      5786.597 ±      354.643    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       929.778 ±     1399.551  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6339.945 ±     9578.053    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.012 ±        0.044  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.085 ±        0.300    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7.000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        12.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    528175.543 ±    19590.541   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       981.278 ±       98.024  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2924.201 ±      357.149    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       935.273 ±     1409.003  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2790.853 ±     4255.695    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.591 ±        5.046  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.768 ±       15.090    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         7.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        27.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    568582.776 ±     9797.528   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5       404.206 ±       33.785  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5      1118.896 ±      108.262    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                128  thrpt    5       400.115 ±     1406.462  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      1110.317 ±     3902.969    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.002 ±        0.018  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.006 ±        0.050    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5         3.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                               128  thrpt    5        12.000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     75720.849 ±    12082.664   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1711.710 ±      421.620  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     35699.258 ±    15114.654    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1684.819 ±     1381.101  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     35183.544 ±    31893.721    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         2.037 ±        5.461  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        42.680 ±      113.761    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        13.000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        91.000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                           128  thrpt    5    368954.503 ±     7921.356   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      2688.552 ±      100.596  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     11466.139 ±      229.873    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2658.348 ±       24.059  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     11337.717 ±      218.316    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.855 ±        4.466  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.670 ±       19.173    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                 128  thrpt    5        20.000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                  128  thrpt    5        36.000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                    128  thrpt    5    840909.465 ±    21773.367   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1822.002 ±       67.369  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      3409.784 ±       61.477    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1871.571 ±     1150.909  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      3503.182 ±     2167.346    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.241 ±        1.903  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.450 ±        3.546    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        14.000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        23.000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                   128  thrpt    5   1671886.072 ±    24571.341   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      3389.761 ±       66.234  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      3190.272 ±       69.822    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      3366.703 ±       63.568  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3168.574 ±       69.997    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±        0.057  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.020 ±        0.053    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        25.000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        33.000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                        128  thrpt    5    187307.818 ±     3797.664   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      4914.088 ±       92.482  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     41283.253 ±       61.498    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      4748.179 ±       68.825  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     39890.623 ±     1228.363    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.033 ±        0.091  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.280 ±        0.771    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        35.000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        51.000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                          128  thrpt    5    477934.008 ±     5680.284   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1565.972 ±       63.147  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5      5156.384 ±      207.178    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1601.267 ±     1404.552  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5273.648 ±     4648.601    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.885 ±        5.727  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.918 ±       18.872    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                128  thrpt    5        12.000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        33.000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                   128  thrpt    5   1010158.091 ±     2793.491   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       483.441 ±       22.668  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       753.142 ±       36.243    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       528.040 ±     1136.648  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       822.742 ±     1771.019    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±        0.179  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.032 ±        0.279    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         7.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                  128  thrpt    5   2739579.162 ±   188993.302   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1305.521 ±       75.455  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       749.995 ±       21.779    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1206.352 ±     1154.239  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       693.519 ±      669.978    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.777 ±        6.377  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.441 ±        3.614    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         9.000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        24.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5   2939215.296 ±    52964.215   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         3.723 ±       32.057  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         2.010 ±       17.308    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                       128  thrpt    5    680348.742 ±    26382.082   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       949.915 ±       37.441  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      2197.390 ±      105.535    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       926.475 ±     1395.572  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2145.616 ±     3263.174    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.904 ±        6.696  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2.115 ±       15.676    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        31.000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                      128  thrpt    5     78577.833 ±     1201.566   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                       128  thrpt    5      2290.238 ±       56.635  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                  128  thrpt    5     45862.595 ±      897.109    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2272.384 ±     1402.400  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     45510.587 ±    28249.505    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.283 ±        1.783  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.698 ±       35.941    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                            128  thrpt    5        17.000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                             128  thrpt    5        25.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                               128  thrpt    5    107891.348 ±     1273.237   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                128  thrpt    5      1965.250 ±       28.560  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     28665.523 ±      482.450    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      2005.634 ±       23.935  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     29254.686 ±      549.475    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.287 ±        2.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         4.173 ±       29.536    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                     128  thrpt    5        15.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                      128  thrpt    5        25.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                              128  thrpt    5    164045.154 ±     4766.241   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2585.687 ±      100.342  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     24803.161 ±      813.727    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      2533.636 ±     1148.280  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     24317.015 ±    11450.073    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.703 ±        4.199  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         6.750 ±       40.351    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                    128  thrpt    5        19.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                     128  thrpt    5        37.000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                   128  thrpt    5     47476.685 ±     1164.042   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                    128  thrpt    5      2668.849 ±       88.783  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                               128  thrpt    5     88449.087 ±     2333.001    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2546.759 ±     1165.477  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     84411.765 ±    38896.227    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.125 ±        0.764  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4.168 ±       25.613    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                         128  thrpt    5        19.000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                          128  thrpt    5        32.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                              128  thrpt    5    240524.689 ±     8443.719   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                               128  thrpt    5      1095.616 ±       45.178  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7168.054 ±      288.726    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1196.944 ±     1144.573  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7831.392 ±     7495.146    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.171 ±        1.381  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.102 ±        8.905    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                    128  thrpt    5         9.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                     128  thrpt    5        18.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                             128  thrpt    5    581780.663 ±    10975.933   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                              128  thrpt    5       659.273 ±       44.460  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      1783.400 ±      104.131    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       531.483 ±     1144.058  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1436.499 ±     3092.363    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.004 ±        0.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.011 ±        0.098    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                   128  thrpt    5         4.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                    128  thrpt    5        16.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                     128  thrpt    5    633594.913 ±     1531.549   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      128  thrpt    5         6.442 ±        0.015  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 128  thrpt    5        16.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                           128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                  128  thrpt    5     87441.008 ±     5767.145   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                   128  thrpt    5      1638.080 ±      124.350  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                              128  thrpt    5     29485.109 ±     1624.870    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1599.720 ±     1396.593  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     28782.580 ±    24797.209    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.104 ±        0.428  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.882 ±        7.750    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                        128  thrpt    5        12.000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                         128  thrpt    5        21.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                          N/A  thrpt    5   8415921.908 ±   211392.769   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                           N/A  thrpt    5      7431.526 ±      222.671  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                      N/A  thrpt    5      1389.517 ±        9.735    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      7188.017 ±     1409.303  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1343.777 ±      240.109    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.071 ±        0.134  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.013 ±        0.025    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                N/A  thrpt    5        53.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                 N/A  thrpt    5        65.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                    N/A  thrpt    5    970214.674 ±    71588.216   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                     N/A  thrpt    5       612.393 ±       29.570  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                N/A  thrpt    5       993.510 ±       48.554    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       661.729 ±        3.290  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5      1073.724 ±       83.313    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.002 ±        0.017  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.003 ±        0.026    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                          N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                           N/A  thrpt    5        17.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                   N/A  thrpt    5    432701.695 ±   153824.655   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                    N/A  thrpt    5       934.708 ±      349.158  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                               N/A  thrpt    5      3397.263 ±      108.091    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       931.959 ±     1402.077  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5      3367.461 ±     4558.475    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.029 ±        0.153    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                         N/A  thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                          N/A  thrpt    5        16.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                  N/A  thrpt    5    788467.796 ±   233283.432   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                   N/A  thrpt    5       724.109 ±      207.000  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              N/A  thrpt    5      1445.563 ±       75.031    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5       670.425 ±        1.787  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5      1344.221 ±      384.228    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.003 ±        0.022  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.005 ±        0.047    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                        N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                         N/A  thrpt    5        18.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                              N/A  thrpt    5   6282767.379 ±  9159387.949   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                               N/A  thrpt    5      3714.991 ±     5159.458  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                          N/A  thrpt    5       935.503 ±       63.116    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                      N/A  thrpt    5      3497.598 ±     4308.663  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       891.361 ±      196.337    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.033 ±        0.108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.008 ±        0.016    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                    N/A  thrpt    5        26.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                     N/A  thrpt    5        35.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                        N/A  thrpt    5  42414633.783 ±  1025394.779   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                         N/A  thrpt    5      3808.964 ±      114.600  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                    N/A  thrpt    5       141.325 ±        2.195    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                N/A  thrpt    5      3769.105 ±     1423.531  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm           N/A  thrpt    5       139.805 ±       50.688    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space            N/A  thrpt    5         0.033 ±        0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm       N/A  thrpt    5         0.001 ±        0.003    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                              N/A  thrpt    5        28.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                               N/A  thrpt    5        37.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                       N/A  thrpt    5    388939.638 ±    11779.236   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                        N/A  thrpt    5      2757.856 ±      144.545  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                   N/A  thrpt    5     11157.912 ±      308.745    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      2678.517 ±       28.159  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     10837.681 ±      291.880    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.558 ±        4.187  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         2.257 ±       16.918    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                             N/A  thrpt    5        20.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                              N/A  thrpt    5        35.000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                    128  thrpt    5   1471797.444 ±     6543.864   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5        44.905 ±        0.265  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5        48.018 ±        0.153    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.readPlayJson                                                         128  thrpt    5    109004.876 ±     2297.512   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      4035.956 ±       92.504  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     58269.700 ±     1979.968    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3912.540 ±     1191.901  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     56494.032 ±    17601.342    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.054 ±        0.122  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.780 ±        1.740    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        29.000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        44.000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                    128  thrpt    5   2067579.611 ±   494379.574   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       579.570 ±      180.522  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       440.833 ±       56.201    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       530.542 ±     1142.034  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       393.269 ±      846.912    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±        0.072  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.006 ±        0.053    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         4.000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        17.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                   128  thrpt    5   2011547.995 ±    15313.130   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       557.779 ±       36.081  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       436.370 ±       31.025    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       535.395 ±     1152.477  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       419.213 ±      902.389    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±        0.044  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.007 ±        0.034    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        15.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2040658.894 ±    20317.310   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         2.036 ±       17.529  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.571 ±       13.521    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                        128  thrpt    5     58151.508 ±      717.954   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      2036.287 ±       38.441  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     55106.573 ±      747.588    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2010.021 ±       15.070  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     54396.236 ±      791.259    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.404 ±        2.021  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        10.938 ±       54.775    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        15.000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        27.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                         128  thrpt    5    274950.770 ±     4542.119   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                          128  thrpt    5      1107.375 ±       30.052  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     128  thrpt    5      6338.048 ±      237.511    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1071.863 ±     1411.302  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5      6140.745 ±     8151.924    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.648 ±        5.419  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         3.694 ±       30.905    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                               128  thrpt    5         8.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                128  thrpt    5        29.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                              128  thrpt    5     54286.980 ±     2036.141   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                               128  thrpt    5      2266.289 ±       24.568  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                          128  thrpt    5     65699.930 ±     3147.936    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      128  thrpt    5      2134.971 ±     1142.535  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     61882.222 ±    32806.711    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.600 ±        3.623  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        17.586 ±      106.908    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                    128  thrpt    5        16.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                     128  thrpt    5        29.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                         128  thrpt    5    160562.696 ±     8110.158   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                          128  thrpt    5      1607.946 ±       98.191  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     128  thrpt    5     15759.177 ±      240.017    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1469.215 ±     1151.825  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5     14392.744 ±    11032.669    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.217 ±        1.688  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         2.107 ±       16.428    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                               128  thrpt    5        11.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                128  thrpt    5        21.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                        128  thrpt    5    390577.308 ±     2083.954   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                         128  thrpt    5       536.131 ±       31.269  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    128  thrpt    5      2160.115 ±      129.125    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                128  thrpt    5       534.827 ±     1151.257  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      2154.982 ±     4638.797    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.006 ±        0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.025 ±        0.144    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                              128  thrpt    5         4.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                               128  thrpt    5        17.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                128  thrpt    5    576450.856 ±    67138.140   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            128  thrpt    5         0.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                      128  thrpt    5           ≈ 0                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                             128  thrpt    5     78284.264 ±     1713.116   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                              128  thrpt    5      1923.533 ±       51.750  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                         128  thrpt    5     38667.580 ±      829.136    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     128  thrpt    5      1864.514 ±     1140.802  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     37472.075 ±    22714.096    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.575 ±        2.660  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5        11.537 ±       53.500    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                   128  thrpt    5        14.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                    128  thrpt    5        29.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                               128  thrpt    5    104392.714 ±     2367.299   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                128  thrpt    5      1640.946 ±       51.897  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                           128  thrpt    5     24735.929 ±      632.302    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                       128  thrpt    5      1601.518 ±     1414.207  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     24146.546 ±    21426.131    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.929 ±        6.437  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        14.049 ±       97.480    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                     128  thrpt    5        12.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                      128  thrpt    5        35.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                        128  thrpt    5    159053.124 ±     1478.197   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                         128  thrpt    5       755.628 ±       17.718  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                    128  thrpt    5      7475.434 ±      202.758    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                128  thrpt    5       794.469 ±     1136.316  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      7861.348 ±    11274.416    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.019 ±        0.117  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.193 ±        1.162    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                              128  thrpt    5         6.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                               128  thrpt    5        13.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                       128  thrpt    5    349993.077 ±     1529.089   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                        128  thrpt    5      1478.193 ±       28.879  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   128  thrpt    5      6646.161 ±      123.996    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               128  thrpt    5      1471.737 ±     1158.122  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      6617.420 ±     5215.390    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.824 ±        6.725  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         3.706 ±       30.248    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                             128  thrpt    5        11.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                              128  thrpt    5        32.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                            128  thrpt    5     44359.362 ±     2337.226   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                             128  thrpt    5      1968.388 ±       49.337  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                        128  thrpt    5     69841.866 ±     3532.954    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                    128  thrpt    5      1871.073 ±     1150.552  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     66432.625 ±    41969.321    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.554 ±        3.219  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        19.978 ±      117.068    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                  128  thrpt    5        14.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                   128  thrpt    5        25.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                       128  thrpt    5    257000.392 ±     4659.663   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                        128  thrpt    5       915.392 ±       29.126  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   128  thrpt    5      5604.882 ±      175.917    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               128  thrpt    5       930.993 ±     1404.736  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      5698.206 ±     8569.956    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.008 ±        0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         0.051 ±        0.269    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                             128  thrpt    5         7.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                              128  thrpt    5        13.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                      128  thrpt    5    664873.978 ±    37673.585   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                       128  thrpt    5       751.556 ±       21.075  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  128  thrpt    5      1778.989 ±       83.759    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              128  thrpt    5       802.969 ±     1153.962  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      1908.447 ±     2880.321    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.025 ±        0.101  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.059 ±        0.236    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                            128  thrpt    5         6.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                             128  thrpt    5        23.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                              128  thrpt    5    747308.216 ±     7581.347   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          128  thrpt    5         0.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                    128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                           128  thrpt    5     89182.569 ±     5251.498   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                            128  thrpt    5      1821.022 ±      114.425  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                       128  thrpt    5     32145.565 ±     3914.823    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   128  thrpt    5      1731.625 ±     1401.254  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     30598.097 ±    25570.596    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.185 ±        8.480  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        21.384 ±      153.974    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                 128  thrpt    5        13.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                  128  thrpt    5        27.000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                         128  thrpt    5    121940.028 ±    14473.798   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2044.609 ±      380.116  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     26439.253 ±     8379.309    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1993.958 ±     1820.083  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     25871.238 ±    26601.830    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.556 ±        8.025  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        20.636 ±      107.919    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                               128  thrpt    5        15.000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                128  thrpt    5        32.000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                  128  thrpt    5    208473.879 ±     2731.041   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       878.355 ±       40.940  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      6630.447 ±      356.456    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       794.283 ±     1136.979  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      5999.450 ±     8654.733    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.002 ±        0.017  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.015 ±        0.130    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         6.000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        12.000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                 128  thrpt    5    281965.015 ±    18144.029   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1067.262 ±      188.561  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5962.206 ±     1461.192    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1069.299 ±     1410.132  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5980.922 ±     8021.065    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.730 ±        6.120  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         4.195 ±       35.218    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        33.000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                      128  thrpt    5    101264.295 ±     2756.268   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3285.013 ±      129.832  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     51049.604 ±     1694.756    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3076.227 ±     1415.554  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     47785.180 ±    21181.677    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.062 ±        0.272  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.969 ±        4.208    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        23.000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        34.000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                        128  thrpt    5    252280.853 ±     3259.443   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1709.469 ±       26.598  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10664.217 ±      259.317    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1597.778 ±     1404.263  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9969.018 ±     8797.800    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.860 ±        7.139  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.381 ±       44.660    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        27.000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                 128  thrpt    5    779507.468 ±    17054.485   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       421.968 ±       39.722  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       851.888 ±       77.829    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       366.404 ±     1308.971  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       740.477 ±     2647.016    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±        0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.008 ±        0.073    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         3.000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         6.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                128  thrpt    5    890008.529 ±    28834.549   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       481.137 ±       41.258  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       850.800 ±       70.798    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       400.836 ±     1408.995  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       708.478 ±     2490.503    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.006 ±        0.049  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.010 ±        0.088    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        10.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    937484.372 ±    19130.791   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                     128  thrpt    5     39609.784 ±     4730.686   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1882.958 ±       30.471  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     74874.694 ±     9070.460    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1855.078 ±     1141.095  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     73833.423 ±    47920.529    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.227 ±        7.279  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        50.744 ±      307.706    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        14.000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        52.000                     ms
[info] PrimitivesBenchmark.readCirce                                                               N/A  thrpt    5   1143590.490 ±    30996.975   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      2627.262 ±       96.520  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5      3615.275 ±       52.267    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2527.772 ±     1121.512  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      3479.536 ±     1580.539    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.981 ±        7.960  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.357 ±       11.005    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        19.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        32.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                        N/A  thrpt    5   1876111.876 ±    25093.801   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5      1167.415 ±       49.507  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5       979.154 ±       35.046    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      1200.405 ±     1146.242  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1006.949 ±      962.986    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.250 ±        1.928  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.210 ±        1.623    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         9.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        17.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                       N/A  thrpt    5   9766851.789 ±   222554.793   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       308.516 ±       38.358  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5        49.713 ±        7.288    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       338.609 ±     1215.808  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5        54.717 ±      196.284    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.025 ±        0.174  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.004 ±        0.028    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        11.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                            N/A  thrpt    5    510356.241 ±     8327.970   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      2230.052 ±       49.924  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5      6876.374 ±      147.278    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2138.590 ±     1145.595  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      6595.431 ±     3575.872    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.618 ±        4.276  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         1.914 ±       13.245    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        16.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        30.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                              N/A  thrpt    5   1951697.141 ±   103626.228   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                               N/A  thrpt    5      1994.340 ±      116.703  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                          N/A  thrpt    5      1608.110 ±       11.736    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1953.003 ±       26.159  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1575.098 ±      103.533    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         2.223 ±       13.011  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         1.808 ±       10.547    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                    N/A  thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                     N/A  thrpt    5        55.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                       N/A  thrpt    5   3264007.571 ±   129913.743   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5      1276.715 ±       73.420  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5       615.493 ±       19.565    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1198.152 ±     1142.852  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       577.274 ±      546.225    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.133 ±        0.970  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.064 ±        0.462    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         9.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        15.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                      N/A  thrpt    5   9109854.113 ±   420505.599   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       764.102 ±       52.030  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5       131.994 ±        7.206    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       802.275 ±     1153.416  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       138.686 ±      200.950    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.022 ±        0.062  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.004 ±        0.011    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         6.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        23.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5   8986001.814 ±   745830.780   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5       279.454 ±       24.418  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5        48.950 ±        5.057    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       204.707 ±     1079.358  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5        36.457 ±      192.306    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.010 ±        0.090  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.002 ±        0.016    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5         2.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     N/A  thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                           N/A  thrpt    5    524730.286 ±    22910.193   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                            N/A  thrpt    5      2668.825 ±      203.547  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       N/A  thrpt    5      8002.768 ±      306.064    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2551.005 ±     1166.520  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      7642.571 ±     3219.025    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.200 ±        1.106  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.606 ±        3.380    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                 N/A  thrpt    5        19.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                  N/A  thrpt    5        31.000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                128  thrpt    5     99004.290 ±     1270.075   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2737.320 ±       65.632  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     43512.994 ±      953.572    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2643.102 ±       24.642  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42015.541 ±      605.263    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.913 ±        6.364  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        14.535 ±      101.222    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        20.000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        40.000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                         128  thrpt    5    145712.639 ±     2678.519   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2300.797 ±       77.036  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     24849.287 ±      651.247    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2274.300 ±     1398.022  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     24561.764 ±    15047.018    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.221 ±        1.367  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.382 ±       14.749    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        17.000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        25.000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                        128  thrpt    5    173483.099 ±     5357.046   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2624.110 ±      158.233  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     23803.734 ±     1001.872    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2524.374 ±     1140.916  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     22885.064 ±     9812.439    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.934 ±        4.924  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         8.495 ±       44.671    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        19.000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        35.000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                             128  thrpt    5     85890.369 ±     1568.763   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3677.011 ±      124.352  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     67369.118 ±     2034.383    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3631.738 ±     1396.451  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     66563.606 ±    26741.666    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.054 ±        0.201  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.993 ±        3.703    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        27.000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        40.000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                               128  thrpt    5    260986.423 ±     5089.250   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1787.673 ±       50.390  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     10777.962 ±      184.623    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1737.904 ±     1413.750  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10478.298 ±     8529.373    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.355 ±        2.680  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2.150 ±       16.241    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        21.000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                        128  thrpt    5    824600.416 ±    32877.627   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       491.395 ±       23.739  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       937.895 ±       61.265    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       528.715 ±     1138.105  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1011.079 ±     2177.038    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±        0.072  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.016 ±        0.136    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         4.000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         7.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                       128  thrpt    5    816449.719 ±    41793.348   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       450.796 ±       33.524  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       869.072 ±       75.077    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       400.646 ±     1408.329  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       775.542 ±     2726.787    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.011 ±        0.070  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.021 ±        0.133    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        12.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    833627.323 ±    21853.419   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        10.742 ±       11.975  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        20.285 ±       22.761    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                       128  thrpt    5       102.355 ±      881.309  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       195.174 ±     1680.509    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.248 ±        2.133  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.472 ±        4.067    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5         1.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                      128  thrpt    5         5.000                     ms
[info] SetOfIntsBenchmark.writePlayJson                                                            128  thrpt    5     38760.076 ±     1622.710   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1828.918 ±      526.675  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     74276.096 ±    23592.880    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1724.071 ±     1401.841  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     69971.660 ±    56580.986    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.490 ±        3.414  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        60.436 ±      137.613    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        44.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                       128  thrpt    5   4282740.221 ±    56854.242   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      3339.849 ±       90.255  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5      1227.263 ±       25.411    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      3222.449 ±     1159.627  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1183.913 ±      416.177    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.025 ±        0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.009 ±        0.025    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                             128  thrpt    5        24.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                              128  thrpt    5        32.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                 128  thrpt    5   6404220.830 ±   325478.230   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                  128  thrpt    5      1236.267 ±       64.225  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                             128  thrpt    5       303.781 ±        9.843    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                         128  thrpt    5      1199.894 ±     1146.033  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       295.150 ±      285.610    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.976 ±        8.231  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.239 ±        2.018    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                       128  thrpt    5         9.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                        128  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                128  thrpt    5   5110884.942 ±   453864.533   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1052.950 ±       47.658  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5       324.394 ±       42.599    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space               128  thrpt    5         0.006 ±        0.052  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm          128  thrpt    5         0.002 ±        0.016    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace                            128  thrpt    5         0.017 ±        0.143  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                       128  thrpt    5         0.005 ±        0.044    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1021.101 ±     1296.807  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       315.484 ±      415.062    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.974 ±        8.256  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.297 ±        2.513    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         9.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        55.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                               128  thrpt    5   6639699.398 ±    58831.940   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1284.062 ±       25.418  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5       304.360 ±        5.213    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1340.867 ±        4.920  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       317.826 ±        2.697    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.806 ±        6.762  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.191 ±        1.606    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        10.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                    128  thrpt    5   5513576.223 ±    88988.477   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1073.217 ±       66.913  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5       306.262 ±       23.256    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1068.505 ±     1407.831  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       305.093 ±      404.069    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.788 ±        6.727  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.225 ±        1.916    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         8.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                      128  thrpt    5   3666984.651 ±    64686.559   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2012.991 ±       23.339  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5       863.956 ±       10.868    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2003.503 ±       10.447  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       859.889 ±       15.059    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.854 ±        5.685  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.367 ±        2.441    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        28.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                128  thrpt    5   6831232.586 ±    39805.749   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                 128  thrpt    5       677.869 ±       18.180  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                            128  thrpt    5       156.178 ±        4.032    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                        128  thrpt    5       664.608 ±        2.157  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       153.123 ±        1.358    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±        0.050  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.003 ±        0.012    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                      128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                       128  thrpt    5        18.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                               128  thrpt    5   6343403.148 ±   220120.430   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       635.716 ±       40.919  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5       157.718 ±       11.124    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       662.292 ±        4.383  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       164.312 ±        5.361    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.004 ±        0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.001 ±        0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        21.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                              128  thrpt    5   7085029.755 ±   253815.405   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5       706.909 ±       39.435  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5       157.021 ±        4.032    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       669.165 ±        1.669  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       148.652 ±        5.101    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.018 ±        0.117  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.004 ±        0.026    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        18.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   7336991.552 ±   284541.096   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         0.019 ±        0.161  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         0.004 ±        0.034    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                   128  thrpt    5   6378680.138 ±    28128.856   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       636.292 ±       14.800  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5       156.975 ±        3.413    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       667.101 ±        2.493  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       164.576 ±        1.048    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.015 ±        0.080  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.004 ±        0.020    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        20.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                    128  thrpt    5   1785431.562 ±    23018.154   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2311.212 ±      105.482  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      2037.105 ±       84.542    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2258.921 ±     1404.929  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1991.254 ±     1245.124    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.266 ±        7.330  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.120 ±        6.488    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                           128  thrpt    5        34.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                              128  thrpt    5   2983427.177 ±   142910.825   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                               128  thrpt    5       579.628 ±        7.218  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                          128  thrpt    5       305.772 ±       13.749    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                      128  thrpt    5       664.627 ±        2.883  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       350.617 ±       17.196    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.009 ±        0.079  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.005 ±        0.042    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                    128  thrpt    5         5.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                     128  thrpt    5        18.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                             128  thrpt    5   1889379.683 ±    18225.637   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       384.780 ±       33.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5       320.492 ±       30.661    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       366.466 ±     1309.186  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       305.683 ±     1092.304    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.008 ±        0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.007 ±        0.060    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         3.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5         5.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                            128  thrpt    5   2312039.162 ±    19600.901   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       444.656 ±       34.728  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5       302.674 ±       25.415    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       370.152 ±     1324.591  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       252.293 ±      902.787    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.008 ±        0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.006 ±        0.030    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         3.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        10.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                 128  thrpt    5   1970625.310 ±    16739.029   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5       378.341 ±       24.800  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5       302.127 ±       21.909    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       368.465 ±     1317.464  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       294.624 ±     1053.460    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.001 ±        0.005  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        ≈ 10⁻³                   B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                       128  thrpt    5         3.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        13.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                   128  thrpt    5   2500634.059 ±   100817.187   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1792.593 ±       16.308  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      1128.103 ±       51.244    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1737.826 ±     1406.755  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1094.944 ±      913.911    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.943 ±        6.993  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.591 ±        4.373    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                         128  thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                          128  thrpt    5        32.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                             128  thrpt    5   3613372.359 ±   217084.523   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                              128  thrpt    5       971.987 ±       61.069  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                         128  thrpt    5       423.359 ±       30.805    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                     128  thrpt    5       932.070 ±     1404.970  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       406.540 ±      619.942    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.009 ±        0.046  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.004 ±        0.020    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                   128  thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                    128  thrpt    5        27.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                            128  thrpt    5   3381613.405 ±   226658.839   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       900.468 ±       72.396  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       419.021 ±       18.464    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space           128  thrpt    5         0.005 ±        0.041  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm      128  thrpt    5         0.002 ±        0.020    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace                        128  thrpt    5         0.013 ±        0.108  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm                   128  thrpt    5         0.006 ±        0.052    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       807.656 ±     1131.949  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       375.657 ±      520.868    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.950 ±        8.152  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.456 ±        3.913    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         8.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        55.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                           128  thrpt    5   3610939.676 ±   252337.608   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5       962.240 ±       50.737  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       419.383 ±       14.545    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5       937.704 ±     1410.816  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       410.271 ±      637.035    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.013 ±        0.076  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.006 ±        0.034    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        24.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   3884200.530 ±    26755.114   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.951 ±        8.182  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.386 ±        3.322    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                128  thrpt    5   3335289.578 ±   233526.364   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       895.390 ±       32.690  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5       422.640 ±       38.981    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.608 ±     1151.792  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       380.742 ±      580.832    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±        0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.004 ±        0.035    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         6.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        23.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                               N/A  thrpt    5     12223.433 ±     1918.829   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      1637.297 ±      394.184  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5    211485.233 ±    86496.568    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1593.013 ±     1397.583  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    206576.947 ±   209928.878    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.467 ±        7.597  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       195.231 ±     1036.557    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        12.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        43.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                        N/A  thrpt    5     22791.496 ±     1511.945   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5       374.638 ±      227.637  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5     25930.103 ±    17679.881    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       264.214 ±     1393.126  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5     18414.936 ±    97123.354    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.224 ±        1.930  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        15.341 ±      132.094    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         2.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5         7.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                       N/A  thrpt    5     21714.220 ±     1152.160   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       274.335 ±      311.408  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     19947.067 ±    24030.098    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.724 ±     1079.449  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     15001.112 ±    79108.059    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        10.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                            N/A  thrpt    5      9292.242 ±      248.307   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      1992.203 ±       97.003  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5    337390.342 ±    18259.589    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1866.806 ±     1146.135  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    316258.550 ±   196742.769    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.727 ±        4.684  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       123.175 ±      793.133    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        14.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        38.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                       N/A  thrpt    5     65657.672 ±     4986.139   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5       897.373 ±      154.399  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     21529.576 ±     5383.995    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       929.432 ±     1403.788  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     22224.513 ±    32843.597    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.183 ±        1.529  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         4.350 ±       36.403    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         7.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        17.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                      N/A  thrpt    5    110714.226 ±     1965.559   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       732.952 ±       39.291  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5     10418.462 ±      660.510    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       803.456 ±     1152.764  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     11429.888 ±    16570.403    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.002 ±        0.018  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.030 ±        0.255    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         6.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        26.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5    119054.096 ±     1403.867   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5         0.212 ±        1.823  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5         2.795 ±       24.032    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                         128  thrpt    5    377259.814 ±    16622.732   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2190.294 ±      146.722  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5      9137.941 ±     1025.312    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2132.751 ±     1131.191  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8895.331 ±     4685.439    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.656 ±        3.430  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.770 ±       14.568    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                               128  thrpt    5        16.000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                128  thrpt    5        24.000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                  128  thrpt    5    985417.900 ±     8267.453   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       682.250 ±       16.043  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1089.636 ±       30.070    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       662.495 ±        3.048  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1058.080 ±       11.109    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±        0.087  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.020 ±        0.139    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        12.000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5   1953583.357 ±    63144.492   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       990.016 ±       51.179  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       797.565 ±       30.649    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       937.078 ±     1412.753  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       754.573 ±     1132.817    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.010 ±        0.069  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.008 ±        0.056    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        26.000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5    191001.243 ±    12680.789   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      4719.289 ±      255.224  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     38878.823 ±     1000.819    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      4598.610 ±     1186.589  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     37883.364 ±     9597.387    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.033 ±        0.044  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.275 ±        0.371    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        34.000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        54.000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                        128  thrpt    5    443537.288 ±    12911.405   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1471.198 ±       27.261  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5      5220.601 ±      148.907    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1468.858 ±     1150.242  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      5214.776 ±     4156.637    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.855 ±        7.032  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3.016 ±       24.799    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                               128  thrpt    5        32.000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    920024.201 ±     3458.232   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       437.289 ±       40.791  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       747.930 ±       71.609    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       396.972 ±     1395.412  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       679.344 ±     2387.990    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.171 ±        1.468  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.292 ±        2.514    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         3.000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5   1596514.737 ±    94200.880   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       767.643 ±       59.328  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       756.811 ±       87.979    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.857 ±     1151.248  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       794.314 ±     1190.711    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.010 ±        0.040  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.010 ±        0.040    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         6.000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        23.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5   1695666.835 ±     3086.846   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5    666419.176 ±     5101.795   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       928.267 ±       33.519  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      2191.874 ±       96.392    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       790.543 ±     1133.366  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1867.802 ±     2698.569    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±        0.044  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.020 ±        0.104    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         6.000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        22.000                     ms
[info] Benchmark result is saved to graalvmee1.json
[success] Total time: 7123 s, completed May 18, 2018 10:14:05 PM
