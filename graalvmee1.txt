[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Updating ProjectRef(uri("file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project/"), "jsoniter-scala-build")...
[info] Done updating.
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 6, 2018 8:38:04 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.3-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("geometry");
[info]       private[this] val r1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d11(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d14(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e14(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT.jar ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmee1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42345.490 ops/s
[info] # Warmup Iteration   2: 547876.008 ops/s
[info] # Warmup Iteration   3: 989639.995 ops/s
[info] # Warmup Iteration   4: 1039206.934 ops/s
[info] # Warmup Iteration   5: 1036429.103 ops/s
[info] Iteration   1: 1057707.890 ops/s
[info]                  ·gc.alloc.rate:                   2325.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              3460.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2971.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 992587.441 ops/s
[info]                  ·gc.alloc.rate:                   2180.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3158.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 999317.260 ops/s
[info]                  ·gc.alloc.rate:               2175.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          3425.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3135.479 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 994722.261 ops/s
[info]                  ·gc.alloc.rate:                   2189.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4206.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1002230.745 ops/s
[info]                  ·gc.alloc.rate:                   2206.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3140.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   1009313.120 ±(99.9%) 105186.253 ops/s [Average]
[info]   (min, avg, max) = (992587.441, 1009313.120, 1057707.890), stdev = 27316.536
[info]   CI (99.9%): [904126.866, 1114499.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2215.464 ±(99.9%) 241.222 MB/sec [Average]
[info]   (min, avg, max) = (2175.133, 2215.464, 2325.450), stdev = 62.645
[info]   CI (99.9%): [1974.242, 2456.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3454.462 ±(99.9%) 63.564 B/op [Average]
[info]   (min, avg, max) = (3425.546, 3454.462, 3464.992), stdev = 16.507
[info]   CI (99.9%): [3390.898, 3518.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2127.797 ±(99.9%) 1142.875 MB/sec [Average]
[info]   (min, avg, max) = (1990.948, 2127.797, 2658.685), stdev = 296.801
[info]   CI (99.9%): [984.923, 3270.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3322.581 ±(99.9%) 1924.885 B/op [Average]
[info]   (min, avg, max) = (2971.756, 3322.581, 4206.569), stdev = 499.887
[info]   CI (99.9%): [1397.696, 5247.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.033 ±(99.9%) 7.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.033, 4.562), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 8.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.549 ±(99.9%) 11.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.549, 6.788), stdev = 2.953
[info]   CI (99.9%): [≈ 0, 12.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44390.108 ops/s
[info] # Warmup Iteration   2: 1245726.953 ops/s
[info] # Warmup Iteration   3: 1876525.796 ops/s
[info] # Warmup Iteration   4: 1960679.346 ops/s
[info] # Warmup Iteration   5: 2000496.281 ops/s
[info] Iteration   1: 2026288.228 ops/s
[info]                  ·gc.alloc.rate:                   1313.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1019.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1033.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1942627.587 ops/s
[info]                  ·gc.alloc.rate:                   1266.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              1025.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1079.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2026536.356 ops/s
[info]                  ·gc.alloc.rate:                   1307.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              1014.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1037.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2027684.111 ops/s
[info]                  ·gc.alloc.rate:                   1307.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              1014.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1038.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2022518.700 ops/s
[info]                  ·gc.alloc.rate:               1288.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          1002.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 521.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   2009130.997 ±(99.9%) 143348.842 ops/s [Average]
[info]   (min, avg, max) = (1942627.587, 2009130.997, 2027684.111), stdev = 37227.239
[info]   CI (99.9%): [1865782.154, 2152479.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1296.615 ±(99.9%) 74.045 MB/sec [Average]
[info]   (min, avg, max) = (1266.391, 1296.615, 1313.176), stdev = 19.229
[info]   CI (99.9%): [1222.570, 1370.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1015.652 ±(99.9%) 32.781 B/op [Average]
[info]   (min, avg, max) = (1002.890, 1015.652, 1025.966), stdev = 8.513
[info]   CI (99.9%): [982.871, 1048.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.594 ±(99.9%) 1144.753 MB/sec [Average]
[info]   (min, avg, max) = (669.818, 1201.594, 1338.784), stdev = 297.289
[info]   CI (99.9%): [56.841, 2346.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   942.109 ±(99.9%) 908.935 B/op [Average]
[info]   (min, avg, max) = (521.218, 942.109, 1079.982), stdev = 236.048
[info]   CI (99.9%): [33.174, 1851.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.187 ±(99.9%) 1.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.833), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.146 ±(99.9%) 1.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.646), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1040343.514 ops/s
[info] # Warmup Iteration   2: 4416415.845 ops/s
[info] # Warmup Iteration   3: 5132232.555 ops/s
[info] # Warmup Iteration   4: 5330820.988 ops/s
[info] # Warmup Iteration   5: 5363569.768 ops/s
[info] Iteration   1: 5342017.322 ops/s
[info]                  ·gc.alloc.rate:               363.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          107.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150.731 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5323124.998 ops/s
[info]                  ·gc.alloc.rate:               361.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          106.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151.266 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5358341.783 ops/s
[info]                  ·gc.alloc.rate:      354.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5333540.101 ops/s
[info]                  ·gc.alloc.rate:               368.293 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 197.452 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5291915.014 ops/s
[info]                  ·gc.alloc.rate:      349.758 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5329787.844 ±(99.9%) 95448.442 ops/s [Average]
[info]   (min, avg, max) = (5291915.014, 5329787.844, 5358341.783), stdev = 24787.657
[info]   CI (99.9%): [5234339.402, 5425236.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   359.372 ±(99.9%) 28.573 MB/sec [Average]
[info]   (min, avg, max) = (349.758, 359.372, 368.293), stdev = 7.420
[info]   CI (99.9%): [330.799, 387.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   106.113 ±(99.9%) 7.930 B/op [Average]
[info]   (min, avg, max) = (104.000, 106.113, 108.682), stdev = 2.059
[info]   CI (99.9%): [98.183, 114.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.467 ±(99.9%) 1215.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.467, 669.108), stdev = 315.596
[info]   CI (99.9%): [≈ 0, 1553.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   99.890 ±(99.9%) 358.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.890, 197.452), stdev = 93.138
[info]   CI (99.9%): [≈ 0, 458.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138.911 ops/s
[info] # Warmup Iteration   2: 165712.469 ops/s
[info] # Warmup Iteration   3: 450633.149 ops/s
[info] # Warmup Iteration   4: 472664.920 ops/s
[info] # Warmup Iteration   5: 484136.303 ops/s
[info] Iteration   1: 484675.984 ops/s
[info]                  ·gc.alloc.rate:                   2403.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              7805.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8681.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.301 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 480359.958 ops/s
[info]                  ·gc.alloc.rate:                   2374.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              7779.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6574.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 481369.181 ops/s
[info]                  ·gc.alloc.rate:                   2389.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              7813.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8751.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 465703.070 ops/s
[info]                  ·gc.alloc.rate:               2302.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          7779.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6797.635 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 471828.108 ops/s
[info]                  ·gc.alloc.rate:               2386.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          7957.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8965.910 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   476787.260 ±(99.9%) 30040.119 ops/s [Average]
[info]   (min, avg, max) = (465703.070, 476787.260, 484675.984), stdev = 7801.323
[info]   CI (99.9%): [446747.142, 506827.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2371.365 ±(99.9%) 154.494 MB/sec [Average]
[info]   (min, avg, max) = (2302.042, 2371.365, 2403.791), stdev = 40.122
[info]   CI (99.9%): [2216.871, 2525.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7827.137 ±(99.9%) 285.890 B/op [Average]
[info]   (min, avg, max) = (7779.745, 7827.137, 7957.148), stdev = 74.245
[info]   CI (99.9%): [7541.247, 8113.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.509 ±(99.9%) 1414.957 MB/sec [Average]
[info]   (min, avg, max) = (2006.627, 2411.509, 2689.009), stdev = 367.460
[info]   CI (99.9%): [996.552, 3826.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7954.212 ±(99.9%) 4486.973 B/op [Average]
[info]   (min, avg, max) = (6574.076, 7954.212, 8965.910), stdev = 1165.253
[info]   CI (99.9%): [3467.239, 12441.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.495 ±(99.9%) 3.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.495, 2.248), stdev = 0.984
[info]   CI (99.9%): [≈ 0, 4.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.610 ±(99.9%) 12.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.610, 7.301), stdev = 3.194
[info]   CI (99.9%): [≈ 0, 13.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.280
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28199.726 ops/s
[info] # Warmup Iteration   2: 666222.622 ops/s
[info] # Warmup Iteration   3: 888170.813 ops/s
[info] # Warmup Iteration   4: 1011840.793 ops/s
[info] # Warmup Iteration   5: 1014422.530 ops/s
[info] Iteration   1: 1071238.314 ops/s
[info]                  ·gc.alloc.rate:                   2966.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              4357.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3305.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4856.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.883 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1089149.328 ops/s
[info]                  ·gc.alloc.rate:                   2994.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              4327.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2642.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3818.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1075527.614 ops/s
[info]                  ·gc.alloc.rate:                   2996.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              4385.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3303.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4834.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1076962.102 ops/s
[info]                  ·gc.alloc.rate:               3001.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          4386.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2653.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3877.457 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1060357.489 ops/s
[info]                  ·gc.alloc.rate:                   2957.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              4389.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3958.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   1074646.969 ±(99.9%) 40029.198 ops/s [Average]
[info]   (min, avg, max) = (1060357.489, 1074646.969, 1089149.328), stdev = 10395.456
[info]   CI (99.9%): [1034617.771, 1114676.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2983.222 ±(99.9%) 77.366 MB/sec [Average]
[info]   (min, avg, max) = (2957.301, 2983.222, 3001.542), stdev = 20.092
[info]   CI (99.9%): [2905.856, 3060.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4369.164 ±(99.9%) 103.265 B/op [Average]
[info]   (min, avg, max) = (4327.009, 4369.164, 4389.396), stdev = 26.818
[info]   CI (99.9%): [4265.899, 4472.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2914.278 ±(99.9%) 1371.682 MB/sec [Average]
[info]   (min, avg, max) = (2642.623, 2914.278, 3305.391), stdev = 356.221
[info]   CI (99.9%): [1542.596, 4285.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4268.886 ±(99.9%) 2034.857 B/op [Average]
[info]   (min, avg, max) = (3818.639, 4268.886, 4856.304), stdev = 528.446
[info]   CI (99.9%): [2234.029, 6303.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.706 ±(99.9%) 3.859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 2.206), stdev = 1.002
[info]   CI (99.9%): [≈ 0, 4.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.026 ±(99.9%) 5.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.026, 3.187), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 13.000), stdev = 3.209
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171664.982 ops/s
[info] # Warmup Iteration   2: 2289052.547 ops/s
[info] # Warmup Iteration   3: 2894036.405 ops/s
[info] # Warmup Iteration   4: 1892953.578 ops/s
[info] # Warmup Iteration   5: 1888292.254 ops/s
[info] Iteration   1: 1883174.658 ops/s
[info]                  ·gc.alloc.rate:               739.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          618.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 552.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1900126.921 ops/s
[info]                  ·gc.alloc.rate:               754.556 MB/sec
[info]                  ·gc.alloc.rate.norm:          624.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 548.742 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1893728.664 ops/s
[info]                  ·gc.alloc.rate:                   754.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              626.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     550.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1871105.335 ops/s
[info]                  ·gc.alloc.rate:               774.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          651.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1116.728 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1900077.905 ops/s
[info]                  ·gc.alloc.rate:               756.277 MB/sec
[info]                  ·gc.alloc.rate.norm:          626.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 550.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1889642.697 ±(99.9%) 47977.887 ops/s [Average]
[info]   (min, avg, max) = (1871105.335, 1889642.697, 1900126.921), stdev = 12459.705
[info]   CI (99.9%): [1841664.810, 1937620.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   756.002 ±(99.9%) 47.741 MB/sec [Average]
[info]   (min, avg, max) = (739.937, 756.002, 774.770), stdev = 12.398
[info]   CI (99.9%): [708.262, 803.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   629.556 ±(99.9%) 48.916 B/op [Average]
[info]   (min, avg, max) = (618.287, 629.556, 651.442), stdev = 12.703
[info]   CI (99.9%): [580.640, 678.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.002 ±(99.9%) 1145.485 MB/sec [Average]
[info]   (min, avg, max) = (661.267, 796.002, 1328.141), stdev = 297.479
[info]   CI (99.9%): [≈ 0, 1941.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   663.918 ±(99.9%) 974.722 B/op [Average]
[info]   (min, avg, max) = (548.742, 663.918, 1116.728), stdev = 253.132
[info]   CI (99.9%): [≈ 0, 1638.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1522858.663 ops/s
[info] # Warmup Iteration   2: 15250158.942 ops/s
[info] # Warmup Iteration   3: 18996799.103 ops/s
[info] # Warmup Iteration   4: 16129684.536 ops/s
[info] # Warmup Iteration   5: 18138207.436 ops/s
[info] Iteration   1: 18491625.425 ops/s
[info]                  ·gc.alloc.rate:               962.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 19169770.994 ops/s
[info]                  ·gc.alloc.rate:                   1022.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17799622.706 ops/s
[info]                  ·gc.alloc.rate:               921.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59.137 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 19150956.234 ops/s
[info]                  ·gc.alloc.rate:                   1006.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 19230701.783 ops/s
[info]                  ·gc.alloc.rate:               1004.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   18768535.428 ±(99.9%) 2386393.202 ops/s [Average]
[info]   (min, avg, max) = (17799622.706, 18768535.428, 19230701.783), stdev = 619738.736
[info]   CI (99.9%): [16382142.226, 21154928.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   983.306 ±(99.9%) 157.960 MB/sec [Average]
[info]   (min, avg, max) = (921.527, 983.306, 1022.270), stdev = 41.022
[info]   CI (99.9%): [825.346, 1141.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.424 ±(99.9%) 3.600 B/op [Average]
[info]   (min, avg, max) = (81.450, 82.424, 83.896), stdev = 0.935
[info]   CI (99.9%): [78.824, 86.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.865 ±(99.9%) 1411.854 MB/sec [Average]
[info]   (min, avg, max) = (668.458, 936.865, 1339.157), stdev = 366.654
[info]   CI (99.9%): [≈ 0, 2348.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   78.136 ±(99.9%) 111.870 B/op [Average]
[info]   (min, avg, max) = (54.815, 78.136, 110.038), stdev = 29.052
[info]   CI (99.9%): [≈ 0, 190.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1421201.432 ops/s
[info] # Warmup Iteration   2: 16617961.257 ops/s
[info] # Warmup Iteration   3: 19852854.122 ops/s
[info] # Warmup Iteration   4: 19870043.825 ops/s
[info] # Warmup Iteration   5: 19926949.033 ops/s
[info] Iteration   1: 19929660.600 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19949509.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19934442.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19929886.674 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19928320.387 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   19934363.873 ±(99.9%) 33793.299 ops/s [Average]
[info]   (min, avg, max) = (19928320.387, 19934363.873, 19949509.089), stdev = 8776.012
[info]   CI (99.9%): [19900570.575, 19968157.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5162.228 ops/s
[info] # Warmup Iteration   2: 310905.559 ops/s
[info] # Warmup Iteration   3: 1029936.697 ops/s
[info] # Warmup Iteration   4: 1093759.316 ops/s
[info] # Warmup Iteration   5: 1098246.805 ops/s
[info] Iteration   1: 1102032.380 ops/s
[info]                  ·gc.alloc.rate:                   2474.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              3533.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3812.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.493 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1076119.713 ops/s
[info]                  ·gc.alloc.rate:                   2422.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              3542.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2928.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1116849.365 ops/s
[info]                  ·gc.alloc.rate:                   2513.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              3541.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3766.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1119041.106 ops/s
[info]                  ·gc.alloc.rate:                   2517.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              3541.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2825.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1097475.303 ops/s
[info]                  ·gc.alloc.rate:                   2511.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              3601.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3852.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   1102303.573 ±(99.9%) 66714.707 ops/s [Average]
[info]   (min, avg, max) = (1076119.713, 1102303.573, 1119041.106), stdev = 17325.598
[info]   CI (99.9%): [1035588.866, 1169018.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2487.867 ±(99.9%) 155.911 MB/sec [Average]
[info]   (min, avg, max) = (2422.491, 2487.867, 2517.731), stdev = 40.489
[info]   CI (99.9%): [2331.957, 2643.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3552.055 ±(99.9%) 106.458 B/op [Average]
[info]   (min, avg, max) = (3533.705, 3552.055, 3601.098), stdev = 27.647
[info]   CI (99.9%): [3445.598, 3658.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2408.140 ±(99.9%) 1414.996 MB/sec [Average]
[info]   (min, avg, max) = (2002.652, 2408.140, 2687.007), stdev = 367.470
[info]   CI (99.9%): [993.144, 3823.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3437.113 ±(99.9%) 1977.534 B/op [Average]
[info]   (min, avg, max) = (2825.152, 3437.113, 3852.720), stdev = 513.559
[info]   CI (99.9%): [1459.580, 5414.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.523 ±(99.9%) 4.142 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.523, 2.446), stdev = 1.076
[info]   CI (99.9%): [≈ 0, 4.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.747 ±(99.9%) 5.914 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.747, 3.493), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.121
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105171.809 ops/s
[info] # Warmup Iteration   2: 1459492.951 ops/s
[info] # Warmup Iteration   3: 3144356.855 ops/s
[info] # Warmup Iteration   4: 3679914.697 ops/s
[info] # Warmup Iteration   5: 3843572.850 ops/s
[info] Iteration   1: 3860341.908 ops/s
[info]                  ·gc.alloc.rate:                   3507.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1429.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3311.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1350.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3872154.455 ops/s
[info]                  ·gc.alloc.rate:                   3517.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1429.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3324.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1351.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3839655.233 ops/s
[info]                  ·gc.alloc.rate:               3529.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          1446.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3340.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1369.191 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 3832620.567 ops/s
[info]                  ·gc.alloc.rate:                   3522.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              1446.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1378.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 3816247.475 ops/s
[info]                  ·gc.alloc.rate:                   3511.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1447.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1390.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   3844203.927 ±(99.9%) 85630.185 ops/s [Average]
[info]   (min, avg, max) = (3816247.475, 3844203.927, 3872154.455), stdev = 22237.887
[info]   CI (99.9%): [3758573.743, 3929834.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3517.934 ±(99.9%) 33.437 MB/sec [Average]
[info]   (min, avg, max) = (3507.845, 3517.934, 3529.862), stdev = 8.683
[info]   CI (99.9%): [3484.498, 3551.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1440.144 ±(99.9%) 36.664 B/op [Average]
[info]   (min, avg, max) = (1429.575, 1440.144, 1447.908), stdev = 9.521
[info]   CI (99.9%): [1403.481, 1476.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3341.626 ±(99.9%) 95.196 MB/sec [Average]
[info]   (min, avg, max) = (3311.908, 3341.626, 3373.490), stdev = 24.722
[info]   CI (99.9%): [3246.430, 3436.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1368.009 ±(99.9%) 67.902 B/op [Average]
[info]   (min, avg, max) = (1350.016, 1368.009, 1390.825), stdev = 17.634
[info]   CI (99.9%): [1300.107, 1435.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.250), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.102), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:49:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.664 ops/s
[info] # Warmup Iteration   2: 9162974.912 ops/s
[info] # Warmup Iteration   3: 10872333.175 ops/s
[info] # Warmup Iteration   4: 10833383.485 ops/s
[info] # Warmup Iteration   5: 11113391.323 ops/s
[info] Iteration   1: 10755434.111 ops/s
[info]                  ·gc.alloc.rate:               1353.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          198.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194.663 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 11421804.684 ops/s
[info]                  ·gc.alloc.rate:                   1441.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11481961.281 ops/s
[info]                  ·gc.alloc.rate:               1431.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          196.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 182.617 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 11476680.285 ops/s
[info]                  ·gc.alloc.rate:                   1442.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11174655.739 ops/s
[info]                  ·gc.alloc.rate:               1415.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          199.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 187.081 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11262107.220 ±(99.9%) 1193460.620 ops/s [Average]
[info]   (min, avg, max) = (10755434.111, 11262107.220, 11481961.281), stdev = 309937.933
[info]   CI (99.9%): [10068646.600, 12455567.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1416.784 ±(99.9%) 142.932 MB/sec [Average]
[info]   (min, avg, max) = (1353.247, 1416.784, 1442.314), stdev = 37.119
[info]   CI (99.9%): [1273.853, 1559.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.977 ±(99.9%) 4.279 B/op [Average]
[info]   (min, avg, max) = (196.275, 197.977, 199.256), stdev = 1.111
[info]   CI (99.9%): [193.698, 202.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1464.112 ±(99.9%) 1148.786 MB/sec [Average]
[info]   (min, avg, max) = (1328.841, 1464.112, 1997.787), stdev = 298.336
[info]   CI (99.9%): [315.326, 2612.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   204.346 ±(99.9%) 150.880 B/op [Average]
[info]   (min, avg, max) = (182.617, 204.346, 273.920), stdev = 39.183
[info]   CI (99.9%): [53.467, 355.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.957 ±(99.9%) 8.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.957, 4.742), stdev = 2.116
[info]   CI (99.9%): [≈ 0, 9.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.131 ±(99.9%) 1.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.131, 0.650), stdev = 0.290
[info]   CI (99.9%): [≈ 0, 1.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21626.131 ops/s
[info] # Warmup Iteration   2: 2605505.404 ops/s
[info] # Warmup Iteration   3: 3478835.527 ops/s
[info] # Warmup Iteration   4: 3833931.618 ops/s
[info] # Warmup Iteration   5: 3874987.966 ops/s
[info] Iteration   1: 3860873.117 ops/s
[info]                  ·gc.alloc.rate:                   2335.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1087.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3906873.945 ops/s
[info]                  ·gc.alloc.rate:                   2369.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              954.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3854343.536 ops/s
[info]                  ·gc.alloc.rate:               2341.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          955.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1095.653 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3897872.120 ops/s
[info]                  ·gc.alloc.rate:                   2351.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     816.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3911195.424 ops/s
[info]                  ·gc.alloc.rate:               2386.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          960.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 815.270 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3886231.628 ±(99.9%) 102688.485 ops/s [Average]
[info]   (min, avg, max) = (3854343.536, 3886231.628, 3911195.424), stdev = 26667.873
[info]   CI (99.9%): [3783543.144, 3988920.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2357.016 ±(99.9%) 80.987 MB/sec [Average]
[info]   (min, avg, max) = (2335.494, 2357.016, 2386.722), stdev = 21.032
[info]   CI (99.9%): [2276.030, 2438.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   954.433 ±(99.9%) 15.614 B/op [Average]
[info]   (min, avg, max) = (949.646, 954.433, 960.430), stdev = 4.055
[info]   CI (99.9%): [938.819, 970.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2281.916 ±(99.9%) 1387.921 MB/sec [Average]
[info]   (min, avg, max) = (2008.905, 2281.916, 2684.762), stdev = 360.439
[info]   CI (99.9%): [893.995, 3669.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   924.832 ±(99.9%) 586.887 B/op [Average]
[info]   (min, avg, max) = (809.220, 924.832, 1095.653), stdev = 152.413
[info]   CI (99.9%): [337.945, 1511.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.034), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2314840.073 ops/s
[info] # Warmup Iteration   2: 13662920.716 ops/s
[info] # Warmup Iteration   3: 15149688.022 ops/s
[info] # Warmup Iteration   4: 15410066.309 ops/s
[info] # Warmup Iteration   5: 14905013.692 ops/s
[info] Iteration   1: 15076610.814 ops/s
[info]                  ·gc.alloc.rate:                   1969.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 15053891.122 ops/s
[info]                  ·gc.alloc.rate:                   1979.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15061944.676 ops/s
[info]                  ·gc.alloc.rate:                   1979.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15483794.276 ops/s
[info]                  ·gc.alloc.rate:                   2021.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15497742.827 ops/s
[info]                  ·gc.alloc.rate:               2049.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204.136 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   15234796.743 ±(99.9%) 900523.702 ops/s [Average]
[info]   (min, avg, max) = (15053891.122, 15234796.743, 15497742.827), stdev = 233863.146
[info]   CI (99.9%): [14334273.041, 16135320.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2000.015 ±(99.9%) 131.269 MB/sec [Average]
[info]   (min, avg, max) = (1969.963, 2000.015, 2049.698), stdev = 34.090
[info]   CI (99.9%): [1868.746, 2131.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.594 ±(99.9%) 4.246 B/op [Average]
[info]   (min, avg, max) = (205.412, 206.594, 208.142), stdev = 1.103
[info]   CI (99.9%): [202.347, 210.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2010.833 ±(99.9%) 11.867 MB/sec [Average]
[info]   (min, avg, max) = (2008.013, 2010.833, 2015.064), stdev = 3.082
[info]   CI (99.9%): [1998.966, 2022.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   207.754 ±(99.9%) 12.852 B/op [Average]
[info]   (min, avg, max) = (204.079, 207.754, 210.401), stdev = 3.338
[info]   CI (99.9%): [194.903, 220.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.769 ±(99.9%) 4.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 2.823), stdev = 1.218
[info]   CI (99.9%): [≈ 0, 5.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.295), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2127.194 ops/s
[info] # Warmup Iteration   2: 656761.080 ops/s
[info] # Warmup Iteration   3: 1698718.228 ops/s
[info] # Warmup Iteration   4: 1756129.568 ops/s
[info] # Warmup Iteration   5: 1802592.437 ops/s
[info] Iteration   1: 1817706.591 ops/s
[info]                  ·gc.alloc.rate:                   3064.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              2652.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2314.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1812835.934 ops/s
[info]                  ·gc.alloc.rate:                   3057.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              2653.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2905.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1765014.759 ops/s
[info]                  ·gc.alloc.rate:               3004.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          2679.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2395.067 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1739487.672 ops/s
[info]                  ·gc.alloc.rate:               2964.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          2681.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2437.471 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1740946.797 ops/s
[info]                  ·gc.alloc.rate:                   2967.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              2681.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2442.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1775198.351 ±(99.9%) 146320.229 ops/s [Average]
[info]   (min, avg, max) = (1739487.672, 1775198.351, 1817706.591), stdev = 37998.899
[info]   CI (99.9%): [1628878.121, 1921518.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3011.528 ±(99.9%) 183.949 MB/sec [Average]
[info]   (min, avg, max) = (2964.102, 3011.528, 3064.273), stdev = 47.771
[info]   CI (99.9%): [2827.579, 3195.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   2669.502 ±(99.9%) 57.623 B/op [Average]
[info]   (min, avg, max) = (2652.866, 2669.502, 2681.156), stdev = 14.965
[info]   CI (99.9%): [2611.879, 2727.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2821.032 ±(99.9%) 1134.573 MB/sec [Average]
[info]   (min, avg, max) = (2673.636, 2821.032, 3347.756), stdev = 294.645
[info]   CI (99.9%): [1686.459, 3955.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2498.972 ±(99.9%) 897.066 B/op [Average]
[info]   (min, avg, max) = (2314.675, 2498.972, 2905.557), stdev = 232.965
[info]   CI (99.9%): [1601.906, 3396.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.291), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.252), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67952.319 ops/s
[info] # Warmup Iteration   2: 2214864.633 ops/s
[info] # Warmup Iteration   3: 4492966.324 ops/s
[info] # Warmup Iteration   4: 5280623.020 ops/s
[info] # Warmup Iteration   5: 5105114.438 ops/s
[info] Iteration   1: 5110546.278 ops/s
[info]                  ·gc.alloc.rate:                   2551.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              785.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2632.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 5445876.647 ops/s
[info]                  ·gc.alloc.rate:                   2724.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              786.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2627.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5420084.408 ops/s
[info]                  ·gc.alloc.rate:               2710.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          786.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2614.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 758.856 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 5379347.265 ops/s
[info]                  ·gc.alloc.rate:                   2729.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              798.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2618.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5368235.819 ops/s
[info]                  ·gc.alloc.rate:                   2725.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              798.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2633.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   5344818.083 ±(99.9%) 518415.191 ops/s [Average]
[info]   (min, avg, max) = (5110546.278, 5344818.083, 5445876.647), stdev = 134630.779
[info]   CI (99.9%): [4826402.893, 5863233.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2688.147 ±(99.9%) 296.050 MB/sec [Average]
[info]   (min, avg, max) = (2551.178, 2688.147, 2729.093), stdev = 76.883
[info]   CI (99.9%): [2392.096, 2984.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   791.304 ±(99.9%) 25.760 B/op [Average]
[info]   (min, avg, max) = (785.582, 791.304, 798.766), stdev = 6.690
[info]   CI (99.9%): [765.544, 817.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2625.507 ±(99.9%) 33.053 MB/sec [Average]
[info]   (min, avg, max) = (2614.481, 2625.507, 2633.871), stdev = 8.584
[info]   CI (99.9%): [2592.453, 2658.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   773.335 ±(99.9%) 83.017 B/op [Average]
[info]   (min, avg, max) = (758.856, 773.335, 810.666), stdev = 21.559
[info]   CI (99.9%): [690.318, 856.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.851 ±(99.9%) 9.758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.851, 5.043), stdev = 2.534
[info]   CI (99.9%): [≈ 0, 11.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.551 ±(99.9%) 2.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.551, 1.457), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 20.000), stdev = 6.245
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.535 ops/s
[info] # Warmup Iteration   2: 21229220.229 ops/s
[info] # Warmup Iteration   3: 21427028.465 ops/s
[info] # Warmup Iteration   4: 24689952.748 ops/s
[info] # Warmup Iteration   5: 24624495.793 ops/s
[info] Iteration   1: 24122319.383 ops/s
[info]                  ·gc.alloc.rate:               749.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.332 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 24027240.906 ops/s
[info]                  ·gc.alloc.rate:               746.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 24825611.217 ops/s
[info]                  ·gc.alloc.rate:                   781.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24842396.239 ops/s
[info]                  ·gc.alloc.rate:               774.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.121 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 23951920.758 ops/s
[info]                  ·gc.alloc.rate:               756.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   24353897.700 ±(99.9%) 1703733.827 ops/s [Average]
[info]   (min, avg, max) = (23951920.758, 24353897.700, 24842396.239), stdev = 442454.265
[info]   CI (99.9%): [22650163.873, 26057631.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   761.675 ±(99.9%) 58.797 MB/sec [Average]
[info]   (min, avg, max) = (746.810, 761.675, 781.245), stdev = 15.269
[info]   CI (99.9%): [702.878, 820.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.217 ±(99.9%) 1.443 B/op [Average]
[info]   (min, avg, max) = (48.890, 49.217, 49.707), stdev = 0.375
[info]   CI (99.9%): [47.774, 50.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.769 ±(99.9%) 1.999 MB/sec [Average]
[info]   (min, avg, max) = (664.154, 664.769, 665.512), stdev = 0.519
[info]   CI (99.9%): [662.770, 666.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   42.967 ±(99.9%) 2.974 B/op [Average]
[info]   (min, avg, max) = (42.121, 42.967, 43.729), stdev = 0.772
[info]   CI (99.9%): [39.993, 45.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434893.927 ops/s
[info] # Warmup Iteration   2: 9892912.796 ops/s
[info] # Warmup Iteration   3: 10914044.159 ops/s
[info] # Warmup Iteration   4: 11038920.758 ops/s
[info] # Warmup Iteration   5: 10998922.549 ops/s
[info] Iteration   1: 10994826.277 ops/s
[info]                  ·gc.alloc.rate:                   350.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10553119.443 ops/s
[info]                  ·gc.alloc.rate:      323.417 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.231 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10531523.342 ops/s
[info]                  ·gc.alloc.rate:               338.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98.658 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 10778854.621 ops/s
[info]                  ·gc.alloc.rate:      388.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 56.770 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 11031021.386 ops/s
[info]                  ·gc.alloc.rate:               354.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.189 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   10777869.014 ±(99.9%) 907878.847 ops/s [Average]
[info]   (min, avg, max) = (10531523.342, 10777869.014, 11031021.386), stdev = 235773.254
[info]   CI (99.9%): [9869990.166, 11685747.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   351.004 ±(99.9%) 93.570 MB/sec [Average]
[info]   (min, avg, max) = (323.417, 351.004, 388.863), stdev = 24.300
[info]   CI (99.9%): [257.434, 444.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   51.241 ±(99.9%) 12.460 B/op [Average]
[info]   (min, avg, max) = (48.231, 51.241, 56.770), stdev = 3.236
[info]   CI (99.9%): [38.781, 63.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.446 ±(99.9%) 1309.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.446, 660.385), stdev = 339.976
[info]   CI (99.9%): [≈ 0, 1675.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   53.216 ±(99.9%) 190.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.216, 98.658), stdev = 49.518
[info]   CI (99.9%): [≈ 0, 243.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5565136.870 ops/s
[info] # Warmup Iteration   2: 29453548.062 ops/s
[info] # Warmup Iteration   3: 33461091.679 ops/s
[info] # Warmup Iteration   4: 33959754.549 ops/s
[info] # Warmup Iteration   5: 34083011.476 ops/s
[info] Iteration   1: 33849972.560 ops/s
[info]                  ·gc.alloc.rate:               1051.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34416694.156 ops/s
[info]                  ·gc.alloc.rate:               1091.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61.169 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 34825649.502 ops/s
[info]                  ·gc.alloc.rate:                   1079.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33946003.251 ops/s
[info]                  ·gc.alloc.rate:                   1075.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 32078701.983 ops/s
[info]                  ·gc.alloc.rate:                   1003.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   33823404.290 ±(99.9%) 4046022.238 ops/s [Average]
[info]   (min, avg, max) = (32078701.983, 33823404.290, 34825649.502), stdev = 1050739.127
[info]   CI (99.9%): [29777382.052, 37869426.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1060.330 ±(99.9%) 134.123 MB/sec [Average]
[info]   (min, avg, max) = (1003.752, 1060.330, 1091.301), stdev = 34.831
[info]   CI (99.9%): [926.207, 1194.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.332 ±(99.9%) 2.051 B/op [Average]
[info]   (min, avg, max) = (48.776, 49.332, 49.892), stdev = 0.533
[info]   CI (99.9%): [47.281, 51.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.070 ±(99.9%) 1411.641 MB/sec [Average]
[info]   (min, avg, max) = (668.485, 937.070, 1339.360), stdev = 366.599
[info]   CI (99.9%): [≈ 0, 2348.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.492 ±(99.9%) 63.875 B/op [Average]
[info]   (min, avg, max) = (30.256, 43.492, 62.093), stdev = 16.588
[info]   CI (99.9%): [≈ 0, 107.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4306226.789 ops/s
[info] # Warmup Iteration   2: 31711859.841 ops/s
[info] # Warmup Iteration   3: 37256942.090 ops/s
[info] # Warmup Iteration   4: 37318876.090 ops/s
[info] # Warmup Iteration   5: 37316879.089 ops/s
[info] Iteration   1: 37404876.527 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37365716.746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37420798.359 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37452939.819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37519360.488 ops/s
[info]                  ·gc.alloc.rate:      0.106 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   37432738.388 ±(99.9%) 222224.479 ops/s [Average]
[info]   (min, avg, max) = (37365716.746, 37432738.388, 37519360.488), stdev = 57710.992
[info]   CI (99.9%): [37210513.908, 37654962.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.022 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.022, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44286.646 ops/s
[info] # Warmup Iteration   2: 1739626.478 ops/s
[info] # Warmup Iteration   3: 2127776.762 ops/s
[info] # Warmup Iteration   4: 2423213.868 ops/s
[info] # Warmup Iteration   5: 2419737.969 ops/s
[info] Iteration   1: 2489746.735 ops/s
[info]                  ·gc.alloc.rate:                   3510.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              2219.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2113.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2479576.742 ops/s
[info]                  ·gc.alloc.rate:               3523.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          2236.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4026.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2555.408 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 2489965.924 ops/s
[info]                  ·gc.alloc.rate:               3563.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          2252.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2129.148 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2372710.801 ops/s
[info]                  ·gc.alloc.rate:                   3403.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              2257.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2241.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2453127.423 ops/s
[info]                  ·gc.alloc.rate:                   3515.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              2254.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2173.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   2457025.525 ±(99.9%) 190485.022 ops/s [Average]
[info]   (min, avg, max) = (2372710.801, 2457025.525, 2489965.924), stdev = 49468.355
[info]   CI (99.9%): [2266540.503, 2647510.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3503.261 ±(99.9%) 230.345 MB/sec [Average]
[info]   (min, avg, max) = (3403.121, 3503.261, 3563.829), stdev = 59.820
[info]   CI (99.9%): [3272.917, 3733.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2243.965 ±(99.9%) 62.407 B/op [Average]
[info]   (min, avg, max) = (2219.011, 2243.965, 2257.129), stdev = 16.207
[info]   CI (99.9%): [2181.558, 2306.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3501.211 ±(99.9%) 1133.600 MB/sec [Average]
[info]   (min, avg, max) = (3343.276, 3501.211, 4026.977), stdev = 294.392
[info]   CI (99.9%): [2367.611, 4634.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2242.530 ±(99.9%) 700.029 B/op [Average]
[info]   (min, avg, max) = (2113.413, 2242.530, 2555.408), stdev = 181.795
[info]   CI (99.9%): [1542.500, 2942.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.132), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91317.656 ops/s
[info] # Warmup Iteration   2: 347364.076 ops/s
[info] # Warmup Iteration   3: 395338.823 ops/s
[info] # Warmup Iteration   4: 372001.227 ops/s
[info] # Warmup Iteration   5: 374182.776 ops/s
[info] Iteration   1: 367093.959 ops/s
[info]                  ·gc.alloc.rate:                   2170.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              9304.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8576.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.641 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 376640.898 ops/s
[info]                  ·gc.alloc.rate:                   2245.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              9380.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11117.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.044 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 377897.732 ops/s
[info]                  ·gc.alloc.rate:                   2227.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              9278.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8313.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 379178.873 ops/s
[info]                  ·gc.alloc.rate:                   2235.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              9276.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8299.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 378938.486 ops/s
[info]                  ·gc.alloc.rate:               2260.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          9388.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8326.270 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   375949.989 ±(99.9%) 19450.243 ops/s [Average]
[info]   (min, avg, max) = (367093.959, 375949.989, 379178.873), stdev = 5051.166
[info]   CI (99.9%): [356499.746, 395400.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2227.993 ±(99.9%) 133.189 MB/sec [Average]
[info]   (min, avg, max) = (2170.229, 2227.993, 2260.829), stdev = 34.589
[info]   CI (99.9%): [2094.804, 2361.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9325.683 ±(99.9%) 211.097 B/op [Average]
[info]   (min, avg, max) = (9276.841, 9325.683, 9388.428), stdev = 54.821
[info]   CI (99.9%): [9114.586, 9536.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2132.600 ±(99.9%) 1138.996 MB/sec [Average]
[info]   (min, avg, max) = (1996.061, 2132.600, 2661.701), stdev = 295.794
[info]   CI (99.9%): [993.604, 3271.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8926.555 ±(99.9%) 4737.296 B/op [Average]
[info]   (min, avg, max) = (8299.275, 8926.555, 11117.781), stdev = 1230.261
[info]   CI (99.9%): [4189.259, 13663.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 1.783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.082), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 2.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.172 ±(99.9%) 7.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.172, 4.641), stdev = 1.986
[info]   CI (99.9%): [≈ 0, 8.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61479.549 ops/s
[info] # Warmup Iteration   2: 632408.403 ops/s
[info] # Warmup Iteration   3: 769408.667 ops/s
[info] # Warmup Iteration   4: 928025.171 ops/s
[info] # Warmup Iteration   5: 936117.708 ops/s
[info] Iteration   1: 936786.659 ops/s
[info]                  ·gc.alloc.rate:                   803.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1349.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1107.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 908478.842 ops/s
[info]                  ·gc.alloc.rate:               789.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          1367.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1144.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 884521.045 ops/s
[info]                  ·gc.alloc.rate:               766.582 MB/sec
[info]                  ·gc.alloc.rate.norm:          1363.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1175.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 871942.484 ops/s
[info]                  ·gc.alloc.rate:                   890.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1607.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2389.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 887666.132 ops/s
[info]                  ·gc.alloc.rate:               736.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          1305.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1176.960 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   897879.032 ±(99.9%) 97824.605 ops/s [Average]
[info]   (min, avg, max) = (871942.484, 897879.032, 936786.659), stdev = 25404.739
[info]   CI (99.9%): [800054.427, 995703.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   797.250 ±(99.9%) 223.948 MB/sec [Average]
[info]   (min, avg, max) = (736.066, 797.250, 890.764), stdev = 58.159
[info]   CI (99.9%): [573.303, 1021.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1398.690 ±(99.9%) 460.144 B/op [Average]
[info]   (min, avg, max) = (1305.076, 1398.690, 1607.808), stdev = 119.498
[info]   CI (99.9%): [938.546, 1858.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   793.665 ±(99.9%) 1140.817 MB/sec [Average]
[info]   (min, avg, max) = (659.634, 793.665, 1323.635), stdev = 296.267
[info]   CI (99.9%): [≈ 0, 1934.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1398.712 ±(99.9%) 2134.694 B/op [Average]
[info]   (min, avg, max) = (1107.949, 1398.712, 2389.128), stdev = 554.373
[info]   CI (99.9%): [≈ 0, 3533.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.303 ±(99.9%) 2.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 1.496), stdev = 0.667
[info]   CI (99.9%): [≈ 0, 2.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.547 ±(99.9%) 4.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.547, 2.699), stdev = 1.203
[info]   CI (99.9%): [≈ 0, 5.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 476490.627 ops/s
[info] # Warmup Iteration   2: 1458461.980 ops/s
[info] # Warmup Iteration   3: 1617041.756 ops/s
[info] # Warmup Iteration   4: 1612538.678 ops/s
[info] # Warmup Iteration   5: 1693011.155 ops/s
[info] Iteration   1: 1654120.935 ops/s
[info]                  ·gc.alloc.rate:               1141.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          1086.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1273.673 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 1596939.557 ops/s
[info]                  ·gc.alloc.rate:                   1099.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              1083.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1677093.939 ops/s
[info]                  ·gc.alloc.rate:               1133.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          1063.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 628.908 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1669816.984 ops/s
[info]                  ·gc.alloc.rate:               1151.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          1085.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1263.294 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 1697706.446 ops/s
[info]                  ·gc.alloc.rate:                   1170.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1085.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1659135.572 ±(99.9%) 146852.962 ops/s [Average]
[info]   (min, avg, max) = (1596939.557, 1659135.572, 1697706.446), stdev = 38137.248
[info]   CI (99.9%): [1512282.610, 1805988.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1139.563 ±(99.9%) 100.905 MB/sec [Average]
[info]   (min, avg, max) = (1099.874, 1139.563, 1170.906), stdev = 26.205
[info]   CI (99.9%): [1038.659, 1240.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1080.787 ±(99.9%) 37.804 B/op [Average]
[info]   (min, avg, max) = (1063.289, 1080.787, 1086.075), stdev = 9.817
[info]   CI (99.9%): [1042.983, 1118.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.325 ±(99.9%) 1153.514 MB/sec [Average]
[info]   (min, avg, max) = (670.453, 1206.325, 1341.949), stdev = 299.564
[info]   CI (99.9%): [52.812, 2359.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1145.991 ±(99.9%) 1118.321 B/op [Average]
[info]   (min, avg, max) = (628.908, 1145.991, 1320.310), stdev = 290.424
[info]   CI (99.9%): [27.670, 2264.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.827 ±(99.9%) 7.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.827, 4.094), stdev = 1.826
[info]   CI (99.9%): [≈ 0, 7.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.767 ±(99.9%) 6.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.795), stdev = 1.693
[info]   CI (99.9%): [≈ 0, 7.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9086.821 ops/s
[info] # Warmup Iteration   2: 153473.578 ops/s
[info] # Warmup Iteration   3: 176015.395 ops/s
[info] # Warmup Iteration   4: 228354.107 ops/s
[info] # Warmup Iteration   5: 228228.151 ops/s
[info] Iteration   1: 221949.697 ops/s
[info]                  ·gc.alloc.rate:                   4071.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              28873.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3990.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28299.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 213214.358 ops/s
[info]                  ·gc.alloc.rate:                   4010.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              29599.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24677.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 220477.028 ops/s
[info]                  ·gc.alloc.rate:                   4034.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              28801.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4026.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28745.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 224301.544 ops/s
[info]                  ·gc.alloc.rate:                   4076.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              28604.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4045.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28387.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.798 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 223902.880 ops/s
[info]                  ·gc.alloc.rate:                   4137.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              29075.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4058.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28519.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   220769.101 ±(99.9%) 17312.058 ops/s [Average]
[info]   (min, avg, max) = (213214.358, 220769.101, 224301.544), stdev = 4495.887
[info]   CI (99.9%): [203457.043, 238081.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4066.116 ±(99.9%) 186.013 MB/sec [Average]
[info]   (min, avg, max) = (4010.028, 4066.116, 4137.224), stdev = 48.307
[info]   CI (99.9%): [3880.103, 4252.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   28991.030 ±(99.9%) 1461.978 B/op [Average]
[info]   (min, avg, max) = (28604.712, 28991.030, 29599.607), stdev = 379.671
[info]   CI (99.9%): [27529.052, 30453.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3892.960 ±(99.9%) 1187.378 MB/sec [Average]
[info]   (min, avg, max) = (3343.217, 3892.960, 4058.030), stdev = 308.358
[info]   CI (99.9%): [2705.581, 5080.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27725.838 ±(99.9%) 6593.310 B/op [Average]
[info]   (min, avg, max) = (24677.612, 27725.838, 28745.241), stdev = 1712.262
[info]   CI (99.9%): [21132.528, 34319.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.045 ±(99.9%) 7.545 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.045, 4.529), stdev = 1.959
[info]   CI (99.9%): [≈ 0, 8.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.663 ±(99.9%) 55.764 B/op [Average]
[info]   (min, avg, max) = (0.293, 7.663, 33.431), stdev = 14.482
[info]   CI (99.9%): [≈ 0, 63.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119855.563 ops/s
[info] # Warmup Iteration   2: 416854.519 ops/s
[info] # Warmup Iteration   3: 476827.748 ops/s
[info] # Warmup Iteration   4: 481006.042 ops/s
[info] # Warmup Iteration   5: 485518.160 ops/s
[info] Iteration   1: 482077.214 ops/s
[info]                  ·gc.alloc.rate:                   1589.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              5189.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6545.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 471299.931 ops/s
[info]                  ·gc.alloc.rate:                   1579.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              5272.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4466.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 486789.936 ops/s
[info]                  ·gc.alloc.rate:                   1589.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              5138.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4321.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 486367.921 ops/s
[info]                  ·gc.alloc.rate:                   1596.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              5163.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6471.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.472 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 482870.771 ops/s
[info]                  ·gc.alloc.rate:                   1593.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              5193.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4342.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   481881.155 ±(99.9%) 24140.134 ops/s [Average]
[info]   (min, avg, max) = (471299.931, 481881.155, 486789.936), stdev = 6269.116
[info]   CI (99.9%): [457741.020, 506021.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1589.598 ±(99.9%) 25.338 MB/sec [Average]
[info]   (min, avg, max) = (1579.015, 1589.598, 1596.260), stdev = 6.580
[info]   CI (99.9%): [1564.260, 1614.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5191.585 ±(99.9%) 193.533 B/op [Average]
[info]   (min, avg, max) = (5138.687, 5191.585, 5272.300), stdev = 50.260
[info]   CI (99.9%): [4998.052, 5385.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1602.453 ±(99.9%) 1406.742 MB/sec [Average]
[info]   (min, avg, max) = (1332.484, 1602.453, 2004.808), stdev = 365.327
[info]   CI (99.9%): [195.711, 3009.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5229.456 ±(99.9%) 4500.971 B/op [Average]
[info]   (min, avg, max) = (4321.611, 5229.456, 6545.132), stdev = 1168.888
[info]   CI (99.9%): [728.485, 9730.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.939 ±(99.9%) 5.885 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.939, 3.615), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.115 ±(99.9%) 19.670 B/op [Average]
[info]   (min, avg, max) = (0.136, 3.115, 12.070), stdev = 5.108
[info]   CI (99.9%): [≈ 0, 22.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.336
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141073.608 ops/s
[info] # Warmup Iteration   2: 953647.181 ops/s
[info] # Warmup Iteration   3: 1013300.701 ops/s
[info] # Warmup Iteration   4: 996666.278 ops/s
[info] # Warmup Iteration   5: 999577.701 ops/s
[info] Iteration   1: 1000291.859 ops/s
[info]                  ·gc.alloc.rate:      474.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 746.128 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 956797.023 ops/s
[info]                  ·gc.alloc.rate:      442.665 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.124 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1017217.106 ops/s
[info]                  ·gc.alloc.rate:               488.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          755.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1021.945 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1016129.130 ops/s
[info]                  ·gc.alloc.rate:               491.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          760.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1026.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1017810.233 ops/s
[info]                  ·gc.alloc.rate:      470.900 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   1001649.070 ±(99.9%) 100537.342 ops/s [Average]
[info]   (min, avg, max) = (956797.023, 1001649.070, 1017810.233), stdev = 26109.228
[info]   CI (99.9%): [901111.728, 1102186.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   473.394 ±(99.9%) 74.084 MB/sec [Average]
[info]   (min, avg, max) = (442.665, 473.394, 491.076), stdev = 19.239
[info]   CI (99.9%): [399.309, 547.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   743.582 ±(99.9%) 58.058 B/op [Average]
[info]   (min, avg, max) = (728.000, 743.582, 760.581), stdev = 15.077
[info]   CI (99.9%): [685.524, 801.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.635 ±(99.9%) 1395.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.635, 662.541), stdev = 362.368
[info]   CI (99.9%): [≈ 0, 1659.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   409.619 ±(99.9%) 2159.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 409.619, 1026.148), stdev = 560.895
[info]   CI (99.9%): [≈ 0, 2569.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1212733.570 ops/s
[info] # Warmup Iteration   2: 2365697.211 ops/s
[info] # Warmup Iteration   3: 2271300.857 ops/s
[info] # Warmup Iteration   4: 2772915.112 ops/s
[info] # Warmup Iteration   5: 2752458.963 ops/s
[info] Iteration   1: 2790147.125 ops/s
[info]                  ·gc.alloc.rate:                   1328.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2780574.207 ops/s
[info]                  ·gc.alloc.rate:               1329.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          752.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 758.631 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2765774.936 ops/s
[info]                  ·gc.alloc.rate:               1331.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          757.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 762.686 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2793504.514 ops/s
[info]                  ·gc.alloc.rate:                   1332.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2799727.127 ops/s
[info]                  ·gc.alloc.rate:                   1322.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     751.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2785945.582 ±(99.9%) 50954.803 ops/s [Average]
[info]   (min, avg, max) = (2765774.936, 2785945.582, 2799727.127), stdev = 13232.801
[info]   CI (99.9%): [2734990.779, 2836900.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1328.976 ±(99.9%) 15.165 MB/sec [Average]
[info]   (min, avg, max) = (1322.423, 1328.976, 1332.370), stdev = 3.938
[info]   CI (99.9%): [1313.811, 1344.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.690 ±(99.9%) 20.091 B/op [Average]
[info]   (min, avg, max) = (743.169, 750.690, 757.651), stdev = 5.218
[info]   CI (99.9%): [730.598, 770.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.934 ±(99.9%) 5.478 MB/sec [Average]
[info]   (min, avg, max) = (1338.060, 1339.934, 1341.612), stdev = 1.423
[info]   CI (99.9%): [1334.455, 1345.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   756.876 ±(99.9%) 15.492 B/op [Average]
[info]   (min, avg, max) = (751.956, 756.876, 762.686), stdev = 4.023
[info]   CI (99.9%): [741.384, 772.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.934), stdev = 1.742
[info]   CI (99.9%): [≈ 0, 7.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.462 ±(99.9%) 3.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.462, 2.217), stdev = 0.981
[info]   CI (99.9%): [≈ 0, 4.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1273275.188 ops/s
[info] # Warmup Iteration   2: 2686258.200 ops/s
[info] # Warmup Iteration   3: 2803703.462 ops/s
[info] # Warmup Iteration   4: 2719151.850 ops/s
[info] # Warmup Iteration   5: 2795733.299 ops/s
[info] Iteration   1: 2801464.627 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2798544.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2800854.700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2803292.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2801899.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2801211.128 ±(99.9%) 6699.196 ops/s [Average]
[info]   (min, avg, max) = (2798544.507, 2801211.128, 2803292.211), stdev = 1739.760
[info]   CI (99.9%): [2794511.931, 2807910.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:46:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88778.545 ops/s
[info] # Warmup Iteration   2: 523890.810 ops/s
[info] # Warmup Iteration   3: 556048.331 ops/s
[info] # Warmup Iteration   4: 637827.272 ops/s
[info] # Warmup Iteration   5: 641753.229 ops/s
[info] Iteration   1: 644631.037 ops/s
[info]                  ·gc.alloc.rate:                   1158.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              2827.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3238.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 659753.314 ops/s
[info]                  ·gc.alloc.rate:                   912.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              2176.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1582.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 659298.042 ops/s
[info]                  ·gc.alloc.rate:                   913.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              2178.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1579.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 666273.708 ops/s
[info]                  ·gc.alloc.rate:                   933.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              2205.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3123.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 677646.219 ops/s
[info]                  ·gc.alloc.rate:                   941.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1534.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.160 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   661520.464 ±(99.9%) 46205.643 ops/s [Average]
[info]   (min, avg, max) = (644631.037, 661520.464, 677646.219), stdev = 11999.459
[info]   CI (99.9%): [615314.822, 707726.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   971.671 ±(99.9%) 404.151 MB/sec [Average]
[info]   (min, avg, max) = (912.475, 971.671, 1158.069), stdev = 104.957
[info]   CI (99.9%): [567.520, 1375.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2314.475 ±(99.9%) 1104.471 B/op [Average]
[info]   (min, avg, max) = (2176.735, 2314.475, 2827.169), stdev = 286.827
[info]   CI (99.9%): [1210.004, 3418.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   927.134 ±(99.9%) 1397.315 MB/sec [Average]
[info]   (min, avg, max) = (661.143, 927.134, 1326.745), stdev = 362.878
[info]   CI (99.9%): [≈ 0, 2324.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2211.816 ±(99.9%) 3411.993 B/op [Average]
[info]   (min, avg, max) = (1534.834, 2211.816, 3238.956), stdev = 886.084
[info]   CI (99.9%): [≈ 0, 5623.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.129 ±(99.9%) 6.295 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.129, 3.979), stdev = 1.635
[info]   CI (99.9%): [≈ 0, 7.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.669 ±(99.9%) 14.866 B/op [Average]
[info]   (min, avg, max) = (0.099, 2.669, 9.398), stdev = 3.861
[info]   CI (99.9%): [≈ 0, 17.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 11.000), stdev = 3.507
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2381.001 ops/s
[info] # Warmup Iteration   2: 13221.891 ops/s
[info] # Warmup Iteration   3: 17695.387 ops/s
[info] # Warmup Iteration   4: 22682.654 ops/s
[info] # Warmup Iteration   5: 21671.420 ops/s
[info] Iteration   1: 22030.935 ops/s
[info]                  ·gc.alloc.rate:                   1726.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              123301.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1928.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137740.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.461 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 21019.911 ops/s
[info]                  ·gc.alloc.rate:                   1921.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              143825.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1938.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145086.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 21548.847 ops/s
[info]                  ·gc.alloc.rate:                   1678.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              122610.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94927.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21976.337 ops/s
[info]                  ·gc.alloc.rate:                   1735.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              124280.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140357.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21223.891 ops/s
[info]                  ·gc.alloc.rate:                   1916.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              142154.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146317.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   21559.984 ±(99.9%) 1721.958 ops/s [Average]
[info]   (min, avg, max) = (21019.911, 21559.984, 22030.935), stdev = 447.187
[info]   CI (99.9%): [19838.026, 23281.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1795.793 ±(99.9%) 442.141 MB/sec [Average]
[info]   (min, avg, max) = (1678.769, 1795.793, 1921.744), stdev = 114.822
[info]   CI (99.9%): [1353.653, 2237.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   131234.508 ±(99.9%) 41447.335 B/op [Average]
[info]   (min, avg, max) = (122610.695, 131234.508, 143825.121), stdev = 10763.741
[info]   CI (99.9%): [89787.173, 172681.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1819.907 ±(99.9%) 1121.763 MB/sec [Average]
[info]   (min, avg, max) = (1299.728, 1819.907, 1973.075), stdev = 291.318
[info]   CI (99.9%): [698.144, 2941.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   132885.749 ±(99.9%) 82800.825 B/op [Average]
[info]   (min, avg, max) = (94927.000, 132885.749, 146317.525), stdev = 21503.111
[info]   CI (99.9%): [50084.924, 215686.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.573 ±(99.9%) 3.390 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.573, 2.117), stdev = 0.880
[info]   CI (99.9%): [≈ 0, 3.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   42.039 ±(99.9%) 247.591 B/op [Average]
[info]   (min, avg, max) = (4.461, 42.039, 154.649), stdev = 64.299
[info]   CI (99.9%): [≈ 0, 289.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11012.952 ops/s
[info] # Warmup Iteration   2: 30197.785 ops/s
[info] # Warmup Iteration   3: 46606.338 ops/s
[info] # Warmup Iteration   4: 42950.555 ops/s
[info] # Warmup Iteration   5: 38640.828 ops/s
[info] Iteration   1: 41841.931 ops/s
[info]                  ·gc.alloc.rate:                   1153.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              43378.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49900.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 41818.385 ops/s
[info]                  ·gc.alloc.rate:               1136.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          42762.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24945.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 41612.331 ops/s
[info]                  ·gc.alloc.rate:                   1147.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              43376.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50210.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41890.752 ops/s
[info]                  ·gc.alloc.rate:               1153.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          43349.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49929.807 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 41983.996 ops/s
[info]                  ·gc.alloc.rate:                   1138.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              42676.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24958.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   41829.479 ±(99.9%) 527.486 ops/s [Average]
[info]   (min, avg, max) = (41612.331, 41829.479, 41983.996), stdev = 136.986
[info]   CI (99.9%): [41301.993, 42356.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1145.855 ±(99.9%) 31.852 MB/sec [Average]
[info]   (min, avg, max) = (1136.252, 1145.855, 1153.843), stdev = 8.272
[info]   CI (99.9%): [1114.003, 1177.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43108.721 ±(99.9%) 1373.842 B/op [Average]
[info]   (min, avg, max) = (42676.360, 43108.721, 43378.171), stdev = 356.782
[info]   CI (99.9%): [41734.880, 44482.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1062.506 ±(99.9%) 1399.740 MB/sec [Average]
[info]   (min, avg, max) = (662.822, 1062.506, 1328.996), stdev = 363.508
[info]   CI (99.9%): [≈ 0, 2462.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39988.893 ±(99.9%) 52859.612 B/op [Average]
[info]   (min, avg, max) = (24945.203, 39988.893, 50210.518), stdev = 13727.473
[info]   CI (99.9%): [≈ 0, 92848.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.388 ±(99.9%) 8.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.388, 5.159), stdev = 2.233
[info]   CI (99.9%): [≈ 0, 9.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52.153 ±(99.9%) 323.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.153, 193.983), stdev = 83.942
[info]   CI (99.9%): [≈ 0, 375.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17822.605 ops/s
[info] # Warmup Iteration   2: 47299.768 ops/s
[info] # Warmup Iteration   3: 50015.676 ops/s
[info] # Warmup Iteration   4: 47798.714 ops/s
[info] # Warmup Iteration   5: 49281.396 ops/s
[info] Iteration   1: 49103.277 ops/s
[info]                  ·gc.alloc.rate:                   845.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              27083.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1270.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40728.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 52245.025 ops/s
[info]                  ·gc.alloc.rate:               722.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          21750.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:      636.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19153.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 51464.181 ops/s
[info]                  ·gc.alloc.rate:                   705.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              21580.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          637.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19495.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 52139.101 ops/s
[info]                  ·gc.alloc.rate:                   716.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              21636.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          637.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19243.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 52266.857 ops/s
[info]                  ·gc.alloc.rate:               724.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          21806.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      640.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19276.548 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   51443.688 ±(99.9%) 5195.264 ops/s [Average]
[info]   (min, avg, max) = (49103.277, 51443.688, 52266.857), stdev = 1349.193
[info]   CI (99.9%): [46248.424, 56638.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   742.862 ±(99.9%) 221.627 MB/sec [Average]
[info]   (min, avg, max) = (705.809, 742.862, 845.011), stdev = 57.556
[info]   CI (99.9%): [521.235, 964.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   22771.724 ±(99.9%) 9288.551 B/op [Average]
[info]   (min, avg, max) = (21580.827, 22771.724, 27083.841), stdev = 2412.207
[info]   CI (99.9%): [13483.173, 32060.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   764.451 ±(99.9%) 1089.834 MB/sec [Average]
[info]   (min, avg, max) = (636.003, 764.451, 1270.736), stdev = 283.027
[info]   CI (99.9%): [≈ 0, 1854.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23579.571 ±(99.9%) 36918.542 B/op [Average]
[info]   (min, avg, max) = (19153.493, 23579.571, 40728.965), stdev = 9587.628
[info]   CI (99.9%): [≈ 0, 60498.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.064 ±(99.9%) 0.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.299), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.045 ±(99.9%) 16.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.045, 9.591), stdev = 4.222
[info]   CI (99.9%): [≈ 0, 18.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3556.593 ops/s
[info] # Warmup Iteration   2: 19429.440 ops/s
[info] # Warmup Iteration   3: 38800.985 ops/s
[info] # Warmup Iteration   4: 39929.836 ops/s
[info] # Warmup Iteration   5: 37904.547 ops/s
[info] Iteration   1: 39130.066 ops/s
[info]                  ·gc.alloc.rate:                   1637.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              65857.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53464.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 39291.533 ops/s
[info]                  ·gc.alloc.rate:                   1675.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              67098.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80034.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 39263.459 ops/s
[info]                  ·gc.alloc.rate:                   1645.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              65964.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53536.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 39247.712 ops/s
[info]                  ·gc.alloc.rate:                   1640.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              65777.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53584.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38420.322 ops/s
[info]                  ·gc.alloc.rate:                   1625.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              66603.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82230.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.705 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   39070.618 ±(99.9%) 1419.750 ops/s [Average]
[info]   (min, avg, max) = (38420.322, 39070.618, 39291.533), stdev = 368.705
[info]   CI (99.9%): [37650.868, 40490.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1644.975 ±(99.9%) 70.805 MB/sec [Average]
[info]   (min, avg, max) = (1625.903, 1644.975, 1675.137), stdev = 18.388
[info]   CI (99.9%): [1574.170, 1715.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66260.495 ±(99.9%) 2197.995 B/op [Average]
[info]   (min, avg, max) = (65777.581, 66260.495, 67098.916), stdev = 570.812
[info]   CI (99.9%): [64062.500, 68458.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.395 ±(99.9%) 1410.882 MB/sec [Average]
[info]   (min, avg, max) = (1329.171, 1601.395, 2007.397), stdev = 366.402
[info]   CI (99.9%): [190.513, 3012.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64570.172 ±(99.9%) 58296.785 B/op [Average]
[info]   (min, avg, max) = (53464.328, 64570.172, 82230.821), stdev = 15139.490
[info]   CI (99.9%): [6273.388, 122866.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.291 ±(99.9%) 2.190 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.291, 1.308), stdev = 0.569
[info]   CI (99.9%): [≈ 0, 2.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.659 ±(99.9%) 87.737 B/op [Average]
[info]   (min, avg, max) = (0.834, 11.659, 52.413), stdev = 22.785
[info]   CI (99.9%): [≈ 0, 99.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5924.313 ops/s
[info] # Warmup Iteration   2: 23284.244 ops/s
[info] # Warmup Iteration   3: 34504.174 ops/s
[info] # Warmup Iteration   4: 35404.576 ops/s
[info] # Warmup Iteration   5: 32078.327 ops/s
[info] Iteration   1: 34847.292 ops/s
[info]                  ·gc.alloc.rate:                   2287.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              103307.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89111.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 35681.234 ops/s
[info]                  ·gc.alloc.rate:                   2347.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              103537.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2630.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116035.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.692 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 35769.183 ops/s
[info]                  ·gc.alloc.rate:                   2340.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              102924.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87071.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.748 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 36288.496 ops/s
[info]                  ·gc.alloc.rate:                   2390.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              103685.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2648.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114845.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.126 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 36175.386 ops/s
[info]                  ·gc.alloc.rate:                   2365.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              102909.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86784.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   35752.318 ±(99.9%) 2187.493 ops/s [Average]
[info]   (min, avg, max) = (34847.292, 35752.318, 36288.496), stdev = 568.085
[info]   CI (99.9%): [33564.825, 37939.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2346.309 ±(99.9%) 147.175 MB/sec [Average]
[info]   (min, avg, max) = (2287.464, 2346.309, 2390.735), stdev = 38.221
[info]   CI (99.9%): [2199.134, 2493.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   103272.920 ±(99.9%) 1353.910 B/op [Average]
[info]   (min, avg, max) = (102909.720, 103272.920, 103685.417), stdev = 351.606
[info]   CI (99.9%): [101919.010, 104626.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2245.356 ±(99.9%) 1385.990 MB/sec [Average]
[info]   (min, avg, max) = (1973.132, 2245.356, 2648.061), stdev = 359.937
[info]   CI (99.9%): [859.365, 3631.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   98769.544 ±(99.9%) 58724.097 B/op [Average]
[info]   (min, avg, max) = (86784.800, 98769.544, 116035.045), stdev = 15250.461
[info]   CI (99.9%): [40045.447, 157493.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.490 ±(99.9%) 2.954 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.490, 1.845), stdev = 0.767
[info]   CI (99.9%): [≈ 0, 3.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.956 ±(99.9%) 133.670 B/op [Average]
[info]   (min, avg, max) = (0.906, 21.956, 83.308), stdev = 34.714
[info]   CI (99.9%): [≈ 0, 155.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4876.243 ops/s
[info] # Warmup Iteration   2: 23140.304 ops/s
[info] # Warmup Iteration   3: 34169.243 ops/s
[info] # Warmup Iteration   4: 33048.647 ops/s
[info] # Warmup Iteration   5: 30657.242 ops/s
[info] Iteration   1: 33201.968 ops/s
[info]                  ·gc.alloc.rate:                   2027.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              96105.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94222.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 34115.562 ops/s
[info]                  ·gc.alloc.rate:                   1854.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              85571.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60415.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 33923.952 ops/s
[info]                  ·gc.alloc.rate:                   1875.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              86978.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91337.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 34048.667 ops/s
[info]                  ·gc.alloc.rate:                   1862.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              86082.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91250.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 34078.819 ops/s
[info]                  ·gc.alloc.rate:                   1854.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              85647.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91411.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   33873.793 ±(99.9%) 1472.505 ops/s [Average]
[info]   (min, avg, max) = (33201.968, 33873.793, 34115.562), stdev = 382.405
[info]   CI (99.9%): [32401.289, 35346.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1894.970 ±(99.9%) 287.214 MB/sec [Average]
[info]   (min, avg, max) = (1854.731, 1894.970, 2027.562), stdev = 74.588
[info]   CI (99.9%): [1607.756, 2182.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   88076.878 ±(99.9%) 17415.257 B/op [Average]
[info]   (min, avg, max) = (85571.565, 88076.878, 96105.168), stdev = 4522.687
[info]   CI (99.9%): [70661.621, 105492.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1844.088 ±(99.9%) 1150.729 MB/sec [Average]
[info]   (min, avg, max) = (1309.649, 1844.088, 1987.849), stdev = 298.841
[info]   CI (99.9%): [693.360, 2994.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   85727.497 ±(99.9%) 54698.882 B/op [Average]
[info]   (min, avg, max) = (60415.580, 85727.497, 94222.801), stdev = 14205.126
[info]   CI (99.9%): [31028.615, 140426.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.690 ±(99.9%) 2.207 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.690, 1.306), stdev = 0.573
[info]   CI (99.9%): [≈ 0, 2.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   32.068 ±(99.9%) 102.206 B/op [Average]
[info]   (min, avg, max) = (3.849, 32.068, 60.226), stdev = 26.542
[info]   CI (99.9%): [≈ 0, 134.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 13.600, 20.000), stdev = 3.847
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11365.480 ops/s
[info] # Warmup Iteration   2: 27479.094 ops/s
[info] # Warmup Iteration   3: 37214.477 ops/s
[info] # Warmup Iteration   4: 38012.621 ops/s
[info] # Warmup Iteration   5: 38212.400 ops/s
[info] Iteration   1: 40760.058 ops/s
[info]                  ·gc.alloc.rate:                   2112.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              81549.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75894.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.818 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 40759.535 ops/s
[info]                  ·gc.alloc.rate:                   2107.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              81360.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76022.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 41148.467 ops/s
[info]                  ·gc.alloc.rate:               2133.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          81600.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1973.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75482.490 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 40953.118 ops/s
[info]                  ·gc.alloc.rate:                   2099.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              80670.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76017.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 39269.399 ops/s
[info]                  ·gc.alloc.rate:                   2026.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              81216.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79534.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   40578.115 ±(99.9%) 2884.569 ops/s [Average]
[info]   (min, avg, max) = (39269.399, 40578.115, 41148.467), stdev = 749.113
[info]   CI (99.9%): [37693.546, 43462.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2095.836 ±(99.9%) 157.192 MB/sec [Average]
[info]   (min, avg, max) = (2026.310, 2095.836, 2133.482), stdev = 40.822
[info]   CI (99.9%): [1938.645, 2253.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81279.345 ±(99.9%) 1437.451 B/op [Average]
[info]   (min, avg, max) = (80670.302, 81279.345, 81600.251), stdev = 373.301
[info]   CI (99.9%): [79841.894, 82716.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1974.283 ±(99.9%) 28.762 MB/sec [Average]
[info]   (min, avg, max) = (1965.611, 1974.283, 1984.348), stdev = 7.469
[info]   CI (99.9%): [1945.521, 2003.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   76590.185 ±(99.9%) 6394.045 B/op [Average]
[info]   (min, avg, max) = (75482.490, 76590.185, 79534.256), stdev = 1660.513
[info]   CI (99.9%): [70196.140, 82984.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.018 ±(99.9%) 4.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.018, 3.092), stdev = 1.244
[info]   CI (99.9%): [≈ 0, 5.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.208 ±(99.9%) 192.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.208, 123.911), stdev = 49.943
[info]   CI (99.9%): [≈ 0, 232.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 11.000), stdev = 1.483
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11638.810 ops/s
[info] # Warmup Iteration   2: 29039.050 ops/s
[info] # Warmup Iteration   3: 38366.540 ops/s
[info] # Warmup Iteration   4: 39117.181 ops/s
[info] # Warmup Iteration   5: 38602.779 ops/s
[info] Iteration   1: 40928.242 ops/s
[info]                  ·gc.alloc.rate:                   2031.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              78113.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75694.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 39726.119 ops/s
[info]                  ·gc.alloc.rate:                   1971.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              78108.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52122.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39776.802 ops/s
[info]                  ·gc.alloc.rate:                   1976.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              78149.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78398.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41160.648 ops/s
[info]                  ·gc.alloc.rate:                   2045.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              78187.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76069.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 41284.740 ops/s
[info]                  ·gc.alloc.rate:                   2051.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              78225.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76173.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   40575.310 ±(99.9%) 2938.380 ops/s [Average]
[info]   (min, avg, max) = (39726.119, 40575.310, 41284.740), stdev = 763.088
[info]   CI (99.9%): [37636.930, 43513.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2015.289 ±(99.9%) 148.761 MB/sec [Average]
[info]   (min, avg, max) = (1971.473, 2015.289, 2051.912), stdev = 38.633
[info]   CI (99.9%): [1866.528, 2164.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78156.960 ±(99.9%) 192.428 B/op [Average]
[info]   (min, avg, max) = (78108.032, 78156.960, 78225.674), stdev = 49.973
[info]   CI (99.9%): [77964.532, 78349.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1850.938 ±(99.9%) 1153.125 MB/sec [Average]
[info]   (min, avg, max) = (1315.594, 1850.938, 1998.082), stdev = 299.463
[info]   CI (99.9%): [697.813, 3004.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   71691.681 ±(99.9%) 42321.999 B/op [Average]
[info]   (min, avg, max) = (52122.662, 71691.681, 78398.082), stdev = 10990.889
[info]   CI (99.9%): [29369.683, 114013.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.167), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4.052 ±(99.9%) 9.397 B/op [Average]
[info]   (min, avg, max) = (1.592, 4.052, 6.598), stdev = 2.440
[info]   CI (99.9%): [≈ 0, 13.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1069.337 ops/s
[info] # Warmup Iteration   2: 5977.826 ops/s
[info] # Warmup Iteration   3: 9019.781 ops/s
[info] # Warmup Iteration   4: 9507.969 ops/s
[info] # Warmup Iteration   5: 9380.161 ops/s
[info] Iteration   1: 9561.627 ops/s
[info]                  ·gc.alloc.rate:                   1305.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              214725.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218782.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9463.527 ops/s
[info]                  ·gc.alloc.rate:               1279.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          212811.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110563.006 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 9059.630 ops/s
[info]                  ·gc.alloc.rate:                   1225.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              212800.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231216.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 9493.041 ops/s
[info]                  ·gc.alloc.rate:                   1294.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              214575.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220869.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 733.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9290.676 ops/s
[info]                  ·gc.alloc.rate:                   1260.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              213448.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225017.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9373.700 ±(99.9%) 777.698 ops/s [Average]
[info]   (min, avg, max) = (9059.630, 9373.700, 9561.627), stdev = 201.966
[info]   CI (99.9%): [8596.002, 10151.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1272.911 ±(99.9%) 121.471 MB/sec [Average]
[info]   (min, avg, max) = (1225.152, 1272.911, 1305.078), stdev = 31.546
[info]   CI (99.9%): [1151.440, 1394.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   213672.383 ±(99.9%) 3590.401 B/op [Average]
[info]   (min, avg, max) = (212800.024, 213672.383, 214725.472), stdev = 932.416
[info]   CI (99.9%): [210081.982, 217262.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1197.318 ±(99.9%) 1146.047 MB/sec [Average]
[info]   (min, avg, max) = (664.916, 1197.318, 1332.228), stdev = 297.625
[info]   CI (99.9%): [51.271, 2343.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   201289.671 ±(99.9%) 196149.589 B/op [Average]
[info]   (min, avg, max) = (110563.006, 201289.671, 231216.736), stdev = 50939.425
[info]   CI (99.9%): [5140.082, 397439.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.010 ±(99.9%) 7.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.010, 4.426), stdev = 1.916
[info]   CI (99.9%): [≈ 0, 8.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   168.076 ±(99.9%) 1222.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 168.076, 733.787), stdev = 317.413
[info]   CI (99.9%): [≈ 0, 1390.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 11.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2380.671 ops/s
[info] # Warmup Iteration   2: 15545.807 ops/s
[info] # Warmup Iteration   3: 18251.658 ops/s
[info] # Warmup Iteration   4: 21820.488 ops/s
[info] # Warmup Iteration   5: 22266.325 ops/s
[info] Iteration   1: 22779.925 ops/s
[info]                  ·gc.alloc.rate:                   1805.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              124686.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1894.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130847.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   2: 22226.419 ops/s
[info]                  ·gc.alloc.rate:                   1765.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              124985.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1267.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89767.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 22864.857 ops/s
[info]                  ·gc.alloc.rate:                   1700.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              117017.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1908.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131307.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         30.000 ms
[info] Iteration   4: 22587.330 ops/s
[info]                  ·gc.alloc.rate:                   1857.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              129386.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1908.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132957.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 719.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 21668.821 ops/s
[info]                  ·gc.alloc.rate:                   1958.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              142241.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1896.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137718.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   22425.470 ±(99.9%) 1883.510 ops/s [Average]
[info]   (min, avg, max) = (21668.821, 22425.470, 22864.857), stdev = 489.141
[info]   CI (99.9%): [20541.961, 24308.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1817.270 ±(99.9%) 375.386 MB/sec [Average]
[info]   (min, avg, max) = (1700.423, 1817.270, 1958.317), stdev = 97.487
[info]   CI (99.9%): [1441.884, 2192.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   127663.548 ±(99.9%) 35754.543 B/op [Average]
[info]   (min, avg, max) = (117017.072, 127663.548, 142241.701), stdev = 9285.341
[info]   CI (99.9%): [91909.006, 163418.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1774.959 ±(99.9%) 1092.017 MB/sec [Average]
[info]   (min, avg, max) = (1267.790, 1774.959, 1908.604), stdev = 283.593
[info]   CI (99.9%): [682.942, 2866.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   124519.627 ±(99.9%) 75536.347 B/op [Average]
[info]   (min, avg, max) = (89767.427, 124519.627, 137718.432), stdev = 19616.550
[info]   CI (99.9%): [48983.279, 200055.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.429 ±(99.9%) 16.512 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 3.429, 10.321), stdev = 4.288
[info]   CI (99.9%): [≈ 0, 19.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   238.838 ±(99.9%) 1146.758 B/op [Average]
[info]   (min, avg, max) = (1.436, 238.838, 719.016), stdev = 297.809
[info]   CI (99.9%): [≈ 0, 1385.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   101.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 20.200, 32.000), stdev = 11.054
[info]   CI (99.9%): [101.000, 101.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14498.048 ops/s
[info] # Warmup Iteration   2: 39665.721 ops/s
[info] # Warmup Iteration   3: 53307.811 ops/s
[info] # Warmup Iteration   4: 48233.313 ops/s
[info] # Warmup Iteration   5: 50057.624 ops/s
[info] Iteration   1: 45656.480 ops/s
[info]                  ·gc.alloc.rate:                   1357.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              46800.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45478.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 46207.664 ops/s
[info]                  ·gc.alloc.rate:               1300.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          44291.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44776.907 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 48476.783 ops/s
[info]                  ·gc.alloc.rate:                   1360.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              44156.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42777.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 48620.838 ops/s
[info]                  ·gc.alloc.rate:                   1374.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              44480.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42792.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 48939.898 ops/s
[info]                  ·gc.alloc.rate:                   1380.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              44394.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42640.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   47580.332 ±(99.9%) 5877.790 ops/s [Average]
[info]   (min, avg, max) = (45656.480, 47580.332, 48939.898), stdev = 1526.443
[info]   CI (99.9%): [41702.542, 53458.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1354.638 ±(99.9%) 122.319 MB/sec [Average]
[info]   (min, avg, max) = (1300.450, 1354.638, 1380.497), stdev = 31.766
[info]   CI (99.9%): [1232.319, 1476.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44824.840 ±(99.9%) 4277.999 B/op [Average]
[info]   (min, avg, max) = (44156.730, 44824.840, 46800.463), stdev = 1110.983
[info]   CI (99.9%): [40546.842, 49102.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1319.984 ±(99.9%) 16.637 MB/sec [Average]
[info]   (min, avg, max) = (1314.689, 1319.984, 1325.965), stdev = 4.321
[info]   CI (99.9%): [1303.347, 1336.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43693.371 ±(99.9%) 5137.454 B/op [Average]
[info]   (min, avg, max) = (42640.977, 43693.371, 45478.938), stdev = 1334.181
[info]   CI (99.9%): [38555.917, 48830.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.002 ±(99.9%) 6.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.002, 4.178), stdev = 1.802
[info]   CI (99.9%): [≈ 0, 7.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34.197 ±(99.9%) 239.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.197, 144.006), stdev = 62.189
[info]   CI (99.9%): [≈ 0, 273.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28595.050 ops/s
[info] # Warmup Iteration   2: 51663.736 ops/s
[info] # Warmup Iteration   3: 61080.894 ops/s
[info] # Warmup Iteration   4: 63995.998 ops/s
[info] # Warmup Iteration   5: 65327.665 ops/s
[info] Iteration   1: 65321.029 ops/s
[info]                  ·gc.alloc.rate:                   751.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              18099.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1290.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31089.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 68424.489 ops/s
[info]                  ·gc.alloc.rate:               780.332 MB/sec
[info]                  ·gc.alloc.rate.norm:          17945.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14885.535 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 68782.138 ops/s
[info]                  ·gc.alloc.rate:               782.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          17895.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14808.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 68767.072 ops/s
[info]                  ·gc.alloc.rate:               780.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          17851.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      648.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14850.062 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 68321.138 ops/s
[info]                  ·gc.alloc.rate:                   784.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              18063.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14946.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   67923.173 ±(99.9%) 5656.265 ops/s [Average]
[info]   (min, avg, max) = (65321.029, 67923.173, 68782.138), stdev = 1468.914
[info]   CI (99.9%): [62266.908, 73579.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   775.633 ±(99.9%) 52.829 MB/sec [Average]
[info]   (min, avg, max) = (751.274, 775.633, 784.179), stdev = 13.720
[info]   CI (99.9%): [722.804, 828.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17971.129 ±(99.9%) 411.666 B/op [Average]
[info]   (min, avg, max) = (17851.334, 17971.129, 18099.470), stdev = 106.908
[info]   CI (99.9%): [17559.463, 18382.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   776.571 ±(99.9%) 1106.178 MB/sec [Average]
[info]   (min, avg, max) = (647.286, 776.571, 1290.455), stdev = 287.271
[info]   CI (99.9%): [≈ 0, 1882.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18115.937 ±(99.9%) 27926.711 B/op [Average]
[info]   (min, avg, max) = (14808.501, 18115.937, 31089.249), stdev = 7252.478
[info]   CI (99.9%): [≈ 0, 46042.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.052), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.443 ±(99.9%) 2.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.443, 1.254), stdev = 0.615
[info]   CI (99.9%): [≈ 0, 2.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1798.155 ops/s
[info] # Warmup Iteration   2: 21233.419 ops/s
[info] # Warmup Iteration   3: 42794.354 ops/s
[info] # Warmup Iteration   4: 42224.491 ops/s
[info] # Warmup Iteration   5: 42124.287 ops/s
[info] Iteration   1: 41686.380 ops/s
[info]                  ·gc.alloc.rate:                   2408.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              90924.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100798.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.428 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 43000.944 ops/s
[info]                  ·gc.alloc.rate:                   2467.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              90262.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97740.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.857 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 43059.516 ops/s
[info]                  ·gc.alloc.rate:                   2444.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              89335.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73307.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 40993.751 ops/s
[info]                  ·gc.alloc.rate:                   2368.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              90906.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102939.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 41573.671 ops/s
[info]                  ·gc.alloc.rate:                   2371.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              89786.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76348.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   42062.852 ±(99.9%) 3548.741 ops/s [Average]
[info]   (min, avg, max) = (40993.751, 42062.852, 43059.516), stdev = 921.597
[info]   CI (99.9%): [38514.111, 45611.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2412.115 ±(99.9%) 168.747 MB/sec [Average]
[info]   (min, avg, max) = (2368.336, 2412.115, 2467.387), stdev = 43.823
[info]   CI (99.9%): [2243.369, 2580.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90243.134 ±(99.9%) 2679.403 B/op [Average]
[info]   (min, avg, max) = (89335.840, 90243.134, 90924.612), stdev = 695.832
[info]   CI (99.9%): [87563.731, 92922.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2409.291 ±(99.9%) 1398.851 MB/sec [Average]
[info]   (min, avg, max) = (2006.065, 2409.291, 2681.830), stdev = 363.277
[info]   CI (99.9%): [1010.439, 3808.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   90226.869 ±(99.9%) 54752.462 B/op [Average]
[info]   (min, avg, max) = (73307.073, 90226.869, 102939.473), stdev = 14219.041
[info]   CI (99.9%): [35474.407, 144979.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.543 ±(99.9%) 3.881 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.543, 2.342), stdev = 1.008
[info]   CI (99.9%): [≈ 0, 4.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.478 ±(99.9%) 146.574 B/op [Average]
[info]   (min, avg, max) = (0.788, 20.478, 88.428), stdev = 38.065
[info]   CI (99.9%): [≈ 0, 167.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9453.891 ops/s
[info] # Warmup Iteration   2: 32168.170 ops/s
[info] # Warmup Iteration   3: 37694.348 ops/s
[info] # Warmup Iteration   4: 36345.393 ops/s
[info] # Warmup Iteration   5: 41220.993 ops/s
[info] Iteration   1: 44243.298 ops/s
[info]                  ·gc.alloc.rate:                   1931.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              68717.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70736.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 44194.772 ops/s
[info]                  ·gc.alloc.rate:                   1921.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              68422.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70990.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 43794.942 ops/s
[info]                  ·gc.alloc.rate:                   1911.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              68660.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71734.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42737.647 ops/s
[info]                  ·gc.alloc.rate:                   1834.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              67546.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49061.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43034.499 ops/s
[info]                  ·gc.alloc.rate:                   1873.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              68482.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73196.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   43601.032 ±(99.9%) 2632.153 ops/s [Average]
[info]   (min, avg, max) = (42737.647, 43601.032, 44243.298), stdev = 683.562
[info]   CI (99.9%): [40968.879, 46233.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1894.517 ±(99.9%) 154.778 MB/sec [Average]
[info]   (min, avg, max) = (1834.517, 1894.517, 1931.992), stdev = 40.195
[info]   CI (99.9%): [1739.739, 2049.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68365.924 ±(99.9%) 1825.667 B/op [Average]
[info]   (min, avg, max) = (67546.223, 68365.924, 68717.647), stdev = 474.120
[info]   CI (99.9%): [66540.258, 70191.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1862.791 ±(99.9%) 1141.660 MB/sec [Average]
[info]   (min, avg, max) = (1332.494, 1862.791, 2002.219), stdev = 296.485
[info]   CI (99.9%): [721.131, 3004.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67144.002 ±(99.9%) 39097.287 B/op [Average]
[info]   (min, avg, max) = (49061.925, 67144.002, 73196.408), stdev = 10153.441
[info]   CI (99.9%): [28046.715, 106241.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.476 ±(99.9%) 3.426 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.476, 2.066), stdev = 0.890
[info]   CI (99.9%): [≈ 0, 3.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.983 ±(99.9%) 121.921 B/op [Average]
[info]   (min, avg, max) = (1.481, 16.983, 73.561), stdev = 31.662
[info]   CI (99.9%): [≈ 0, 138.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14986.760 ops/s
[info] # Warmup Iteration   2: 44253.489 ops/s
[info] # Warmup Iteration   3: 51083.929 ops/s
[info] # Warmup Iteration   4: 53338.767 ops/s
[info] # Warmup Iteration   5: 55941.853 ops/s
[info] Iteration   1: 57444.702 ops/s
[info]                  ·gc.alloc.rate:                   1793.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              49132.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36548.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 57259.843 ops/s
[info]                  ·gc.alloc.rate:                   1799.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              49437.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55051.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 57199.122 ops/s
[info]                  ·gc.alloc.rate:                   1788.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              49205.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55228.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 57351.840 ops/s
[info]                  ·gc.alloc.rate:                   1803.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              49497.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36772.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57322.218 ops/s
[info]                  ·gc.alloc.rate:                   1802.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              49490.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55283.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   57315.545 ±(99.9%) 358.650 ops/s [Average]
[info]   (min, avg, max) = (57199.122, 57315.545, 57444.702), stdev = 93.140
[info]   CI (99.9%): [56956.895, 57674.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1797.597 ±(99.9%) 24.242 MB/sec [Average]
[info]   (min, avg, max) = (1788.684, 1797.597, 1803.780), stdev = 6.295
[info]   CI (99.9%): [1773.356, 1821.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49352.391 ±(99.9%) 659.149 B/op [Average]
[info]   (min, avg, max) = (49132.375, 49352.391, 49497.056), stdev = 171.179
[info]   CI (99.9%): [48693.243, 50011.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1739.826 ±(99.9%) 1415.289 MB/sec [Average]
[info]   (min, avg, max) = (1334.395, 1739.826, 2013.561), stdev = 367.546
[info]   CI (99.9%): [324.538, 3155.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   47776.995 ±(99.9%) 39079.674 B/op [Average]
[info]   (min, avg, max) = (36548.309, 47776.995, 55283.997), stdev = 10148.867
[info]   CI (99.9%): [8697.320, 86856.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.615 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.158, 0.437), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.347 ±(99.9%) 16.902 B/op [Average]
[info]   (min, avg, max) = (1.711, 4.347, 12.017), stdev = 4.389
[info]   CI (99.9%): [≈ 0, 21.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:42:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16924.256 ops/s
[info] # Warmup Iteration   2: 38538.151 ops/s
[info] # Warmup Iteration   3: 55814.813 ops/s
[info] # Warmup Iteration   4: 54393.969 ops/s
[info] # Warmup Iteration   5: 56103.592 ops/s
[info] Iteration   1: 56199.790 ops/s
[info]                  ·gc.alloc.rate:                   1679.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              47034.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55907.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 56119.017 ops/s
[info]                  ·gc.alloc.rate:                   1673.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              46929.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37381.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 56495.695 ops/s
[info]                  ·gc.alloc.rate:                   1674.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              46638.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55598.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 54060.270 ops/s
[info]                  ·gc.alloc.rate:               1616.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          47036.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38709.014 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 54506.237 ops/s
[info]                  ·gc.alloc.rate:                   1594.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              46047.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38400.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   55476.202 ±(99.9%) 4271.375 ops/s [Average]
[info]   (min, avg, max) = (54060.270, 55476.202, 56495.695), stdev = 1109.262
[info]   CI (99.9%): [51204.827, 59747.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1647.776 ±(99.9%) 151.070 MB/sec [Average]
[info]   (min, avg, max) = (1594.957, 1647.776, 1679.504), stdev = 39.232
[info]   CI (99.9%): [1496.707, 1798.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   46737.238 ±(99.9%) 1610.512 B/op [Average]
[info]   (min, avg, max) = (46047.533, 46737.238, 47036.003), stdev = 418.245
[info]   CI (99.9%): [45126.726, 48347.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1597.156 ±(99.9%) 1402.232 MB/sec [Average]
[info]   (min, avg, max) = (1330.087, 1597.156, 1996.373), stdev = 364.155
[info]   CI (99.9%): [194.924, 2999.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   45199.524 ±(99.9%) 37148.075 B/op [Average]
[info]   (min, avg, max) = (37381.756, 45199.524, 55907.886), stdev = 9647.237
[info]   CI (99.9%): [8051.450, 82347.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.856 ±(99.9%) 5.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 3.220), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 6.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   23.992 ±(99.9%) 148.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.992, 90.270), stdev = 38.510
[info]   CI (99.9%): [≈ 0, 172.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 14.000), stdev = 4.712
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31965.743 ops/s
[info] # Warmup Iteration   2: 300727.092 ops/s
[info] # Warmup Iteration   3: 375383.159 ops/s
[info] # Warmup Iteration   4: 380457.806 ops/s
[info] # Warmup Iteration   5: 393707.206 ops/s
[info] Iteration   1: 385106.718 ops/s
[info]                  ·gc.alloc.rate:                   2094.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              8557.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8188.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 397260.030 ops/s
[info]                  ·gc.alloc.rate:                   2142.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              8489.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7906.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 395939.516 ops/s
[info]                  ·gc.alloc.rate:                   2145.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              8528.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10565.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 395353.119 ops/s
[info]                  ·gc.alloc.rate:               2141.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          8523.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7944.782 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 401009.500 ops/s
[info]                  ·gc.alloc.rate:                   2184.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              8571.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7852.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   394933.777 ±(99.9%) 22787.576 ops/s [Average]
[info]   (min, avg, max) = (385106.718, 394933.777, 401009.500), stdev = 5917.861
[info]   CI (99.9%): [372146.201, 417721.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2141.676 ±(99.9%) 123.401 MB/sec [Average]
[info]   (min, avg, max) = (2094.173, 2141.676, 2184.487), stdev = 32.047
[info]   CI (99.9%): [2018.274, 2265.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8534.065 ±(99.9%) 123.448 B/op [Average]
[info]   (min, avg, max) = (8489.376, 8534.065, 8571.861), stdev = 32.059
[info]   CI (99.9%): [8410.617, 8657.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2131.014 ±(99.9%) 1135.294 MB/sec [Average]
[info]   (min, avg, max) = (1995.711, 2131.014, 2658.387), stdev = 294.832
[info]   CI (99.9%): [995.720, 3266.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8491.709 ±(99.9%) 4491.553 B/op [Average]
[info]   (min, avg, max) = (7852.450, 8491.709, 10565.544), stdev = 1166.442
[info]   CI (99.9%): [4000.156, 12983.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.969 ±(99.9%) 7.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.969, 4.448), stdev = 1.948
[info]   CI (99.9%): [≈ 0, 8.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.948 ±(99.9%) 30.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.948, 18.174), stdev = 7.964
[info]   CI (99.9%): [≈ 0, 34.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.585 ops/s
[info] # Warmup Iteration   2: 1661876.064 ops/s
[info] # Warmup Iteration   3: 1757124.553 ops/s
[info] # Warmup Iteration   4: 1907117.916 ops/s
[info] # Warmup Iteration   5: 1901002.169 ops/s
[info] Iteration   1: 1879828.353 ops/s
[info]                  ·gc.alloc.rate:               608.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          509.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 554.672 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1883989.832 ops/s
[info]                  ·gc.alloc.rate:                   614.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              513.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1806133.714 ops/s
[info]                  ·gc.alloc.rate:      569.245 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1908212.827 ops/s
[info]                  ·gc.alloc.rate:                   614.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              506.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1796924.565 ops/s
[info]                  ·gc.alloc.rate:               591.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          517.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 580.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1855017.858 ±(99.9%) 193004.581 ops/s [Average]
[info]   (min, avg, max) = (1796924.565, 1855017.858, 1908212.827), stdev = 50122.677
[info]   CI (99.9%): [1662013.278, 2048022.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   599.541 ±(99.9%) 75.066 MB/sec [Average]
[info]   (min, avg, max) = (569.245, 599.541, 614.656), stdev = 19.494
[info]   CI (99.9%): [524.475, 674.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   508.632 ±(99.9%) 31.490 B/op [Average]
[info]   (min, avg, max) = (496.000, 508.632, 517.668), stdev = 8.178
[info]   CI (99.9%): [477.142, 540.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.281 ±(99.9%) 1141.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.281, 663.159), stdev = 296.436
[info]   CI (99.9%): [≈ 0, 1671.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   447.180 ±(99.9%) 963.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 447.180, 580.829), stdev = 250.317
[info]   CI (99.9%): [≈ 0, 1411.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128747.895 ops/s
[info] # Warmup Iteration   2: 734893.908 ops/s
[info] # Warmup Iteration   3: 826014.422 ops/s
[info] # Warmup Iteration   4: 847000.833 ops/s
[info] # Warmup Iteration   5: 839667.478 ops/s
[info] Iteration   1: 842996.604 ops/s
[info]                  ·gc.alloc.rate:      339.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.845 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 814050.251 ops/s
[info]                  ·gc.alloc.rate:                   350.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              678.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1277.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.779 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 826442.152 ops/s
[info]                  ·gc.alloc.rate:      331.873 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 837786.051 ops/s
[info]                  ·gc.alloc.rate:                   357.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              671.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1238.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 827896.804 ops/s
[info]                  ·gc.alloc.rate:      332.445 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   829834.372 ±(99.9%) 43089.091 ops/s [Average]
[info]   (min, avg, max) = (814050.251, 829834.372, 842996.604), stdev = 11190.100
[info]   CI (99.9%): [786745.281, 872923.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   342.317 ±(99.9%) 43.808 MB/sec [Average]
[info]   (min, avg, max) = (331.873, 342.317, 357.406), stdev = 11.377
[info]   CI (99.9%): [298.510, 386.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   649.288 ±(99.9%) 90.148 B/op [Average]
[info]   (min, avg, max) = (632.001, 649.288, 678.170), stdev = 23.411
[info]   CI (99.9%): [559.141, 739.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.020 ±(99.9%) 1392.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.020, 660.635), stdev = 361.524
[info]   CI (99.9%): [≈ 0, 1656.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   503.175 ±(99.9%) 2653.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 503.175, 1277.001), stdev = 689.132
[info]   CI (99.9%): [≈ 0, 3156.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.942 ±(99.9%) 7.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.942, 4.542), stdev = 2.014
[info]   CI (99.9%): [≈ 0, 8.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.818 ±(99.9%) 14.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.818, 8.779), stdev = 3.894
[info]   CI (99.9%): [≈ 0, 16.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 5.000), stdev = 2.191
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:41:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 944840.322 ops/s
[info] # Warmup Iteration   2: 1928122.115 ops/s
[info] # Warmup Iteration   3: 2018118.293 ops/s
[info] # Warmup Iteration   4: 2173701.886 ops/s
[info] # Warmup Iteration   5: 2133577.529 ops/s
[info] Iteration   1: 2167038.243 ops/s
[info]                  ·gc.alloc.rate:               432.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          314.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.561 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2141344.478 ops/s
[info]                  ·gc.alloc.rate:               437.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          321.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 489.870 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2148106.468 ops/s
[info]                  ·gc.alloc.rate:      415.008 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2137461.173 ops/s
[info]                  ·gc.alloc.rate:                   435.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     490.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2184016.941 ops/s
[info]                  ·gc.alloc.rate:      421.829 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   2155593.461 ±(99.9%) 75229.248 ops/s [Average]
[info]   (min, avg, max) = (2137461.173, 2155593.461, 2184016.941), stdev = 19536.797
[info]   CI (99.9%): [2080364.212, 2230822.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   428.496 ±(99.9%) 37.220 MB/sec [Average]
[info]   (min, avg, max) = (415.008, 428.496, 437.698), stdev = 9.666
[info]   CI (99.9%): [391.276, 465.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.886 ±(99.9%) 33.008 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.886, 321.695), stdev = 8.572
[info]   CI (99.9%): [279.878, 345.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   368.914 ±(99.9%) 1319.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.914, 666.517), stdev = 342.657
[info]   CI (99.9%): [≈ 0, 1688.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   270.430 ±(99.9%) 968.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 270.430, 490.720), stdev = 251.582
[info]   CI (99.9%): [≈ 0, 1239.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7990.109 ops/s
[info] # Warmup Iteration   2: 110527.200 ops/s
[info] # Warmup Iteration   3: 157102.333 ops/s
[info] # Warmup Iteration   4: 149807.036 ops/s
[info] # Warmup Iteration   5: 150043.571 ops/s
[info] Iteration   1: 150324.300 ops/s
[info]                  ·gc.alloc.rate:                   3941.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              41265.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4032.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42217.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.872 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 150679.247 ops/s
[info]                  ·gc.alloc.rate:                   3979.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              41561.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35231.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 154999.935 ops/s
[info]                  ·gc.alloc.rate:                   4118.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              41806.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4062.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41232.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 152887.089 ops/s
[info]                  ·gc.alloc.rate:                   4106.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              42275.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41879.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.942 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 177098.156 ops/s
[info]                  ·gc.alloc.rate:                   4603.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              40896.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4754.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42237.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   157197.745 ±(99.9%) 43444.647 ops/s [Average]
[info]   (min, avg, max) = (150324.300, 157197.745, 177098.156), stdev = 11282.437
[info]   CI (99.9%): [113753.098, 200642.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4149.953 ±(99.9%) 1020.663 MB/sec [Average]
[info]   (min, avg, max) = (3941.163, 4149.953, 4603.358), stdev = 265.063
[info]   CI (99.9%): [3129.290, 5170.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41561.142 ±(99.9%) 2018.506 B/op [Average]
[info]   (min, avg, max) = (40896.629, 41561.142, 42275.259), stdev = 524.200
[info]   CI (99.9%): [39542.637, 43579.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4058.093 ±(99.9%) 1880.815 MB/sec [Average]
[info]   (min, avg, max) = (3373.434, 4058.093, 4754.327), stdev = 488.442
[info]   CI (99.9%): [2177.279, 5938.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40559.647 ±(99.9%) 11575.399 B/op [Average]
[info]   (min, avg, max) = (35231.547, 40559.647, 42237.847), stdev = 3006.094
[info]   CI (99.9%): [28984.248, 52135.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.246 ±(99.9%) 1.761 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.246, 1.063), stdev = 0.457
[info]   CI (99.9%): [≈ 0, 2.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.528 ±(99.9%) 18.143 B/op [Average]
[info]   (min, avg, max) = (0.185, 2.528, 10.942), stdev = 4.712
[info]   CI (99.9%): [≈ 0, 20.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 10.000), stdev = 1.517
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121750.462 ops/s
[info] # Warmup Iteration   2: 396484.620 ops/s
[info] # Warmup Iteration   3: 445144.903 ops/s
[info] # Warmup Iteration   4: 444722.102 ops/s
[info] # Warmup Iteration   5: 448279.624 ops/s
[info] Iteration   1: 447930.828 ops/s
[info]                  ·gc.alloc.rate:                   1468.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              5156.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4690.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 447758.934 ops/s
[info]                  ·gc.alloc.rate:                   1471.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              5170.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4697.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 448789.274 ops/s
[info]                  ·gc.alloc.rate:                   1472.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              5162.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4688.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 451086.649 ops/s
[info]                  ·gc.alloc.rate:                   1466.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              5113.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4653.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 449636.119 ops/s
[info]                  ·gc.alloc.rate:                   1506.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              5273.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6988.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   449040.361 ±(99.9%) 5265.109 ops/s [Average]
[info]   (min, avg, max) = (447758.934, 449040.361, 451086.649), stdev = 1367.332
[info]   CI (99.9%): [443775.252, 454305.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1477.010 ±(99.9%) 65.243 MB/sec [Average]
[info]   (min, avg, max) = (1466.051, 1477.010, 1506.950), stdev = 16.943
[info]   CI (99.9%): [1411.766, 1542.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5175.195 ±(99.9%) 228.026 B/op [Average]
[info]   (min, avg, max) = (5113.034, 5175.195, 5273.362), stdev = 59.218
[info]   CI (99.9%): [4947.169, 5403.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.173 ±(99.9%) 1138.465 MB/sec [Average]
[info]   (min, avg, max) = (1334.224, 1468.173, 1997.053), stdev = 295.656
[info]   CI (99.9%): [329.708, 2606.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5143.666 ±(99.9%) 3971.496 B/op [Average]
[info]   (min, avg, max) = (4653.272, 5143.666, 6988.408), stdev = 1031.385
[info]   CI (99.9%): [1172.170, 9115.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.902 ±(99.9%) 7.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.902, 4.252), stdev = 1.874
[info]   CI (99.9%): [≈ 0, 8.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.162 ±(99.9%) 25.290 B/op [Average]
[info]   (min, avg, max) = (0.073, 3.162, 14.903), stdev = 6.568
[info]   CI (99.9%): [≈ 0, 28.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 9.000), stdev = 2.775
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.635 ops/s
[info] # Warmup Iteration   2: 2496577.198 ops/s
[info] # Warmup Iteration   3: 2620695.765 ops/s
[info] # Warmup Iteration   4: 2699676.277 ops/s
[info] # Warmup Iteration   5: 2708182.380 ops/s
[info] Iteration   1: 2636394.045 ops/s
[info]                  ·gc.alloc.rate:               1266.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          756.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 793.179 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 2535509.140 ops/s
[info]                  ·gc.alloc.rate:               1199.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 412.458 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2636990.719 ops/s
[info]                  ·gc.alloc.rate:                   1255.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     793.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2567228.893 ops/s
[info]                  ·gc.alloc.rate:                   1216.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     816.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2554619.701 ops/s
[info]                  ·gc.alloc.rate:                   1222.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     819.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   2586148.500 ±(99.9%) 182914.782 ops/s [Average]
[info]   (min, avg, max) = (2535509.140, 2586148.500, 2636990.719), stdev = 47502.388
[info]   CI (99.9%): [2403233.717, 2769063.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1232.259 ±(99.9%) 108.527 MB/sec [Average]
[info]   (min, avg, max) = (1199.027, 1232.259, 1266.926), stdev = 28.184
[info]   CI (99.9%): [1123.733, 1340.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   749.773 ±(99.9%) 19.427 B/op [Average]
[info]   (min, avg, max) = (744.136, 749.773, 756.320), stdev = 5.045
[info]   CI (99.9%): [730.347, 769.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1197.101 ±(99.9%) 1146.270 MB/sec [Average]
[info]   (min, avg, max) = (664.594, 1197.101, 1331.963), stdev = 297.683
[info]   CI (99.9%): [50.830, 2343.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   727.028 ±(99.9%) 678.746 B/op [Average]
[info]   (min, avg, max) = (412.458, 727.028, 819.164), stdev = 176.268
[info]   CI (99.9%): [48.282, 1405.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.091 ±(99.9%) 8.949 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.091, 5.246), stdev = 2.324
[info]   CI (99.9%): [≈ 0, 10.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.669 ±(99.9%) 5.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.215), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 6.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 8.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:40:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470147.841 ops/s
[info] # Warmup Iteration   2: 1440683.163 ops/s
[info] # Warmup Iteration   3: 1152042.587 ops/s
[info] # Warmup Iteration   4: 1161904.834 ops/s
[info] # Warmup Iteration   5: 1170543.073 ops/s
[info] Iteration   1: 1174038.702 ops/s
[info]                  ·gc.alloc.rate:                   557.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     889.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1171664.982 ops/s
[info]                  ·gc.alloc.rate:               555.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 892.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1177883.929 ops/s
[info]                  ·gc.alloc.rate:      544.870 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1179624.012 ops/s
[info]                  ·gc.alloc.rate:                   560.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1135451.202 ops/s
[info]                  ·gc.alloc.rate:               552.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          766.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.409 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1167732.565 ±(99.9%) 70525.003 ops/s [Average]
[info]   (min, avg, max) = (1135451.202, 1167732.565, 1179624.012), stdev = 18315.119
[info]   CI (99.9%): [1097207.563, 1238257.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   554.045 ±(99.9%) 22.520 MB/sec [Average]
[info]   (min, avg, max) = (544.870, 554.045, 560.389), stdev = 5.848
[info]   CI (99.9%): [531.525, 576.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   746.825 ±(99.9%) 51.881 B/op [Average]
[info]   (min, avg, max) = (728.000, 746.825, 766.059), stdev = 13.473
[info]   CI (99.9%): [694.944, 798.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.704 ±(99.9%) 1144.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.704, 665.455), stdev = 297.232
[info]   CI (99.9%): [≈ 0, 1676.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   718.308 ±(99.9%) 1547.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 718.308, 922.409), stdev = 401.802
[info]   CI (99.9%): [≈ 0, 2265.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1004005.609 ops/s
[info] # Warmup Iteration   2: 2737301.557 ops/s
[info] # Warmup Iteration   3: 3023188.327 ops/s
[info] # Warmup Iteration   4: 3036380.341 ops/s
[info] # Warmup Iteration   5: 3039566.518 ops/s
[info] Iteration   1: 2958646.644 ops/s
[info]                  ·gc.alloc.rate:                   1412.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3012636.482 ops/s
[info]                  ·gc.alloc.rate:                   1435.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3022834.098 ops/s
[info]                  ·gc.alloc.rate:                   1461.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 3038036.652 ops/s
[info]                  ·gc.alloc.rate:               1445.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 692.964 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3002946.981 ops/s
[info]                  ·gc.alloc.rate:               1442.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          755.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 700.354 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   3007020.172 ±(99.9%) 115523.076 ops/s [Average]
[info]   (min, avg, max) = (2958646.644, 3007020.172, 3038036.652), stdev = 30000.976
[info]   CI (99.9%): [2891497.095, 3122543.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1439.384 ±(99.9%) 68.469 MB/sec [Average]
[info]   (min, avg, max) = (1412.563, 1439.384, 1461.463), stdev = 17.781
[info]   CI (99.9%): [1370.915, 1507.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   753.212 ±(99.9%) 19.556 B/op [Average]
[info]   (min, avg, max) = (748.689, 753.212, 760.869), stdev = 5.079
[info]   CI (99.9%): [733.656, 772.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1472.924 ±(99.9%) 1158.774 MB/sec [Average]
[info]   (min, avg, max) = (1336.360, 1472.924, 2011.238), stdev = 300.930
[info]   CI (99.9%): [314.150, 2631.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   770.463 ±(99.9%) 596.052 B/op [Average]
[info]   (min, avg, max) = (692.964, 770.463, 1047.093), stdev = 154.793
[info]   CI (99.9%): [174.411, 1366.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.806 ±(99.9%) 6.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 3.976), stdev = 1.772
[info]   CI (99.9%): [≈ 0, 7.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.420 ±(99.9%) 3.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.420, 2.070), stdev = 0.923
[info]   CI (99.9%): [≈ 0, 3.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1138539.793 ops/s
[info] # Warmup Iteration   2: 3177179.396 ops/s
[info] # Warmup Iteration   3: 3230931.637 ops/s
[info] # Warmup Iteration   4: 3230335.569 ops/s
[info] # Warmup Iteration   5: 3229051.349 ops/s
[info] Iteration   1: 3221786.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3224173.762 ops/s
[info]                  ·gc.alloc.rate:      0.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3221659.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3176528.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3173820.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3203593.662 ±(99.9%) 100039.454 ops/s [Average]
[info]   (min, avg, max) = (3173820.521, 3203593.662, 3224173.762), stdev = 25979.929
[info]   CI (99.9%): [3103554.208, 3303633.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.007 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.004, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50039.253 ops/s
[info] # Warmup Iteration   2: 605177.741 ops/s
[info] # Warmup Iteration   3: 683859.035 ops/s
[info] # Warmup Iteration   4: 964927.832 ops/s
[info] # Warmup Iteration   5: 1015129.055 ops/s
[info] Iteration   1: 1021266.069 ops/s
[info]                  ·gc.alloc.rate:               1083.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          1669.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1020.449 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1016515.487 ops/s
[info]                  ·gc.alloc.rate:               1092.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          1690.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2050.395 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 1023069.222 ops/s
[info]                  ·gc.alloc.rate:                   1079.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              1660.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1019.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1007425.790 ops/s
[info]                  ·gc.alloc.rate:                   1091.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1705.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2071.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1019921.404 ops/s
[info]                  ·gc.alloc.rate:                   1101.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              1700.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2044.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   1017639.595 ±(99.9%) 23847.911 ops/s [Average]
[info]   (min, avg, max) = (1007425.790, 1017639.595, 1023069.222), stdev = 6193.227
[info]   CI (99.9%): [993791.683, 1041487.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1089.774 ±(99.9%) 33.492 MB/sec [Average]
[info]   (min, avg, max) = (1079.319, 1089.774, 1101.780), stdev = 8.698
[info]   CI (99.9%): [1056.282, 1123.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1685.324 ±(99.9%) 75.529 B/op [Average]
[info]   (min, avg, max) = (1660.287, 1685.324, 1705.509), stdev = 19.615
[info]   CI (99.9%): [1609.795, 1760.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1060.074 ±(99.9%) 1397.268 MB/sec [Average]
[info]   (min, avg, max) = (662.292, 1060.074, 1326.152), stdev = 362.866
[info]   CI (99.9%): [≈ 0, 2457.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1641.214 ±(99.9%) 2183.823 B/op [Average]
[info]   (min, avg, max) = (1019.656, 1641.214, 2071.511), stdev = 567.132
[info]   CI (99.9%): [≈ 0, 3825.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 6.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 3.852), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 7.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.377 ±(99.9%) 10.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.377, 6.017), stdev = 2.618
[info]   CI (99.9%): [≈ 0, 11.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 3.286
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:39:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29494.098 ops/s
[info] # Warmup Iteration   2: 185995.887 ops/s
[info] # Warmup Iteration   3: 210378.922 ops/s
[info] # Warmup Iteration   4: 218262.755 ops/s
[info] # Warmup Iteration   5: 212037.737 ops/s
[info] Iteration   1: 214245.578 ops/s
[info]                  ·gc.alloc.rate:                   2651.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              19472.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19495.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.447 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 212802.632 ops/s
[info]                  ·gc.alloc.rate:                   2637.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              19500.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19625.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 220615.698 ops/s
[info]                  ·gc.alloc.rate:                   2730.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              19473.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18951.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 224079.535 ops/s
[info]                  ·gc.alloc.rate:               2798.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          19652.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2661.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18691.403 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 224107.577 ops/s
[info]                  ·gc.alloc.rate:               2813.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          19751.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18759.658 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   219170.204 ±(99.9%) 20679.656 ops/s [Average]
[info]   (min, avg, max) = (212802.632, 219170.204, 224107.577), stdev = 5370.441
[info]   CI (99.9%): [198490.547, 239849.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2726.120 ±(99.9%) 312.052 MB/sec [Average]
[info]   (min, avg, max) = (2637.264, 2726.120, 2813.119), stdev = 81.039
[info]   CI (99.9%): [2414.068, 3038.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19570.215 ±(99.9%) 484.239 B/op [Average]
[info]   (min, avg, max) = (19472.631, 19570.215, 19751.339), stdev = 125.755
[info]   CI (99.9%): [19085.976, 20054.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2659.859 ±(99.9%) 28.157 MB/sec [Average]
[info]   (min, avg, max) = (2654.119, 2659.859, 2671.877), stdev = 7.312
[info]   CI (99.9%): [2631.702, 2688.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19104.777 ±(99.9%) 1652.908 B/op [Average]
[info]   (min, avg, max) = (18691.403, 19104.777, 19625.267), stdev = 429.255
[info]   CI (99.9%): [17451.870, 20757.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.451 ±(99.9%) 2.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.451, 1.776), stdev = 0.753
[info]   CI (99.9%): [≈ 0, 3.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.324 ±(99.9%) 21.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.324, 13.132), stdev = 5.574
[info]   CI (99.9%): [≈ 0, 24.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42690.028 ops/s
[info] # Warmup Iteration   2: 429947.077 ops/s
[info] # Warmup Iteration   3: 390479.292 ops/s
[info] # Warmup Iteration   4: 423500.499 ops/s
[info] # Warmup Iteration   5: 431321.996 ops/s
[info] Iteration   1: 427673.558 ops/s
[info]                  ·gc.alloc.rate:                   285.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2434.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.522 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 429187.673 ops/s
[info]                  ·gc.alloc.rate:      277.074 MB/sec
[info]                  ·gc.alloc.rate.norm: 1016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 431410.208 ops/s
[info]                  ·gc.alloc.rate:               294.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          1072.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2413.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 436636.968 ops/s
[info]                  ·gc.alloc.rate:      281.894 MB/sec
[info]                  ·gc.alloc.rate.norm: 1016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 432962.818 ops/s
[info]                  ·gc.alloc.rate:                   295.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              1075.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2399.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   431574.245 ±(99.9%) 13407.941 ops/s [Average]
[info]   (min, avg, max) = (427673.558, 431574.245, 436636.968), stdev = 3482.000
[info]   CI (99.9%): [418166.304, 444982.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   286.779 ±(99.9%) 30.724 MB/sec [Average]
[info]   (min, avg, max) = (277.074, 286.779, 295.750), stdev = 7.979
[info]   CI (99.9%): [256.055, 317.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1045.772 ±(99.9%) 111.909 B/op [Average]
[info]   (min, avg, max) = (1016.001, 1045.772, 1075.156), stdev = 29.062
[info]   CI (99.9%): [933.864, 1157.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.657 ±(99.9%) 1394.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.657, 661.677), stdev = 362.097
[info]   CI (99.9%): [≈ 0, 1790.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1449.450 ±(99.9%) 5095.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1449.450, 2434.273), stdev = 1323.218
[info]   CI (99.9%): [≈ 0, 6544.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.009 ±(99.9%) 8.665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.009, 5.035), stdev = 2.250
[info]   CI (99.9%): [≈ 0, 9.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.712 ±(99.9%) 31.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.712, 18.522), stdev = 8.279
[info]   CI (99.9%): [≈ 0, 35.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 715180.999 ops/s
[info] # Warmup Iteration   2: 1214478.753 ops/s
[info] # Warmup Iteration   3: 1305712.085 ops/s
[info] # Warmup Iteration   4: 1255112.132 ops/s
[info] # Warmup Iteration   5: 1294471.239 ops/s
[info] Iteration   1: 1327884.830 ops/s
[info]                  ·gc.alloc.rate:      256.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1315638.860 ops/s
[info]                  ·gc.alloc.rate:                   266.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              319.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     612.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1318055.021 ops/s
[info]                  ·gc.alloc.rate:      254.657 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1320280.935 ops/s
[info]                  ·gc.alloc.rate:               269.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          321.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 609.842 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1329901.536 ops/s
[info]                  ·gc.alloc.rate:      256.915 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1322352.236 ±(99.9%) 24003.081 ops/s [Average]
[info]   (min, avg, max) = (1315638.860, 1322352.236, 1329901.536), stdev = 6233.524
[info]   CI (99.9%): [1298349.155, 1346355.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   260.943 ±(99.9%) 26.358 MB/sec [Average]
[info]   (min, avg, max) = (254.657, 260.943, 269.726), stdev = 6.845
[info]   CI (99.9%): [234.585, 287.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.556 ±(99.9%) 34.703 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.556, 321.527), stdev = 9.012
[info]   CI (99.9%): [275.853, 345.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.605), stdev = 280.214
[info]   CI (99.9%): [≈ 0, 1283.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   244.371 ±(99.9%) 1288.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 244.371, 612.014), stdev = 334.620
[info]   CI (99.9%): [≈ 0, 1532.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.302
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5978.044 ops/s
[info] # Warmup Iteration   2: 84337.035 ops/s
[info] # Warmup Iteration   3: 115801.733 ops/s
[info] # Warmup Iteration   4: 116328.418 ops/s
[info] # Warmup Iteration   5: 113448.369 ops/s
[info] Iteration   1: 117280.661 ops/s
[info]                  ·gc.alloc.rate:                   3801.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              51009.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45081.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 114013.571 ops/s
[info]                  ·gc.alloc.rate:                   3767.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              51984.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4047.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55854.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 115851.634 ops/s
[info]                  ·gc.alloc.rate:                   3797.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              51590.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45941.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 115864.379 ops/s
[info]                  ·gc.alloc.rate:                   3866.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              52516.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55215.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.115 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 127129.844 ops/s
[info]                  ·gc.alloc.rate:                   4154.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              51401.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50337.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   118028.018 ±(99.9%) 20095.007 ops/s [Average]
[info]   (min, avg, max) = (114013.571, 118028.018, 127129.844), stdev = 5218.609
[info]   CI (99.9%): [97933.011, 138123.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3877.313 ±(99.9%) 612.178 MB/sec [Average]
[info]   (min, avg, max) = (3767.276, 3877.313, 4154.298), stdev = 158.981
[info]   CI (99.9%): [3265.135, 4489.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51700.564 ±(99.9%) 2217.664 B/op [Average]
[info]   (min, avg, max) = (51009.214, 51700.564, 52516.916), stdev = 575.920
[info]   CI (99.9%): [49482.900, 53918.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3784.424 ±(99.9%) 1455.172 MB/sec [Average]
[info]   (min, avg, max) = (3359.367, 3784.424, 4068.293), stdev = 377.903
[info]   CI (99.9%): [2329.252, 5239.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50486.107 ±(99.9%) 19356.176 B/op [Average]
[info]   (min, avg, max) = (45081.491, 50486.107, 55854.167), stdev = 5026.737
[info]   CI (99.9%): [31129.932, 69842.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.288 ±(99.9%) 2.252 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.288, 1.334), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 2.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.896 ±(99.9%) 30.611 B/op [Average]
[info]   (min, avg, max) = (0.279, 3.896, 18.115), stdev = 7.950
[info]   CI (99.9%): [≈ 0, 34.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53736.851 ops/s
[info] # Warmup Iteration   2: 319245.869 ops/s
[info] # Warmup Iteration   3: 358891.279 ops/s
[info] # Warmup Iteration   4: 354987.134 ops/s
[info] # Warmup Iteration   5: 352775.936 ops/s
[info] Iteration   1: 355442.724 ops/s
[info]                  ·gc.alloc.rate:                   1917.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              8489.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5905.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 353602.274 ops/s
[info]                  ·gc.alloc.rate:                   1917.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              8531.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8893.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 350492.216 ops/s
[info]                  ·gc.alloc.rate:                   1910.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              8577.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8954.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 350807.154 ops/s
[info]                  ·gc.alloc.rate:               1923.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          8629.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8949.582 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 347352.633 ops/s
[info]                  ·gc.alloc.rate:                   1892.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              8576.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9055.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   351539.400 ±(99.9%) 11970.051 ops/s [Average]
[info]   (min, avg, max) = (347352.633, 351539.400, 355442.724), stdev = 3108.584
[info]   CI (99.9%): [339569.349, 363509.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1912.323 ±(99.9%) 45.580 MB/sec [Average]
[info]   (min, avg, max) = (1892.916, 1912.323, 1923.842), stdev = 11.837
[info]   CI (99.9%): [1866.742, 1957.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8560.930 ±(99.9%) 203.083 B/op [Average]
[info]   (min, avg, max) = (8489.415, 8560.930, 8629.146), stdev = 52.740
[info]   CI (99.9%): [8357.847, 8764.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1864.072 ±(99.9%) 1141.656 MB/sec [Average]
[info]   (min, avg, max) = (1333.715, 1864.072, 1998.688), stdev = 296.484
[info]   CI (99.9%): [722.416, 3005.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8351.723 ±(99.9%) 5271.245 B/op [Average]
[info]   (min, avg, max) = (5905.161, 8351.723, 9055.996), stdev = 1368.925
[info]   CI (99.9%): [3080.479, 13622.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 5.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 3.539), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.024 ±(99.9%) 26.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.024, 15.670), stdev = 6.760
[info]   CI (99.9%): [≈ 0, 30.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 430389.064 ops/s
[info] # Warmup Iteration   2: 2094973.633 ops/s
[info] # Warmup Iteration   3: 2185379.296 ops/s
[info] # Warmup Iteration   4: 2257658.965 ops/s
[info] # Warmup Iteration   5: 2284061.259 ops/s
[info] Iteration   1: 2301568.314 ops/s
[info]                  ·gc.alloc.rate:                   642.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2306451.050 ops/s
[info]                  ·gc.alloc.rate:      621.620 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2217684.041 ops/s
[info]                  ·gc.alloc.rate:               611.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 471.098 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2250405.084 ops/s
[info]                  ·gc.alloc.rate:                   630.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2238837.217 ops/s
[info]                  ·gc.alloc.rate:               619.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2262989.141 ±(99.9%) 151251.364 ops/s [Average]
[info]   (min, avg, max) = (2217684.041, 2262989.141, 2306451.050), stdev = 39279.499
[info]   CI (99.9%): [2111737.777, 2414240.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   625.159 ±(99.9%) 45.263 MB/sec [Average]
[info]   (min, avg, max) = (611.545, 625.159, 642.307), stdev = 11.755
[info]   CI (99.9%): [579.896, 670.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   434.726 ±(99.9%) 25.627 B/op [Average]
[info]   (min, avg, max) = (424.000, 434.726, 441.078), stdev = 6.655
[info]   CI (99.9%): [409.099, 460.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.139 ±(99.9%) 1143.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.139, 664.954), stdev = 296.917
[info]   CI (99.9%): [≈ 0, 1674.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   371.193 ±(99.9%) 799.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 371.193, 471.098), stdev = 207.610
[info]   CI (99.9%): [≈ 0, 1170.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1596083.697 ops/s
[info] # Warmup Iteration   2: 2926562.318 ops/s
[info] # Warmup Iteration   3: 3510701.761 ops/s
[info] # Warmup Iteration   4: 3514295.038 ops/s
[info] # Warmup Iteration   5: 3486412.411 ops/s
[info] Iteration   1: 3506021.280 ops/s
[info]                  ·gc.alloc.rate:                   970.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              435.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3536984.330 ops/s
[info]                  ·gc.alloc.rate:               975.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 297.752 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3506164.670 ops/s
[info]                  ·gc.alloc.rate:                   982.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     600.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3378085.133 ops/s
[info]                  ·gc.alloc.rate:               925.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          431.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3385948.903 ops/s
[info]                  ·gc.alloc.rate:               926.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          430.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   3462640.863 ±(99.9%) 287733.951 ops/s [Average]
[info]   (min, avg, max) = (3378085.133, 3462640.863, 3536984.330), stdev = 74723.593
[info]   CI (99.9%): [3174906.912, 3750374.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   955.965 ±(99.9%) 107.428 MB/sec [Average]
[info]   (min, avg, max) = (925.255, 955.965, 982.239), stdev = 27.899
[info]   CI (99.9%): [848.536, 1063.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   434.357 ±(99.9%) 16.149 B/op [Average]
[info]   (min, avg, max) = (430.426, 434.357, 440.890), stdev = 4.194
[info]   CI (99.9%): [418.208, 450.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.426 ±(99.9%) 1152.266 MB/sec [Average]
[info]   (min, avg, max) = (669.118, 803.426, 1338.722), stdev = 299.240
[info]   CI (99.9%): [≈ 0, 1955.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   364.465 ±(99.9%) 509.549 B/op [Average]
[info]   (min, avg, max) = (297.752, 364.465, 600.902), stdev = 132.328
[info]   CI (99.9%): [≈ 0, 874.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1711498.588 ops/s
[info] # Warmup Iteration   2: 3191912.818 ops/s
[info] # Warmup Iteration   3: 3624014.879 ops/s
[info] # Warmup Iteration   4: 3621883.201 ops/s
[info] # Warmup Iteration   5: 3625041.198 ops/s
[info] Iteration   1: 3601771.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3618862.001 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3600784.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3621882.207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3623902.557 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3613440.553 ±(99.9%) 43328.323 ops/s [Average]
[info]   (min, avg, max) = (3600784.052, 3613440.553, 3623902.557), stdev = 11252.228
[info]   CI (99.9%): [3570112.229, 3656768.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3398.310 ops/s
[info] # Warmup Iteration   2: 32315.185 ops/s
[info] # Warmup Iteration   3: 54453.949 ops/s
[info] # Warmup Iteration   4: 50899.204 ops/s
[info] # Warmup Iteration   5: 60177.551 ops/s
[info] Iteration   1: 61304.091 ops/s
[info]                  ·gc.alloc.rate:                   2164.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              55552.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51187.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 61469.749 ops/s
[info]                  ·gc.alloc.rate:                   2179.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              55795.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50929.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.660 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 61598.969 ops/s
[info]                  ·gc.alloc.rate:                   2183.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              55792.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50754.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 60975.412 ops/s
[info]                  ·gc.alloc.rate:                   2159.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              55729.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51349.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.836 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 59657.038 ops/s
[info]                  ·gc.alloc.rate:               2113.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          55745.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2660.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70192.115 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   61001.052 ±(99.9%) 3029.582 ops/s [Average]
[info]   (min, avg, max) = (59657.038, 61001.052, 61598.969), stdev = 786.773
[info]   CI (99.9%): [57971.470, 64030.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2160.128 ±(99.9%) 108.449 MB/sec [Average]
[info]   (min, avg, max) = (2113.105, 2160.128, 2183.580), stdev = 28.164
[info]   CI (99.9%): [2051.678, 2268.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55723.118 ±(99.9%) 383.447 B/op [Average]
[info]   (min, avg, max) = (55552.414, 55723.118, 55795.289), stdev = 99.580
[info]   CI (99.9%): [55339.671, 56106.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2124.235 ±(99.9%) 1154.845 MB/sec [Average]
[info]   (min, avg, max) = (1986.435, 2124.235, 2660.705), stdev = 299.909
[info]   CI (99.9%): [969.391, 3279.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54882.715 ±(99.9%) 32966.460 B/op [Average]
[info]   (min, avg, max) = (50754.843, 54882.715, 70192.115), stdev = 8561.285
[info]   CI (99.9%): [21916.255, 87849.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.990 ±(99.9%) 7.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.990, 4.324), stdev = 1.871
[info]   CI (99.9%): [≈ 0, 8.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25.399 ±(99.9%) 184.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.399, 110.965), stdev = 48.024
[info]   CI (99.9%): [≈ 0, 210.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65837.852 ops/s
[info] # Warmup Iteration   2: 268359.678 ops/s
[info] # Warmup Iteration   3: 271909.847 ops/s
[info] # Warmup Iteration   4: 317539.222 ops/s
[info] # Warmup Iteration   5: 339159.854 ops/s
[info] Iteration   1: 342776.229 ops/s
[info]                  ·gc.alloc.rate:                   3682.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              16909.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3993.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18334.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.956 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 340637.649 ops/s
[info]                  ·gc.alloc.rate:                   3662.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              16913.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15433.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 339892.090 ops/s
[info]                  ·gc.alloc.rate:                   3667.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              16981.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15546.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 330415.102 ops/s
[info]                  ·gc.alloc.rate:                   3568.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              16998.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16052.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 335431.874 ops/s
[info]                  ·gc.alloc.rate:                   3635.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              17052.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15867.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   337830.589 ±(99.9%) 18994.646 ops/s [Average]
[info]   (min, avg, max) = (330415.102, 337830.589, 342776.229), stdev = 4932.849
[info]   CI (99.9%): [318835.943, 356825.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3643.232 ±(99.9%) 173.790 MB/sec [Average]
[info]   (min, avg, max) = (3568.598, 3643.232, 3682.731), stdev = 45.133
[info]   CI (99.9%): [3469.442, 3817.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16970.983 ±(99.9%) 233.059 B/op [Average]
[info]   (min, avg, max) = (16909.334, 16970.983, 17052.646), stdev = 60.525
[info]   CI (99.9%): [16737.924, 17204.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3488.991 ±(99.9%) 1086.882 MB/sec [Average]
[info]   (min, avg, max) = (3341.622, 3488.991, 3993.191), stdev = 282.260
[info]   CI (99.9%): [2402.109, 4575.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16246.808 ±(99.9%) 4594.283 B/op [Average]
[info]   (min, avg, max) = (15433.180, 16246.808, 18334.818), stdev = 1193.121
[info]   CI (99.9%): [11652.526, 20841.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.323 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.208), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 1.478 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.269, 0.956), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54517.845 ops/s
[info] # Warmup Iteration   2: 553658.780 ops/s
[info] # Warmup Iteration   3: 634574.042 ops/s
[info] # Warmup Iteration   4: 731584.588 ops/s
[info] # Warmup Iteration   5: 722701.073 ops/s
[info] Iteration   1: 724225.299 ops/s
[info]                  ·gc.alloc.rate:                   1984.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              4311.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4343.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 734945.655 ops/s
[info]                  ·gc.alloc.rate:                   2020.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              4325.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4290.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 735267.585 ops/s
[info]                  ·gc.alloc.rate:                   2032.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              4350.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4291.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 736736.708 ops/s
[info]                  ·gc.alloc.rate:               2023.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          4321.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4286.695 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 733277.603 ops/s
[info]                  ·gc.alloc.rate:               2027.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          4351.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4317.208 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   732890.570 ±(99.9%) 19243.886 ops/s [Average]
[info]   (min, avg, max) = (724225.299, 732890.570, 736736.708), stdev = 4997.576
[info]   CI (99.9%): [713646.684, 752134.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2017.460 ±(99.9%) 73.318 MB/sec [Average]
[info]   (min, avg, max) = (1984.418, 2017.460, 2032.308), stdev = 19.041
[info]   CI (99.9%): [1944.142, 2090.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4331.969 ±(99.9%) 68.770 B/op [Average]
[info]   (min, avg, max) = (4311.464, 4331.969, 4351.352), stdev = 17.859
[info]   CI (99.9%): [4263.199, 4400.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2005.221 ±(99.9%) 17.131 MB/sec [Average]
[info]   (min, avg, max) = (1999.273, 2005.221, 2011.515), stdev = 4.449
[info]   CI (99.9%): [1988.090, 2022.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4305.861 ±(99.9%) 93.989 B/op [Average]
[info]   (min, avg, max) = (4286.695, 4305.861, 4343.738), stdev = 24.409
[info]   CI (99.9%): [4211.871, 4399.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.436 ±(99.9%) 3.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.436, 2.118), stdev = 0.941
[info]   CI (99.9%): [≈ 0, 4.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.934 ±(99.9%) 7.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.934, 4.536), stdev = 2.014
[info]   CI (99.9%): [≈ 0, 8.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 887550.994 ops/s
[info] # Warmup Iteration   2: 2825706.494 ops/s
[info] # Warmup Iteration   3: 2864170.475 ops/s
[info] # Warmup Iteration   4: 2953696.924 ops/s
[info] # Warmup Iteration   5: 2938028.139 ops/s
[info] Iteration   1: 2953994.310 ops/s
[info]                  ·gc.alloc.rate:               1045.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2932682.340 ops/s
[info]                  ·gc.alloc.rate:               1053.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          565.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 717.829 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 2929533.414 ops/s
[info]                  ·gc.alloc.rate:               1029.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359.679 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2899871.338 ops/s
[info]                  ·gc.alloc.rate:               1065.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          578.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 726.909 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 2953850.863 ops/s
[info]                  ·gc.alloc.rate:                   1038.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     356.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2933986.453 ±(99.9%) 85677.486 ops/s [Average]
[info]   (min, avg, max) = (2899871.338, 2933986.453, 2953994.310), stdev = 22250.171
[info]   CI (99.9%): [2848308.967, 3019663.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1046.613 ±(99.9%) 53.869 MB/sec [Average]
[info]   (min, avg, max) = (1029.355, 1046.613, 1065.674), stdev = 13.990
[info]   CI (99.9%): [992.744, 1100.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   561.328 ±(99.9%) 41.184 B/op [Average]
[info]   (min, avg, max) = (552.908, 561.328, 578.140), stdev = 10.695
[info]   CI (99.9%): [520.144, 602.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.195 ±(99.9%) 1411.722 MB/sec [Average]
[info]   (min, avg, max) = (668.781, 937.195, 1339.898), stdev = 366.620
[info]   CI (99.9%): [≈ 0, 2348.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   503.493 ±(99.9%) 769.498 B/op [Average]
[info]   (min, avg, max) = (356.165, 503.493, 726.909), stdev = 199.836
[info]   CI (99.9%): [≈ 0, 1272.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.408
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2561.950 ops/s
[info] # Warmup Iteration   2: 93289.516 ops/s
[info] # Warmup Iteration   3: 115083.319 ops/s
[info] # Warmup Iteration   4: 136555.857 ops/s
[info] # Warmup Iteration   5: 134352.610 ops/s
[info] Iteration   1: 133271.835 ops/s
[info]                  ·gc.alloc.rate:                   4080.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              48191.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4022.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47498.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.737 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 132089.208 ops/s
[info]                  ·gc.alloc.rate:                   4095.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              48790.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4040.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48132.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 132693.168 ops/s
[info]                  ·gc.alloc.rate:                   4125.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              48931.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48101.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 135649.960 ops/s
[info]                  ·gc.alloc.rate:                   4223.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              48991.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47184.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 135837.961 ops/s
[info]                  ·gc.alloc.rate:               4229.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          48994.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4075.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47209.305 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   133908.426 ±(99.9%) 6654.961 ops/s [Average]
[info]   (min, avg, max) = (132089.208, 133908.426, 135837.961), stdev = 1728.272
[info]   CI (99.9%): [127253.465, 140563.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4150.868 ±(99.9%) 272.298 MB/sec [Average]
[info]   (min, avg, max) = (4080.972, 4150.868, 4229.144), stdev = 70.715
[info]   CI (99.9%): [3878.570, 4423.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48779.785 ±(99.9%) 1305.699 B/op [Average]
[info]   (min, avg, max) = (48191.480, 48779.785, 48994.102), stdev = 339.086
[info]   CI (99.9%): [47474.086, 50085.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4052.123 ±(99.9%) 81.982 MB/sec [Average]
[info]   (min, avg, max) = (4022.312, 4052.123, 4075.081), stdev = 21.290
[info]   CI (99.9%): [3970.141, 4134.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47625.243 ±(99.9%) 1793.568 B/op [Average]
[info]   (min, avg, max) = (47184.065, 47625.243, 48132.294), stdev = 465.784
[info]   CI (99.9%): [45831.675, 49418.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.442 ±(99.9%) 1.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 0.737), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.400, 15.000), stdev = 2.608
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76543.567 ops/s
[info] # Warmup Iteration   2: 297227.812 ops/s
[info] # Warmup Iteration   3: 327067.308 ops/s
[info] # Warmup Iteration   4: 326509.515 ops/s
[info] # Warmup Iteration   5: 329620.359 ops/s
[info] Iteration   1: 331177.853 ops/s
[info]                  ·gc.alloc.rate:                   2603.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              12371.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9503.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 332187.714 ops/s
[info]                  ·gc.alloc.rate:                   2611.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              12371.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12627.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 332504.613 ops/s
[info]                  ·gc.alloc.rate:                   2639.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              12494.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12640.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 330769.683 ops/s
[info]                  ·gc.alloc.rate:                   2639.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12748.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 332183.068 ops/s
[info]                  ·gc.alloc.rate:                   2652.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              12564.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12741.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   331764.586 ±(99.9%) 2878.915 ops/s [Average]
[info]   (min, avg, max) = (330769.683, 331764.586, 332504.613), stdev = 747.645
[info]   CI (99.9%): [328885.671, 334643.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2629.297 ±(99.9%) 80.221 MB/sec [Average]
[info]   (min, avg, max) = (2603.282, 2629.297, 2652.283), stdev = 20.833
[info]   CI (99.9%): [2549.076, 2709.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12472.561 ±(99.9%) 370.525 B/op [Average]
[info]   (min, avg, max) = (12371.331, 12472.561, 12564.735), stdev = 96.224
[info]   CI (99.9%): [12102.036, 12843.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2540.962 ±(99.9%) 1165.579 MB/sec [Average]
[info]   (min, avg, max) = (1999.725, 2540.962, 2689.624), stdev = 302.697
[info]   CI (99.9%): [1375.382, 3706.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12052.409 ±(99.9%) 5490.902 B/op [Average]
[info]   (min, avg, max) = (9503.500, 12052.409, 12748.432), stdev = 1425.970
[info]   CI (99.9%): [6561.507, 17543.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 0.682 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.178, 0.495), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 495872.631 ops/s
[info] # Warmup Iteration   2: 1785441.749 ops/s
[info] # Warmup Iteration   3: 1938495.123 ops/s
[info] # Warmup Iteration   4: 1948195.089 ops/s
[info] # Warmup Iteration   5: 1968442.313 ops/s
[info] Iteration   1: 1960646.206 ops/s
[info]                  ·gc.alloc.rate:                   686.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2003407.496 ops/s
[info]                  ·gc.alloc.rate:               698.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 522.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2035682.597 ops/s
[info]                  ·gc.alloc.rate:                   711.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1969624.106 ops/s
[info]                  ·gc.alloc.rate:               693.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532.297 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1954989.036 ops/s
[info]                  ·gc.alloc.rate:                   686.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              552.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     536.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1984869.888 ±(99.9%) 131115.136 ops/s [Average]
[info]   (min, avg, max) = (1954989.036, 1984869.888, 2035682.597), stdev = 34050.184
[info]   CI (99.9%): [1853754.752, 2115985.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   695.389 ±(99.9%) 39.270 MB/sec [Average]
[info]   (min, avg, max) = (686.880, 695.389, 711.512), stdev = 10.198
[info]   CI (99.9%): [656.119, 734.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   551.397 ±(99.9%) 8.719 B/op [Average]
[info]   (min, avg, max) = (548.474, 551.397, 554.130), stdev = 2.264
[info]   CI (99.9%): [542.678, 560.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.567 ±(99.9%) 2.655 MB/sec [Average]
[info]   (min, avg, max) = (664.455, 665.567, 666.149), stdev = 0.690
[info]   CI (99.9%): [662.912, 668.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   527.854 ±(99.9%) 34.710 B/op [Average]
[info]   (min, avg, max) = (514.509, 527.854, 536.277), stdev = 9.014
[info]   CI (99.9%): [493.144, 562.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.031 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.048), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:35:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1250158.104 ops/s
[info] # Warmup Iteration   2: 2610714.197 ops/s
[info] # Warmup Iteration   3: 2676385.494 ops/s
[info] # Warmup Iteration   4: 2697272.432 ops/s
[info] # Warmup Iteration   5: 2830339.201 ops/s
[info] Iteration   1: 2841026.040 ops/s
[info]                  ·gc.alloc.rate:               993.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2837956.077 ops/s
[info]                  ·gc.alloc.rate:               1003.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 739.132 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 2822933.934 ops/s
[info]                  ·gc.alloc.rate:                   978.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              545.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2838079.272 ops/s
[info]                  ·gc.alloc.rate:               981.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2835397.014 ops/s
[info]                  ·gc.alloc.rate:               1017.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 743.936 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2835078.467 ±(99.9%) 27245.193 ops/s [Average]
[info]   (min, avg, max) = (2822933.934, 2835078.467, 2841026.040), stdev = 7075.490
[info]   CI (99.9%): [2807833.274, 2862323.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   995.089 ±(99.9%) 62.359 MB/sec [Average]
[info]   (min, avg, max) = (978.735, 995.089, 1017.805), stdev = 16.194
[info]   CI (99.9%): [932.730, 1057.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   552.179 ±(99.9%) 32.666 B/op [Average]
[info]   (min, avg, max) = (544.140, 552.179, 564.918), stdev = 8.483
[info]   CI (99.9%): [519.512, 584.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.652 ±(99.9%) 1409.263 MB/sec [Average]
[info]   (min, avg, max) = (668.892, 936.652, 1340.338), stdev = 365.981
[info]   CI (99.9%): [≈ 0, 2345.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   519.621 ±(99.9%) 780.090 B/op [Average]
[info]   (min, avg, max) = (370.515, 519.621, 743.936), stdev = 202.587
[info]   CI (99.9%): [≈ 0, 1299.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 901222.906 ops/s
[info] # Warmup Iteration   2: 2803306.364 ops/s
[info] # Warmup Iteration   3: 2942509.439 ops/s
[info] # Warmup Iteration   4: 2945402.089 ops/s
[info] # Warmup Iteration   5: 2946568.699 ops/s
[info] Iteration   1: 2944480.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2946645.531 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2932646.956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2942402.854 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2952583.469 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2943751.854 ±(99.9%) 28035.769 ops/s [Average]
[info]   (min, avg, max) = (2932646.956, 2943751.854, 2952583.469), stdev = 7280.800
[info]   CI (99.9%): [2915716.085, 2971787.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44268.022 ops/s
[info] # Warmup Iteration   2: 518562.306 ops/s
[info] # Warmup Iteration   3: 735900.375 ops/s
[info] # Warmup Iteration   4: 774464.291 ops/s
[info] # Warmup Iteration   5: 774897.654 ops/s
[info] Iteration   1: 773598.950 ops/s
[info]                  ·gc.alloc.rate:                   4738.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              9636.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4715.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9589.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 778869.056 ops/s
[info]                  ·gc.alloc.rate:                   4770.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              9636.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4735.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9565.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 772925.038 ops/s
[info]                  ·gc.alloc.rate:                   4708.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              9585.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8286.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 774517.629 ops/s
[info]                  ·gc.alloc.rate:                   4744.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              9641.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9666.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 777876.002 ops/s
[info]                  ·gc.alloc.rate:                   4764.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              9640.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9635.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   775557.335 ±(99.9%) 10222.165 ops/s [Average]
[info]   (min, avg, max) = (772925.038, 775557.335, 778869.056), stdev = 2654.664
[info]   CI (99.9%): [765335.170, 785779.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4745.478 ±(99.9%) 93.907 MB/sec [Average]
[info]   (min, avg, max) = (4708.727, 4745.478, 4770.145), stdev = 24.387
[info]   CI (99.9%): [4651.571, 4839.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9628.085 ±(99.9%) 92.440 B/op [Average]
[info]   (min, avg, max) = (9585.364, 9628.085, 9641.603), stdev = 24.006
[info]   CI (99.9%): [9535.645, 9720.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   4608.152 ±(99.9%) 1158.954 MB/sec [Average]
[info]   (min, avg, max) = (4070.769, 4608.152, 4762.228), stdev = 300.977
[info]   CI (99.9%): [3449.198, 5767.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9348.652 ±(99.9%) 2290.890 B/op [Average]
[info]   (min, avg, max) = (8286.699, 9348.652, 9666.160), stdev = 594.937
[info]   CI (99.9%): [7057.761, 11639.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.084, 0.168), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4411.768 ops/s
[info] # Warmup Iteration   2: 18200.821 ops/s
[info] # Warmup Iteration   3: 29673.158 ops/s
[info] # Warmup Iteration   4: 29175.777 ops/s
[info] # Warmup Iteration   5: 29032.350 ops/s
[info] Iteration   1: 27978.975 ops/s
[info]                  ·gc.alloc.rate:                   1835.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              103235.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112307.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 28044.000 ops/s
[info]                  ·gc.alloc.rate:                   1705.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              95703.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112080.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 28046.866 ops/s
[info]                  ·gc.alloc.rate:                   1680.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              94321.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74575.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28207.305 ops/s
[info]                  ·gc.alloc.rate:                   1703.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              94984.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111168.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28669.642 ops/s
[info]                  ·gc.alloc.rate:               1704.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          93563.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72954.911 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   28189.358 ±(99.9%) 1083.477 ops/s [Average]
[info]   (min, avg, max) = (27978.975, 28189.358, 28669.642), stdev = 281.375
[info]   CI (99.9%): [27105.881, 29272.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1725.881 ±(99.9%) 238.857 MB/sec [Average]
[info]   (min, avg, max) = (1680.903, 1725.881, 1835.331), stdev = 62.030
[info]   CI (99.9%): [1487.024, 1964.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   96361.562 ±(99.9%) 15108.285 B/op [Average]
[info]   (min, avg, max) = (93563.409, 96361.562, 103235.748), stdev = 3923.574
[info]   CI (99.9%): [81253.278, 111469.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1729.092 ±(99.9%) 1406.448 MB/sec [Average]
[info]   (min, avg, max) = (1328.958, 1729.092, 1997.610), stdev = 365.250
[info]   CI (99.9%): [322.644, 3135.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   96617.294 ±(99.9%) 80375.859 B/op [Average]
[info]   (min, avg, max) = (72954.911, 96617.294, 112307.279), stdev = 20873.355
[info]   CI (99.9%): [16241.435, 176993.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.197 ±(99.9%) 6.858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.197, 4.206), stdev = 1.781
[info]   CI (99.9%): [≈ 0, 8.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.188 ±(99.9%) 384.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.188, 235.993), stdev = 99.933
[info]   CI (99.9%): [≈ 0, 451.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.827
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.775 ops/s
[info] # Warmup Iteration   2: 59807.454 ops/s
[info] # Warmup Iteration   3: 100495.902 ops/s
[info] # Warmup Iteration   4: 98630.982 ops/s
[info] # Warmup Iteration   5: 95362.994 ops/s
[info] Iteration   1: 98134.697 ops/s
[info]                  ·gc.alloc.rate:               1037.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          16634.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10517.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 100978.814 ops/s
[info]                  ·gc.alloc.rate:                   907.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              14136.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20432.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 102519.057 ops/s
[info]                  ·gc.alloc.rate:               908.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          13950.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10073.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 98853.715 ops/s
[info]                  ·gc.alloc.rate:                   879.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              13995.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10446.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 96376.610 ops/s
[info]                  ·gc.alloc.rate:                   1051.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              17175.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21463.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   99372.579 ±(99.9%) 9285.107 ops/s [Average]
[info]   (min, avg, max) = (96376.610, 99372.579, 102519.057), stdev = 2411.313
[info]   CI (99.9%): [90087.472, 108657.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   956.844 ±(99.9%) 312.427 MB/sec [Average]
[info]   (min, avg, max) = (879.155, 956.844, 1051.764), stdev = 81.136
[info]   CI (99.9%): [644.417, 1269.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15178.243 ±(99.9%) 6120.170 B/op [Average]
[info]   (min, avg, max) = (13950.021, 15178.243, 17175.964), stdev = 1589.389
[info]   CI (99.9%): [9058.072, 21298.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   918.770 ±(99.9%) 1384.739 MB/sec [Average]
[info]   (min, avg, max) = (655.985, 918.770, 1314.307), stdev = 359.612
[info]   CI (99.9%): [≈ 0, 2303.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14586.734 ±(99.9%) 22414.723 B/op [Average]
[info]   (min, avg, max) = (10073.022, 14586.734, 21463.450), stdev = 5821.032
[info]   CI (99.9%): [≈ 0, 37001.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.092), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 5.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   9.809 ±(99.9%) 82.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.809, 48.190), stdev = 21.458
[info]   CI (99.9%): [≈ 0, 92.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 15.000), stdev = 4.494
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16188.720 ops/s
[info] # Warmup Iteration   2: 52095.217 ops/s
[info] # Warmup Iteration   3: 66308.390 ops/s
[info] # Warmup Iteration   4: 76031.265 ops/s
[info] # Warmup Iteration   5: 83141.670 ops/s
[info] Iteration   1: 80943.734 ops/s
[info]                  ·gc.alloc.rate:                   1647.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              32027.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38831.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 80950.538 ops/s
[info]                  ·gc.alloc.rate:                   1459.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              28355.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25903.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 72836.899 ops/s
[info]                  ·gc.alloc.rate:               1430.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          30917.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28788.447 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 73971.267 ops/s
[info]                  ·gc.alloc.rate:                   1137.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              24192.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28388.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 74010.595 ops/s
[info]                  ·gc.alloc.rate:                   1123.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              23898.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14193.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   76542.606 ±(99.9%) 15588.561 ops/s [Average]
[info]   (min, avg, max) = (72836.899, 76542.606, 80950.538), stdev = 4048.300
[info]   CI (99.9%): [60954.046, 92131.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1359.773 ±(99.9%) 867.985 MB/sec [Average]
[info]   (min, avg, max) = (1123.810, 1359.773, 1647.917), stdev = 225.413
[info]   CI (99.9%): [491.787, 2227.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27878.345 ±(99.9%) 14421.718 B/op [Average]
[info]   (min, avg, max) = (23898.507, 27878.345, 32027.949), stdev = 3745.274
[info]   CI (99.9%): [13456.627, 42300.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1333.012 ±(99.9%) 1811.418 MB/sec [Average]
[info]   (min, avg, max) = (667.448, 1333.012, 1997.993), stdev = 470.419
[info]   CI (99.9%): [≈ 0, 3144.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27221.071 ±(99.9%) 33903.057 B/op [Average]
[info]   (min, avg, max) = (14193.682, 27221.071, 38831.831), stdev = 8804.516
[info]   CI (99.9%): [≈ 0, 61124.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.295 ±(99.9%) 4.878 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.295, 2.820), stdev = 1.267
[info]   CI (99.9%): [≈ 0, 6.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26.220 ±(99.9%) 100.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.220, 60.004), stdev = 26.220
[info]   CI (99.9%): [≈ 0, 127.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.800, 6.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46240.703 ops/s
[info] # Warmup Iteration   2: 102379.847 ops/s
[info] # Warmup Iteration   3: 121007.820 ops/s
[info] # Warmup Iteration   4: 125296.068 ops/s
[info] # Warmup Iteration   5: 126607.333 ops/s
[info] Iteration   1: 141680.267 ops/s
[info]                  ·gc.alloc.rate:                   857.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              9523.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          631.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7015.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 139563.365 ops/s
[info]                  ·gc.alloc.rate:                   855.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              9652.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1263.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14246.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   3: 139545.915 ops/s
[info]                  ·gc.alloc.rate:                   839.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              9469.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          631.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7125.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 140007.979 ops/s
[info]                  ·gc.alloc.rate:               841.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          9457.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      632.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7109.662 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   5: 138544.838 ops/s
[info]                  ·gc.alloc.rate:                   859.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              9759.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1265.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14378.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   139868.473 ±(99.9%) 4411.973 ops/s [Average]
[info]   (min, avg, max) = (138544.838, 139868.473, 141680.267), stdev = 1145.775
[info]   CI (99.9%): [135456.500, 144280.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   850.745 ±(99.9%) 35.894 MB/sec [Average]
[info]   (min, avg, max) = (839.826, 850.745, 859.208), stdev = 9.321
[info]   CI (99.9%): [814.851, 886.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9572.369 ±(99.9%) 500.803 B/op [Average]
[info]   (min, avg, max) = (9457.507, 9572.369, 9759.221), stdev = 130.057
[info]   CI (99.9%): [9071.566, 10073.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   885.057 ±(99.9%) 1334.208 MB/sec [Average]
[info]   (min, avg, max) = (631.519, 885.057, 1265.880), stdev = 346.490
[info]   CI (99.9%): [≈ 0, 2219.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9975.165 ±(99.9%) 15248.534 B/op [Average]
[info]   (min, avg, max) = (7015.272, 9975.165, 14378.361), stdev = 3959.996
[info]   CI (99.9%): [≈ 0, 25223.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.262 ±(99.9%) 2.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.262, 1.246), stdev = 0.550
[info]   CI (99.9%): [≈ 0, 2.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.908 ±(99.9%) 23.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.908, 13.840), stdev = 6.112
[info]   CI (99.9%): [≈ 0, 26.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   81.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 16.200, 23.000), stdev = 5.762
[info]   CI (99.9%): [81.000, 81.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3605.174 ops/s
[info] # Warmup Iteration   2: 24294.141 ops/s
[info] # Warmup Iteration   3: 45843.818 ops/s
[info] # Warmup Iteration   4: 47822.150 ops/s
[info] # Warmup Iteration   5: 48511.323 ops/s
[info] Iteration   1: 50271.939 ops/s
[info]                  ·gc.alloc.rate:                   2129.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              66645.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62042.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 49778.103 ops/s
[info]                  ·gc.alloc.rate:                   2100.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              66403.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62637.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.658 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 47995.036 ops/s
[info]                  ·gc.alloc.rate:                   2012.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              65979.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65084.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 50358.877 ops/s
[info]                  ·gc.alloc.rate:               2106.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          65821.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62217.952 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 50618.138 ops/s
[info]                  ·gc.alloc.rate:               2129.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          66210.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62146.966 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   49804.418 ±(99.9%) 4067.260 ops/s [Average]
[info]   (min, avg, max) = (47995.036, 49804.418, 50618.138), stdev = 1056.255
[info]   CI (99.9%): [45737.158, 53871.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2095.554 ±(99.9%) 186.430 MB/sec [Average]
[info]   (min, avg, max) = (2012.177, 2095.554, 2129.627), stdev = 48.415
[info]   CI (99.9%): [1909.124, 2281.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66212.101 ±(99.9%) 1264.643 B/op [Average]
[info]   (min, avg, max) = (65821.051, 66212.101, 66645.445), stdev = 328.424
[info]   CI (99.9%): [64947.458, 67476.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1987.654 ±(99.9%) 28.098 MB/sec [Average]
[info]   (min, avg, max) = (1981.605, 1987.654, 1998.935), stdev = 7.297
[info]   CI (99.9%): [1959.556, 2015.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62825.848 ±(99.9%) 4938.278 B/op [Average]
[info]   (min, avg, max) = (62042.832, 62825.848, 65084.103), stdev = 1282.455
[info]   CI (99.9%): [57887.570, 67764.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.529 ±(99.9%) 2.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 1.303), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 2.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8698.119 ops/s
[info] # Warmup Iteration   2: 25176.087 ops/s
[info] # Warmup Iteration   3: 38757.628 ops/s
[info] # Warmup Iteration   4: 42191.539 ops/s
[info] # Warmup Iteration   5: 42024.283 ops/s
[info] Iteration   1: 44721.175 ops/s
[info]                  ·gc.alloc.rate:                   896.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              31558.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23314.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 43356.517 ops/s
[info]                  ·gc.alloc.rate:               853.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          30970.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24061.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 44957.272 ops/s
[info]                  ·gc.alloc.rate:                   899.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              31492.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46430.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 42418.608 ops/s
[info]                  ·gc.alloc.rate:               842.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          31249.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24617.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 43591.485 ops/s
[info]                  ·gc.alloc.rate:                   707.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              25523.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23978.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   43809.011 ±(99.9%) 4009.034 ops/s [Average]
[info]   (min, avg, max) = (42418.608, 43809.011, 44957.272), stdev = 1041.133
[info]   CI (99.9%): [39799.977, 47818.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   839.798 ±(99.9%) 302.249 MB/sec [Average]
[info]   (min, avg, max) = (707.025, 839.798, 899.627), stdev = 78.493
[info]   CI (99.9%): [537.549, 1142.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   30159.139 ±(99.9%) 10017.056 B/op [Average]
[info]   (min, avg, max) = (25523.997, 30159.139, 31558.661), stdev = 2601.398
[info]   CI (99.9%): [20142.083, 40176.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   795.908 ±(99.9%) 1141.857 MB/sec [Average]
[info]   (min, avg, max) = (662.528, 795.908, 1326.368), stdev = 296.537
[info]   CI (99.9%): [≈ 0, 1937.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28480.652 ±(99.9%) 38680.050 B/op [Average]
[info]   (min, avg, max) = (23314.883, 28480.652, 46430.807), stdev = 10045.086
[info]   CI (99.9%): [≈ 0, 67160.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.555 ±(99.9%) 3.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 1.942), stdev = 0.851
[info]   CI (99.9%): [≈ 0, 3.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.855 ±(99.9%) 118.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.855, 70.103), stdev = 30.650
[info]   CI (99.9%): [≈ 0, 137.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.387
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10976.386 ops/s
[info] # Warmup Iteration   2: 36212.668 ops/s
[info] # Warmup Iteration   3: 38213.174 ops/s
[info] # Warmup Iteration   4: 41574.474 ops/s
[info] # Warmup Iteration   5: 44817.691 ops/s
[info] Iteration   1: 42026.655 ops/s
[info]                  ·gc.alloc.rate:               662.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          24806.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24834.235 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 43212.506 ops/s
[info]                  ·gc.alloc.rate:                   559.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              20383.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24165.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42179.483 ops/s
[info]                  ·gc.alloc.rate:               537.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          20070.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24756.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 45085.907 ops/s
[info]                  ·gc.alloc.rate:      462.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 16136.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42527.630 ops/s
[info]                  ·gc.alloc.rate:               600.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          22209.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24565.793 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   43006.436 ±(99.9%) 4809.353 ops/s [Average]
[info]   (min, avg, max) = (42026.655, 43006.436, 45085.907), stdev = 1248.974
[info]   CI (99.9%): [38197.083, 47815.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   564.497 ±(99.9%) 285.767 MB/sec [Average]
[info]   (min, avg, max) = (462.348, 564.497, 662.456), stdev = 74.213
[info]   CI (99.9%): [278.730, 850.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20721.120 ±(99.9%) 12247.746 B/op [Average]
[info]   (min, avg, max) = (16136.002, 20721.120, 24806.721), stdev = 3180.701
[info]   CI (99.9%): [8473.374, 32968.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.798 ±(99.9%) 1142.583 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.798, 663.800), stdev = 296.725
[info]   CI (99.9%): [≈ 0, 1673.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19664.406 ±(99.9%) 42340.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19664.406, 24834.235), stdev = 10995.775
[info]   CI (99.9%): [≈ 0, 62005.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 1.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.959), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 1.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.988 ±(99.9%) 60.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.988, 34.940), stdev = 15.626
[info]   CI (99.9%): [≈ 0, 67.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16429.610 ops/s
[info] # Warmup Iteration   2: 34143.182 ops/s
[info] # Warmup Iteration   3: 48931.913 ops/s
[info] # Warmup Iteration   4: 48114.863 ops/s
[info] # Warmup Iteration   5: 49251.853 ops/s
[info] Iteration   1: 49524.496 ops/s
[info]                  ·gc.alloc.rate:                   513.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              16313.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21254.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 49486.557 ops/s
[info]                  ·gc.alloc.rate:               515.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          16398.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21249.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 49555.312 ops/s
[info]                  ·gc.alloc.rate:      498.269 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49476.859 ops/s
[info]                  ·gc.alloc.rate:               510.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          16244.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21252.915 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 48214.925 ops/s
[info]                  ·gc.alloc.rate:               626.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          20435.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21809.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   49251.630 ±(99.9%) 2234.830 ops/s [Average]
[info]   (min, avg, max) = (48214.925, 49251.630, 49555.312), stdev = 580.378
[info]   CI (99.9%): [47016.800, 51486.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   532.831 ±(99.9%) 202.475 MB/sec [Average]
[info]   (min, avg, max) = (498.269, 532.831, 626.120), stdev = 52.582
[info]   CI (99.9%): [330.356, 735.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17043.038 ±(99.9%) 7351.479 B/op [Average]
[info]   (min, avg, max) = (15824.009, 17043.038, 20435.279), stdev = 1909.156
[info]   CI (99.9%): [9691.560, 24394.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.704 ±(99.9%) 1150.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.704, 668.824), stdev = 298.909
[info]   CI (99.9%): [≈ 0, 1685.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17113.348 ±(99.9%) 36849.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17113.348, 21809.998), stdev = 9569.700
[info]   CI (99.9%): [≈ 0, 53962.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.397 ±(99.9%) 3.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.397, 1.985), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 3.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:32:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15792.842 ops/s
[info] # Warmup Iteration   2: 38496.662 ops/s
[info] # Warmup Iteration   3: 46665.150 ops/s
[info] # Warmup Iteration   4: 47319.145 ops/s
[info] # Warmup Iteration   5: 49063.548 ops/s
[info] Iteration   1: 49557.765 ops/s
[info]                  ·gc.alloc.rate:               605.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          19215.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21018.486 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 50641.398 ops/s
[info]                  ·gc.alloc.rate:                   548.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              17054.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20577.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 48763.899 ops/s
[info]                  ·gc.alloc.rate:               536.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          17295.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21370.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 49208.264 ops/s
[info]                  ·gc.alloc.rate:               533.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          17064.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21188.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 47892.058 ops/s
[info]                  ·gc.alloc.rate:      448.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 14750.836 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49212.677 ±(99.9%) 3901.228 ops/s [Average]
[info]   (min, avg, max) = (47892.058, 49212.677, 50641.398), stdev = 1013.137
[info]   CI (99.9%): [45311.449, 53113.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   534.442 ±(99.9%) 215.415 MB/sec [Average]
[info]   (min, avg, max) = (448.857, 534.442, 605.049), stdev = 55.943
[info]   CI (99.9%): [319.027, 749.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17076.105 ±(99.9%) 6098.028 B/op [Average]
[info]   (min, avg, max) = (14750.836, 17076.105, 19215.280), stdev = 1583.639
[info]   CI (99.9%): [10978.077, 23174.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   529.752 ±(99.9%) 1140.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.752, 662.477), stdev = 296.140
[info]   CI (99.9%): [≈ 0, 1670.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   16831.217 ±(99.9%) 36248.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16831.217, 21370.990), stdev = 9413.530
[info]   CI (99.9%): [≈ 0, 53079.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.195 ±(99.9%) 1.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.976), stdev = 0.437
[info]   CI (99.9%): [≈ 0, 1.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   6.067 ±(99.9%) 52.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.067, 30.336), stdev = 13.567
[info]   CI (99.9%): [≈ 0, 58.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4018.187 ops/s
[info] # Warmup Iteration   2: 8964.975 ops/s
[info] # Warmup Iteration   3: 15634.520 ops/s
[info] # Warmup Iteration   4: 18223.426 ops/s
[info] # Warmup Iteration   5: 17633.460 ops/s
[info] Iteration   1: 15402.285 ops/s
[info]                  ·gc.alloc.rate:                   1104.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              112865.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135862.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 15374.552 ops/s
[info]                  ·gc.alloc.rate:               1096.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          112192.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68054.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 14575.178 ops/s
[info]                  ·gc.alloc.rate:                   1313.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              141817.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143641.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 15807.440 ops/s
[info]                  ·gc.alloc.rate:                   1329.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              132392.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132373.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16900.999 ops/s
[info]                  ·gc.alloc.rate:                   1674.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              155896.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185546.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15612.091 ±(99.9%) 3264.587 ops/s [Average]
[info]   (min, avg, max) = (14575.178, 15612.091, 16900.999), stdev = 847.803
[info]   CI (99.9%): [12347.504, 18876.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1303.801 ±(99.9%) 905.228 MB/sec [Average]
[info]   (min, avg, max) = (1096.518, 1303.801, 1674.806), stdev = 235.085
[info]   CI (99.9%): [398.573, 2209.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   131032.957 ±(99.9%) 72586.715 B/op [Average]
[info]   (min, avg, max) = (112192.587, 131032.957, 155896.430), stdev = 18850.539
[info]   CI (99.9%): [58446.242, 203619.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1329.583 ±(99.9%) 1808.225 MB/sec [Average]
[info]   (min, avg, max) = (665.136, 1329.583, 1993.337), stdev = 469.590
[info]   CI (99.9%): [≈ 0, 3137.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133095.699 ±(99.9%) 162239.457 B/op [Average]
[info]   (min, avg, max) = (68054.812, 133095.699, 185546.401), stdev = 42133.072
[info]   CI (99.9%): [≈ 0, 295335.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.600 ±(99.9%) 3.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.565), stdev = 0.987
[info]   CI (99.9%): [≈ 0, 5.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   159.898 ±(99.9%) 371.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.898, 255.440), stdev = 96.447
[info]   CI (99.9%): [≈ 0, 531.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 15.000), stdev = 4.266
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3969.959 ops/s
[info] # Warmup Iteration   2: 12096.394 ops/s
[info] # Warmup Iteration   3: 15924.426 ops/s
[info] # Warmup Iteration   4: 16591.910 ops/s
[info] # Warmup Iteration   5: 16384.227 ops/s
[info] Iteration   1: 15782.923 ops/s
[info]                  ·gc.alloc.rate:               1040.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          103754.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      651.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64929.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 15619.792 ops/s
[info]                  ·gc.alloc.rate:                   1059.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              106743.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131617.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 14968.191 ops/s
[info]                  ·gc.alloc.rate:               1491.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          156735.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1309.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137629.540 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Iteration   4: 15457.225 ops/s
[info]                  ·gc.alloc.rate:                   1525.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              155282.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133072.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 708.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 15485.676 ops/s
[info]                  ·gc.alloc.rate:                   1081.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              109957.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132696.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 622.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15462.761 ±(99.9%) 1174.790 ops/s [Average]
[info]   (min, avg, max) = (14968.191, 15462.761, 15782.923), stdev = 305.089
[info]   CI (99.9%): [14287.971, 16637.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1239.860 ±(99.9%) 947.457 MB/sec [Average]
[info]   (min, avg, max) = (1040.549, 1239.860, 1525.807), stdev = 246.052
[info]   CI (99.9%): [292.403, 2187.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   126494.843 ±(99.9%) 104109.625 B/op [Average]
[info]   (min, avg, max) = (103754.082, 126494.843, 156735.634), stdev = 27036.939
[info]   CI (99.9%): [22385.218, 230604.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1176.112 ±(99.9%) 1129.967 MB/sec [Average]
[info]   (min, avg, max) = (651.181, 1176.112, 1309.569), stdev = 293.449
[info]   CI (99.9%): [46.145, 2306.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   119989.289 ±(99.9%) 118850.084 B/op [Average]
[info]   (min, avg, max) = (64929.877, 119989.289, 137629.540), stdev = 30864.989
[info]   CI (99.9%): [1139.205, 238839.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.618 ±(99.9%) 13.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.618, 6.964), stdev = 3.595
[info]   CI (99.9%): [≈ 0, 16.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   266.235 ±(99.9%) 1408.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 266.235, 708.765), stdev = 365.705
[info]   CI (99.9%): [≈ 0, 1674.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 15.000, 23.000), stdev = 5.831
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51030.245 ops/s
[info] # Warmup Iteration   2: 144017.177 ops/s
[info] # Warmup Iteration   3: 150556.956 ops/s
[info] # Warmup Iteration   4: 161766.781 ops/s
[info] # Warmup Iteration   5: 148721.874 ops/s
[info] Iteration   1: 161068.039 ops/s
[info]                  ·gc.alloc.rate:               436.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          4264.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6522.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 161985.718 ops/s
[info]                  ·gc.alloc.rate:                   435.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              4226.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6485.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.759 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 163305.602 ops/s
[info]                  ·gc.alloc.rate:      425.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 162253.254 ops/s
[info]                  ·gc.alloc.rate:                   445.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              4316.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6461.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 161476.265 ops/s
[info]                  ·gc.alloc.rate:               440.213 MB/sec
[info]                  ·gc.alloc.rate.norm:          4290.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6492.891 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   162017.775 ±(99.9%) 3284.470 ops/s [Average]
[info]   (min, avg, max) = (161068.039, 162017.775, 163305.602), stdev = 852.966
[info]   CI (99.9%): [158733.305, 165302.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   436.426 ±(99.9%) 28.636 MB/sec [Average]
[info]   (min, avg, max) = (425.046, 436.426, 445.136), stdev = 7.437
[info]   CI (99.9%): [407.790, 465.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4238.858 ±(99.9%) 333.031 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4238.858, 4316.536), stdev = 86.487
[info]   CI (99.9%): [3905.827, 4571.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.592 ±(99.9%) 1148.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.592, 667.767), stdev = 298.288
[info]   CI (99.9%): [≈ 0, 1682.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5192.482 ±(99.9%) 11177.521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5192.482, 6522.477), stdev = 2902.767
[info]   CI (99.9%): [≈ 0, 16370.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.802 ±(99.9%) 6.864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.802, 3.991), stdev = 1.782
[info]   CI (99.9%): [≈ 0, 7.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.792 ±(99.9%) 66.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.792, 38.759), stdev = 17.311
[info]   CI (99.9%): [≈ 0, 74.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1577.181 ops/s
[info] # Warmup Iteration   2: 7755.089 ops/s
[info] # Warmup Iteration   3: 15443.392 ops/s
[info] # Warmup Iteration   4: 15698.525 ops/s
[info] # Warmup Iteration   5: 15713.061 ops/s
[info] Iteration   1: 15596.839 ops/s
[info]                  ·gc.alloc.rate:               1659.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          167466.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133559.007 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 16001.574 ops/s
[info]                  ·gc.alloc.rate:                   1431.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              140784.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129982.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15535.628 ops/s
[info]                  ·gc.alloc.rate:                   1639.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              166071.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201070.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 15287.495 ops/s
[info]                  ·gc.alloc.rate:                   1574.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              162118.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136532.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16345.383 ops/s
[info]                  ·gc.alloc.rate:                   1458.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              140448.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127857.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 440.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15753.384 ±(99.9%) 1612.032 ops/s [Average]
[info]   (min, avg, max) = (15287.495, 15753.384, 16345.383), stdev = 418.640
[info]   CI (99.9%): [14141.352, 17365.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1552.845 ±(99.9%) 398.721 MB/sec [Average]
[info]   (min, avg, max) = (1431.813, 1552.845, 1659.625), stdev = 103.546
[info]   CI (99.9%): [1154.125, 1951.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155377.868 ±(99.9%) 52436.871 B/op [Average]
[info]   (min, avg, max) = (140448.777, 155377.868, 167466.434), stdev = 13617.689
[info]   CI (99.9%): [102940.997, 207814.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1456.904 ±(99.9%) 1136.466 MB/sec [Average]
[info]   (min, avg, max) = (1321.958, 1456.904, 1984.845), stdev = 295.137
[info]   CI (99.9%): [320.438, 2593.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   145800.325 ±(99.9%) 119659.688 B/op [Average]
[info]   (min, avg, max) = (127857.132, 145800.325, 201070.420), stdev = 31075.241
[info]   CI (99.9%): [26140.637, 265460.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.233 ±(99.9%) 9.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.233, 5.260), stdev = 2.515
[info]   CI (99.9%): [≈ 0, 11.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   218.888 ±(99.9%) 941.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 218.888, 517.224), stdev = 244.589
[info]   CI (99.9%): [≈ 0, 1160.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9405.361 ops/s
[info] # Warmup Iteration   2: 57908.655 ops/s
[info] # Warmup Iteration   3: 64998.390 ops/s
[info] # Warmup Iteration   4: 65881.827 ops/s
[info] # Warmup Iteration   5: 70483.497 ops/s
[info] Iteration   1: 71099.856 ops/s
[info]                  ·gc.alloc.rate:                   1652.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              36575.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29446.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 71198.106 ops/s
[info]                  ·gc.alloc.rate:                   1674.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              37012.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44162.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 71345.058 ops/s
[info]                  ·gc.alloc.rate:                   1645.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              36303.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29330.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 70247.646 ops/s
[info]                  ·gc.alloc.rate:                   1629.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              36502.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29729.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 71686.144 ops/s
[info]                  ·gc.alloc.rate:                   1662.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              36488.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43735.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.914 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   71115.362 ±(99.9%) 2054.392 ops/s [Average]
[info]   (min, avg, max) = (70247.646, 71115.362, 71686.144), stdev = 533.519
[info]   CI (99.9%): [69060.970, 73169.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1652.920 ±(99.9%) 65.469 MB/sec [Average]
[info]   (min, avg, max) = (1629.298, 1652.920, 1674.352), stdev = 17.002
[info]   CI (99.9%): [1587.451, 1718.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36576.661 ±(99.9%) 1015.030 B/op [Average]
[info]   (min, avg, max) = (36303.822, 36576.661, 37012.829), stdev = 263.600
[info]   CI (99.9%): [35561.631, 37591.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1595.515 ±(99.9%) 1404.679 MB/sec [Average]
[info]   (min, avg, max) = (1326.986, 1595.515, 1997.782), stdev = 364.791
[info]   CI (99.9%): [190.836, 3000.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35280.946 ±(99.9%) 30480.571 B/op [Average]
[info]   (min, avg, max) = (29330.386, 35280.946, 44162.504), stdev = 7915.707
[info]   CI (99.9%): [4800.376, 65761.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.909 ±(99.9%) 7.409 MB/sec [Average]
[info]   (min, avg, max) = (0.029, 0.909, 4.351), stdev = 1.924
[info]   CI (99.9%): [≈ 0, 8.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.102 ±(99.9%) 163.769 B/op [Average]
[info]   (min, avg, max) = (0.633, 20.102, 96.178), stdev = 42.530
[info]   CI (99.9%): [≈ 0, 183.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.962
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18706.636 ops/s
[info] # Warmup Iteration   2: 71872.601 ops/s
[info] # Warmup Iteration   3: 93206.250 ops/s
[info] # Warmup Iteration   4: 108886.640 ops/s
[info] # Warmup Iteration   5: 109418.365 ops/s
[info] Iteration   1: 106630.029 ops/s
[info]                  ·gc.alloc.rate:               1421.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          20978.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19497.278 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 104887.041 ops/s
[info]                  ·gc.alloc.rate:                   1398.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              20985.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19871.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 105615.418 ops/s
[info]                  ·gc.alloc.rate:                   1409.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              21005.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19784.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 109208.339 ops/s
[info]                  ·gc.alloc.rate:                   1455.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              20979.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19181.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 109457.265 ops/s
[info]                  ·gc.alloc.rate:                   1457.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              20954.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19184.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   107159.618 ±(99.9%) 8009.447 ops/s [Average]
[info]   (min, avg, max) = (104887.041, 107159.618, 109457.265), stdev = 2080.028
[info]   CI (99.9%): [99150.171, 115169.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1428.571 ±(99.9%) 103.140 MB/sec [Average]
[info]   (min, avg, max) = (1398.528, 1428.571, 1457.345), stdev = 26.785
[info]   CI (99.9%): [1325.430, 1531.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20980.794 ±(99.9%) 70.061 B/op [Average]
[info]   (min, avg, max) = (20954.749, 20980.794, 21005.703), stdev = 18.195
[info]   CI (99.9%): [20910.733, 21050.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.680 ±(99.9%) 20.204 MB/sec [Average]
[info]   (min, avg, max) = (1320.964, 1327.680, 1334.240), stdev = 5.247
[info]   CI (99.9%): [1307.476, 1347.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19503.813 ±(99.9%) 1247.852 B/op [Average]
[info]   (min, avg, max) = (19181.093, 19503.813, 19871.586), stdev = 324.063
[info]   CI (99.9%): [18255.961, 20751.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.205 ±(99.9%) 1.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 0.859), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.958 ±(99.9%) 20.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.958, 12.373), stdev = 5.309
[info]   CI (99.9%): [≈ 0, 23.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110553.673 ops/s
[info] # Warmup Iteration   2: 245805.844 ops/s
[info] # Warmup Iteration   3: 260894.859 ops/s
[info] # Warmup Iteration   4: 267956.242 ops/s
[info] # Warmup Iteration   5: 272233.919 ops/s
[info] Iteration   1: 255602.234 ops/s
[info]                  ·gc.alloc.rate:                   424.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              2615.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3150.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 272653.157 ops/s
[info]                  ·gc.alloc.rate:               446.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          2575.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3858.650 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 273609.976 ops/s
[info]                  ·gc.alloc.rate:      433.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 272955.689 ops/s
[info]                  ·gc.alloc.rate:                   448.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              2586.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3854.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 273333.975 ops/s
[info]                  ·gc.alloc.rate:               452.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          2607.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3851.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   269631.006 ±(99.9%) 30230.470 ops/s [Average]
[info]   (min, avg, max) = (255602.234, 269631.006, 273609.976), stdev = 7850.757
[info]   CI (99.9%): [239400.537, 299861.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   441.304 ±(99.9%) 44.518 MB/sec [Average]
[info]   (min, avg, max) = (424.856, 441.304, 452.825), stdev = 11.561
[info]   CI (99.9%): [396.786, 485.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2576.144 ±(99.9%) 182.834 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2576.144, 2615.000), stdev = 47.481
[info]   CI (99.9%): [2393.310, 2758.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.528 ±(99.9%) 1114.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.528, 668.804), stdev = 289.555
[info]   CI (99.9%): [≈ 0, 1618.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2942.868 ±(99.9%) 6442.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2942.868, 3858.650), stdev = 1673.164
[info]   CI (99.9%): [≈ 0, 9385.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.240), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133358.302 ops/s
[info] # Warmup Iteration   2: 260517.272 ops/s
[info] # Warmup Iteration   3: 289688.382 ops/s
[info] # Warmup Iteration   4: 289269.122 ops/s
[info] # Warmup Iteration   5: 289816.252 ops/s
[info] Iteration   1: 289692.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 289168.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 289446.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 285405.608 ops/s
[info]                  ·gc.alloc.rate:      14.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 77.877 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 286376.463 ops/s
[info]                  ·gc.alloc.rate:      0.937 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.148 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   288018.004 ±(99.9%) 7625.993 ops/s [Average]
[info]   (min, avg, max) = (285405.608, 288018.004, 289692.466), stdev = 1980.446
[info]   CI (99.9%): [280392.012, 295643.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.012 ±(99.9%) 23.970 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.012, 14.124), stdev = 6.225
[info]   CI (99.9%): [≈ 0, 26.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.606 ±(99.9%) 132.170 B/op [Average]
[info]   (min, avg, max) = (0.001, 16.606, 77.877), stdev = 34.324
[info]   CI (99.9%): [≈ 0, 148.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10815.129 ops/s
[info] # Warmup Iteration   2: 61672.295 ops/s
[info] # Warmup Iteration   3: 78935.220 ops/s
[info] # Warmup Iteration   4: 86860.686 ops/s
[info] # Warmup Iteration   5: 75797.241 ops/s
[info] Iteration   1: 92661.189 ops/s
[info]                  ·gc.alloc.rate:                   1875.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              31856.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28608.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      12.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         53.000 ms
[info] Iteration   2: 96901.632 ops/s
[info]                  ·gc.alloc.rate:                   1642.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              26665.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27421.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      40.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 654.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   3: 97332.173 ops/s
[info]                  ·gc.alloc.rate:                   1668.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              26973.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27273.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 100978.516 ops/s
[info]                  ·gc.alloc.rate:                   1729.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              26956.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1707.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26620.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 101893.418 ops/s
[info]                  ·gc.alloc.rate:                   1728.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              26680.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1749.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27013.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   97953.385 ±(99.9%) 14171.037 ops/s [Average]
[info]   (min, avg, max) = (92661.189, 97953.385, 101893.418), stdev = 3680.173
[info]   CI (99.9%): [83782.348, 112124.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1728.667 ±(99.9%) 348.414 MB/sec [Average]
[info]   (min, avg, max) = (1642.091, 1728.667, 1875.613), stdev = 90.482
[info]   CI (99.9%): [1380.252, 2077.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   27826.676 ±(99.9%) 8692.782 B/op [Average]
[info]   (min, avg, max) = (26665.982, 27826.676, 31856.524), stdev = 2257.488
[info]   CI (99.9%): [19133.894, 36519.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1703.430 ±(99.9%) 105.652 MB/sec [Average]
[info]   (min, avg, max) = (1684.381, 1703.430, 1749.582), stdev = 27.438
[info]   CI (99.9%): [1597.778, 1809.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27387.457 ±(99.9%) 2877.518 B/op [Average]
[info]   (min, avg, max) = (26620.086, 27387.457, 28608.533), stdev = 747.282
[info]   CI (99.9%): [24509.939, 30264.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   10.514 ±(99.9%) 67.224 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 10.514, 40.295), stdev = 17.458
[info]   CI (99.9%): [≈ 0, 77.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   172.543 ±(99.9%) 1092.627 B/op [Average]
[info]   (min, avg, max) = (0.337, 172.543, 654.351), stdev = 283.752
[info]   CI (99.9%): [≈ 0, 1265.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   122.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (16.000, 24.400, 53.000), stdev = 16.134
[info]   CI (99.9%): [122.000, 122.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9650.655 ops/s
[info] # Warmup Iteration   2: 78254.530 ops/s
[info] # Warmup Iteration   3: 119911.863 ops/s
[info] # Warmup Iteration   4: 129772.633 ops/s
[info] # Warmup Iteration   5: 125472.021 ops/s
[info] Iteration   1: 125674.800 ops/s
[info]                  ·gc.alloc.rate:                   1569.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              19651.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16667.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 126327.259 ops/s
[info]                  ·gc.alloc.rate:                   1606.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              20013.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24889.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 128059.990 ops/s
[info]                  ·gc.alloc.rate:                   1604.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              19713.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16308.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 126520.040 ops/s
[info]                  ·gc.alloc.rate:                   1577.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              19617.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16490.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 127623.731 ops/s
[info]                  ·gc.alloc.rate:                   1601.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              19744.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24505.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   126841.164 ±(99.9%) 3765.750 ops/s [Average]
[info]   (min, avg, max) = (125674.800, 126841.164, 128059.990), stdev = 977.953
[info]   CI (99.9%): [123075.414, 130606.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1591.625 ±(99.9%) 66.234 MB/sec [Average]
[info]   (min, avg, max) = (1569.283, 1591.625, 1606.606), stdev = 17.201
[info]   CI (99.9%): [1525.391, 1657.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19748.054 ±(99.9%) 602.676 B/op [Average]
[info]   (min, avg, max) = (19617.546, 19748.054, 20013.278), stdev = 156.513
[info]   CI (99.9%): [19145.378, 20350.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1593.770 ±(99.9%) 1402.084 MB/sec [Average]
[info]   (min, avg, max) = (1325.599, 1593.770, 1998.017), stdev = 364.117
[info]   CI (99.9%): [191.687, 2995.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19772.114 ±(99.9%) 17327.317 B/op [Average]
[info]   (min, avg, max) = (16308.399, 19772.114, 24889.032), stdev = 4499.849
[info]   CI (99.9%): [2444.797, 37099.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.049 ±(99.9%) 7.988 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 1.049, 4.757), stdev = 2.074
[info]   CI (99.9%): [≈ 0, 9.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.055 ±(99.9%) 99.524 B/op [Average]
[info]   (min, avg, max) = (0.098, 13.055, 59.261), stdev = 25.846
[info]   CI (99.9%): [≈ 0, 112.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.438
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12626.583 ops/s
[info] # Warmup Iteration   2: 100467.507 ops/s
[info] # Warmup Iteration   3: 139521.930 ops/s
[info] # Warmup Iteration   4: 150870.932 ops/s
[info] # Warmup Iteration   5: 140713.110 ops/s
[info] Iteration   1: 145500.866 ops/s
[info]                  ·gc.alloc.rate:                   863.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              9336.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7097.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 147978.436 ops/s
[info]                  ·gc.alloc.rate:                   899.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              9566.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13957.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 147446.584 ops/s
[info]                  ·gc.alloc.rate:               876.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          9353.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7014.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 147865.677 ops/s
[info]                  ·gc.alloc.rate:               882.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          9393.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6994.430 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 146623.672 ops/s
[info]                  ·gc.alloc.rate:               877.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          9414.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7071.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   147083.047 ±(99.9%) 3974.153 ops/s [Average]
[info]   (min, avg, max) = (145500.866, 147083.047, 147978.436), stdev = 1032.075
[info]   CI (99.9%): [143108.894, 151057.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   879.830 ±(99.9%) 50.712 MB/sec [Average]
[info]   (min, avg, max) = (863.220, 879.830, 899.652), stdev = 13.170
[info]   CI (99.9%): [829.118, 930.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9412.918 ±(99.9%) 352.537 B/op [Average]
[info]   (min, avg, max) = (9336.546, 9412.918, 9566.958), stdev = 91.553
[info]   CI (99.9%): [9060.381, 9765.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.429 ±(99.9%) 1128.069 MB/sec [Average]
[info]   (min, avg, max) = (656.219, 788.429, 1312.482), stdev = 292.956
[info]   CI (99.9%): [≈ 0, 1916.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8427.100 ±(99.9%) 11904.653 B/op [Average]
[info]   (min, avg, max) = (6994.430, 8427.100, 13957.020), stdev = 3091.601
[info]   CI (99.9%): [≈ 0, 20331.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 0.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.443), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81778.715 ops/s
[info] # Warmup Iteration   2: 194008.034 ops/s
[info] # Warmup Iteration   3: 224215.577 ops/s
[info] # Warmup Iteration   4: 227413.351 ops/s
[info] # Warmup Iteration   5: 228168.571 ops/s
[info] Iteration   1: 224262.245 ops/s
[info]                  ·gc.alloc.rate:                   154.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1084.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3590.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 226584.526 ops/s
[info]                  ·gc.alloc.rate:      147.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 227702.273 ops/s
[info]                  ·gc.alloc.rate:      148.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 226003.046 ops/s
[info]                  ·gc.alloc.rate:      147.364 MB/sec
[info]                  ·gc.alloc.rate.norm: 1025.791 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 225497.359 ops/s
[info]                  ·gc.alloc.rate:                   159.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3570.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   226009.890 ±(99.9%) 4912.917 ops/s [Average]
[info]   (min, avg, max) = (224262.245, 226009.890, 227702.273), stdev = 1275.869
[info]   CI (99.9%): [221096.973, 230922.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   151.391 ±(99.9%) 20.678 MB/sec [Average]
[info]   (min, avg, max) = (147.364, 151.391, 159.364), stdev = 5.370
[info]   CI (99.9%): [130.713, 172.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1054.102 ±(99.9%) 160.071 B/op [Average]
[info]   (min, avg, max) = (1024.002, 1054.102, 1112.170), stdev = 41.570
[info]   CI (99.9%): [894.031, 1214.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.665 ±(99.9%) 1079.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.665, 511.664), stdev = 280.248
[info]   CI (99.9%): [≈ 0, 1283.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1432.227 ±(99.9%) 7551.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1432.227, 3590.373), stdev = 1961.169
[info]   CI (99.9%): [≈ 0, 8983.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.438), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2127.102 ops/s
[info] # Warmup Iteration   2: 49859.195 ops/s
[info] # Warmup Iteration   3: 84698.757 ops/s
[info] # Warmup Iteration   4: 84005.165 ops/s
[info] # Warmup Iteration   5: 84734.452 ops/s
[info] Iteration   1: 85087.785 ops/s
[info]                  ·gc.alloc.rate:                   2682.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              49621.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49398.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.161 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 84298.424 ops/s
[info]                  ·gc.alloc.rate:                   2636.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              49212.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49878.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.555 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 84410.089 ops/s
[info]                  ·gc.alloc.rate:                   2634.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              49128.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37416.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 85029.884 ops/s
[info]                  ·gc.alloc.rate:               2681.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          49626.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49653.879 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 84473.492 ops/s
[info]                  ·gc.alloc.rate:                   2691.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              50147.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50142.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   84659.935 ±(99.9%) 1424.988 ops/s [Average]
[info]   (min, avg, max) = (84298.424, 84659.935, 85087.785), stdev = 370.065
[info]   CI (99.9%): [83234.947, 86084.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2665.535 ±(99.9%) 105.022 MB/sec [Average]
[info]   (min, avg, max) = (2634.983, 2665.535, 2691.571), stdev = 27.274
[info]   CI (99.9%): [2560.513, 2770.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49547.251 ±(99.9%) 1564.200 B/op [Average]
[info]   (min, avg, max) = (49128.381, 49547.251, 50147.694), stdev = 406.218
[info]   CI (99.9%): [47983.051, 51111.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2544.868 ±(99.9%) 1158.598 MB/sec [Average]
[info]   (min, avg, max) = (2006.835, 2544.868, 2691.266), stdev = 300.884
[info]   CI (99.9%): [1386.270, 3703.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47297.896 ±(99.9%) 21296.175 B/op [Average]
[info]   (min, avg, max) = (37416.761, 47297.896, 50142.002), stdev = 5530.549
[info]   CI (99.9%): [26001.721, 68594.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.333), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.854 ±(99.9%) 9.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.854, 6.161), stdev = 2.470
[info]   CI (99.9%): [≈ 0, 11.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57539.136 ops/s
[info] # Warmup Iteration   2: 196851.852 ops/s
[info] # Warmup Iteration   3: 222643.454 ops/s
[info] # Warmup Iteration   4: 233885.111 ops/s
[info] # Warmup Iteration   5: 231754.692 ops/s
[info] Iteration   1: 228297.240 ops/s
[info]                  ·gc.alloc.rate:                   1481.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              10209.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9189.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 226760.255 ops/s
[info]                  ·gc.alloc.rate:                   1474.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              10229.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9255.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 233358.129 ops/s
[info]                  ·gc.alloc.rate:                   1528.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              10303.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13483.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 237396.985 ops/s
[info]                  ·gc.alloc.rate:                   1540.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              10212.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8819.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 237771.906 ops/s
[info]                  ·gc.alloc.rate:                   1542.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              10208.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8797.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   232716.903 ±(99.9%) 19528.731 ops/s [Average]
[info]   (min, avg, max) = (226760.255, 232716.903, 237771.906), stdev = 5071.550
[info]   CI (99.9%): [213188.172, 252245.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1513.521 ±(99.9%) 127.781 MB/sec [Average]
[info]   (min, avg, max) = (1474.103, 1513.521, 1542.997), stdev = 33.184
[info]   CI (99.9%): [1385.740, 1641.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10232.774 ±(99.9%) 156.444 B/op [Average]
[info]   (min, avg, max) = (10208.932, 10232.774, 10303.827), stdev = 40.628
[info]   CI (99.9%): [10076.330, 10389.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1465.464 ±(99.9%) 1150.210 MB/sec [Average]
[info]   (min, avg, max) = (1329.601, 1465.464, 1999.795), stdev = 298.706
[info]   CI (99.9%): [315.253, 2615.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9908.987 ±(99.9%) 7735.327 B/op [Average]
[info]   (min, avg, max) = (8797.037, 9908.987, 13483.084), stdev = 2008.840
[info]   CI (99.9%): [2173.659, 17644.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.213 ±(99.9%) 7.145 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.213, 4.290), stdev = 1.856
[info]   CI (99.9%): [≈ 0, 8.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.138 ±(99.9%) 48.125 B/op [Average]
[info]   (min, avg, max) = (0.276, 8.138, 28.923), stdev = 12.498
[info]   CI (99.9%): [≈ 0, 56.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 3.962
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:28:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228916.607 ops/s
[info] # Warmup Iteration   2: 675723.147 ops/s
[info] # Warmup Iteration   3: 773639.921 ops/s
[info] # Warmup Iteration   4: 774721.216 ops/s
[info] # Warmup Iteration   5: 769360.880 ops/s
[info] Iteration   1: 770316.612 ops/s
[info]                  ·gc.alloc.rate:               613.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1356.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 769247.680 ops/s
[info]                  ·gc.alloc.rate:               608.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          1244.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1358.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 768822.461 ops/s
[info]                  ·gc.alloc.rate:                   605.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1361.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 747281.178 ops/s
[info]                  ·gc.alloc.rate:               591.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          1245.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1400.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 762611.766 ops/s
[info]                  ·gc.alloc.rate:               610.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          1259.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1374.112 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   763655.939 ±(99.9%) 37111.707 ops/s [Average]
[info]   (min, avg, max) = (747281.178, 763655.939, 770316.612), stdev = 9637.792
[info]   CI (99.9%): [726544.233, 800767.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   605.754 ±(99.9%) 32.909 MB/sec [Average]
[info]   (min, avg, max) = (591.230, 605.754, 613.064), stdev = 8.546
[info]   CI (99.9%): [572.845, 638.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1248.269 ±(99.9%) 29.809 B/op [Average]
[info]   (min, avg, max) = (1240.094, 1248.269, 1259.749), stdev = 7.741
[info]   CI (99.9%): [1218.459, 1278.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.842 ±(99.9%) 3.168 MB/sec [Average]
[info]   (min, avg, max) = (663.929, 664.842, 665.839), stdev = 0.823
[info]   CI (99.9%): [661.674, 668.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1370.218 ±(99.9%) 71.280 B/op [Average]
[info]   (min, avg, max) = (1356.262, 1370.218, 1400.907), stdev = 18.511
[info]   CI (99.9%): [1298.938, 1441.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376405.584 ops/s
[info] # Warmup Iteration   2: 665473.712 ops/s
[info] # Warmup Iteration   3: 685838.652 ops/s
[info] # Warmup Iteration   4: 665286.789 ops/s
[info] # Warmup Iteration   5: 680667.266 ops/s
[info] Iteration   1: 692706.521 ops/s
[info]                  ·gc.alloc.rate:               544.983 MB/sec
[info]                  ·gc.alloc.rate.norm:          1238.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1518.881 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 686687.597 ops/s
[info]                  ·gc.alloc.rate:                   547.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              1254.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 688938.629 ops/s
[info]                  ·gc.alloc.rate:      529.004 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 686917.920 ops/s
[info]                  ·gc.alloc.rate:                   548.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1257.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1533.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 688039.970 ops/s
[info]                  ·gc.alloc.rate:               542.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1530.620 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   688658.128 ±(99.9%) 9385.150 ops/s [Average]
[info]   (min, avg, max) = (686687.597, 688658.128, 692706.521), stdev = 2437.294
[info]   CI (99.9%): [679272.977, 698043.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   542.433 ±(99.9%) 30.485 MB/sec [Average]
[info]   (min, avg, max) = (529.004, 542.433, 548.644), stdev = 7.917
[info]   CI (99.9%): [511.948, 572.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1239.539 ±(99.9%) 75.301 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1239.539, 1257.105), stdev = 19.555
[info]   CI (99.9%): [1164.238, 1314.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.089 ±(99.9%) 1151.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.089, 669.208), stdev = 299.124
[info]   CI (99.9%): [≈ 0, 1686.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1222.959 ±(99.9%) 2632.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1222.959, 1533.142), stdev = 683.679
[info]   CI (99.9%): [≈ 0, 3855.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273234.339 ops/s
[info] # Warmup Iteration   2: 686212.521 ops/s
[info] # Warmup Iteration   3: 681591.886 ops/s
[info] # Warmup Iteration   4: 681080.356 ops/s
[info] # Warmup Iteration   5: 681629.580 ops/s
[info] Iteration   1: 681538.118 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 681505.926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 676593.154 ops/s
[info]                  ·gc.alloc.rate:      7.795 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.132 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 676761.157 ops/s
[info]                  ·gc.alloc.rate:      8.287 MB/sec
[info]                  ·gc.alloc.rate.norm: 19.272 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 680098.683 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   679299.408 ±(99.9%) 9488.129 ops/s [Average]
[info]   (min, avg, max) = (676593.154, 679299.408, 681538.118), stdev = 2464.037
[info]   CI (99.9%): [669811.278, 688787.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.217 ±(99.9%) 16.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.217, 8.287), stdev = 4.407
[info]   CI (99.9%): [≈ 0, 20.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7.481 ±(99.9%) 39.474 B/op [Average]
[info]   (min, avg, max) = (0.001, 7.481, 19.272), stdev = 10.251
[info]   CI (99.9%): [≈ 0, 46.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48550.568 ops/s
[info] # Warmup Iteration   2: 436994.536 ops/s
[info] # Warmup Iteration   3: 567684.369 ops/s
[info] # Warmup Iteration   4: 574935.354 ops/s
[info] # Warmup Iteration   5: 587321.625 ops/s
[info] Iteration   1: 583512.467 ops/s
[info]                  ·gc.alloc.rate:                   1446.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              3903.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3593.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 595732.565 ops/s
[info]                  ·gc.alloc.rate:                   1471.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3525.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 588414.771 ops/s
[info]                  ·gc.alloc.rate:                   1450.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              3877.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3572.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 585448.833 ops/s
[info]                  ·gc.alloc.rate:                   1435.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              3858.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3595.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 604431.607 ops/s
[info]                  ·gc.alloc.rate:                   1506.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              3921.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3478.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   591508.049 ±(99.9%) 33072.788 ops/s [Average]
[info]   (min, avg, max) = (583512.467, 591508.049, 604431.607), stdev = 8588.898
[info]   CI (99.9%): [558435.261, 624580.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1462.059 ±(99.9%) 107.887 MB/sec [Average]
[info]   (min, avg, max) = (1435.145, 1462.059, 1506.169), stdev = 28.018
[info]   CI (99.9%): [1354.172, 1569.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3889.819 ±(99.9%) 92.682 B/op [Average]
[info]   (min, avg, max) = (3858.669, 3889.819, 3921.508), stdev = 24.069
[info]   CI (99.9%): [3797.137, 3982.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1335.186 ±(99.9%) 8.060 MB/sec [Average]
[info]   (min, avg, max) = (1331.910, 1335.186, 1337.383), stdev = 2.093
[info]   CI (99.9%): [1327.126, 1343.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3553.017 ±(99.9%) 193.213 B/op [Average]
[info]   (min, avg, max) = (3478.928, 3553.017, 3595.816), stdev = 50.177
[info]   CI (99.9%): [3359.804, 3746.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.502 ±(99.9%) 3.704 MB/sec [Average]
[info]   (min, avg, max) = (0.009, 0.502, 2.219), stdev = 0.962
[info]   CI (99.9%): [≈ 0, 4.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.342 ±(99.9%) 9.906 B/op [Average]
[info]   (min, avg, max) = (0.025, 1.342, 5.932), stdev = 2.573
[info]   CI (99.9%): [≈ 0, 11.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4471.374 ops/s
[info] # Warmup Iteration   2: 31198.476 ops/s
[info] # Warmup Iteration   3: 40170.099 ops/s
[info] # Warmup Iteration   4: 39212.996 ops/s
[info] # Warmup Iteration   5: 39725.174 ops/s
[info] Iteration   1: 41718.034 ops/s
[info]                  ·gc.alloc.rate:                   1934.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              72975.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1874.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70695.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 42247.753 ops/s
[info]                  ·gc.alloc.rate:                   1949.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              72603.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1886.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70254.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      16.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 611.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 43053.355 ops/s
[info]                  ·gc.alloc.rate:                   1990.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              72758.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1877.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68622.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42968.208 ops/s
[info]                  ·gc.alloc.rate:                   1973.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              72257.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1869.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68463.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43056.008 ops/s
[info]                  ·gc.alloc.rate:                   1985.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              72589.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2503.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91530.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   42608.672 ±(99.9%) 2318.888 ops/s [Average]
[info]   (min, avg, max) = (41718.034, 42608.672, 43056.008), stdev = 602.208
[info]   CI (99.9%): [40289.783, 44927.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1966.787 ±(99.9%) 92.614 MB/sec [Average]
[info]   (min, avg, max) = (1934.511, 1966.787, 1990.775), stdev = 24.051
[info]   CI (99.9%): [1874.174, 2059.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72636.934 ±(99.9%) 1013.207 B/op [Average]
[info]   (min, avg, max) = (72257.340, 72636.934, 72975.616), stdev = 263.127
[info]   CI (99.9%): [71623.727, 73650.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2002.362 ±(99.9%) 1079.895 MB/sec [Average]
[info]   (min, avg, max) = (1869.675, 2002.362, 2503.916), stdev = 280.445
[info]   CI (99.9%): [922.467, 3082.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73913.484 ±(99.9%) 38110.226 B/op [Average]
[info]   (min, avg, max) = (68463.893, 73913.484, 91530.947), stdev = 9897.105
[info]   CI (99.9%): [35803.258, 112023.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.671 ±(99.9%) 27.559 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 3.671, 16.429), stdev = 7.157
[info]   CI (99.9%): [≈ 0, 31.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   136.795 ±(99.9%) 1026.220 B/op [Average]
[info]   (min, avg, max) = (1.525, 136.795, 611.825), stdev = 266.506
[info]   CI (99.9%): [≈ 0, 1163.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.000, 25.000), stdev = 9.772
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.797 ops/s
[info] # Warmup Iteration   2: 229048.758 ops/s
[info] # Warmup Iteration   3: 269722.723 ops/s
[info] # Warmup Iteration   4: 287388.562 ops/s
[info] # Warmup Iteration   5: 300296.150 ops/s
[info] Iteration   1: 300619.867 ops/s
[info]                  ·gc.alloc.rate:               335.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          1753.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2678.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 303338.863 ops/s
[info]                  ·gc.alloc.rate:      314.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 302006.448 ops/s
[info]                  ·gc.alloc.rate:               325.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          1694.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3450.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 303196.161 ops/s
[info]                  ·gc.alloc.rate:      314.462 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 302044.141 ops/s
[info]                  ·gc.alloc.rate:                   329.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              1716.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3450.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   302241.096 ±(99.9%) 4235.479 ops/s [Average]
[info]   (min, avg, max) = (300619.867, 302241.096, 303338.863), stdev = 1099.941
[info]   CI (99.9%): [298005.617, 306476.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   323.717 ±(99.9%) 35.002 MB/sec [Average]
[info]   (min, avg, max) = (314.462, 323.717, 335.021), stdev = 9.090
[info]   CI (99.9%): [288.716, 358.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1685.628 ±(99.9%) 205.644 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1685.628, 1753.774), stdev = 53.405
[info]   CI (99.9%): [1479.985, 1891.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.218 ±(99.9%) 1312.339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.218, 662.227), stdev = 340.810
[info]   CI (99.9%): [≈ 0, 1679.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1915.936 ±(99.9%) 6843.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1915.936, 3450.873), stdev = 1777.182
[info]   CI (99.9%): [≈ 0, 8759.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30662.009 ops/s
[info] # Warmup Iteration   2: 77682.097 ops/s
[info] # Warmup Iteration   3: 125958.224 ops/s
[info] # Warmup Iteration   4: 124339.442 ops/s
[info] # Warmup Iteration   5: 124277.347 ops/s
[info] Iteration   1: 124507.978 ops/s
[info]                  ·gc.alloc.rate:                   1142.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              14443.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8395.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 124304.634 ops/s
[info]                  ·gc.alloc.rate:               1154.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          14614.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16826.675 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 124670.853 ops/s
[info]                  ·gc.alloc.rate:                   1170.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              14772.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16794.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 125005.964 ops/s
[info]                  ·gc.alloc.rate:               1144.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          14407.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8382.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 125326.140 ops/s
[info]                  ·gc.alloc.rate:                   1161.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              14580.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16734.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   124763.114 ±(99.9%) 1563.883 ops/s [Average]
[info]   (min, avg, max) = (124304.634, 124763.114, 125326.140), stdev = 406.136
[info]   CI (99.9%): [123199.230, 126326.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1154.608 ±(99.9%) 44.192 MB/sec [Average]
[info]   (min, avg, max) = (1142.937, 1154.608, 1170.243), stdev = 11.476
[info]   CI (99.9%): [1110.416, 1198.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14563.803 ±(99.9%) 562.117 B/op [Average]
[info]   (min, avg, max) = (14407.824, 14563.803, 14772.666), stdev = 145.980
[info]   CI (99.9%): [14001.687, 15125.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1064.449 ±(99.9%) 1403.802 MB/sec [Average]
[info]   (min, avg, max) = (664.313, 1064.449, 1332.697), stdev = 364.563
[info]   CI (99.9%): [≈ 0, 2468.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13426.696 ±(99.9%) 17708.887 B/op [Average]
[info]   (min, avg, max) = (8382.804, 13426.696, 16826.675), stdev = 4598.942
[info]   CI (99.9%): [≈ 0, 31135.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.558 ±(99.9%) 4.673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.729), stdev = 1.214
[info]   CI (99.9%): [≈ 0, 5.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.011 ±(99.9%) 58.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.011, 34.268), stdev = 15.238
[info]   CI (99.9%): [≈ 0, 65.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188139.064 ops/s
[info] # Warmup Iteration   2: 485957.780 ops/s
[info] # Warmup Iteration   3: 529749.756 ops/s
[info] # Warmup Iteration   4: 530726.509 ops/s
[info] # Warmup Iteration   5: 547222.728 ops/s
[info] Iteration   1: 551189.822 ops/s
[info]                  ·gc.alloc.rate:      358.663 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 547372.595 ops/s
[info]                  ·gc.alloc.rate:               370.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          1066.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1471.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 551347.403 ops/s
[info]                  ·gc.alloc.rate:      358.752 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 550201.300 ops/s
[info]                  ·gc.alloc.rate:               378.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          1082.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1911.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 548834.946 ops/s
[info]                  ·gc.alloc.rate:                   380.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1090.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1915.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   549789.213 ±(99.9%) 6474.966 ops/s [Average]
[info]   (min, avg, max) = (547372.595, 549789.213, 551347.403), stdev = 1681.528
[info]   CI (99.9%): [543314.247, 556264.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   369.360 ±(99.9%) 39.794 MB/sec [Average]
[info]   (min, avg, max) = (358.663, 369.360, 380.178), stdev = 10.334
[info]   CI (99.9%): [329.567, 409.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1057.284 ±(99.9%) 121.689 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1057.284, 1090.213), stdev = 31.602
[info]   CI (99.9%): [935.596, 1178.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.631 ±(99.9%) 1322.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.631, 668.271), stdev = 343.418
[info]   CI (99.9%): [≈ 0, 1692.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1059.680 ±(99.9%) 3789.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1059.680, 1915.980), stdev = 984.079
[info]   CI (99.9%): [≈ 0, 4849.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.179), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3713.538 ops/s
[info] # Warmup Iteration   2: 31631.184 ops/s
[info] # Warmup Iteration   3: 51998.660 ops/s
[info] # Warmup Iteration   4: 46794.867 ops/s
[info] # Warmup Iteration   5: 54318.930 ops/s
[info] Iteration   1: 53828.188 ops/s
[info]                  ·gc.alloc.rate:                   2333.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              68237.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2630.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76907.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.609 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 53538.734 ops/s
[info]                  ·gc.alloc.rate:                   2286.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              67200.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58091.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 53333.538 ops/s
[info]                  ·gc.alloc.rate:                   2280.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              67271.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58511.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 52626.678 ops/s
[info]                  ·gc.alloc.rate:                   2250.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              67295.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79319.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.514 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 54202.586 ops/s
[info]                  ·gc.alloc.rate:                   2326.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              67534.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57868.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   53505.945 ±(99.9%) 2272.418 ops/s [Average]
[info]   (min, avg, max) = (52626.678, 53505.945, 54202.586), stdev = 590.140
[info]   CI (99.9%): [51233.527, 55778.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2295.469 ±(99.9%) 132.416 MB/sec [Average]
[info]   (min, avg, max) = (2250.960, 2295.469, 2333.857), stdev = 34.388
[info]   CI (99.9%): [2163.053, 2427.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67507.682 ±(99.9%) 1643.073 B/op [Average]
[info]   (min, avg, max) = (67200.203, 67507.682, 68237.201), stdev = 426.701
[info]   CI (99.9%): [65864.610, 69150.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2247.268 ±(99.9%) 1387.271 MB/sec [Average]
[info]   (min, avg, max) = (1976.276, 2247.268, 2653.147), stdev = 360.270
[info]   CI (99.9%): [859.997, 3634.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66139.657 ±(99.9%) 42226.723 B/op [Average]
[info]   (min, avg, max) = (57868.475, 66139.657, 79319.553), stdev = 10966.146
[info]   CI (99.9%): [23912.933, 108366.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.522 ±(99.9%) 4.314 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.522, 2.526), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 4.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.591 ±(99.9%) 128.989 B/op [Average]
[info]   (min, avg, max) = (0.604, 15.591, 75.514), stdev = 33.498
[info]   CI (99.9%): [≈ 0, 144.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 9.000), stdev = 1.581
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26135.325 ops/s
[info] # Warmup Iteration   2: 88587.365 ops/s
[info] # Warmup Iteration   3: 89296.515 ops/s
[info] # Warmup Iteration   4: 96768.585 ops/s
[info] # Warmup Iteration   5: 96740.711 ops/s
[info] Iteration   1: 96679.658 ops/s
[info]                  ·gc.alloc.rate:                   766.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              12481.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10854.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 96518.968 ops/s
[info]                  ·gc.alloc.rate:               767.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          12513.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10872.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 94114.551 ops/s
[info]                  ·gc.alloc.rate:               750.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          12547.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11151.508 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 94255.965 ops/s
[info]                  ·gc.alloc.rate:                   755.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              12603.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11134.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 93813.422 ops/s
[info]                  ·gc.alloc.rate:               766.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          12859.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22385.745 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   95076.513 ±(99.9%) 5392.559 ops/s [Average]
[info]   (min, avg, max) = (93813.422, 95076.513, 96679.658), stdev = 1400.430
[info]   CI (99.9%): [89683.954, 100469.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   761.359 ±(99.9%) 30.289 MB/sec [Average]
[info]   (min, avg, max) = (750.671, 761.359, 767.467), stdev = 7.866
[info]   CI (99.9%): [731.070, 791.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12600.955 ±(99.9%) 582.449 B/op [Average]
[info]   (min, avg, max) = (12481.692, 12600.955, 12859.200), stdev = 151.260
[info]   CI (99.9%): [12018.506, 13183.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   800.555 ±(99.9%) 1149.924 MB/sec [Average]
[info]   (min, avg, max) = (666.802, 800.555, 1334.763), stdev = 298.632
[info]   CI (99.9%): [≈ 0, 1950.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13279.946 ±(99.9%) 19608.311 B/op [Average]
[info]   (min, avg, max) = (10854.891, 13279.946, 22385.745), stdev = 5092.216
[info]   CI (99.9%): [≈ 0, 32888.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.137 ±(99.9%) 0.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.348), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.795 ops/s
[info] # Warmup Iteration   2: 91446.200 ops/s
[info] # Warmup Iteration   3: 108403.127 ops/s
[info] # Warmup Iteration   4: 123436.279 ops/s
[info] # Warmup Iteration   5: 119117.955 ops/s
[info] Iteration   1: 119243.357 ops/s
[info]                  ·gc.alloc.rate:                   453.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              5989.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8761.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.550 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 119762.739 ops/s
[info]                  ·gc.alloc.rate:      443.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 122773.407 ops/s
[info]                  ·gc.alloc.rate:               466.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          5980.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8509.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 115912.860 ops/s
[info]                  ·gc.alloc.rate:                   443.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              6015.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9018.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 122813.125 ops/s
[info]                  ·gc.alloc.rate:               472.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          6053.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8511.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   120101.098 ±(99.9%) 11041.327 ops/s [Average]
[info]   (min, avg, max) = (115912.860, 120101.098, 122813.125), stdev = 2867.398
[info]   CI (99.9%): [109059.770, 131142.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   455.890 ±(99.9%) 51.193 MB/sec [Average]
[info]   (min, avg, max) = (443.272, 455.890, 472.388), stdev = 13.295
[info]   CI (99.9%): [404.697, 507.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   5972.686 ±(99.9%) 338.144 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5972.686, 6053.429), stdev = 87.815
[info]   CI (99.9%): [5634.542, 6310.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.314 ±(99.9%) 1143.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.314, 664.490), stdev = 297.014
[info]   CI (99.9%): [≈ 0, 1675.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6960.241 ±(99.9%) 15004.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6960.241, 9018.161), stdev = 3896.568
[info]   CI (99.9%): [≈ 0, 21964.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.550), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32786.104 ops/s
[info] # Warmup Iteration   2: 89568.916 ops/s
[info] # Warmup Iteration   3: 102272.205 ops/s
[info] # Warmup Iteration   4: 98806.813 ops/s
[info] # Warmup Iteration   5: 107711.753 ops/s
[info] Iteration   1: 108436.754 ops/s
[info]                  ·gc.alloc.rate:      401.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 107391.508 ops/s
[info]                  ·gc.alloc.rate:               420.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          6167.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9738.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 108598.749 ops/s
[info]                  ·gc.alloc.rate:      401.954 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 108111.024 ops/s
[info]                  ·gc.alloc.rate:                   418.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              6089.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9673.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 107617.053 ops/s
[info]                  ·gc.alloc.rate:               411.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          6015.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9732.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   108031.018 ±(99.9%) 1994.990 ops/s [Average]
[info]   (min, avg, max) = (107391.508, 108031.018, 108598.749), stdev = 518.093
[info]   CI (99.9%): [106036.028, 110026.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   410.804 ±(99.9%) 34.801 MB/sec [Average]
[info]   (min, avg, max) = (401.362, 410.804, 420.903), stdev = 9.038
[info]   CI (99.9%): [376.003, 445.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5984.014 ±(99.9%) 599.009 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5984.014, 6167.122), stdev = 155.561
[info]   CI (99.9%): [5385.005, 6583.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   398.982 ±(99.9%) 1402.477 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.982, 665.674), stdev = 364.219
[info]   CI (99.9%): [≈ 0, 1801.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5828.877 ±(99.9%) 20489.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5828.877, 9738.507), stdev = 5321.074
[info]   CI (99.9%): [≈ 0, 26318.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.341), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30113.878 ops/s
[info] # Warmup Iteration   2: 112136.185 ops/s
[info] # Warmup Iteration   3: 115815.689 ops/s
[info] # Warmup Iteration   4: 119152.435 ops/s
[info] # Warmup Iteration   5: 120839.508 ops/s
[info] Iteration   1: 121662.729 ops/s
[info]                  ·gc.alloc.rate:      450.194 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 121116.490 ops/s
[info]                  ·gc.alloc.rate:               462.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          6010.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8682.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 116419.811 ops/s
[info]                  ·gc.alloc.rate:               469.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          6351.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9032.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 119075.090 ops/s
[info]                  ·gc.alloc.rate:      440.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 118582.931 ops/s
[info]                  ·gc.alloc.rate:                   464.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8872.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   119371.410 ±(99.9%) 8103.956 ops/s [Average]
[info]   (min, avg, max) = (116419.811, 119371.410, 121662.729), stdev = 2104.572
[info]   CI (99.9%): [111267.454, 127475.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   457.551 ±(99.9%) 45.736 MB/sec [Average]
[info]   (min, avg, max) = (440.668, 457.551, 469.972), stdev = 11.877
[info]   CI (99.9%): [411.816, 503.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6034.157 ±(99.9%) 873.386 B/op [Average]
[info]   (min, avg, max) = (5824.004, 6034.157, 6351.998), stdev = 226.815
[info]   CI (99.9%): [5160.772, 6907.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.053 ±(99.9%) 1409.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.053, 668.525), stdev = 366.110
[info]   CI (99.9%): [≈ 0, 1810.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5317.414 ±(99.9%) 18697.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5317.414, 9032.539), stdev = 4855.696
[info]   CI (99.9%): [≈ 0, 24014.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.076 ±(99.9%) 0.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.380), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54244.802 ops/s
[info] # Warmup Iteration   2: 114925.080 ops/s
[info] # Warmup Iteration   3: 118330.871 ops/s
[info] # Warmup Iteration   4: 123931.321 ops/s
[info] # Warmup Iteration   5: 123223.667 ops/s
[info] Iteration   1: 123165.514 ops/s
[info]                  ·gc.alloc.rate:                   374.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              4783.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6537.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 123922.608 ops/s
[info]                  ·gc.alloc.rate:      360.946 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 123406.793 ops/s
[info]                  ·gc.alloc.rate:               371.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          4732.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8521.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 123808.126 ops/s
[info]                  ·gc.alloc.rate:      360.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 123378.806 ops/s
[info]                  ·gc.alloc.rate:                   377.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              4815.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8523.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   123536.369 ±(99.9%) 1220.997 ops/s [Average]
[info]   (min, avg, max) = (123165.514, 123536.369, 123922.608), stdev = 317.089
[info]   CI (99.9%): [122315.373, 124757.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   368.969 ±(99.9%) 29.832 MB/sec [Average]
[info]   (min, avg, max) = (360.770, 368.969, 377.577), stdev = 7.747
[info]   CI (99.9%): [339.137, 398.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4699.842 ±(99.9%) 422.964 B/op [Average]
[info]   (min, avg, max) = (4584.003, 4699.842, 4815.410), stdev = 109.842
[info]   CI (99.9%): [4276.878, 5122.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   369.653 ±(99.9%) 1322.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.653, 668.296), stdev = 343.449
[info]   CI (99.9%): [≈ 0, 1692.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4716.296 ±(99.9%) 16869.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4716.296, 8523.074), stdev = 4380.960
[info]   CI (99.9%): [≈ 0, 21585.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.213 ±(99.9%) 1.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 0.532), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 6.000), stdev = 2.683
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1285.275 ops/s
[info] # Warmup Iteration   2: 10021.099 ops/s
[info] # Warmup Iteration   3: 8434.955 ops/s
[info] # Warmup Iteration   4: 11211.442 ops/s
[info] # Warmup Iteration   5: 13418.387 ops/s
[info] Iteration   1: 13319.115 ops/s
[info]                  ·gc.alloc.rate:                   2007.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              237163.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1869.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220877.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 12949.278 ops/s
[info]                  ·gc.alloc.rate:                   1988.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              241645.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1891.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229899.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   3: 13314.004 ops/s
[info]                  ·gc.alloc.rate:                   2004.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              236900.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1906.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225234.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 665.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   4: 13347.509 ops/s
[info]                  ·gc.alloc.rate:                   2000.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              235829.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1905.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224717.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1058.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 12677.972 ops/s
[info]                  ·gc.alloc.rate:               2229.834 MB/sec
[info]                  ·gc.alloc.rate.norm:          276752.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2527.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313663.152 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   13121.576 ±(99.9%) 1144.826 ops/s [Average]
[info]   (min, avg, max) = (12677.972, 13121.576, 13347.509), stdev = 297.308
[info]   CI (99.9%): [11976.749, 14266.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   2046.159 ±(99.9%) 396.424 MB/sec [Average]
[info]   (min, avg, max) = (1988.177, 2046.159, 2229.834), stdev = 102.950
[info]   CI (99.9%): [1649.735, 2442.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   245658.304 ±(99.9%) 67481.352 B/op [Average]
[info]   (min, avg, max) = (235829.284, 245658.304, 276752.991), stdev = 17524.693
[info]   CI (99.9%): [178176.952, 313139.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2020.140 ±(99.9%) 1093.021 MB/sec [Average]
[info]   (min, avg, max) = (1869.893, 2020.140, 2527.224), stdev = 283.854
[info]   CI (99.9%): [927.119, 3113.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   242878.422 ±(99.9%) 152867.476 B/op [Average]
[info]   (min, avg, max) = (220877.131, 242878.422, 313663.152), stdev = 39699.198
[info]   CI (99.9%): [90010.946, 395745.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.053 ±(99.9%) 15.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.053, 8.976), stdev = 4.063
[info]   CI (99.9%): [≈ 0, 18.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   360.742 ±(99.9%) 1844.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 360.742, 1058.374), stdev = 478.951
[info]   CI (99.9%): [≈ 0, 2205.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   98.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 19.600, 25.000), stdev = 6.986
[info]   CI (99.9%): [98.000, 98.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1135.366 ops/s
[info] # Warmup Iteration   2: 9974.173 ops/s
[info] # Warmup Iteration   3: 12715.808 ops/s
[info] # Warmup Iteration   4: 13421.119 ops/s
[info] # Warmup Iteration   5: 12754.666 ops/s
[info] Iteration   1: 13443.693 ops/s
[info]                  ·gc.alloc.rate:                   2011.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              235456.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233406.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13597.643 ops/s
[info]                  ·gc.alloc.rate:                   1927.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              223037.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230069.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13637.931 ops/s
[info]                  ·gc.alloc.rate:               1913.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          220874.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152854.877 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13228.510 ops/s
[info]                  ·gc.alloc.rate:                   2108.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              250689.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236587.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12540.510 ops/s
[info]                  ·gc.alloc.rate:                   2018.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              253300.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249541.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   13289.657 ±(99.9%) 1727.259 ops/s [Average]
[info]   (min, avg, max) = (12540.510, 13289.657, 13637.931), stdev = 448.564
[info]   CI (99.9%): [11562.398, 15016.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1995.924 ±(99.9%) 303.073 MB/sec [Average]
[info]   (min, avg, max) = (1913.929, 1995.924, 2108.118), stdev = 78.707
[info]   CI (99.9%): [1692.851, 2298.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   236671.658 ±(99.9%) 58077.962 B/op [Average]
[info]   (min, avg, max) = (220874.043, 236671.658, 253300.406), stdev = 15082.662
[info]   CI (99.9%): [178593.696, 294749.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1856.985 ±(99.9%) 1146.195 MB/sec [Average]
[info]   (min, avg, max) = (1324.526, 1856.985, 1994.081), stdev = 297.663
[info]   CI (99.9%): [710.790, 3003.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   220492.092 ±(99.9%) 148340.328 B/op [Average]
[info]   (min, avg, max) = (152854.877, 220492.092, 249541.526), stdev = 38523.512
[info]   CI (99.9%): [72151.764, 368832.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 4.926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 2.958), stdev = 1.279
[info]   CI (99.9%): [≈ 0, 5.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   87.290 ±(99.9%) 618.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.290, 371.227), stdev = 160.749
[info]   CI (99.9%): [≈ 0, 706.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.438
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114204.292 ops/s
[info] # Warmup Iteration   2: 201699.347 ops/s
[info] # Warmup Iteration   3: 226015.531 ops/s
[info] # Warmup Iteration   4: 225092.686 ops/s
[info] # Warmup Iteration   5: 228265.439 ops/s
[info] Iteration   1: 228231.773 ops/s
[info]                  ·gc.alloc.rate:                   608.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              4193.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4565.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 227873.249 ops/s
[info]                  ·gc.alloc.rate:                   610.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              4213.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4575.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 227833.469 ops/s
[info]                  ·gc.alloc.rate:               612.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          4229.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4576.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 228045.726 ops/s
[info]                  ·gc.alloc.rate:               607.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          4193.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4578.854 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 228461.421 ops/s
[info]                  ·gc.alloc.rate:                   612.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              4218.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4570.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   228089.128 ±(99.9%) 1005.599 ops/s [Average]
[info]   (min, avg, max) = (227833.469, 228089.128, 228461.421), stdev = 261.151
[info]   CI (99.9%): [227083.529, 229094.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   610.194 ±(99.9%) 8.348 MB/sec [Average]
[info]   (min, avg, max) = (607.884, 610.194, 612.427), stdev = 2.168
[info]   CI (99.9%): [601.846, 618.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4209.950 ±(99.9%) 60.544 B/op [Average]
[info]   (min, avg, max) = (4193.905, 4209.950, 4229.648), stdev = 15.723
[info]   CI (99.9%): [4149.406, 4270.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   662.871 ±(99.9%) 2.729 MB/sec [Average]
[info]   (min, avg, max) = (662.084, 662.871, 663.680), stdev = 0.709
[info]   CI (99.9%): [660.142, 665.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4573.382 ±(99.9%) 20.078 B/op [Average]
[info]   (min, avg, max) = (4565.776, 4573.382, 4578.854), stdev = 5.214
[info]   CI (99.9%): [4553.304, 4593.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.090), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473.667 ops/s
[info] # Warmup Iteration   2: 2549.319 ops/s
[info] # Warmup Iteration   3: 5922.504 ops/s
[info] # Warmup Iteration   4: 6590.259 ops/s
[info] # Warmup Iteration   5: 6965.694 ops/s
[info] Iteration   1: 6930.683 ops/s
[info]                  ·gc.alloc.rate:                   1781.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              404423.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452900.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6963.088 ops/s
[info]                  ·gc.alloc.rate:               1765.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          399050.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 301249.185 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6947.522 ops/s
[info]                  ·gc.alloc.rate:                   1771.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              401301.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453819.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6610.181 ops/s
[info]                  ·gc.alloc.rate:                   1670.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              397664.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318442.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6972.691 ops/s
[info]                  ·gc.alloc.rate:               1773.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          400326.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453480.932 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6884.833 ±(99.9%) 594.388 ops/s [Average]
[info]   (min, avg, max) = (6610.181, 6884.833, 6972.691), stdev = 154.361
[info]   CI (99.9%): [6290.445, 7479.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1752.620 ±(99.9%) 178.566 MB/sec [Average]
[info]   (min, avg, max) = (1670.278, 1752.620, 1781.419), stdev = 46.373
[info]   CI (99.9%): [1574.055, 1931.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400553.165 ±(99.9%) 9854.043 B/op [Average]
[info]   (min, avg, max) = (397664.131, 400553.165, 404423.568), stdev = 2559.064
[info]   CI (99.9%): [390699.122, 410407.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1735.711 ±(99.9%) 1407.876 MB/sec [Average]
[info]   (min, avg, max) = (1332.945, 1735.711, 2009.495), stdev = 365.621
[info]   CI (99.9%): [327.835, 3143.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   395978.553 ±(99.9%) 303675.005 B/op [Average]
[info]   (min, avg, max) = (301249.185, 395978.553, 453819.588), stdev = 78863.435
[info]   CI (99.9%): [92303.548, 699653.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.291 ±(99.9%) 1.933 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.166), stdev = 0.502
[info]   CI (99.9%): [≈ 0, 2.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66.644 ±(99.9%) 437.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.644, 264.068), stdev = 113.686
[info]   CI (99.9%): [≈ 0, 504.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6493.449 ops/s
[info] # Warmup Iteration   2: 22489.637 ops/s
[info] # Warmup Iteration   3: 32742.115 ops/s
[info] # Warmup Iteration   4: 36054.939 ops/s
[info] # Warmup Iteration   5: 31349.076 ops/s
[info] Iteration   1: 32727.831 ops/s
[info]                  ·gc.alloc.rate:                   2378.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              114365.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1930.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92805.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 35298.361 ops/s
[info]                  ·gc.alloc.rate:                   2101.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              93717.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2560.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114142.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   3: 34724.227 ops/s
[info]                  ·gc.alloc.rate:                   2066.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              93642.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1936.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87756.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.887 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 35823.613 ops/s
[info]                  ·gc.alloc.rate:                   2133.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              93714.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1946.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85500.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 35587.304 ops/s
[info]                  ·gc.alloc.rate:                   2101.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              92913.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1956.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86524.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   34832.267 ±(99.9%) 4798.038 ops/s [Average]
[info]   (min, avg, max) = (32727.831, 34832.267, 35823.613), stdev = 1246.035
[info]   CI (99.9%): [30034.229, 39630.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2156.342 ±(99.9%) 487.092 MB/sec [Average]
[info]   (min, avg, max) = (2066.063, 2156.342, 2378.508), stdev = 126.496
[info]   CI (99.9%): [1669.250, 2643.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   97670.872 ±(99.9%) 35960.108 B/op [Average]
[info]   (min, avg, max) = (92913.762, 97670.872, 114365.537), stdev = 9338.726
[info]   CI (99.9%): [61710.764, 133630.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2066.007 ±(99.9%) 1064.281 MB/sec [Average]
[info]   (min, avg, max) = (1930.124, 2066.007, 2560.093), stdev = 276.390
[info]   CI (99.9%): [1001.726, 3130.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93345.989 ±(99.9%) 46050.922 B/op [Average]
[info]   (min, avg, max) = (85500.985, 93345.989, 114142.238), stdev = 11959.278
[info]   CI (99.9%): [47295.067, 139396.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.173 ±(99.9%) 7.963 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 2.173, 5.479), stdev = 2.068
[info]   CI (99.9%): [≈ 0, 10.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   98.142 ±(99.9%) 354.519 B/op [Average]
[info]   (min, avg, max) = (1.887, 98.142, 242.282), stdev = 92.067
[info]   CI (99.9%): [≈ 0, 452.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   91.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 18.200, 25.000), stdev = 4.764
[info]   CI (99.9%): [91.000, 91.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6784.070 ops/s
[info] # Warmup Iteration   2: 21261.431 ops/s
[info] # Warmup Iteration   3: 28085.189 ops/s
[info] # Warmup Iteration   4: 36363.986 ops/s
[info] # Warmup Iteration   5: 36962.555 ops/s
[info] Iteration   1: 40011.933 ops/s
[info]                  ·gc.alloc.rate:                   1914.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              75270.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1927.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75792.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 39811.728 ops/s
[info]                  ·gc.alloc.rate:                   1905.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              75307.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1935.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76502.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 37892.665 ops/s
[info]                  ·gc.alloc.rate:                   2251.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              93515.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1945.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80817.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 44891.611 ops/s
[info]                  ·gc.alloc.rate:                   2112.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              74044.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1961.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68752.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.515 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 45388.254 ops/s
[info]                  ·gc.alloc.rate:                   2169.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              75222.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2632.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91259.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.444 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   41599.238 ±(99.9%) 12865.096 ops/s [Average]
[info]   (min, avg, max) = (37892.665, 41599.238, 45388.254), stdev = 3341.025
[info]   CI (99.9%): [28734.142, 54464.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2070.499 ±(99.9%) 597.104 MB/sec [Average]
[info]   (min, avg, max) = (1905.149, 2070.499, 2251.591), stdev = 155.066
[info]   CI (99.9%): [1473.395, 2667.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   78671.797 ±(99.9%) 32017.378 B/op [Average]
[info]   (min, avg, max) = (74044.013, 78671.797, 93515.513), stdev = 8314.812
[info]   CI (99.9%): [46654.419, 110689.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2080.389 ±(99.9%) 1188.837 MB/sec [Average]
[info]   (min, avg, max) = (1927.308, 2080.389, 2632.209), stdev = 308.737
[info]   CI (99.9%): [891.552, 3269.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   78625.154 ±(99.9%) 31894.556 B/op [Average]
[info]   (min, avg, max) = (68752.956, 78625.154, 91259.858), stdev = 8282.915
[info]   CI (99.9%): [46730.598, 110519.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.937 ±(99.9%) 5.475 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.937, 3.426), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   37.907 ±(99.9%) 228.863 B/op [Average]
[info]   (min, avg, max) = (0.823, 37.907, 142.310), stdev = 59.435
[info]   CI (99.9%): [≈ 0, 266.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130906.690 ops/s
[info] # Warmup Iteration   2: 299149.780 ops/s
[info] # Warmup Iteration   3: 317585.377 ops/s
[info] # Warmup Iteration   4: 317484.820 ops/s
[info] # Warmup Iteration   5: 317456.483 ops/s
[info] Iteration   1: 317545.917 ops/s
[info]                  ·gc.alloc.rate:                   719.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              3566.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3318.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 318143.077 ops/s
[info]                  ·gc.alloc.rate:               722.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          3570.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3311.886 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 319508.998 ops/s
[info]                  ·gc.alloc.rate:                   731.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3299.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 312095.641 ops/s
[info]                  ·gc.alloc.rate:               720.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          3635.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3377.919 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 322215.193 ops/s
[info]                  ·gc.alloc.rate:                   730.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              3569.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3273.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   317901.765 ±(99.9%) 14289.572 ops/s [Average]
[info]   (min, avg, max) = (312095.641, 317901.765, 322215.193), stdev = 3710.957
[info]   CI (99.9%): [303612.193, 332191.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   724.867 ±(99.9%) 21.812 MB/sec [Average]
[info]   (min, avg, max) = (719.485, 724.867, 731.185), stdev = 5.665
[info]   CI (99.9%): [703.055, 746.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3588.453 ±(99.9%) 113.737 B/op [Average]
[info]   (min, avg, max) = (3566.072, 3588.453, 3635.058), stdev = 29.537
[info]   CI (99.9%): [3474.715, 3702.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.833 ±(99.9%) 1.102 MB/sec [Average]
[info]   (min, avg, max) = (669.461, 669.833, 670.176), stdev = 0.286
[info]   CI (99.9%): [668.731, 670.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3316.173 ±(99.9%) 148.402 B/op [Average]
[info]   (min, avg, max) = (3273.404, 3316.173, 3377.919), stdev = 38.540
[info]   CI (99.9%): [3167.771, 3464.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.095 ±(99.9%) 0.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.206), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170805.507 ops/s
[info] # Warmup Iteration   2: 333249.529 ops/s
[info] # Warmup Iteration   3: 353911.020 ops/s
[info] # Warmup Iteration   4: 353959.135 ops/s
[info] # Warmup Iteration   5: 353650.251 ops/s
[info] Iteration   1: 353849.756 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 353794.206 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 353723.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 353532.829 ops/s
[info]                  ·gc.alloc.rate:      2.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 13.340 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 354652.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   353910.617 ±(99.9%) 1662.041 ops/s [Average]
[info]   (min, avg, max) = (353532.829, 353910.617, 354652.464), stdev = 431.627
[info]   CI (99.9%): [352248.576, 355572.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.600 ±(99.9%) 5.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.600, 2.997), stdev = 1.340
[info]   CI (99.9%): [≈ 0, 5.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.669 ±(99.9%) 22.970 B/op [Average]
[info]   (min, avg, max) = (0.001, 2.669, 13.340), stdev = 5.965
[info]   CI (99.9%): [≈ 0, 25.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6252.094 ops/s
[info] # Warmup Iteration   2: 22051.827 ops/s
[info] # Warmup Iteration   3: 36529.198 ops/s
[info] # Warmup Iteration   4: 38067.706 ops/s
[info] # Warmup Iteration   5: 38152.597 ops/s
[info] Iteration   1: 40712.945 ops/s
[info]                  ·gc.alloc.rate:                   2473.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              95584.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91626.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      31.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1219.958 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         34.000 ms
[info] Iteration   2: 36834.740 ops/s
[info]                  ·gc.alloc.rate:                   2733.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              116727.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2907.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124155.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      34.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1484.344 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         58.000 ms
[info] Iteration   3: 37436.622 ops/s
[info]                  ·gc.alloc.rate:                   2984.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              125423.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2794.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117429.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      45.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1918.652 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         82.000 ms
[info] Iteration   4: 45396.843 ops/s
[info]                  ·gc.alloc.rate:                   2328.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              80694.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2251.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78014.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      24.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.551 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 45851.754 ops/s
[info]                  ·gc.alloc.rate:                   2338.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              80275.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2266.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77806.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.715 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   41246.581 ±(99.9%) 16415.804 ops/s [Average]
[info]   (min, avg, max) = (36834.740, 41246.581, 45851.754), stdev = 4263.132
[info]   CI (99.9%): [24830.777, 57662.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2571.840 ±(99.9%) 1088.993 MB/sec [Average]
[info]   (min, avg, max) = (2328.411, 2571.840, 2984.922), stdev = 282.808
[info]   CI (99.9%): [1482.846, 3660.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   99741.303 ±(99.9%) 79547.917 B/op [Average]
[info]   (min, avg, max) = (80275.970, 99741.303, 125423.564), stdev = 20658.342
[info]   CI (99.9%): [20193.385, 179289.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2518.233 ±(99.9%) 1192.945 MB/sec [Average]
[info]   (min, avg, max) = (2251.072, 2518.233, 2907.243), stdev = 309.804
[info]   CI (99.9%): [1325.288, 3711.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   97806.512 ±(99.9%) 84126.607 B/op [Average]
[info]   (min, avg, max) = (77806.941, 97806.512, 124155.497), stdev = 21847.413
[info]   CI (99.9%): [13679.905, 181933.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   27.317 ±(99.9%) 65.648 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 27.317, 45.661), stdev = 17.049
[info]   CI (99.9%): [≈ 0, 92.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1095.044 ±(99.9%) 2791.606 B/op [Average]
[info]   (min, avg, max) = (0.715, 1095.044, 1918.652), stdev = 724.971
[info]   CI (99.9%): [≈ 0, 3886.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   198.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 39.600, 82.000), stdev = 30.672
[info]   CI (99.9%): [198.000, 198.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19767.831 ops/s
[info] # Warmup Iteration   2: 144156.472 ops/s
[info] # Warmup Iteration   3: 152335.775 ops/s
[info] # Warmup Iteration   4: 179055.578 ops/s
[info] # Warmup Iteration   5: 184169.928 ops/s
[info] Iteration   1: 176840.757 ops/s
[info]                  ·gc.alloc.rate:                   2470.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              21981.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23640.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 177462.975 ops/s
[info]                  ·gc.alloc.rate:                   2497.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              22150.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2650.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23507.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.898 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 181795.167 ops/s
[info]                  ·gc.alloc.rate:               2529.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          21896.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1986.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17197.334 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 178512.737 ops/s
[info]                  ·gc.alloc.rate:                   2480.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              21872.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17548.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 187637.707 ops/s
[info]                  ·gc.alloc.rate:                   2611.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              21907.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22338.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   180449.869 ±(99.9%) 17131.530 ops/s [Average]
[info]   (min, avg, max) = (176840.757, 180449.869, 187637.707), stdev = 4449.004
[info]   CI (99.9%): [163318.338, 197581.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2517.919 ±(99.9%) 219.491 MB/sec [Average]
[info]   (min, avg, max) = (2470.070, 2517.919, 2611.740), stdev = 57.001
[info]   CI (99.9%): [2298.428, 2737.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21961.515 ±(99.9%) 437.017 B/op [Average]
[info]   (min, avg, max) = (21872.067, 21961.515, 22150.950), stdev = 113.492
[info]   CI (99.9%): [21524.498, 22398.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2389.454 ±(99.9%) 1409.633 MB/sec [Average]
[info]   (min, avg, max) = (1986.418, 2389.454, 2663.169), stdev = 366.077
[info]   CI (99.9%): [979.821, 3799.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20846.453 ±(99.9%) 12373.300 B/op [Average]
[info]   (min, avg, max) = (17197.334, 20846.453, 23640.211), stdev = 3213.307
[info]   CI (99.9%): [8473.153, 33219.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.782 ±(99.9%) 4.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.782, 2.244), stdev = 1.059
[info]   CI (99.9%): [≈ 0, 4.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.939 ±(99.9%) 36.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.939, 19.898), stdev = 9.404
[info]   CI (99.9%): [≈ 0, 43.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.727 ops/s
[info] # Warmup Iteration   2: 442671.617 ops/s
[info] # Warmup Iteration   3: 534719.926 ops/s
[info] # Warmup Iteration   4: 548186.880 ops/s
[info] # Warmup Iteration   5: 531049.539 ops/s
[info] Iteration   1: 532628.721 ops/s
[info]                  ·gc.alloc.rate:               563.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          1666.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1960.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 559607.546 ops/s
[info]                  ·gc.alloc.rate:      580.367 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 562692.006 ops/s
[info]                  ·gc.alloc.rate:                   601.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              1681.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1856.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 559730.900 ops/s
[info]                  ·gc.alloc.rate:                   604.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              1699.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1866.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 560052.756 ops/s
[info]                  ·gc.alloc.rate:               598.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          1680.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1867.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   554942.386 ±(99.9%) 48277.837 ops/s [Average]
[info]   (min, avg, max) = (532628.721, 554942.386, 562692.006), stdev = 12537.601
[info]   CI (99.9%): [506664.549, 603220.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   589.622 ±(99.9%) 65.920 MB/sec [Average]
[info]   (min, avg, max) = (563.938, 589.622, 604.522), stdev = 17.119
[info]   CI (99.9%): [523.703, 655.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1672.026 ±(99.9%) 97.569 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1672.026, 1699.856), stdev = 25.338
[info]   CI (99.9%): [1574.458, 1769.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.142 ±(99.9%) 1143.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.142, 664.607), stdev = 296.918
[info]   CI (99.9%): [≈ 0, 1674.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1510.201 ±(99.9%) 3254.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1510.201, 1960.581), stdev = 845.285
[info]   CI (99.9%): [≈ 0, 4765.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.037), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.103), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78990.171 ops/s
[info] # Warmup Iteration   2: 282972.172 ops/s
[info] # Warmup Iteration   3: 444463.838 ops/s
[info] # Warmup Iteration   4: 529539.143 ops/s
[info] # Warmup Iteration   5: 531781.007 ops/s
[info] Iteration   1: 531086.686 ops/s
[info]                  ·gc.alloc.rate:               540.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          1601.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1960.258 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 527991.838 ops/s
[info]                  ·gc.alloc.rate:      520.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 530848.433 ops/s
[info]                  ·gc.alloc.rate:               542.330 MB/sec
[info]                  ·gc.alloc.rate.norm:          1607.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1961.251 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 530430.168 ops/s
[info]                  ·gc.alloc.rate:               545.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          1618.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1962.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 523543.294 ops/s
[info]                  ·gc.alloc.rate:                   530.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1593.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1990.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   528780.084 ±(99.9%) 12232.472 ops/s [Average]
[info]   (min, avg, max) = (523543.294, 528780.084, 531086.686), stdev = 3176.734
[info]   CI (99.9%): [516547.612, 541012.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   535.838 ±(99.9%) 39.174 MB/sec [Average]
[info]   (min, avg, max) = (520.702, 535.838, 545.423), stdev = 10.173
[info]   CI (99.9%): [496.664, 575.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1594.537 ±(99.9%) 97.939 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1594.537, 1618.305), stdev = 25.434
[info]   CI (99.9%): [1496.598, 1692.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.435 ±(99.9%) 1139.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.435, 662.417), stdev = 295.963
[info]   CI (99.9%): [≈ 0, 1669.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1574.963 ±(99.9%) 3390.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1574.963, 1990.529), stdev = 880.522
[info]   CI (99.9%): [≈ 0, 4965.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264714.182 ops/s
[info] # Warmup Iteration   2: 557181.270 ops/s
[info] # Warmup Iteration   3: 655905.266 ops/s
[info] # Warmup Iteration   4: 660281.142 ops/s
[info] # Warmup Iteration   5: 659082.387 ops/s
[info] Iteration   1: 670540.268 ops/s
[info]                  ·gc.alloc.rate:               451.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          1060.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1569.039 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 691116.359 ops/s
[info]                  ·gc.alloc.rate:      449.747 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 669014.617 ops/s
[info]                  ·gc.alloc.rate:                   481.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              1131.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 687433.915 ops/s
[info]                  ·gc.alloc.rate:                   468.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1072.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1528.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 688657.064 ops/s
[info]                  ·gc.alloc.rate:      448.261 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.307 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   681352.445 ±(99.9%) 41059.536 ops/s [Average]
[info]   (min, avg, max) = (669014.617, 681352.445, 691116.359), stdev = 10663.031
[info]   CI (99.9%): [640292.909, 722411.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   459.928 ±(99.9%) 55.430 MB/sec [Average]
[info]   (min, avg, max) = (448.261, 459.928, 481.101), stdev = 14.395
[info]   CI (99.9%): [404.498, 515.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1062.689 ±(99.9%) 170.189 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1062.689, 1131.498), stdev = 44.198
[info]   CI (99.9%): [892.500, 1232.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.916 ±(99.9%) 1409.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.916, 668.672), stdev = 365.985
[info]   CI (99.9%): [≈ 0, 1810.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   933.960 ±(99.9%) 3283.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 933.960, 1572.645), stdev = 852.764
[info]   CI (99.9%): [≈ 0, 4217.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.773 ±(99.9%) 6.612 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.844), stdev = 1.717
[info]   CI (99.9%): [≈ 0, 7.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.818 ±(99.9%) 15.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.818, 9.042), stdev = 4.038
[info]   CI (99.9%): [≈ 0, 17.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6859.909 ops/s
[info] # Warmup Iteration   2: 79069.049 ops/s
[info] # Warmup Iteration   3: 105920.134 ops/s
[info] # Warmup Iteration   4: 105455.864 ops/s
[info] # Warmup Iteration   5: 110829.276 ops/s
[info] Iteration   1: 109510.059 ops/s
[info]                  ·gc.alloc.rate:                   3731.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              53620.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4002.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57510.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.496 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 113016.934 ops/s
[info]                  ·gc.alloc.rate:                   3861.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              53759.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46564.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 111719.142 ops/s
[info]                  ·gc.alloc.rate:                   3859.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              54356.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4031.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56778.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.587 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 103814.949 ops/s
[info]                  ·gc.alloc.rate:                   3612.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              54771.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51076.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 107855.671 ops/s
[info]                  ·gc.alloc.rate:                   3647.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              53222.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49248.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   109183.351 ±(99.9%) 13859.083 ops/s [Average]
[info]   (min, avg, max) = (103814.949, 109183.351, 113016.934), stdev = 3599.160
[info]   CI (99.9%): [95324.268, 123042.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3742.555 ±(99.9%) 446.566 MB/sec [Average]
[info]   (min, avg, max) = (3612.436, 3742.555, 3861.056), stdev = 115.972
[info]   CI (99.9%): [3295.989, 4189.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53946.280 ±(99.9%) 2369.560 B/op [Average]
[info]   (min, avg, max) = (53222.442, 53946.280, 54771.715), stdev = 615.367
[info]   CI (99.9%): [51576.720, 56315.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3624.515 ±(99.9%) 1381.223 MB/sec [Average]
[info]   (min, avg, max) = (3344.315, 3624.515, 4031.650), stdev = 358.699
[info]   CI (99.9%): [2243.292, 5005.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   52235.619 ±(99.9%) 18354.934 B/op [Average]
[info]   (min, avg, max) = (46564.931, 52235.619, 57510.646), stdev = 4766.718
[info]   CI (99.9%): [33880.685, 70590.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.631 ±(99.9%) 5.034 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.631, 2.969), stdev = 1.307
[info]   CI (99.9%): [≈ 0, 5.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.539 ±(99.9%) 76.399 B/op [Average]
[info]   (min, avg, max) = (0.290, 9.539, 45.020), stdev = 19.841
[info]   CI (99.9%): [≈ 0, 85.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34914.223 ops/s
[info] # Warmup Iteration   2: 230046.070 ops/s
[info] # Warmup Iteration   3: 240658.562 ops/s
[info] # Warmup Iteration   4: 243157.384 ops/s
[info] # Warmup Iteration   5: 249031.594 ops/s
[info] Iteration   1: 251540.613 ops/s
[info]                  ·gc.alloc.rate:                   1783.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              11157.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8356.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 251076.629 ops/s
[info]                  ·gc.alloc.rate:                   1789.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              11219.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12552.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 250087.119 ops/s
[info]                  ·gc.alloc.rate:                   1783.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              11218.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8380.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 247751.321 ops/s
[info]                  ·gc.alloc.rate:                   1780.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              11308.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12682.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 252178.683 ops/s
[info]                  ·gc.alloc.rate:                   1804.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              11263.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12469.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   250526.873 ±(99.9%) 6657.119 ops/s [Average]
[info]   (min, avg, max) = (247751.321, 250526.873, 252178.683), stdev = 1728.833
[info]   CI (99.9%): [243869.754, 257183.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1788.241 ±(99.9%) 37.819 MB/sec [Average]
[info]   (min, avg, max) = (1780.153, 1788.241, 1804.649), stdev = 9.822
[info]   CI (99.9%): [1750.422, 1826.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11233.483 ±(99.9%) 217.187 B/op [Average]
[info]   (min, avg, max) = (11157.266, 11233.483, 11308.436), stdev = 56.403
[info]   CI (99.9%): [11016.296, 11450.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1732.937 ±(99.9%) 1402.618 MB/sec [Average]
[info]   (min, avg, max) = (1331.939, 1732.937, 2002.443), stdev = 364.256
[info]   CI (99.9%): [330.319, 3135.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10888.434 ±(99.9%) 8861.967 B/op [Average]
[info]   (min, avg, max) = (8356.964, 10888.434, 12682.186), stdev = 2301.425
[info]   CI (99.9%): [2026.467, 19750.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.889 ±(99.9%) 7.317 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.889, 4.288), stdev = 1.900
[info]   CI (99.9%): [≈ 0, 8.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.576 ±(99.9%) 45.864 B/op [Average]
[info]   (min, avg, max) = (0.130, 5.576, 26.882), stdev = 11.911
[info]   CI (99.9%): [≈ 0, 51.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.626 ops/s
[info] # Warmup Iteration   2: 1147281.033 ops/s
[info] # Warmup Iteration   3: 1185224.909 ops/s
[info] # Warmup Iteration   4: 1260204.377 ops/s
[info] # Warmup Iteration   5: 1264041.868 ops/s
[info] Iteration   1: 1263031.275 ops/s
[info]                  ·gc.alloc.rate:                   704.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              877.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     827.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1233391.995 ops/s
[info]                  ·gc.alloc.rate:               694.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 847.928 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1255100.389 ops/s
[info]                  ·gc.alloc.rate:                   723.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              907.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1667.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1258581.532 ops/s
[info]                  ·gc.alloc.rate:               709.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 831.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1259276.298 ops/s
[info]                  ·gc.alloc.rate:                   704.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1253876.298 ±(99.9%) 45407.318 ops/s [Average]
[info]   (min, avg, max) = (1233391.995, 1253876.298, 1263031.275), stdev = 11792.136
[info]   CI (99.9%): [1208468.980, 1299283.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   707.415 ±(99.9%) 40.428 MB/sec [Average]
[info]   (min, avg, max) = (694.841, 707.415, 723.632), stdev = 10.499
[info]   CI (99.9%): [666.987, 747.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   887.748 ±(99.9%) 44.730 B/op [Average]
[info]   (min, avg, max) = (877.783, 887.748, 907.396), stdev = 11.616
[info]   CI (99.9%): [843.018, 932.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   797.949 ±(99.9%) 1144.641 MB/sec [Average]
[info]   (min, avg, max) = (664.168, 797.949, 1329.702), stdev = 297.260
[info]   CI (99.9%): [≈ 0, 1942.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1001.277 ±(99.9%) 1434.141 B/op [Average]
[info]   (min, avg, max) = (827.599, 1001.277, 1667.375), stdev = 372.442
[info]   CI (99.9%): [≈ 0, 2435.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371624.352 ops/s
[info] # Warmup Iteration   2: 1103129.352 ops/s
[info] # Warmup Iteration   3: 1238370.624 ops/s
[info] # Warmup Iteration   4: 1233935.803 ops/s
[info] # Warmup Iteration   5: 1231376.910 ops/s
[info] Iteration   1: 1237486.022 ops/s
[info]                  ·gc.alloc.rate:               694.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 843.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1236578.366 ops/s
[info]                  ·gc.alloc.rate:               691.217 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 845.722 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1238262.322 ops/s
[info]                  ·gc.alloc.rate:                   693.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              881.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     844.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1244815.387 ops/s
[info]                  ·gc.alloc.rate:               690.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          872.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840.945 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1245208.638 ops/s
[info]                  ·gc.alloc.rate:               699.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   1240470.147 ±(99.9%) 16138.271 ops/s [Average]
[info]   (min, avg, max) = (1236578.366, 1240470.147, 1245208.638), stdev = 4191.058
[info]   CI (99.9%): [1224331.876, 1256608.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   693.674 ±(99.9%) 13.242 MB/sec [Average]
[info]   (min, avg, max) = (690.276, 693.674, 699.037), stdev = 3.439
[info]   CI (99.9%): [680.432, 706.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   880.060 ±(99.9%) 17.029 B/op [Average]
[info]   (min, avg, max) = (872.687, 880.060, 883.431), stdev = 4.422
[info]   CI (99.9%): [863.031, 897.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.515 ±(99.9%) 3.216 MB/sec [Average]
[info]   (min, avg, max) = (663.142, 664.515, 665.204), stdev = 0.835
[info]   CI (99.9%): [661.298, 667.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   843.067 ±(99.9%) 8.536 B/op [Average]
[info]   (min, avg, max) = (840.674, 843.067, 845.722), stdev = 2.217
[info]   CI (99.9%): [834.531, 851.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407718.474 ops/s
[info] # Warmup Iteration   2: 994399.995 ops/s
[info] # Warmup Iteration   3: 1069974.761 ops/s
[info] # Warmup Iteration   4: 1139502.465 ops/s
[info] # Warmup Iteration   5: 1136943.807 ops/s
[info] Iteration   1: 1133954.371 ops/s
[info]                  ·gc.alloc.rate:               649.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          901.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 925.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1137529.572 ops/s
[info]                  ·gc.alloc.rate:               637.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          881.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1127871.904 ops/s
[info]                  ·gc.alloc.rate:                   634.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              885.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1106105.879 ops/s
[info]                  ·gc.alloc.rate:               627.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          892.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 949.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1134944.732 ops/s
[info]                  ·gc.alloc.rate:                   637.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              883.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1128081.291 ±(99.9%) 49230.768 ops/s [Average]
[info]   (min, avg, max) = (1106105.879, 1128081.291, 1137529.572), stdev = 12785.074
[info]   CI (99.9%): [1078850.523, 1177312.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   637.453 ±(99.9%) 30.500 MB/sec [Average]
[info]   (min, avg, max) = (627.768, 637.453, 649.673), stdev = 7.921
[info]   CI (99.9%): [606.953, 667.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   889.129 ±(99.9%) 30.785 B/op [Average]
[info]   (min, avg, max) = (881.914, 889.129, 901.375), stdev = 7.995
[info]   CI (99.9%): [858.345, 919.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   667.545 ±(99.9%) 2.121 MB/sec [Average]
[info]   (min, avg, max) = (667.006, 667.545, 668.342), stdev = 0.551
[info]   CI (99.9%): [665.425, 669.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   931.180 ±(99.9%) 41.851 B/op [Average]
[info]   (min, avg, max) = (922.587, 931.180, 949.764), stdev = 10.869
[info]   CI (99.9%): [889.329, 973.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.040), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 688742.499 ops/s
[info] # Warmup Iteration   2: 1108391.471 ops/s
[info] # Warmup Iteration   3: 1162415.551 ops/s
[info] # Warmup Iteration   4: 1158340.515 ops/s
[info] # Warmup Iteration   5: 1158326.405 ops/s
[info] Iteration   1: 1161011.001 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1161175.407 ops/s
[info]                  ·gc.alloc.rate:      4.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.514 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1162503.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1140731.294 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1155342.153 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.155 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1156152.619 ±(99.9%) 34849.752 ops/s [Average]
[info]   (min, avg, max) = (1140731.294, 1156152.619, 1162503.239), stdev = 9050.370
[info]   CI (99.9%): [1121302.867, 1191002.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.984 ±(99.9%) 6.789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.984, 4.068), stdev = 1.763
[info]   CI (99.9%): [≈ 0, 7.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.334 ±(99.9%) 9.201 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.334, 5.514), stdev = 2.389
[info]   CI (99.9%): [≈ 0, 10.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3645.529 ops/s
[info] # Warmup Iteration   2: 19332.397 ops/s
[info] # Warmup Iteration   3: 38776.895 ops/s
[info] # Warmup Iteration   4: 39886.721 ops/s
[info] # Warmup Iteration   5: 36999.046 ops/s
[info] Iteration   1: 39640.502 ops/s
[info]                  ·gc.alloc.rate:                   1912.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              75927.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79037.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251.582 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 40595.667 ops/s
[info]                  ·gc.alloc.rate:                   1936.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              75066.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51380.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 39051.564 ops/s
[info]                  ·gc.alloc.rate:                   1882.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              75848.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79870.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.390 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 39018.277 ops/s
[info]                  ·gc.alloc.rate:               1867.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          75293.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1979.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79830.855 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 40625.593 ops/s
[info]                  ·gc.alloc.rate:                   1939.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              75091.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76798.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   39786.320 ±(99.9%) 3050.551 ops/s [Average]
[info]   (min, avg, max) = (39018.277, 39786.320, 40625.593), stdev = 792.218
[info]   CI (99.9%): [36735.769, 42836.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1907.665 ±(99.9%) 123.146 MB/sec [Average]
[info]   (min, avg, max) = (1867.448, 1907.665, 1939.206), stdev = 31.981
[info]   CI (99.9%): [1784.520, 2030.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75445.530 ±(99.9%) 1596.170 B/op [Average]
[info]   (min, avg, max) = (75066.902, 75445.530, 75927.976), stdev = 414.520
[info]   CI (99.9%): [73849.360, 77041.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1852.416 ±(99.9%) 1134.400 MB/sec [Average]
[info]   (min, avg, max) = (1325.468, 1852.416, 1990.774), stdev = 294.600
[info]   CI (99.9%): [718.016, 2986.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73383.580 ±(99.9%) 47607.415 B/op [Average]
[info]   (min, avg, max) = (51380.276, 73383.580, 79870.794), stdev = 12363.494
[info]   CI (99.9%): [25776.166, 120990.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.632 ±(99.9%) 10.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.632, 6.337), stdev = 2.706
[info]   CI (99.9%): [≈ 0, 12.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64.510 ±(99.9%) 413.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.510, 251.582), stdev = 107.449
[info]   CI (99.9%): [≈ 0, 478.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 17.000), stdev = 5.718
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18576.049 ops/s
[info] # Warmup Iteration   2: 90406.070 ops/s
[info] # Warmup Iteration   3: 144247.787 ops/s
[info] # Warmup Iteration   4: 143709.636 ops/s
[info] # Warmup Iteration   5: 141436.896 ops/s
[info] Iteration   1: 146703.504 ops/s
[info]                  ·gc.alloc.rate:                   1851.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              19859.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21333.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 145500.917 ops/s
[info]                  ·gc.alloc.rate:                   1844.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              19943.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21541.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 146582.841 ops/s
[info]                  ·gc.alloc.rate:                   1842.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              19783.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21433.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 146865.757 ops/s
[info]                  ·gc.alloc.rate:                   1825.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              19562.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14299.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 144102.973 ops/s
[info]                  ·gc.alloc.rate:                   1816.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              19843.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21917.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   145951.198 ±(99.9%) 4482.339 ops/s [Average]
[info]   (min, avg, max) = (144102.973, 145951.198, 146865.757), stdev = 1164.049
[info]   CI (99.9%): [141468.859, 150433.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1836.201 ±(99.9%) 55.206 MB/sec [Average]
[info]   (min, avg, max) = (1816.869, 1836.201, 1851.226), stdev = 14.337
[info]   CI (99.9%): [1780.994, 1891.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19798.519 ±(99.9%) 553.529 B/op [Average]
[info]   (min, avg, max) = (19562.745, 19798.519, 19943.676), stdev = 143.750
[info]   CI (99.9%): [19244.991, 20352.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1863.730 ±(99.9%) 1139.574 MB/sec [Average]
[info]   (min, avg, max) = (1334.468, 1863.730, 2006.777), stdev = 295.944
[info]   CI (99.9%): [724.156, 3003.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20105.185 ±(99.9%) 12526.548 B/op [Average]
[info]   (min, avg, max) = (14299.315, 20105.185, 21917.786), stdev = 3253.105
[info]   CI (99.9%): [7578.637, 32631.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.763 ±(99.9%) 2.486 B/op [Average]
[info]   (min, avg, max) = (0.223, 0.763, 1.565), stdev = 0.646
[info]   CI (99.9%): [≈ 0, 3.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52393.334 ops/s
[info] # Warmup Iteration   2: 138959.398 ops/s
[info] # Warmup Iteration   3: 191392.084 ops/s
[info] # Warmup Iteration   4: 194944.840 ops/s
[info] # Warmup Iteration   5: 186787.213 ops/s
[info] Iteration   1: 188283.371 ops/s
[info]                  ·gc.alloc.rate:               1114.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          9315.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5468.207 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 186747.594 ops/s
[info]                  ·gc.alloc.rate:                   1124.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              9477.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11026.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 187607.753 ops/s
[info]                  ·gc.alloc.rate:                   1130.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              9480.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10986.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 194506.732 ops/s
[info]                  ·gc.alloc.rate:                   1164.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              9421.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10596.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 196458.348 ops/s
[info]                  ·gc.alloc.rate:                   1156.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              9261.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5251.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   190720.760 ±(99.9%) 17076.991 ops/s [Average]
[info]   (min, avg, max) = (186747.594, 190720.760, 196458.348), stdev = 4434.840
[info]   CI (99.9%): [173643.769, 207797.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1138.076 ±(99.9%) 82.734 MB/sec [Average]
[info]   (min, avg, max) = (1114.386, 1138.076, 1164.521), stdev = 21.486
[info]   CI (99.9%): [1055.343, 1220.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9391.380 ±(99.9%) 380.039 B/op [Average]
[info]   (min, avg, max) = (9261.531, 9391.380, 9480.946), stdev = 98.695
[info]   CI (99.9%): [9011.341, 9771.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1047.573 ±(99.9%) 1380.083 MB/sec [Average]
[info]   (min, avg, max) = (654.144, 1047.573, 1309.795), stdev = 358.403
[info]   CI (99.9%): [≈ 0, 2427.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8665.802 ±(99.9%) 11643.161 B/op [Average]
[info]   (min, avg, max) = (5251.178, 8665.802, 11026.177), stdev = 3023.692
[info]   CI (99.9%): [≈ 0, 20308.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.548 ±(99.9%) 4.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 2.656), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.392 ±(99.9%) 36.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.392, 21.265), stdev = 9.434
[info]   CI (99.9%): [≈ 0, 40.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.800, 11.000), stdev = 2.588
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90253.356 ops/s
[info] # Warmup Iteration   2: 193984.440 ops/s
[info] # Warmup Iteration   3: 247363.747 ops/s
[info] # Warmup Iteration   4: 254419.996 ops/s
[info] # Warmup Iteration   5: 254812.980 ops/s
[info] Iteration   1: 249820.817 ops/s
[info]                  ·gc.alloc.rate:                   1340.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              8445.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8420.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 253624.109 ops/s
[info]                  ·gc.alloc.rate:               1361.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          8445.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8298.770 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 252923.081 ops/s
[info]                  ·gc.alloc.rate:                   1354.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              8425.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8327.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 255040.295 ops/s
[info]                  ·gc.alloc.rate:                   1357.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              8373.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8254.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 245832.904 ops/s
[info]                  ·gc.alloc.rate:                   1307.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              8366.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8546.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   251448.241 ±(99.9%) 14147.242 ops/s [Average]
[info]   (min, avg, max) = (245832.904, 251448.241, 255040.295), stdev = 3673.994
[info]   CI (99.9%): [237300.999, 265595.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1344.235 ±(99.9%) 85.285 MB/sec [Average]
[info]   (min, avg, max) = (1307.128, 1344.235, 1361.553), stdev = 22.148
[info]   CI (99.9%): [1258.951, 1429.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8411.504 ±(99.9%) 148.117 B/op [Average]
[info]   (min, avg, max) = (8366.797, 8411.504, 8445.506), stdev = 38.465
[info]   CI (99.9%): [8263.387, 8559.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1337.306 ±(99.9%) 5.317 MB/sec [Average]
[info]   (min, avg, max) = (1335.198, 1337.306, 1338.841), stdev = 1.381
[info]   CI (99.9%): [1331.989, 1342.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8369.629 ±(99.9%) 446.971 B/op [Average]
[info]   (min, avg, max) = (8254.400, 8369.629, 8546.470), stdev = 116.077
[info]   CI (99.9%): [7922.658, 8816.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 4.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.960), stdev = 1.257
[info]   CI (99.9%): [≈ 0, 5.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.975 ±(99.9%) 30.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.975, 18.411), stdev = 7.812
[info]   CI (99.9%): [≈ 0, 35.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2182.014 ops/s
[info] # Warmup Iteration   2: 46633.503 ops/s
[info] # Warmup Iteration   3: 96138.053 ops/s
[info] # Warmup Iteration   4: 103270.612 ops/s
[info] # Warmup Iteration   5: 105524.174 ops/s
[info] Iteration   1: 104063.692 ops/s
[info]                  ·gc.alloc.rate:                   3284.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              49659.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50537.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.519 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 103749.616 ops/s
[info]                  ·gc.alloc.rate:                   3282.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              49782.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50816.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.632 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 104043.750 ops/s
[info]                  ·gc.alloc.rate:               3317.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          50180.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40672.088 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 104654.074 ops/s
[info]                  ·gc.alloc.rate:                   3377.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              50786.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50706.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 108895.619 ops/s
[info]                  ·gc.alloc.rate:                   3495.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              50516.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48875.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   105081.350 ±(99.9%) 8307.261 ops/s [Average]
[info]   (min, avg, max) = (103749.616, 105081.350, 108895.619), stdev = 2157.369
[info]   CI (99.9%): [96774.089, 113388.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3351.500 ±(99.9%) 343.162 MB/sec [Average]
[info]   (min, avg, max) = (3282.722, 3351.500, 3495.504), stdev = 89.118
[info]   CI (99.9%): [3008.339, 3694.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50185.099 ±(99.9%) 1836.938 B/op [Average]
[info]   (min, avg, max) = (49659.523, 50185.099, 50786.514), stdev = 477.047
[info]   CI (99.9%): [48348.161, 52022.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3227.231 ±(99.9%) 1159.670 MB/sec [Average]
[info]   (min, avg, max) = (2689.238, 3227.231, 3381.928), stdev = 301.163
[info]   CI (99.9%): [2067.561, 4386.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48321.519 ±(99.9%) 16745.101 B/op [Average]
[info]   (min, avg, max) = (40672.088, 48321.519, 50816.438), stdev = 4348.650
[info]   CI (99.9%): [31576.418, 65066.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.167), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.876 ±(99.9%) 3.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.876, 2.519), stdev = 0.957
[info]   CI (99.9%): [≈ 0, 4.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59476.159 ops/s
[info] # Warmup Iteration   2: 220305.547 ops/s
[info] # Warmup Iteration   3: 220090.806 ops/s
[info] # Warmup Iteration   4: 233667.352 ops/s
[info] # Warmup Iteration   5: 235711.696 ops/s
[info] Iteration   1: 231991.264 ops/s
[info]                  ·gc.alloc.rate:                   1527.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              10359.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13559.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 235110.500 ops/s
[info]                  ·gc.alloc.rate:                   1531.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              10253.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8925.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 233370.821 ops/s
[info]                  ·gc.alloc.rate:                   1504.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              10143.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8984.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 235327.807 ops/s
[info]                  ·gc.alloc.rate:                   1527.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              10212.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8892.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 231309.292 ops/s
[info]                  ·gc.alloc.rate:                   1501.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              10217.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13556.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   233421.937 ±(99.9%) 6940.857 ops/s [Average]
[info]   (min, avg, max) = (231309.292, 233421.937, 235327.807), stdev = 1802.519
[info]   CI (99.9%): [226481.080, 240362.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1518.404 ±(99.9%) 55.203 MB/sec [Average]
[info]   (min, avg, max) = (1501.657, 1518.404, 1531.997), stdev = 14.336
[info]   CI (99.9%): [1463.201, 1573.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10237.459 ±(99.9%) 304.615 B/op [Average]
[info]   (min, avg, max) = (10143.483, 10237.459, 10359.682), stdev = 79.108
[info]   CI (99.9%): [9932.843, 10542.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1597.351 ±(99.9%) 1399.742 MB/sec [Average]
[info]   (min, avg, max) = (1329.807, 1597.351, 1998.759), stdev = 363.508
[info]   CI (99.9%): [197.610, 2997.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10783.855 ±(99.9%) 9752.822 B/op [Average]
[info]   (min, avg, max) = (8892.618, 10783.855, 13559.913), stdev = 2532.777
[info]   CI (99.9%): [1031.032, 20536.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.213 ±(99.9%) 5.390 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 1.213, 3.404), stdev = 1.400
[info]   CI (99.9%): [≈ 0, 6.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.162 ±(99.9%) 36.124 B/op [Average]
[info]   (min, avg, max) = (0.071, 8.162, 22.785), stdev = 9.381
[info]   CI (99.9%): [≈ 0, 44.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 15.000), stdev = 4.775
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245076.474 ops/s
[info] # Warmup Iteration   2: 763820.971 ops/s
[info] # Warmup Iteration   3: 823754.225 ops/s
[info] # Warmup Iteration   4: 807602.919 ops/s
[info] # Warmup Iteration   5: 810300.947 ops/s
[info] Iteration   1: 813734.682 ops/s
[info]                  ·gc.alloc.rate:               637.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          1233.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1277.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 815933.313 ops/s
[info]                  ·gc.alloc.rate:               644.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          1243.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275.960 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 815438.791 ops/s
[info]                  ·gc.alloc.rate:                   648.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 818024.843 ops/s
[info]                  ·gc.alloc.rate:               651.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 818892.556 ops/s
[info]                  ·gc.alloc.rate:               651.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          1251.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1274.450 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   816404.837 ±(99.9%) 7961.264 ops/s [Average]
[info]   (min, avg, max) = (813734.682, 816404.837, 818892.556), stdev = 2067.515
[info]   CI (99.9%): [808443.574, 824366.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   646.643 ±(99.9%) 21.690 MB/sec [Average]
[info]   (min, avg, max) = (637.843, 646.643, 651.387), stdev = 5.633
[info]   CI (99.9%): [624.952, 668.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1246.442 ±(99.9%) 31.084 B/op [Average]
[info]   (min, avg, max) = (1233.681, 1246.442, 1252.987), stdev = 8.072
[info]   CI (99.9%): [1215.358, 1277.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.018 ±(99.9%) 4.508 MB/sec [Average]
[info]   (min, avg, max) = (660.478, 662.018, 663.277), stdev = 1.171
[info]   CI (99.9%): [657.510, 666.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1276.095 ±(99.9%) 4.334 B/op [Average]
[info]   (min, avg, max) = (1274.450, 1276.095, 1277.460), stdev = 1.126
[info]   CI (99.9%): [1271.761, 1280.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 364169.677 ops/s
[info] # Warmup Iteration   2: 542179.700 ops/s
[info] # Warmup Iteration   3: 665568.330 ops/s
[info] # Warmup Iteration   4: 666214.554 ops/s
[info] # Warmup Iteration   5: 645045.255 ops/s
[info] Iteration   1: 665040.086 ops/s
[info]                  ·gc.alloc.rate:      510.431 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 664005.728 ops/s
[info]                  ·gc.alloc.rate:               524.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          1243.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1583.687 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 672591.462 ops/s
[info]                  ·gc.alloc.rate:               529.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1563.436 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 670886.194 ops/s
[info]                  ·gc.alloc.rate:                   533.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1252.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1568.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 667676.294 ops/s
[info]                  ·gc.alloc.rate:               531.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1576.565 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   668039.953 ±(99.9%) 14177.450 ops/s [Average]
[info]   (min, avg, max) = (664005.728, 668039.953, 672591.462), stdev = 3681.839
[info]   CI (99.9%): [653862.503, 682217.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   526.022 ±(99.9%) 35.838 MB/sec [Average]
[info]   (min, avg, max) = (510.431, 526.022, 533.690), stdev = 9.307
[info]   CI (99.9%): [490.184, 561.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1239.064 ±(99.9%) 70.392 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1239.064, 1252.575), stdev = 18.281
[info]   CI (99.9%): [1168.672, 1309.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.883 ±(99.9%) 1151.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.883, 668.930), stdev = 299.009
[info]   CI (99.9%): [≈ 0, 1686.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1258.531 ±(99.9%) 2709.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1258.531, 1583.687), stdev = 703.582
[info]   CI (99.9%): [≈ 0, 3967.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431402.006 ops/s
[info] # Warmup Iteration   2: 603588.004 ops/s
[info] # Warmup Iteration   3: 673978.610 ops/s
[info] # Warmup Iteration   4: 678923.226 ops/s
[info] # Warmup Iteration   5: 685194.227 ops/s
[info] Iteration   1: 685683.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 685933.041 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.945 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 686742.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 686002.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 687492.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   686370.854 ±(99.9%) 2853.077 ops/s [Average]
[info]   (min, avg, max) = (685683.709, 686370.854, 687492.608), stdev = 740.935
[info]   CI (99.9%): [683517.778, 689223.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.389 ±(99.9%) 3.347 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.389, 1.945), stdev = 0.869
[info]   CI (99.9%): [≈ 0, 3.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41874.643 ops/s
[info] # Warmup Iteration   2: 470670.457 ops/s
[info] # Warmup Iteration   3: 558902.234 ops/s
[info] # Warmup Iteration   4: 626638.740 ops/s
[info] # Warmup Iteration   5: 589707.651 ops/s
[info] Iteration   1: 614414.124 ops/s
[info]                  ·gc.alloc.rate:               1530.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          3921.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3414.490 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 615631.900 ops/s
[info]                  ·gc.alloc.rate:               1534.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          3922.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3414.636 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 625200.348 ops/s
[info]                  ·gc.alloc.rate:                   1546.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              3892.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5052.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 613035.517 ops/s
[info]                  ·gc.alloc.rate:                   1514.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3437.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 608346.497 ops/s
[info]                  ·gc.alloc.rate:               1515.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          3918.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3464.836 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   615325.677 ±(99.9%) 23767.210 ops/s [Average]
[info]   (min, avg, max) = (608346.497, 615325.677, 625200.348), stdev = 6172.269
[info]   CI (99.9%): [591558.467, 639092.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1528.300 ±(99.9%) 51.240 MB/sec [Average]
[info]   (min, avg, max) = (1514.911, 1528.300, 1546.101), stdev = 13.307
[info]   CI (99.9%): [1477.060, 1579.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3908.472 ±(99.9%) 65.009 B/op [Average]
[info]   (min, avg, max) = (3888.063, 3908.472, 3922.219), stdev = 16.883
[info]   CI (99.9%): [3843.463, 3973.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.010 ±(99.9%) 1154.009 MB/sec [Average]
[info]   (min, avg, max) = (1332.904, 1471.010, 2007.093), stdev = 299.693
[info]   CI (99.9%): [317.000, 2625.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3756.823 ±(99.9%) 2790.411 B/op [Average]
[info]   (min, avg, max) = (3414.490, 3756.823, 5052.607), stdev = 724.661
[info]   CI (99.9%): [966.411, 6547.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.410 ±(99.9%) 3.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.410, 2.009), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.033 ±(99.9%) 8.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.033, 5.058), stdev = 2.250
[info]   CI (99.9%): [≈ 0, 9.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1274.417 ops/s
[info] # Warmup Iteration   2: 5439.239 ops/s
[info] # Warmup Iteration   3: 10848.368 ops/s
[info] # Warmup Iteration   4: 12490.264 ops/s
[info] # Warmup Iteration   5: 12690.710 ops/s
[info] Iteration   1: 12558.875 ops/s
[info]                  ·gc.alloc.rate:               1572.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          197064.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166623.493 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   2: 11377.846 ops/s
[info]                  ·gc.alloc.rate:                   1892.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              261634.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275620.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.759 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   3: 12424.782 ops/s
[info]                  ·gc.alloc.rate:                   1548.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              196120.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167070.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 12309.518 ops/s
[info]                  ·gc.alloc.rate:                   1560.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              199471.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251923.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 12032.889 ops/s
[info]                  ·gc.alloc.rate:                   1717.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              224578.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172163.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12140.782 ±(99.9%) 1803.690 ops/s [Average]
[info]   (min, avg, max) = (11377.846, 12140.782, 12558.875), stdev = 468.412
[info]   CI (99.9%): [10337.092, 13944.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1658.167 ±(99.9%) 568.996 MB/sec [Average]
[info]   (min, avg, max) = (1548.368, 1658.167, 1892.399), stdev = 147.766
[info]   CI (99.9%): [1089.171, 2227.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   215774.131 ±(99.9%) 108619.755 B/op [Average]
[info]   (min, avg, max) = (196120.720, 215774.131, 261634.930), stdev = 28208.205
[info]   CI (99.9%): [107154.376, 324393.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1585.845 ±(99.9%) 1393.301 MB/sec [Average]
[info]   (min, avg, max) = (1316.492, 1585.845, 1993.560), stdev = 361.836
[info]   CI (99.9%): [192.543, 2979.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   206680.381 ±(99.9%) 203435.884 B/op [Average]
[info]   (min, avg, max) = (166623.493, 206680.381, 275620.952), stdev = 52831.653
[info]   CI (99.9%): [3244.497, 410116.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.498 ±(99.9%) 4.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.498, 2.384), stdev = 1.055
[info]   CI (99.9%): [≈ 0, 4.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   63.166 ±(99.9%) 514.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.166, 301.963), stdev = 133.512
[info]   CI (99.9%): [≈ 0, 577.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   76.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 15.200, 25.000), stdev = 5.718
[info]   CI (99.9%): [76.000, 76.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1081.278 ops/s
[info] # Warmup Iteration   2: 8213.682 ops/s
[info] # Warmup Iteration   3: 11431.377 ops/s
[info] # Warmup Iteration   4: 12013.228 ops/s
[info] # Warmup Iteration   5: 12162.673 ops/s
[info] Iteration   1: 12136.066 ops/s
[info]                  ·gc.alloc.rate:                   1431.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              185580.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171393.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11584.933 ops/s
[info]                  ·gc.alloc.rate:               1517.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          206113.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179815.354 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 12173.958 ops/s
[info]                  ·gc.alloc.rate:                   1428.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              184726.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171547.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12160.288 ops/s
[info]                  ·gc.alloc.rate:                   1421.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              183994.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172075.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11619.425 ops/s
[info]                  ·gc.alloc.rate:                   1682.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              227755.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270895.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11934.934 ±(99.9%) 1171.788 ops/s [Average]
[info]   (min, avg, max) = (11584.933, 11934.934, 12173.958), stdev = 304.310
[info]   CI (99.9%): [10763.146, 13106.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1496.337 ±(99.9%) 427.668 MB/sec [Average]
[info]   (min, avg, max) = (1421.882, 1496.337, 1682.187), stdev = 111.064
[info]   CI (99.9%): [1068.669, 1924.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   197634.162 ±(99.9%) 73998.064 B/op [Average]
[info]   (min, avg, max) = (183994.055, 197634.162, 227755.911), stdev = 19217.062
[info]   CI (99.9%): [123636.099, 271632.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1460.646 ±(99.9%) 1162.812 MB/sec [Average]
[info]   (min, avg, max) = (1321.721, 1460.646, 2000.814), stdev = 301.979
[info]   CI (99.9%): [297.834, 2623.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   193145.585 ±(99.9%) 167915.585 B/op [Average]
[info]   (min, avg, max) = (171393.540, 193145.585, 270895.667), stdev = 43607.144
[info]   CI (99.9%): [25230.000, 361061.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.484 ±(99.9%) 3.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 2.295), stdev = 1.013
[info]   CI (99.9%): [≈ 0, 4.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   62.672 ±(99.9%) 504.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 62.672, 296.689), stdev = 130.889
[info]   CI (99.9%): [≈ 0, 566.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144275.022 ops/s
[info] # Warmup Iteration   2: 287969.712 ops/s
[info] # Warmup Iteration   3: 339141.720 ops/s
[info] # Warmup Iteration   4: 318401.997 ops/s
[info] # Warmup Iteration   5: 346235.535 ops/s
[info] Iteration   1: 349887.044 ops/s
[info]                  ·gc.alloc.rate:                   2347.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              10556.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11994.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 351011.852 ops/s
[info]                  ·gc.alloc.rate:                   2336.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              10474.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8960.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 347189.692 ops/s
[info]                  ·gc.alloc.rate:               2312.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          10480.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9066.991 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 349573.758 ops/s
[info]                  ·gc.alloc.rate:               2367.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          10659.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12032.707 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 350725.588 ops/s
[info]                  ·gc.alloc.rate:                   2362.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              10599.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9019.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   349677.587 ±(99.9%) 5815.252 ops/s [Average]
[info]   (min, avg, max) = (347189.692, 349677.587, 351011.852), stdev = 1510.202
[info]   CI (99.9%): [343862.335, 355492.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2345.146 ±(99.9%) 84.991 MB/sec [Average]
[info]   (min, avg, max) = (2312.232, 2345.146, 2367.494), stdev = 22.072
[info]   CI (99.9%): [2260.154, 2430.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10554.013 ±(99.9%) 304.034 B/op [Average]
[info]   (min, avg, max) = (10474.259, 10554.013, 10659.158), stdev = 78.957
[info]   CI (99.9%): [10249.979, 10858.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2269.818 ±(99.9%) 1406.259 MB/sec [Average]
[info]   (min, avg, max) = (1998.915, 2269.818, 2672.572), stdev = 365.201
[info]   CI (99.9%): [863.559, 3676.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10215.024 ±(99.9%) 6324.476 B/op [Average]
[info]   (min, avg, max) = (8960.809, 10215.024, 12032.707), stdev = 1642.446
[info]   CI (99.9%): [3890.548, 16539.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.103), stdev = 0.489
[info]   CI (99.9%): [≈ 0, 2.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.029 ±(99.9%) 8.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.029, 4.960), stdev = 2.198
[info]   CI (99.9%): [≈ 0, 9.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664.576 ops/s
[info] # Warmup Iteration   2: 4629.430 ops/s
[info] # Warmup Iteration   3: 8504.722 ops/s
[info] # Warmup Iteration   4: 10092.008 ops/s
[info] # Warmup Iteration   5: 9824.721 ops/s
[info] Iteration   1: 10213.343 ops/s
[info]                  ·gc.alloc.rate:                   1747.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              269211.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204870.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9873.168 ops/s
[info]                  ·gc.alloc.rate:                   1714.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              273222.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318129.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9360.404 ops/s
[info]                  ·gc.alloc.rate:                   1713.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              288060.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224006.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9698.274 ops/s
[info]                  ·gc.alloc.rate:                   1702.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              276288.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324301.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 712.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10169.515 ops/s
[info]                  ·gc.alloc.rate:               1766.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          273341.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205653.669 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9862.941 ±(99.9%) 1356.680 ops/s [Average]
[info]   (min, avg, max) = (9360.404, 9862.941, 10213.343), stdev = 352.325
[info]   CI (99.9%): [8506.261, 11219.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1728.907 ±(99.9%) 102.894 MB/sec [Average]
[info]   (min, avg, max) = (1702.705, 1728.907, 1766.429), stdev = 26.721
[info]   CI (99.9%): [1626.012, 1831.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   276024.857 ±(99.9%) 27659.710 B/op [Average]
[info]   (min, avg, max) = (269211.980, 276024.857, 288060.144), stdev = 7183.139
[info]   CI (99.9%): [248365.147, 303684.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1597.259 ±(99.9%) 1407.387 MB/sec [Average]
[info]   (min, avg, max) = (1329.007, 1597.259, 1998.599), stdev = 365.494
[info]   CI (99.9%): [189.871, 3004.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   255392.584 ±(99.9%) 233400.879 B/op [Average]
[info]   (min, avg, max) = (204870.565, 255392.584, 324301.856), stdev = 60613.467
[info]   CI (99.9%): [21991.705, 488793.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.894 ±(99.9%) 7.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.894, 4.388), stdev = 1.953
[info]   CI (99.9%): [≈ 0, 8.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   145.080 ±(99.9%) 1220.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.080, 712.058), stdev = 316.959
[info]   CI (99.9%): [≈ 0, 1365.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5636.413 ops/s
[info] # Warmup Iteration   2: 19550.437 ops/s
[info] # Warmup Iteration   3: 27680.803 ops/s
[info] # Warmup Iteration   4: 27812.163 ops/s
[info] # Warmup Iteration   5: 27463.635 ops/s
[info] Iteration   1: 26836.061 ops/s
[info]                  ·gc.alloc.rate:                   1799.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              105489.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115718.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 429.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 26411.991 ops/s
[info]                  ·gc.alloc.rate:               1702.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          101397.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1312.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78175.812 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 27273.735 ops/s
[info]                  ·gc.alloc.rate:                   1328.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              76625.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75785.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26660.736 ops/s
[info]                  ·gc.alloc.rate:                   1304.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              76981.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77625.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 27439.578 ops/s
[info]                  ·gc.alloc.rate:                   1348.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              77291.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75384.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26924.420 ±(99.9%) 1641.984 ops/s [Average]
[info]   (min, avg, max) = (26411.991, 26924.420, 27439.578), stdev = 426.418
[info]   CI (99.9%): [25282.437, 28566.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1496.382 ±(99.9%) 906.040 MB/sec [Average]
[info]   (min, avg, max) = (1304.200, 1496.382, 1799.468), stdev = 235.296
[info]   CI (99.9%): [590.342, 2402.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87556.993 ±(99.9%) 56128.040 B/op [Average]
[info]   (min, avg, max) = (76625.131, 87556.993, 105489.431), stdev = 14576.274
[info]   CI (99.9%): [31428.953, 143685.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1445.935 ±(99.9%) 1136.614 MB/sec [Average]
[info]   (min, avg, max) = (1312.309, 1445.935, 1973.957), stdev = 295.175
[info]   CI (99.9%): [309.321, 2582.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   84537.829 ±(99.9%) 67272.910 B/op [Average]
[info]   (min, avg, max) = (75384.071, 84537.829, 115718.410), stdev = 17470.561
[info]   CI (99.9%): [17264.918, 151810.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.861 ±(99.9%) 10.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.861, 7.335), stdev = 2.698
[info]   CI (99.9%): [≈ 0, 13.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   166.899 ±(99.9%) 609.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 166.899, 429.971), stdev = 158.399
[info]   CI (99.9%): [≈ 0, 776.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 18.000), stdev = 5.128
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5789.752 ops/s
[info] # Warmup Iteration   2: 20098.247 ops/s
[info] # Warmup Iteration   3: 30443.400 ops/s
[info] # Warmup Iteration   4: 30178.783 ops/s
[info] # Warmup Iteration   5: 27715.428 ops/s
[info] Iteration   1: 27826.076 ops/s
[info]                  ·gc.alloc.rate:                   1357.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              76780.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74771.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 31763.252 ops/s
[info]                  ·gc.alloc.rate:                   1208.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              59881.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65205.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 32121.911 ops/s
[info]                  ·gc.alloc.rate:               1200.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          58820.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32051.971 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 31509.903 ops/s
[info]                  ·gc.alloc.rate:                   1192.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              59578.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65348.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 32166.289 ops/s
[info]                  ·gc.alloc.rate:                   1228.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              60084.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64077.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   31077.486 ±(99.9%) 7075.458 ops/s [Average]
[info]   (min, avg, max) = (27826.076, 31077.486, 32166.289), stdev = 1837.474
[info]   CI (99.9%): [24002.028, 38152.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1237.589 ±(99.9%) 263.107 MB/sec [Average]
[info]   (min, avg, max) = (1192.789, 1237.589, 1357.530), stdev = 68.328
[info]   CI (99.9%): [974.482, 1500.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   63029.230 ±(99.9%) 29659.113 B/op [Average]
[info]   (min, avg, max) = (58820.899, 63029.230, 76780.891), stdev = 7702.377
[info]   CI (99.9%): [33370.117, 92688.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1182.115 ±(99.9%) 1136.320 MB/sec [Average]
[info]   (min, avg, max) = (654.315, 1182.115, 1322.008), stdev = 295.099
[info]   CI (99.9%): [45.795, 2318.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60291.201 ±(99.9%) 63014.578 B/op [Average]
[info]   (min, avg, max) = (32051.971, 60291.201, 74771.796), stdev = 16364.686
[info]   CI (99.9%): [≈ 0, 123305.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.066 ±(99.9%) 7.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.511), stdev = 1.939
[info]   CI (99.9%): [≈ 0, 8.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.478 ±(99.9%) 372.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.478, 225.322), stdev = 96.725
[info]   CI (99.9%): [≈ 0, 425.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 14.000), stdev = 3.194
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356289.540 ops/s
[info] # Warmup Iteration   2: 782250.460 ops/s
[info] # Warmup Iteration   3: 804420.768 ops/s
[info] # Warmup Iteration   4: 810362.937 ops/s
[info] # Warmup Iteration   5: 801379.015 ops/s
[info] Iteration   1: 801797.854 ops/s
[info]                  ·gc.alloc.rate:               1487.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          2920.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2632.139 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 802544.741 ops/s
[info]                  ·gc.alloc.rate:               1500.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          2943.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2631.107 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 790977.361 ops/s
[info]                  ·gc.alloc.rate:                   1466.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              2918.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2670.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 759025.752 ops/s
[info]                  ·gc.alloc.rate:                   1434.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              2972.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4155.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 793465.343 ops/s
[info]                  ·gc.alloc.rate:                   1470.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              2916.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2650.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   789562.210 ±(99.9%) 68557.940 ops/s [Average]
[info]   (min, avg, max) = (759025.752, 789562.210, 802544.741), stdev = 17804.279
[info]   CI (99.9%): [721004.270, 858120.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1472.035 ±(99.9%) 96.906 MB/sec [Average]
[info]   (min, avg, max) = (1434.397, 1472.035, 1500.920), stdev = 25.166
[info]   CI (99.9%): [1375.129, 1568.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2934.163 ±(99.9%) 92.529 B/op [Average]
[info]   (min, avg, max) = (2916.563, 2934.163, 2972.599), stdev = 24.029
[info]   CI (99.9%): [2841.634, 3026.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1473.285 ±(99.9%) 1144.572 MB/sec [Average]
[info]   (min, avg, max) = (1336.226, 1473.285, 2004.990), stdev = 297.242
[info]   CI (99.9%): [328.713, 2617.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2947.957 ±(99.9%) 2599.170 B/op [Average]
[info]   (min, avg, max) = (2631.107, 2947.957, 4155.078), stdev = 674.996
[info]   CI (99.9%): [348.787, 5547.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.802 ±(99.9%) 6.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.802, 3.971), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.597 ±(99.9%) 13.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.597, 7.900), stdev = 3.524
[info]   CI (99.9%): [≈ 0, 15.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 501945.389 ops/s
[info] # Warmup Iteration   2: 876032.634 ops/s
[info] # Warmup Iteration   3: 902977.042 ops/s
[info] # Warmup Iteration   4: 886809.528 ops/s
[info] # Warmup Iteration   5: 908281.470 ops/s
[info] Iteration   1: 920834.628 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 890484.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 910939.439 ops/s
[info]                  ·gc.alloc.rate:      0.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.219 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 919710.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 896009.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   907595.621 ±(99.9%) 53087.529 ops/s [Average]
[info]   (min, avg, max) = (890484.044, 907595.621, 920834.628), stdev = 13786.663
[info]   CI (99.9%): [854508.092, 960683.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.026 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.026, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.044 ±(99.9%) 0.377 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.044, 0.219), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5867.401 ops/s
[info] # Warmup Iteration   2: 16330.419 ops/s
[info] # Warmup Iteration   3: 26212.006 ops/s
[info] # Warmup Iteration   4: 31705.084 ops/s
[info] # Warmup Iteration   5: 31341.893 ops/s
[info] Iteration   1: 29976.109 ops/s
[info]                  ·gc.alloc.rate:                   1545.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              81086.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69284.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 31293.789 ops/s
[info]                  ·gc.alloc.rate:                   1312.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              65999.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66132.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 31222.313 ops/s
[info]                  ·gc.alloc.rate:                   1305.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              65805.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66253.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 30749.628 ops/s
[info]                  ·gc.alloc.rate:                   1285.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              65794.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67304.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 30083.142 ops/s
[info]                  ·gc.alloc.rate:                   1268.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              66364.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68827.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   30664.996 ±(99.9%) 2378.583 ops/s [Average]
[info]   (min, avg, max) = (29976.109, 30664.996, 31293.789), stdev = 617.711
[info]   CI (99.9%): [28286.413, 33043.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1343.445 ±(99.9%) 438.917 MB/sec [Average]
[info]   (min, avg, max) = (1268.807, 1343.445, 1545.031), stdev = 113.985
[info]   CI (99.9%): [904.527, 1782.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   69010.024 ±(99.9%) 26010.273 B/op [Average]
[info]   (min, avg, max) = (65794.510, 69010.024, 81086.302), stdev = 6754.785
[info]   CI (99.9%): [42999.751, 95020.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1316.098 ±(99.9%) 8.963 MB/sec [Average]
[info]   (min, avg, max) = (1314.499, 1316.098, 1320.164), stdev = 2.328
[info]   CI (99.9%): [1307.136, 1325.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67560.631 ±(99.9%) 5576.454 B/op [Average]
[info]   (min, avg, max) = (66132.753, 67560.631, 69284.849), stdev = 1448.187
[info]   CI (99.9%): [61984.177, 73137.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.151 ±(99.9%) 6.647 MB/sec [Average]
[info]   (min, avg, max) = (0.109, 1.151, 4.172), stdev = 1.726
[info]   CI (99.9%): [≈ 0, 7.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   58.057 ±(99.9%) 333.867 B/op [Average]
[info]   (min, avg, max) = (5.708, 58.057, 209.811), stdev = 86.704
[info]   CI (99.9%): [≈ 0, 391.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.800, 16.000), stdev = 4.324
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3075.357 ops/s
[info] # Warmup Iteration   2: 22418.066 ops/s
[info] # Warmup Iteration   3: 42808.991 ops/s
[info] # Warmup Iteration   4: 47435.797 ops/s
[info] # Warmup Iteration   5: 48693.675 ops/s
[info] Iteration   1: 41033.425 ops/s
[info]                  ·gc.alloc.rate:                   2319.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              88947.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2629.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100871.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326.852 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 44493.810 ops/s
[info]                  ·gc.alloc.rate:                   1869.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69865.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 45047.502 ops/s
[info]                  ·gc.alloc.rate:                   1874.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              65461.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46048.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43935.567 ops/s
[info]                  ·gc.alloc.rate:                   1850.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              66285.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70933.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.474 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 45208.093 ops/s
[info]                  ·gc.alloc.rate:               1897.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          66039.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1987.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69186.954 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   43943.679 ±(99.9%) 6554.429 ops/s [Average]
[info]   (min, avg, max) = (41033.425, 43943.679, 45208.093), stdev = 1702.164
[info]   CI (99.9%): [37389.250, 50498.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1962.119 ±(99.9%) 771.042 MB/sec [Average]
[info]   (min, avg, max) = (1850.459, 1962.119, 2319.087), stdev = 200.237
[info]   CI (99.9%): [1191.078, 2733.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70567.780 ±(99.9%) 39580.928 B/op [Average]
[info]   (min, avg, max) = (65461.924, 70567.780, 88947.208), stdev = 10279.041
[info]   CI (99.9%): [30986.851, 110148.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1978.436 ±(99.9%) 1785.637 MB/sec [Average]
[info]   (min, avg, max) = (1318.477, 1978.436, 2629.992), stdev = 463.724
[info]   CI (99.9%): [192.800, 3764.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71381.253 ±(99.9%) 75032.472 B/op [Average]
[info]   (min, avg, max) = (46048.157, 71381.253, 100871.785), stdev = 19485.695
[info]   CI (99.9%): [≈ 0, 146413.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.528 ±(99.9%) 14.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.528, 8.522), stdev = 3.741
[info]   CI (99.9%): [≈ 0, 16.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   94.487 ±(99.9%) 549.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.487, 326.852), stdev = 142.584
[info]   CI (99.9%): [≈ 0, 643.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 17.000), stdev = 5.848
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2736.836 ops/s
[info] # Warmup Iteration   2: 26252.594 ops/s
[info] # Warmup Iteration   3: 43328.640 ops/s
[info] # Warmup Iteration   4: 51934.027 ops/s
[info] # Warmup Iteration   5: 38258.250 ops/s
[info] Iteration   1: 46002.419 ops/s
[info]                  ·gc.alloc.rate:                   1598.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              54680.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45331.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45951.141 ops/s
[info]                  ·gc.alloc.rate:                   1616.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              55359.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67945.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.426 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 46058.294 ops/s
[info]                  ·gc.alloc.rate:               1592.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          54412.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45161.723 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45940.858 ops/s
[info]                  ·gc.alloc.rate:               1587.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          54375.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45299.542 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 45864.597 ops/s
[info]                  ·gc.alloc.rate:                   1593.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              54657.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68186.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.429 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   45963.462 ±(99.9%) 278.659 ops/s [Average]
[info]   (min, avg, max) = (45864.597, 45963.462, 46058.294), stdev = 72.367
[info]   CI (99.9%): [45684.803, 46242.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1597.681 ±(99.9%) 43.916 MB/sec [Average]
[info]   (min, avg, max) = (1587.445, 1597.681, 1616.872), stdev = 11.405
[info]   CI (99.9%): [1553.765, 1641.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54697.310 ±(99.9%) 1522.445 B/op [Average]
[info]   (min, avg, max) = (54375.889, 54697.310, 55359.966), stdev = 395.374
[info]   CI (99.9%): [53174.865, 56219.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1588.250 ±(99.9%) 1397.720 MB/sec [Average]
[info]   (min, avg, max) = (1321.916, 1588.250, 1987.285), stdev = 362.983
[info]   CI (99.9%): [190.530, 2985.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   54384.992 ±(99.9%) 48092.522 B/op [Average]
[info]   (min, avg, max) = (45161.723, 54384.992, 68186.127), stdev = 12489.475
[info]   CI (99.9%): [6292.470, 102477.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.979 ±(99.9%) 8.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.979, 4.809), stdev = 2.142
[info]   CI (99.9%): [≈ 0, 9.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   33.475 ±(99.9%) 282.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.475, 164.522), stdev = 73.261
[info]   CI (99.9%): [≈ 0, 315.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264101.399 ops/s
[info] # Warmup Iteration   2: 520670.113 ops/s
[info] # Warmup Iteration   3: 552021.135 ops/s
[info] # Warmup Iteration   4: 550033.327 ops/s
[info] # Warmup Iteration   5: 552719.354 ops/s
[info] Iteration   1: 553201.513 ops/s
[info]                  ·gc.alloc.rate:               1477.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          4204.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3801.860 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 553601.793 ops/s
[info]                  ·gc.alloc.rate:                   1496.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              4254.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5702.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 550116.524 ops/s
[info]                  ·gc.alloc.rate:                   1480.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              4234.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3823.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 548759.295 ops/s
[info]                  ·gc.alloc.rate:                   1461.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              4191.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3826.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 558036.027 ops/s
[info]                  ·gc.alloc.rate:               1493.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          4211.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3761.172 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   552743.030 ±(99.9%) 13847.894 ops/s [Average]
[info]   (min, avg, max) = (548759.295, 552743.030, 558036.027), stdev = 3596.254
[info]   CI (99.9%): [538895.136, 566590.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1481.987 ±(99.9%) 53.481 MB/sec [Average]
[info]   (min, avg, max) = (1461.857, 1481.987, 1496.848), stdev = 13.889
[info]   CI (99.9%): [1428.507, 1535.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4219.260 ±(99.9%) 97.525 B/op [Average]
[info]   (min, avg, max) = (4191.626, 4219.260, 4254.883), stdev = 25.327
[info]   CI (99.9%): [4121.735, 4316.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1469.428 ±(99.9%) 1155.124 MB/sec [Average]
[info]   (min, avg, max) = (1333.664, 1469.428, 2006.048), stdev = 299.982
[info]   CI (99.9%): [314.304, 2624.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4183.054 ±(99.9%) 3271.863 B/op [Average]
[info]   (min, avg, max) = (3761.172, 4183.054, 5702.313), stdev = 849.692
[info]   CI (99.9%): [911.191, 7454.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.806 ±(99.9%) 4.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 2.907), stdev = 1.258
[info]   CI (99.9%): [≈ 0, 5.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.296 ±(99.9%) 13.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.296, 8.263), stdev = 3.577
[info]   CI (99.9%): [≈ 0, 16.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 12.000), stdev = 4.037
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1247.252 ops/s
[info] # Warmup Iteration   2: 12302.317 ops/s
[info] # Warmup Iteration   3: 18568.234 ops/s
[info] # Warmup Iteration   4: 21665.127 ops/s
[info] # Warmup Iteration   5: 21960.546 ops/s
[info] Iteration   1: 22367.146 ops/s
[info]                  ·gc.alloc.rate:                   2109.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              148459.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138647.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 20470.217 ops/s
[info]                  ·gc.alloc.rate:                   2227.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              171246.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2634.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202565.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 469.932 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 21839.193 ops/s
[info]                  ·gc.alloc.rate:                   1977.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              142518.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142605.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21931.443 ops/s
[info]                  ·gc.alloc.rate:                   1986.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              142539.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142383.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22441.538 ops/s
[info]                  ·gc.alloc.rate:                   2031.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              142406.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139615.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   21809.907 ±(99.9%) 3056.276 ops/s [Average]
[info]   (min, avg, max) = (20470.217, 21809.907, 22441.538), stdev = 793.705
[info]   CI (99.9%): [18753.631, 24866.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2066.587 ±(99.9%) 400.854 MB/sec [Average]
[info]   (min, avg, max) = (1977.666, 2066.587, 2227.575), stdev = 104.100
[info]   CI (99.9%): [1665.733, 2467.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   149434.061 ±(99.9%) 47997.680 B/op [Average]
[info]   (min, avg, max) = (142406.152, 149434.061, 171246.578), stdev = 12464.845
[info]   CI (99.9%): [101436.381, 197431.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2112.023 ±(99.9%) 1126.072 MB/sec [Average]
[info]   (min, avg, max) = (1970.388, 2112.023, 2634.968), stdev = 292.437
[info]   CI (99.9%): [985.951, 3238.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   153163.550 ±(99.9%) 106546.377 B/op [Average]
[info]   (min, avg, max) = (138647.705, 153163.550, 202565.236), stdev = 27669.756
[info]   CI (99.9%): [46617.173, 259709.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.496 ±(99.9%) 10.111 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.496, 6.113), stdev = 2.626
[info]   CI (99.9%): [≈ 0, 11.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   113.657 ±(99.9%) 778.615 B/op [Average]
[info]   (min, avg, max) = (2.920, 113.657, 469.932), stdev = 202.204
[info]   CI (99.9%): [≈ 0, 892.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16875.252 ops/s
[info] # Warmup Iteration   2: 64632.664 ops/s
[info] # Warmup Iteration   3: 68628.897 ops/s
[info] # Warmup Iteration   4: 68671.509 ops/s
[info] # Warmup Iteration   5: 73051.021 ops/s
[info] Iteration   1: 72977.914 ops/s
[info]                  ·gc.alloc.rate:                   1948.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              42019.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42997.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 73511.355 ops/s
[info]                  ·gc.alloc.rate:                   1930.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              41326.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28496.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 71371.316 ops/s
[info]                  ·gc.alloc.rate:                   1877.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              41392.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44026.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 71544.305 ops/s
[info]                  ·gc.alloc.rate:                   1880.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              41363.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43917.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 73459.226 ops/s
[info]                  ·gc.alloc.rate:                   1954.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              41861.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42731.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   72572.823 ±(99.9%) 4007.315 ops/s [Average]
[info]   (min, avg, max) = (71371.316, 72572.823, 73511.355), stdev = 1040.687
[info]   CI (99.9%): [68565.508, 76580.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1918.249 ±(99.9%) 142.422 MB/sec [Average]
[info]   (min, avg, max) = (1877.453, 1918.249, 1954.285), stdev = 36.986
[info]   CI (99.9%): [1775.827, 2060.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41592.817 ±(99.9%) 1244.953 B/op [Average]
[info]   (min, avg, max) = (41326.542, 41592.817, 42019.604), stdev = 323.310
[info]   CI (99.9%): [40347.864, 42837.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1862.652 ±(99.9%) 1143.635 MB/sec [Average]
[info]   (min, avg, max) = (1331.369, 1862.652, 1996.901), stdev = 296.998
[info]   CI (99.9%): [719.017, 3006.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40433.647 ±(99.9%) 25787.906 B/op [Average]
[info]   (min, avg, max) = (28496.006, 40433.647, 44026.090), stdev = 6697.037
[info]   CI (99.9%): [14645.741, 66221.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.996 ±(99.9%) 4.787 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.996, 3.083), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.771 ±(99.9%) 105.326 B/op [Average]
[info]   (min, avg, max) = (0.446, 21.771, 67.822), stdev = 27.353
[info]   CI (99.9%): [≈ 0, 127.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 12.000), stdev = 3.130
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53478.577 ops/s
[info] # Warmup Iteration   2: 182981.828 ops/s
[info] # Warmup Iteration   3: 188848.476 ops/s
[info] # Warmup Iteration   4: 204372.539 ops/s
[info] # Warmup Iteration   5: 205685.786 ops/s
[info] Iteration   1: 206694.960 ops/s
[info]                  ·gc.alloc.rate:                   1625.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              12377.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15163.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 208718.296 ops/s
[info]                  ·gc.alloc.rate:               1612.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          12160.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10028.944 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 207922.703 ops/s
[info]                  ·gc.alloc.rate:                   1604.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              12143.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10084.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 209422.377 ops/s
[info]                  ·gc.alloc.rate:                   1640.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              12333.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15058.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 209633.354 ops/s
[info]                  ·gc.alloc.rate:                   1616.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              12130.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10057.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   208478.338 ±(99.9%) 4625.591 ops/s [Average]
[info]   (min, avg, max) = (206694.960, 208478.338, 209633.354), stdev = 1201.251
[info]   CI (99.9%): [203852.747, 213103.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1620.029 ±(99.9%) 53.763 MB/sec [Average]
[info]   (min, avg, max) = (1604.339, 1620.029, 1640.969), stdev = 13.962
[info]   CI (99.9%): [1566.265, 1673.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12229.129 ±(99.9%) 449.985 B/op [Average]
[info]   (min, avg, max) = (12130.463, 12229.129, 12377.655), stdev = 116.860
[info]   CI (99.9%): [11779.144, 12679.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1599.522 ±(99.9%) 1399.092 MB/sec [Average]
[info]   (min, avg, max) = (1330.100, 1599.522, 2003.609), stdev = 363.340
[info]   CI (99.9%): [200.429, 2998.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12078.581 ±(99.9%) 10660.519 B/op [Average]
[info]   (min, avg, max) = (10028.944, 12078.581, 15163.197), stdev = 2768.503
[info]   CI (99.9%): [1418.062, 22739.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.315), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451938.801 ops/s
[info] # Warmup Iteration   2: 778383.475 ops/s
[info] # Warmup Iteration   3: 847284.747 ops/s
[info] # Warmup Iteration   4: 839701.622 ops/s
[info] # Warmup Iteration   5: 804094.490 ops/s
[info] Iteration   1: 865879.336 ops/s
[info]                  ·gc.alloc.rate:                   969.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              1762.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2433.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 777610.539 ops/s
[info]                  ·gc.alloc.rate:               854.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          1728.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1356.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 766886.381 ops/s
[info]                  ·gc.alloc.rate:                   840.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1724.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1375.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 779718.843 ops/s
[info]                  ·gc.alloc.rate:                   852.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              1720.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1352.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 765365.192 ops/s
[info]                  ·gc.alloc.rate:               861.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          1771.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2757.518 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   791092.058 ±(99.9%) 162823.795 ops/s [Average]
[info]   (min, avg, max) = (765365.192, 791092.058, 865879.336), stdev = 42284.822
[info]   CI (99.9%): [628268.264, 953915.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   875.545 ±(99.9%) 204.691 MB/sec [Average]
[info]   (min, avg, max) = (840.261, 875.545, 969.668), stdev = 53.157
[info]   CI (99.9%): [670.855, 1080.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1741.275 ±(99.9%) 90.673 B/op [Average]
[info]   (min, avg, max) = (1720.482, 1741.275, 1771.012), stdev = 23.547
[info]   CI (99.9%): [1650.603, 1831.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.170 ±(99.9%) 1412.866 MB/sec [Average]
[info]   (min, avg, max) = (670.207, 938.170, 1341.089), stdev = 366.917
[info]   CI (99.9%): [≈ 0, 2351.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1855.118 ±(99.9%) 2640.339 B/op [Average]
[info]   (min, avg, max) = (1352.710, 1855.118, 2757.518), stdev = 685.688
[info]   CI (99.9%): [≈ 0, 4495.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 889379.295 ops/s
[info] # Warmup Iteration   2: 930153.684 ops/s
[info] # Warmup Iteration   3: 890315.359 ops/s
[info] # Warmup Iteration   4: 924723.779 ops/s
[info] # Warmup Iteration   5: 923021.411 ops/s
[info] Iteration   1: 923828.295 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 900778.902 ops/s
[info]                  ·gc.alloc.rate:      23.309 MB/sec
[info]                  ·gc.alloc.rate.norm: 40.725 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 910841.223 ops/s
[info]                  ·gc.alloc.rate:      0.807 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.395 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 916914.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 917674.641 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   914007.466 ±(99.9%) 33534.133 ops/s [Average]
[info]   (min, avg, max) = (900778.902, 914007.466, 923828.295), stdev = 8708.708
[info]   CI (99.9%): [880473.333, 947541.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.823 ±(99.9%) 39.814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.823, 23.309), stdev = 10.340
[info]   CI (99.9%): [≈ 0, 44.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   8.424 ±(99.9%) 69.568 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 8.424, 40.725), stdev = 18.067
[info]   CI (99.9%): [≈ 0, 77.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8383.406 ops/s
[info] # Warmup Iteration   2: 72193.161 ops/s
[info] # Warmup Iteration   3: 77380.797 ops/s
[info] # Warmup Iteration   4: 95255.071 ops/s
[info] # Warmup Iteration   5: 93027.417 ops/s
[info] Iteration   1: 89947.398 ops/s
[info]                  ·gc.alloc.rate:                   1881.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              32917.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34841.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 90724.446 ops/s
[info]                  ·gc.alloc.rate:                   1908.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              33110.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23078.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 91093.427 ops/s
[info]                  ·gc.alloc.rate:                   1906.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              32930.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34567.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 91518.965 ops/s
[info]                  ·gc.alloc.rate:                   1897.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              32625.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34488.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 91346.184 ops/s
[info]                  ·gc.alloc.rate:                   1892.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              32609.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34645.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   90926.084 ±(99.9%) 2400.468 ops/s [Average]
[info]   (min, avg, max) = (89947.398, 90926.084, 91518.965), stdev = 623.394
[info]   CI (99.9%): [88525.616, 93326.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1897.239 ±(99.9%) 42.348 MB/sec [Average]
[info]   (min, avg, max) = (1881.325, 1897.239, 1908.690), stdev = 10.998
[info]   CI (99.9%): [1854.891, 1939.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32838.623 ±(99.9%) 831.000 B/op [Average]
[info]   (min, avg, max) = (32609.155, 32838.623, 33110.009), stdev = 215.808
[info]   CI (99.9%): [32007.624, 33669.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1867.832 ±(99.9%) 1157.187 MB/sec [Average]
[info]   (min, avg, max) = (1330.405, 1867.832, 2010.868), stdev = 300.518
[info]   CI (99.9%): [710.645, 3025.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32324.383 ±(99.9%) 19908.791 B/op [Average]
[info]   (min, avg, max) = (23078.518, 32324.383, 34841.020), stdev = 5170.250
[info]   CI (99.9%): [12415.592, 52233.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.250), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.369 ±(99.9%) 6.450 B/op [Average]
[info]   (min, avg, max) = (0.358, 1.369, 4.316), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2231.776 ops/s
[info] # Warmup Iteration   2: 10901.070 ops/s
[info] # Warmup Iteration   3: 15552.821 ops/s
[info] # Warmup Iteration   4: 19471.598 ops/s
[info] # Warmup Iteration   5: 18356.437 ops/s
[info] Iteration   1: 19185.646 ops/s
[info]                  ·gc.alloc.rate:                   1679.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              137784.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162895.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 19160.675 ops/s
[info]                  ·gc.alloc.rate:                   1810.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              148677.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108884.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 331.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 18363.983 ops/s
[info]                  ·gc.alloc.rate:                   1790.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              153423.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170043.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 19418.619 ops/s
[info]                  ·gc.alloc.rate:                   1812.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              146891.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160914.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.956 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 20182.833 ops/s
[info]                  ·gc.alloc.rate:                   1758.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              137124.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103268.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   19262.351 ±(99.9%) 2506.614 ops/s [Average]
[info]   (min, avg, max) = (18363.983, 19262.351, 20182.833), stdev = 650.960
[info]   CI (99.9%): [16755.737, 21768.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1770.285 ±(99.9%) 212.357 MB/sec [Average]
[info]   (min, avg, max) = (1679.600, 1770.285, 1812.938), stdev = 55.148
[info]   CI (99.9%): [1557.928, 1982.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144780.154 ±(99.9%) 27357.156 B/op [Average]
[info]   (min, avg, max) = (137124.742, 144780.154, 153423.369), stdev = 7104.566
[info]   CI (99.9%): [117422.998, 172137.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1721.179 ±(99.9%) 1392.675 MB/sec [Average]
[info]   (min, avg, max) = (1324.340, 1721.179, 1986.013), stdev = 361.673
[info]   CI (99.9%): [328.504, 3113.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   141201.220 ±(99.9%) 124394.338 B/op [Average]
[info]   (min, avg, max) = (103268.061, 141201.220, 170043.209), stdev = 32304.814
[info]   CI (99.9%): [16806.882, 265595.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.678 ±(99.9%) 6.604 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.678, 4.031), stdev = 1.715
[info]   CI (99.9%): [≈ 0, 8.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   137.308 ±(99.9%) 539.955 B/op [Average]
[info]   (min, avg, max) = (3.247, 137.308, 331.075), stdev = 140.225
[info]   CI (99.9%): [≈ 0, 677.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 5.357
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1904.060 ops/s
[info] # Warmup Iteration   2: 10917.544 ops/s
[info] # Warmup Iteration   3: 19042.767 ops/s
[info] # Warmup Iteration   4: 19394.772 ops/s
[info] # Warmup Iteration   5: 18377.106 ops/s
[info] Iteration   1: 18058.510 ops/s
[info]                  ·gc.alloc.rate:                   1476.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              128711.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173824.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17965.251 ops/s
[info]                  ·gc.alloc.rate:               1648.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          144362.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116657.581 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 17560.844 ops/s
[info]                  ·gc.alloc.rate:                   1609.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              144163.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119586.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 19196.651 ops/s
[info]                  ·gc.alloc.rate:                   1550.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              127068.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164167.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 397.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18783.928 ops/s
[info]                  ·gc.alloc.rate:               1506.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          126183.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111795.269 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18313.037 ±(99.9%) 2549.903 ops/s [Average]
[info]   (min, avg, max) = (17560.844, 18313.037, 19196.651), stdev = 662.202
[info]   CI (99.9%): [15763.133, 20862.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1558.233 ±(99.9%) 272.589 MB/sec [Average]
[info]   (min, avg, max) = (1476.997, 1558.233, 1648.200), stdev = 70.791
[info]   CI (99.9%): [1285.644, 1830.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   134097.925 ±(99.9%) 35903.400 B/op [Average]
[info]   (min, avg, max) = (126183.381, 134097.925, 144362.417), stdev = 9323.999
[info]   CI (99.9%): [98194.526, 170001.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1599.826 ±(99.9%) 1402.943 MB/sec [Average]
[info]   (min, avg, max) = (1331.891, 1599.826, 2003.166), stdev = 364.340
[info]   CI (99.9%): [196.882, 3002.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   137206.221 ±(99.9%) 113024.841 B/op [Average]
[info]   (min, avg, max) = (111795.269, 137206.221, 173824.071), stdev = 29352.192
[info]   CI (99.9%): [24181.380, 250231.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.125 ±(99.9%) 8.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.125, 4.845), stdev = 2.103
[info]   CI (99.9%): [≈ 0, 9.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   93.387 ±(99.9%) 662.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.387, 397.048), stdev = 172.079
[info]   CI (99.9%): [≈ 0, 756.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298021.295 ops/s
[info] # Warmup Iteration   2: 722198.969 ops/s
[info] # Warmup Iteration   3: 789542.005 ops/s
[info] # Warmup Iteration   4: 798155.336 ops/s
[info] # Warmup Iteration   5: 791975.494 ops/s
[info] Iteration   1: 798770.971 ops/s
[info]                  ·gc.alloc.rate:                   2121.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              4179.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3958.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 790390.650 ops/s
[info]                  ·gc.alloc.rate:                   2135.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              4251.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3992.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 801730.798 ops/s
[info]                  ·gc.alloc.rate:                   2139.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3931.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 794817.252 ops/s
[info]                  ·gc.alloc.rate:               2135.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          4227.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3969.755 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 801021.942 ops/s
[info]                  ·gc.alloc.rate:               2164.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          4253.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3948.146 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   797346.322 ±(99.9%) 18218.572 ops/s [Average]
[info]   (min, avg, max) = (790390.650, 797346.322, 801730.798), stdev = 4731.305
[info]   CI (99.9%): [779127.751, 815564.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2139.245 ±(99.9%) 60.919 MB/sec [Average]
[info]   (min, avg, max) = (2121.289, 2139.245, 2164.700), stdev = 15.821
[info]   CI (99.9%): [2078.326, 2200.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4222.464 ±(99.9%) 124.539 B/op [Average]
[info]   (min, avg, max) = (4179.450, 4222.464, 4253.449), stdev = 32.342
[info]   CI (99.9%): [4097.925, 4347.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2006.313 ±(99.9%) 10.996 MB/sec [Average]
[info]   (min, avg, max) = (2002.731, 2006.313, 2009.323), stdev = 2.856
[info]   CI (99.9%): [1995.317, 2017.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3960.125 ±(99.9%) 88.544 B/op [Average]
[info]   (min, avg, max) = (3931.529, 3960.125, 3992.660), stdev = 22.995
[info]   CI (99.9%): [3871.581, 4048.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.893), stdev = 1.732
[info]   CI (99.9%): [≈ 0, 7.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.567 ±(99.9%) 13.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.567, 7.670), stdev = 3.412
[info]   CI (99.9%): [≈ 0, 14.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 963.334 ops/s
[info] # Warmup Iteration   2: 7617.785 ops/s
[info] # Warmup Iteration   3: 13165.949 ops/s
[info] # Warmup Iteration   4: 14105.219 ops/s
[info] # Warmup Iteration   5: 13891.402 ops/s
[info] Iteration   1: 13839.417 ops/s
[info]                  ·gc.alloc.rate:               1894.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          215348.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1985.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 225668.827 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 13783.175 ops/s
[info]                  ·gc.alloc.rate:                   1865.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              213043.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227117.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13768.752 ops/s
[info]                  ·gc.alloc.rate:                   1873.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              214081.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228240.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14151.000 ops/s
[info]                  ·gc.alloc.rate:                        2135.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                   237446.742 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.019 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.132 B/op
[info]                  ·gc.churn.Metaspace:                   0.054 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              5.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2199.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          244612.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           6.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      680.627 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              94.000 ms
[info] Iteration   5: 13600.798 ops/s
[info]                  ·gc.alloc.rate:               1993.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          230664.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154735.101 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13828.629 ±(99.9%) 773.964 ops/s [Average]
[info]   (min, avg, max) = (13600.798, 13828.629, 14151.000), stdev = 200.996
[info]   CI (99.9%): [13054.665, 14602.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1952.429 ±(99.9%) 440.049 MB/sec [Average]
[info]   (min, avg, max) = (1865.934, 1952.429, 2135.263), stdev = 114.279
[info]   CI (99.9%): [1512.380, 2392.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   222117.128 ±(99.9%) 43084.573 B/op [Average]
[info]   (min, avg, max) = (213043.498, 222117.128, 237446.742), stdev = 11188.927
[info]   CI (99.9%): [179032.555, 265201.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.426 ±(99.9%) 3.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 2.132), stdev = 0.953
[info]   CI (99.9%): [≈ 0, 4.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   1.193 ±(99.9%) 10.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.193, 5.963), stdev = 2.667
[info]   CI (99.9%): [≈ 0, 11.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1901.672 ±(99.9%) 1264.255 MB/sec [Average]
[info]   (min, avg, max) = (1337.201, 1901.672, 2199.705), stdev = 328.323
[info]   CI (99.9%): [637.416, 3165.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   216075.155 ±(99.9%) 135307.752 B/op [Average]
[info]   (min, avg, max) = (154735.101, 216075.155, 244612.924), stdev = 35138.993
[info]   CI (99.9%): [80767.403, 351382.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.337 ±(99.9%) 10.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.337, 6.121), stdev = 2.683
[info]   CI (99.9%): [≈ 0, 11.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   148.974 ±(99.9%) 1148.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 148.974, 680.627), stdev = 298.265
[info]   CI (99.9%): [≈ 0, 1297.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   115.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 23.000, 94.000), stdev = 39.693
[info]   CI (99.9%): [115.000, 115.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7885.722 ops/s
[info] # Warmup Iteration   2: 22256.268 ops/s
[info] # Warmup Iteration   3: 43476.354 ops/s
[info] # Warmup Iteration   4: 45841.624 ops/s
[info] # Warmup Iteration   5: 44605.851 ops/s
[info] Iteration   1: 44157.908 ops/s
[info]                  ·gc.alloc.rate:               1862.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          66390.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1924.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68591.329 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     29.000 ms
[info] Iteration   2: 48764.315 ops/s
[info]                  ·gc.alloc.rate:                   1716.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              55388.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1277.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41215.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 47266.261 ops/s
[info]                  ·gc.alloc.rate:                   1689.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              56264.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1910.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63614.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   4: 46464.231 ops/s
[info]                  ·gc.alloc.rate:                   1653.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              55891.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1913.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64654.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 49226.402 ops/s
[info]                  ·gc.alloc.rate:                   1730.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              55314.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1286.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41115.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   47175.823 ±(99.9%) 7785.192 ops/s [Average]
[info]   (min, avg, max) = (44157.908, 47175.823, 49226.402), stdev = 2021.790
[info]   CI (99.9%): [39390.631, 54961.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1730.548 ±(99.9%) 305.934 MB/sec [Average]
[info]   (min, avg, max) = (1653.710, 1730.548, 1862.757), stdev = 79.450
[info]   CI (99.9%): [1424.614, 2036.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   57849.802 ±(99.9%) 18444.102 B/op [Average]
[info]   (min, avg, max) = (55314.592, 57849.802, 66390.152), stdev = 4789.875
[info]   CI (99.9%): [39405.700, 76293.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1662.250 ±(99.9%) 1338.336 MB/sec [Average]
[info]   (min, avg, max) = (1277.020, 1662.250, 1924.517), stdev = 347.562
[info]   CI (99.9%): [323.914, 3000.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   55838.356 ±(99.9%) 52070.425 B/op [Average]
[info]   (min, avg, max) = (41115.407, 55838.356, 68591.329), stdev = 13522.524
[info]   CI (99.9%): [3767.931, 107908.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.337 ±(99.9%) 10.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.337, 6.569), stdev = 2.700
[info]   CI (99.9%): [≈ 0, 12.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   75.988 ±(99.9%) 336.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.988, 212.005), stdev = 87.366
[info]   CI (99.9%): [≈ 0, 412.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   103.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 20.600, 29.000), stdev = 6.189
[info]   CI (99.9%): [103.000, 103.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5051.194 ops/s
[info] # Warmup Iteration   2: 33622.045 ops/s
[info] # Warmup Iteration   3: 55433.601 ops/s
[info] # Warmup Iteration   4: 51879.250 ops/s
[info] # Warmup Iteration   5: 53862.008 ops/s
[info] Iteration   1: 58149.367 ops/s
[info]                  ·gc.alloc.rate:                   1582.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              42834.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53040.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 56238.963 ops/s
[info]                  ·gc.alloc.rate:                   1522.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              42589.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36613.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 56362.034 ops/s
[info]                  ·gc.alloc.rate:                   1512.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              42230.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36588.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 56383.208 ops/s
[info]                  ·gc.alloc.rate:                   1541.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              42957.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54752.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 57394.832 ops/s
[info]                  ·gc.alloc.rate:                   1539.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              42223.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35995.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   56905.681 ±(99.9%) 3221.143 ops/s [Average]
[info]   (min, avg, max) = (56238.963, 56905.681, 58149.367), stdev = 836.521
[info]   CI (99.9%): [53684.538, 60126.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1539.708 ±(99.9%) 103.408 MB/sec [Average]
[info]   (min, avg, max) = (1512.339, 1539.708, 1582.527), stdev = 26.855
[info]   CI (99.9%): [1436.300, 1643.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42567.302 ±(99.9%) 1299.728 B/op [Average]
[info]   (min, avg, max) = (42223.658, 42567.302, 42957.926), stdev = 337.535
[info]   CI (99.9%): [41267.574, 43867.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1571.203 ±(99.9%) 1374.086 MB/sec [Average]
[info]   (min, avg, max) = (1308.786, 1571.203, 1964.591), stdev = 356.846
[info]   CI (99.9%): [197.118, 2945.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43398.234 ±(99.9%) 36988.947 B/op [Average]
[info]   (min, avg, max) = (35995.593, 43398.234, 54752.299), stdev = 9605.912
[info]   CI (99.9%): [6409.287, 80387.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.917 ±(99.9%) 2.686 MB/sec [Average]
[info]   (min, avg, max) = (0.292, 0.917, 2.107), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.376 ±(99.9%) 75.037 B/op [Average]
[info]   (min, avg, max) = (8.156, 25.376, 58.715), stdev = 19.487
[info]   CI (99.9%): [≈ 0, 100.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.000, 16.000), stdev = 3.240
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707309.810 ops/s
[info] # Warmup Iteration   2: 1001649.805 ops/s
[info] # Warmup Iteration   3: 1046163.905 ops/s
[info] # Warmup Iteration   4: 1039125.964 ops/s
[info] # Warmup Iteration   5: 1024207.312 ops/s
[info] Iteration   1: 1040341.629 ops/s
[info]                  ·gc.alloc.rate:                   970.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1467.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1012.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1035800.464 ops/s
[info]                  ·gc.alloc.rate:                   987.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1500.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2035.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1048611.055 ops/s
[info]                  ·gc.alloc.rate:               972.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          1460.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1005.824 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1006692.010 ops/s
[info]                  ·gc.alloc.rate:                   958.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              1498.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2096.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1046987.121 ops/s
[info]                  ·gc.alloc.rate:               967.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          1453.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1008.412 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1035686.456 ±(99.9%) 65492.419 ops/s [Average]
[info]   (min, avg, max) = (1006692.010, 1035686.456, 1048611.055), stdev = 17008.173
[info]   CI (99.9%): [970194.037, 1101178.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   971.355 ±(99.9%) 40.642 MB/sec [Average]
[info]   (min, avg, max) = (958.867, 971.355, 987.732), stdev = 10.555
[info]   CI (99.9%): [930.713, 1011.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1476.180 ±(99.9%) 84.803 B/op [Average]
[info]   (min, avg, max) = (1453.781, 1476.180, 1500.592), stdev = 22.023
[info]   CI (99.9%): [1391.377, 1560.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.306 ±(99.9%) 1413.763 MB/sec [Average]
[info]   (min, avg, max) = (669.467, 938.306, 1341.210), stdev = 367.150
[info]   CI (99.9%): [≈ 0, 2352.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1431.775 ±(99.9%) 2230.663 B/op [Average]
[info]   (min, avg, max) = (1005.824, 1431.775, 2096.392), stdev = 579.296
[info]   CI (99.9%): [≈ 0, 3662.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.067), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658025.269 ops/s
[info] # Warmup Iteration   2: 979556.303 ops/s
[info] # Warmup Iteration   3: 1017670.833 ops/s
[info] # Warmup Iteration   4: 1017498.030 ops/s
[info] # Warmup Iteration   5: 1017151.195 ops/s
[info] Iteration   1: 1017606.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1017139.976 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1017430.712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1017885.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1016978.207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1017408.244 ±(99.9%) 1394.399 ops/s [Average]
[info]   (min, avg, max) = (1016978.207, 1017408.244, 1017885.348), stdev = 362.121
[info]   CI (99.9%): [1016013.845, 1018802.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754.509 ops/s
[info] # Warmup Iteration   2: 3170.115 ops/s
[info] # Warmup Iteration   3: 3505.945 ops/s
[info] # Warmup Iteration   4: 3245.215 ops/s
[info] # Warmup Iteration   5: 3522.192 ops/s
[info] Iteration   1: 4011.574 ops/s
[info]                  ·gc.alloc.rate:                   536.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              210586.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          630.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247377.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3152.171 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 4053.722 ops/s
[info]                  ·gc.alloc.rate:                   537.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              208823.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          603.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234281.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 3761.769 ops/s
[info]                  ·gc.alloc.rate:               508.561 MB/sec
[info]                  ·gc.alloc.rate.norm:          212750.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      603.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 252460.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   4: 3896.205 ops/s
[info]                  ·gc.alloc.rate:                   513.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              207264.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          609.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246066.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 3955.292 ops/s
[info]                  ·gc.alloc.rate:      520.859 MB/sec
[info]                  ·gc.alloc.rate.norm: 207264.109 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3935.712 ±(99.9%) 438.542 ops/s [Average]
[info]   (min, avg, max) = (3761.769, 3935.712, 4053.722), stdev = 113.888
[info]   CI (99.9%): [3497.170, 4374.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   523.500 ±(99.9%) 51.882 MB/sec [Average]
[info]   (min, avg, max) = (508.561, 523.500, 537.924), stdev = 13.474
[info]   CI (99.9%): [471.618, 575.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   209337.804 ±(99.9%) 9045.328 B/op [Average]
[info]   (min, avg, max) = (207264.109, 209337.804, 212750.699), stdev = 2349.043
[info]   CI (99.9%): [200292.476, 218383.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   489.406 ±(99.9%) 1054.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 489.406, 630.786), stdev = 273.817
[info]   CI (99.9%): [≈ 0, 1543.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   196037.188 ±(99.9%) 422763.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 196037.188, 252460.764), stdev = 109790.211
[info]   CI (99.9%): [≈ 0, 618800.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.622 ±(99.9%) 13.811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.622, 8.038), stdev = 3.587
[info]   CI (99.9%): [≈ 0, 15.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   636.111 ±(99.9%) 5416.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 636.111, 3152.171), stdev = 1406.544
[info]   CI (99.9%): [≈ 0, 6052.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 10.000, 16.000), stdev = 5.958
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23796.422 ops/s
[info] # Warmup Iteration   2: 97186.319 ops/s
[info] # Warmup Iteration   3: 137937.411 ops/s
[info] # Warmup Iteration   4: 146309.620 ops/s
[info] # Warmup Iteration   5: 145657.785 ops/s
[info] Iteration   1: 149100.039 ops/s
[info]                  ·gc.alloc.rate:                   2331.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              24605.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21116.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.844 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 154678.665 ops/s
[info]                  ·gc.alloc.rate:                   2410.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              24523.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27072.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 153938.148 ops/s
[info]                  ·gc.alloc.rate:                   2374.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              24281.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20408.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 151749.066 ops/s
[info]                  ·gc.alloc.rate:               2367.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          24550.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2667.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27656.285 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 153827.282 ops/s
[info]                  ·gc.alloc.rate:                   2385.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              24401.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20525.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   152658.640 ±(99.9%) 8733.056 ops/s [Average]
[info]   (min, avg, max) = (149100.039, 152658.640, 154678.665), stdev = 2267.947
[info]   CI (99.9%): [143925.584, 161391.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2374.023 ±(99.9%) 110.401 MB/sec [Average]
[info]   (min, avg, max) = (2331.600, 2374.023, 2410.261), stdev = 28.671
[info]   CI (99.9%): [2263.622, 2484.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24472.561 ±(99.9%) 501.412 B/op [Average]
[info]   (min, avg, max) = (24281.846, 24472.561, 24605.900), stdev = 130.215
[info]   CI (99.9%): [23971.149, 24973.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2266.349 ±(99.9%) 1397.921 MB/sec [Average]
[info]   (min, avg, max) = (1996.099, 2266.349, 2667.239), stdev = 363.036
[info]   CI (99.9%): [868.429, 3664.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23355.790 ±(99.9%) 14150.807 B/op [Average]
[info]   (min, avg, max) = (20408.142, 23355.790, 27656.285), stdev = 3674.920
[info]   CI (99.9%): [9204.983, 37506.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.337 ±(99.9%) 2.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.312), stdev = 0.562
[info]   CI (99.9%): [≈ 0, 2.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.532 ±(99.9%) 22.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.532, 13.844), stdev = 5.934
[info]   CI (99.9%): [≈ 0, 26.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.793 ops/s
[info] # Warmup Iteration   2: 326174.669 ops/s
[info] # Warmup Iteration   3: 374902.541 ops/s
[info] # Warmup Iteration   4: 398256.594 ops/s
[info] # Warmup Iteration   5: 400011.174 ops/s
[info] Iteration   1: 399944.418 ops/s
[info]                  ·gc.alloc.rate:               824.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          3244.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2617.442 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 400776.648 ops/s
[info]                  ·gc.alloc.rate:               816.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          3206.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2612.042 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 398003.948 ops/s
[info]                  ·gc.alloc.rate:                   833.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5263.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 398352.698 ops/s
[info]                  ·gc.alloc.rate:               812.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          3210.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2631.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 399586.073 ops/s
[info]                  ·gc.alloc.rate:               814.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          3208.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2623.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   399332.757 ±(99.9%) 4411.201 ops/s [Average]
[info]   (min, avg, max) = (398003.948, 399332.757, 400776.648), stdev = 1145.575
[info]   CI (99.9%): [394921.556, 403743.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   820.447 ±(99.9%) 33.336 MB/sec [Average]
[info]   (min, avg, max) = (812.721, 820.447, 833.723), stdev = 8.657
[info]   CI (99.9%): [787.111, 853.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3233.549 ±(99.9%) 148.441 B/op [Average]
[info]   (min, avg, max) = (3206.860, 3233.549, 3296.728), stdev = 38.550
[info]   CI (99.9%): [3085.107, 3381.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798.732 ±(99.9%) 1145.876 MB/sec [Average]
[info]   (min, avg, max) = (665.144, 798.732, 1331.059), stdev = 297.580
[info]   CI (99.9%): [≈ 0, 1944.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3149.680 ±(99.9%) 4549.835 B/op [Average]
[info]   (min, avg, max) = (2612.042, 3149.680, 5263.309), stdev = 1181.578
[info]   CI (99.9%): [≈ 0, 7699.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77579.686 ops/s
[info] # Warmup Iteration   2: 211339.014 ops/s
[info] # Warmup Iteration   3: 276168.043 ops/s
[info] # Warmup Iteration   4: 279038.679 ops/s
[info] # Warmup Iteration   5: 279499.631 ops/s
[info] Iteration   1: 280950.058 ops/s
[info]                  ·gc.alloc.rate:                   592.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              3319.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3705.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 279684.996 ops/s
[info]                  ·gc.alloc.rate:               589.900 MB/sec
[info]                  ·gc.alloc.rate.norm:          3318.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3722.462 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 282030.422 ops/s
[info]                  ·gc.alloc.rate:      577.713 MB/sec
[info]                  ·gc.alloc.rate.norm: 3224.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 282186.083 ops/s
[info]                  ·gc.alloc.rate:                   591.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              3300.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3685.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 280672.471 ops/s
[info]                  ·gc.alloc.rate:               595.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          3337.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3705.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   281104.806 ±(99.9%) 3970.388 ops/s [Average]
[info]   (min, avg, max) = (279684.996, 281104.806, 282186.083), stdev = 1031.097
[info]   CI (99.9%): [277134.418, 285075.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   589.487 ±(99.9%) 26.489 MB/sec [Average]
[info]   (min, avg, max) = (577.713, 589.487, 595.468), stdev = 6.879
[info]   CI (99.9%): [562.998, 615.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3300.056 ±(99.9%) 171.201 B/op [Average]
[info]   (min, avg, max) = (3224.002, 3300.056, 3337.707), stdev = 44.460
[info]   CI (99.9%): [3128.855, 3471.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.019 ±(99.9%) 1138.753 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.019, 661.716), stdev = 295.731
[info]   CI (99.9%): [≈ 0, 1667.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2963.818 ±(99.9%) 6380.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2963.818, 3722.462), stdev = 1656.876
[info]   CI (99.9%): [≈ 0, 9343.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.116 ±(99.9%) 0.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.350), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155687.984 ops/s
[info] # Warmup Iteration   2: 416574.607 ops/s
[info] # Warmup Iteration   3: 470367.897 ops/s
[info] # Warmup Iteration   4: 491060.574 ops/s
[info] # Warmup Iteration   5: 490702.870 ops/s
[info] Iteration   1: 491752.025 ops/s
[info]                  ·gc.alloc.rate:               641.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          2054.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2139.572 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 494023.574 ops/s
[info]                  ·gc.alloc.rate:               637.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          2029.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2129.596 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 477852.233 ops/s
[info]                  ·gc.alloc.rate:                   621.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              2047.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2202.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 470632.517 ops/s
[info]                  ·gc.alloc.rate:               612.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          2046.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2236.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 482901.406 ops/s
[info]                  ·gc.alloc.rate:               632.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          2061.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2182.009 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   483432.351 ±(99.9%) 37365.453 ops/s [Average]
[info]   (min, avg, max) = (470632.517, 483432.351, 494023.574), stdev = 9703.689
[info]   CI (99.9%): [446066.898, 520797.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   629.114 ±(99.9%) 46.438 MB/sec [Average]
[info]   (min, avg, max) = (612.305, 629.114, 641.934), stdev = 12.060
[info]   CI (99.9%): [582.676, 675.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2047.943 ±(99.9%) 45.636 B/op [Average]
[info]   (min, avg, max) = (2029.789, 2047.943, 2061.647), stdev = 11.851
[info]   CI (99.9%): [2002.307, 2093.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.898 ±(99.9%) 1.795 MB/sec [Average]
[info]   (min, avg, max) = (668.467, 668.898, 669.614), stdev = 0.466
[info]   CI (99.9%): [667.103, 670.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2178.104 ±(99.9%) 170.885 B/op [Average]
[info]   (min, avg, max) = (2129.596, 2178.104, 2236.539), stdev = 44.378
[info]   CI (99.9%): [2007.219, 2348.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6126.298 ops/s
[info] # Warmup Iteration   2: 73848.374 ops/s
[info] # Warmup Iteration   3: 98005.408 ops/s
[info] # Warmup Iteration   4: 100463.630 ops/s
[info] # Warmup Iteration   5: 100604.444 ops/s
[info] Iteration   1: 101097.312 ops/s
[info]                  ·gc.alloc.rate:                   3496.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              54424.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51974.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.620 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 101856.104 ops/s
[info]                  ·gc.alloc.rate:                   3520.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              54398.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51778.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 98789.378 ops/s
[info]                  ·gc.alloc.rate:                   3458.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              55102.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53598.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 99314.370 ops/s
[info]                  ·gc.alloc.rate:                   3475.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              55076.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53506.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 101295.109 ops/s
[info]                  ·gc.alloc.rate:               3543.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          55061.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3385.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52605.272 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   100470.455 ±(99.9%) 5150.221 ops/s [Average]
[info]   (min, avg, max) = (98789.378, 100470.455, 101856.104), stdev = 1337.496
[info]   CI (99.9%): [95320.234, 105620.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3498.993 ±(99.9%) 131.318 MB/sec [Average]
[info]   (min, avg, max) = (3458.792, 3498.993, 3543.670), stdev = 34.103
[info]   CI (99.9%): [3367.675, 3630.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54812.792 ±(99.9%) 1411.161 B/op [Average]
[info]   (min, avg, max) = (54398.684, 54812.792, 55102.995), stdev = 366.474
[info]   CI (99.9%): [53401.631, 56223.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3363.289 ±(99.9%) 72.694 MB/sec [Average]
[info]   (min, avg, max) = (3338.620, 3363.289, 3385.606), stdev = 18.878
[info]   CI (99.9%): [3290.595, 3435.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   52692.726 ±(99.9%) 3246.351 B/op [Average]
[info]   (min, avg, max) = (51778.291, 52692.726, 53598.837), stdev = 843.067
[info]   CI (99.9%): [49446.376, 55939.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.587 ±(99.9%) 2.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 1.620), stdev = 0.623
[info]   CI (99.9%): [≈ 0, 2.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49301.084 ops/s
[info] # Warmup Iteration   2: 190134.650 ops/s
[info] # Warmup Iteration   3: 198030.359 ops/s
[info] # Warmup Iteration   4: 218104.510 ops/s
[info] # Warmup Iteration   5: 216297.613 ops/s
[info] Iteration   1: 218063.413 ops/s
[info]                  ·gc.alloc.rate:                   1878.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              13559.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14461.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.907 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 219766.916 ops/s
[info]                  ·gc.alloc.rate:                   1895.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              13576.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14326.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 216638.893 ops/s
[info]                  ·gc.alloc.rate:                   1852.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              13460.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9669.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 220277.960 ops/s
[info]                  ·gc.alloc.rate:                   1896.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              13549.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14254.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 217757.148 ops/s
[info]                  ·gc.alloc.rate:               1875.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          13552.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14439.309 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   218500.866 ±(99.9%) 5767.093 ops/s [Average]
[info]   (min, avg, max) = (216638.893, 218500.866, 220277.960), stdev = 1497.696
[info]   CI (99.9%): [212733.773, 224267.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1879.767 ±(99.9%) 69.127 MB/sec [Average]
[info]   (min, avg, max) = (1852.762, 1879.767, 1896.430), stdev = 17.952
[info]   CI (99.9%): [1810.640, 1948.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13539.629 ±(99.9%) 176.159 B/op [Average]
[info]   (min, avg, max) = (13460.077, 13539.629, 13576.984), stdev = 45.748
[info]   CI (99.9%): [13363.470, 13715.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1865.624 ±(99.9%) 1150.956 MB/sec [Average]
[info]   (min, avg, max) = (1330.965, 1865.624, 2003.672), stdev = 298.900
[info]   CI (99.9%): [714.668, 3016.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13430.238 ±(99.9%) 8102.221 B/op [Average]
[info]   (min, avg, max) = (9669.291, 13430.238, 14461.658), stdev = 2104.121
[info]   CI (99.9%): [5328.017, 21532.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.921 ±(99.9%) 5.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.921, 3.312), stdev = 1.440
[info]   CI (99.9%): [≈ 0, 6.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.630 ±(99.9%) 40.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.630, 23.907), stdev = 10.390
[info]   CI (99.9%): [≈ 0, 46.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.762 ops/s
[info] # Warmup Iteration   2: 752776.593 ops/s
[info] # Warmup Iteration   3: 868818.534 ops/s
[info] # Warmup Iteration   4: 945445.435 ops/s
[info] # Warmup Iteration   5: 945703.213 ops/s
[info] Iteration   1: 943115.945 ops/s
[info]                  ·gc.alloc.rate:               772.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          1288.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2215.542 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 947740.422 ops/s
[info]                  ·gc.alloc.rate:               763.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          1267.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1103.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 945999.464 ops/s
[info]                  ·gc.alloc.rate:                   763.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1270.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1105.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 909953.181 ops/s
[info]                  ·gc.alloc.rate:               742.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          1283.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1150.409 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 896218.229 ops/s
[info]                  ·gc.alloc.rate:               727.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          1277.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1168.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   928605.448 ±(99.9%) 91854.053 ops/s [Average]
[info]   (min, avg, max) = (896218.229, 928605.448, 947740.422), stdev = 23854.206
[info]   CI (99.9%): [836751.395, 1020459.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   753.826 ±(99.9%) 70.431 MB/sec [Average]
[info]   (min, avg, max) = (727.665, 753.826, 772.181), stdev = 18.291
[info]   CI (99.9%): [683.395, 824.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1277.622 ±(99.9%) 34.385 B/op [Average]
[info]   (min, avg, max) = (1267.595, 1277.622, 1288.631), stdev = 8.930
[info]   CI (99.9%): [1243.237, 1312.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   797.409 ±(99.9%) 1141.300 MB/sec [Average]
[info]   (min, avg, max) = (664.481, 797.409, 1327.611), stdev = 296.392
[info]   CI (99.9%): [≈ 0, 1938.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1348.596 ±(99.9%) 1869.297 B/op [Average]
[info]   (min, avg, max) = (1103.475, 1348.596, 2215.542), stdev = 485.450
[info]   CI (99.9%): [≈ 0, 3217.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188186.214 ops/s
[info] # Warmup Iteration   2: 488348.486 ops/s
[info] # Warmup Iteration   3: 576490.276 ops/s
[info] # Warmup Iteration   4: 610337.579 ops/s
[info] # Warmup Iteration   5: 624495.498 ops/s
[info] Iteration   1: 624297.484 ops/s
[info]                  ·gc.alloc.rate:               500.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          1260.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1667.605 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 619990.720 ops/s
[info]                  ·gc.alloc.rate:               505.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          1282.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1679.142 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 592625.491 ops/s
[info]                  ·gc.alloc.rate:                   484.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              1286.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1757.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 619237.210 ops/s
[info]                  ·gc.alloc.rate:      484.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 625065.550 ops/s
[info]                  ·gc.alloc.rate:               502.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1666.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   616243.291 ±(99.9%) 51787.566 ops/s [Average]
[info]   (min, avg, max) = (592625.491, 616243.291, 625065.550), stdev = 13449.066
[info]   CI (99.9%): [564455.725, 668030.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   495.310 ±(99.9%) 38.583 MB/sec [Average]
[info]   (min, avg, max) = (484.306, 495.310, 505.076), stdev = 10.020
[info]   CI (99.9%): [456.727, 533.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1265.165 ±(99.9%) 82.665 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1265.165, 1286.093), stdev = 21.468
[info]   CI (99.9%): [1182.500, 1347.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.336 ±(99.9%) 1139.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.336, 661.887), stdev = 295.908
[info]   CI (99.9%): [≈ 0, 1668.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1354.151 ±(99.9%) 2918.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1354.151, 1757.664), stdev = 757.939
[info]   CI (99.9%): [≈ 0, 4272.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273052.847 ops/s
[info] # Warmup Iteration   2: 742609.995 ops/s
[info] # Warmup Iteration   3: 797848.749 ops/s
[info] # Warmup Iteration   4: 771121.607 ops/s
[info] # Warmup Iteration   5: 796049.849 ops/s
[info] Iteration   1: 796157.244 ops/s
[info]                  ·gc.alloc.rate:                   644.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1274.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 776431.353 ops/s
[info]                  ·gc.alloc.rate:               627.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          1272.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1353.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 788343.731 ops/s
[info]                  ·gc.alloc.rate:               638.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          1275.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1333.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 796199.099 ops/s
[info]                  ·gc.alloc.rate:                   636.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1258.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 796780.375 ops/s
[info]                  ·gc.alloc.rate:               643.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          1272.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1321.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   790782.361 ±(99.9%) 33685.154 ops/s [Average]
[info]   (min, avg, max) = (776431.353, 790782.361, 796780.375), stdev = 8747.927
[info]   CI (99.9%): [757097.207, 824467.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   638.443 ±(99.9%) 26.258 MB/sec [Average]
[info]   (min, avg, max) = (627.796, 638.443, 644.670), stdev = 6.819
[info]   CI (99.9%): [612.185, 664.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1270.578 ±(99.9%) 26.498 B/op [Average]
[info]   (min, avg, max) = (1258.580, 1270.578, 1275.682), stdev = 6.882
[info]   CI (99.9%): [1244.080, 1297.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.195 ±(99.9%) 1.395 MB/sec [Average]
[info]   (min, avg, max) = (667.796, 668.195, 668.782), stdev = 0.362
[info]   CI (99.9%): [666.800, 669.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1329.896 ±(99.9%) 55.853 B/op [Average]
[info]   (min, avg, max) = (1320.135, 1329.896, 1353.727), stdev = 14.505
[info]   CI (99.9%): [1274.043, 1385.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 478515.882 ops/s
[info] # Warmup Iteration   2: 770490.504 ops/s
[info] # Warmup Iteration   3: 823155.406 ops/s
[info] # Warmup Iteration   4: 823554.627 ops/s
[info] # Warmup Iteration   5: 815521.736 ops/s
[info] Iteration   1: 823770.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 823929.798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 823895.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 823571.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 823052.763 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.621 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   823644.060 ±(99.9%) 1382.778 ops/s [Average]
[info]   (min, avg, max) = (823052.763, 823644.060, 823929.798), stdev = 359.103
[info]   CI (99.9%): [822261.282, 825026.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.325 ±(99.9%) 2.790 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.325, 1.621), stdev = 0.725
[info]   CI (99.9%): [≈ 0, 3.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6310.172 ops/s
[info] # Warmup Iteration   2: 14875.130 ops/s
[info] # Warmup Iteration   3: 35321.665 ops/s
[info] # Warmup Iteration   4: 36084.227 ops/s
[info] # Warmup Iteration   5: 33926.474 ops/s
[info] Iteration   1: 36306.249 ops/s
[info]                  ·gc.alloc.rate:                   1641.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              71141.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57667.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35386.695 ops/s
[info]                  ·gc.alloc.rate:                   1616.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              71907.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88825.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.770 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 35560.616 ops/s
[info]                  ·gc.alloc.rate:                   1629.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              72087.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58789.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36754.588 ops/s
[info]                  ·gc.alloc.rate:                   1650.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              70655.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56763.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35572.948 ops/s
[info]                  ·gc.alloc.rate:                   1607.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              71109.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87990.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   35916.219 ±(99.9%) 2261.471 ops/s [Average]
[info]   (min, avg, max) = (35386.695, 35916.219, 36754.588), stdev = 587.297
[info]   CI (99.9%): [33654.749, 38177.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1628.941 ±(99.9%) 67.125 MB/sec [Average]
[info]   (min, avg, max) = (1607.235, 1628.941, 1650.086), stdev = 17.432
[info]   CI (99.9%): [1561.817, 1696.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71380.056 ±(99.9%) 2305.780 B/op [Average]
[info]   (min, avg, max) = (70655.264, 71380.056, 72087.472), stdev = 598.804
[info]   CI (99.9%): [69074.275, 73685.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.161 ±(99.9%) 1401.937 MB/sec [Average]
[info]   (min, avg, max) = (1325.646, 1594.161, 1997.146), stdev = 364.079
[info]   CI (99.9%): [192.224, 2996.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70007.218 ±(99.9%) 64750.646 B/op [Average]
[info]   (min, avg, max) = (56763.043, 70007.218, 88825.714), stdev = 16815.537
[info]   CI (99.9%): [5256.572, 134757.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.218 ±(99.9%) 6.227 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.218, 3.997), stdev = 1.617
[info]   CI (99.9%): [≈ 0, 7.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   53.792 ±(99.9%) 277.239 B/op [Average]
[info]   (min, avg, max) = (0.921, 53.792, 177.770), stdev = 71.998
[info]   CI (99.9%): [≈ 0, 331.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 4.099
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 924.601 ops/s
[info] # Warmup Iteration   2: 6037.421 ops/s
[info] # Warmup Iteration   3: 6752.758 ops/s
[info] # Warmup Iteration   4: 8975.873 ops/s
[info] # Warmup Iteration   5: 8677.723 ops/s
[info] Iteration   1: 9026.835 ops/s
[info]                  ·gc.alloc.rate:                   1247.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              217514.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229622.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 9016.160 ops/s
[info]                  ·gc.alloc.rate:                   1278.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              223136.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230342.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 9111.488 ops/s
[info]                  ·gc.alloc.rate:               1243.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          214814.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114085.713 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 8306.919 ops/s
[info]                  ·gc.alloc.rate:                   1501.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              284527.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     375879.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1474.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 9117.895 ops/s
[info]                  ·gc.alloc.rate:                   1259.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              217218.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227440.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8915.859 ±(99.9%) 1323.122 ops/s [Average]
[info]   (min, avg, max) = (8306.919, 8915.859, 9117.895), stdev = 343.611
[info]   CI (99.9%): [7592.738, 10238.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1306.160 ±(99.9%) 424.405 MB/sec [Average]
[info]   (min, avg, max) = (1243.668, 1306.160, 1501.828), stdev = 110.217
[info]   CI (99.9%): [881.755, 1730.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   231442.374 ±(99.9%) 114873.275 B/op [Average]
[info]   (min, avg, max) = (214814.134, 231442.374, 284527.867), stdev = 29832.225
[info]   CI (99.9%): [116569.099, 346315.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1319.961 ±(99.9%) 1801.861 MB/sec [Average]
[info]   (min, avg, max) = (660.500, 1319.961, 1984.012), stdev = 467.938
[info]   CI (99.9%): [≈ 0, 3121.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   235474.141 ±(99.9%) 357995.808 B/op [Average]
[info]   (min, avg, max) = (114085.713, 235474.141, 375879.602), stdev = 92970.375
[info]   CI (99.9%): [≈ 0, 593469.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.631 ±(99.9%) 13.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.631, 7.783), stdev = 3.442
[info]   CI (99.9%): [≈ 0, 14.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   307.838 ±(99.9%) 2513.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 307.838, 1474.566), stdev = 652.656
[info]   CI (99.9%): [≈ 0, 2820.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.000, 20.000), stdev = 5.788
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 421.848 ops/s
[info] # Warmup Iteration   2: 6223.973 ops/s
[info] # Warmup Iteration   3: 8549.189 ops/s
[info] # Warmup Iteration   4: 9052.761 ops/s
[info] # Warmup Iteration   5: 9055.176 ops/s
[info] Iteration   1: 9063.037 ops/s
[info]                  ·gc.alloc.rate:                   1181.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              205166.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114574.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8987.487 ops/s
[info]                  ·gc.alloc.rate:               1186.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          207731.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231176.600 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9052.691 ops/s
[info]                  ·gc.alloc.rate:                   1192.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              207298.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229889.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8758.266 ops/s
[info]                  ·gc.alloc.rate:                   1238.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              222625.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238144.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9086.864 ops/s
[info]                  ·gc.alloc.rate:                   1194.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              206801.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230125.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8989.669 ±(99.9%) 517.886 ops/s [Average]
[info]   (min, avg, max) = (8758.266, 8989.669, 9086.864), stdev = 134.493
[info]   CI (99.9%): [8471.783, 9507.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1198.695 ±(99.9%) 88.745 MB/sec [Average]
[info]   (min, avg, max) = (1181.537, 1198.695, 1238.960), stdev = 23.047
[info]   CI (99.9%): [1109.950, 1287.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   209924.851 ±(99.9%) 27594.464 B/op [Average]
[info]   (min, avg, max) = (205166.935, 209924.851, 222625.873), stdev = 7166.195
[info]   CI (99.9%): [182330.387, 237519.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.332 ±(99.9%) 1144.179 MB/sec [Average]
[info]   (min, avg, max) = (659.821, 1191.332, 1328.685), stdev = 297.140
[info]   CI (99.9%): [47.153, 2335.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   208782.137 ±(99.9%) 203209.320 B/op [Average]
[info]   (min, avg, max) = (114574.134, 208782.137, 238144.058), stdev = 52772.815
[info]   CI (99.9%): [5572.817, 411991.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.124 ±(99.9%) 0.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.573), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.291 ±(99.9%) 173.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.291, 102.928), stdev = 45.121
[info]   CI (99.9%): [≈ 0, 196.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66359.069 ops/s
[info] # Warmup Iteration   2: 146556.258 ops/s
[info] # Warmup Iteration   3: 187073.852 ops/s
[info] # Warmup Iteration   4: 193736.928 ops/s
[info] # Warmup Iteration   5: 201037.857 ops/s
[info] Iteration   1: 197035.765 ops/s
[info]                  ·gc.alloc.rate:               1712.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          13681.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10588.667 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 201992.947 ops/s
[info]                  ·gc.alloc.rate:                   1759.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              13707.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15503.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 203056.684 ops/s
[info]                  ·gc.alloc.rate:                   1746.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              13536.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10269.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 202714.820 ops/s
[info]                  ·gc.alloc.rate:                   1767.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              13720.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15428.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 195759.328 ops/s
[info]                  ·gc.alloc.rate:                   1695.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              13630.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10646.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   200111.909 ±(99.9%) 13254.380 ops/s [Average]
[info]   (min, avg, max) = (195759.328, 200111.909, 203056.684), stdev = 3442.120
[info]   CI (99.9%): [186857.528, 213366.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1736.391 ±(99.9%) 119.133 MB/sec [Average]
[info]   (min, avg, max) = (1695.511, 1736.391, 1767.441), stdev = 30.938
[info]   CI (99.9%): [1617.258, 1855.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   13655.223 ±(99.9%) 288.304 B/op [Average]
[info]   (min, avg, max) = (13536.363, 13655.223, 13720.170), stdev = 74.872
[info]   CI (99.9%): [13366.919, 13943.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1590.514 ±(99.9%) 1399.414 MB/sec [Average]
[info]   (min, avg, max) = (1324.392, 1590.514, 1989.793), stdev = 363.423
[info]   CI (99.9%): [191.100, 2989.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12487.393 ±(99.9%) 10484.995 B/op [Average]
[info]   (min, avg, max) = (10269.577, 12487.393, 15503.740), stdev = 2722.920
[info]   CI (99.9%): [2002.398, 22972.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.351 ±(99.9%) 6.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.351, 3.989), stdev = 1.744
[info]   CI (99.9%): [≈ 0, 8.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.528 ±(99.9%) 52.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.528, 31.082), stdev = 13.567
[info]   CI (99.9%): [≈ 0, 62.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 11.000), stdev = 3.114
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605.525 ops/s
[info] # Warmup Iteration   2: 5184.045 ops/s
[info] # Warmup Iteration   3: 7843.974 ops/s
[info] # Warmup Iteration   4: 9141.783 ops/s
[info] # Warmup Iteration   5: 8686.302 ops/s
[info] Iteration   1: 9078.938 ops/s
[info]                  ·gc.alloc.rate:               1427.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          247454.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229841.485 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 8988.915 ops/s
[info]                  ·gc.alloc.rate:                   1433.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              250875.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348534.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8896.047 ops/s
[info]                  ·gc.alloc.rate:                   1390.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              245974.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235072.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9111.277 ops/s
[info]                  ·gc.alloc.rate:                   1420.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              245383.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229782.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9134.388 ops/s
[info]                  ·gc.alloc.rate:                   1433.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              246895.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229548.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 678.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   9041.913 ±(99.9%) 379.340 ops/s [Average]
[info]   (min, avg, max) = (8896.047, 9041.913, 9134.388), stdev = 98.513
[info]   CI (99.9%): [8662.573, 9421.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1421.036 ±(99.9%) 68.795 MB/sec [Average]
[info]   (min, avg, max) = (1390.478, 1421.036, 1433.495), stdev = 17.866
[info]   CI (99.9%): [1352.241, 1489.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   247316.835 ±(99.9%) 8257.950 B/op [Average]
[info]   (min, avg, max) = (245383.531, 247316.835, 250875.177), stdev = 2144.563
[info]   CI (99.9%): [239058.885, 255574.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1461.790 ±(99.9%) 1140.311 MB/sec [Average]
[info]   (min, avg, max) = (1325.959, 1461.790, 1991.516), stdev = 296.135
[info]   CI (99.9%): [321.479, 2602.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   254555.673 ±(99.9%) 202492.384 B/op [Average]
[info]   (min, avg, max) = (229548.161, 254555.673, 348534.020), stdev = 52586.629
[info]   CI (99.9%): [52063.290, 457048.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.798 ±(99.9%) 6.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.938), stdev = 1.755
[info]   CI (99.9%): [≈ 0, 7.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   137.528 ±(99.9%) 1164.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.528, 678.458), stdev = 302.393
[info]   CI (99.9%): [≈ 0, 1301.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4392.381 ops/s
[info] # Warmup Iteration   2: 15309.299 ops/s
[info] # Warmup Iteration   3: 22469.994 ops/s
[info] # Warmup Iteration   4: 24015.991 ops/s
[info] # Warmup Iteration   5: 23187.384 ops/s
[info] Iteration   1: 21939.876 ops/s
[info]                  ·gc.alloc.rate:               1484.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          106463.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1316.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94425.839 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   2: 21289.395 ops/s
[info]                  ·gc.alloc.rate:                   1604.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              118567.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145993.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   3: 22013.428 ops/s
[info]                  ·gc.alloc.rate:                   1362.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              97432.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1287.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92012.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 23379.941 ops/s
[info]                  ·gc.alloc.rate:                   1238.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              83347.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1287.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86678.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 23525.371 ops/s
[info]                  ·gc.alloc.rate:                   1249.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              83617.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1291.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86367.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   22429.602 ±(99.9%) 3761.509 ops/s [Average]
[info]   (min, avg, max) = (21289.395, 22429.602, 23525.371), stdev = 976.852
[info]   CI (99.9%): [18668.093, 26191.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1388.052 ±(99.9%) 604.179 MB/sec [Average]
[info]   (min, avg, max) = (1238.089, 1388.052, 1604.618), stdev = 156.903
[info]   CI (99.9%): [783.873, 1992.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   97885.864 ±(99.9%) 58285.031 B/op [Average]
[info]   (min, avg, max) = (83347.873, 97885.864, 118567.823), stdev = 15136.437
[info]   CI (99.9%): [39600.833, 156170.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1431.664 ±(99.9%) 1172.233 MB/sec [Average]
[info]   (min, avg, max) = (1287.025, 1431.664, 1975.785), stdev = 304.425
[info]   CI (99.9%): [259.431, 2603.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   101095.806 ±(99.9%) 97559.035 B/op [Average]
[info]   (min, avg, max) = (86367.474, 101095.806, 145993.967), stdev = 25335.772
[info]   CI (99.9%): [3536.772, 198654.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.926 ±(99.9%) 7.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.926, 4.940), stdev = 1.954
[info]   CI (99.9%): [≈ 0, 9.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   136.221 ±(99.9%) 537.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 136.221, 353.209), stdev = 139.658
[info]   CI (99.9%): [≈ 0, 673.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   84.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 16.800, 32.000), stdev = 8.643
[info]   CI (99.9%): [84.000, 84.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5405.028 ops/s
[info] # Warmup Iteration   2: 18941.012 ops/s
[info] # Warmup Iteration   3: 24629.135 ops/s
[info] # Warmup Iteration   4: 26262.733 ops/s
[info] # Warmup Iteration   5: 26448.255 ops/s
[info] Iteration   1: 24089.417 ops/s
[info]                  ·gc.alloc.rate:               1367.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          89318.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1315.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85955.987 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 26144.997 ops/s
[info]                  ·gc.alloc.rate:                   1053.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              63420.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39638.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25134.252 ops/s
[info]                  ·gc.alloc.rate:               1027.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          64329.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82591.315 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   4: 26167.125 ops/s
[info]                  ·gc.alloc.rate:                   1051.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              63223.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39724.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 214.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 26126.967 ops/s
[info]                  ·gc.alloc.rate:                   1077.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              64893.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79512.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   25532.552 ±(99.9%) 3535.670 ops/s [Average]
[info]   (min, avg, max) = (24089.417, 25532.552, 26167.125), stdev = 918.202
[info]   CI (99.9%): [21996.882, 29068.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1115.363 ±(99.9%) 546.433 MB/sec [Average]
[info]   (min, avg, max) = (1027.447, 1115.363, 1367.249), stdev = 141.907
[info]   CI (99.9%): [568.930, 1661.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69036.919 ±(99.9%) 43734.778 B/op [Average]
[info]   (min, avg, max) = (63223.578, 69036.919, 89318.062), stdev = 11357.783
[info]   CI (99.9%): [25302.141, 112771.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1054.777 ±(99.9%) 1389.373 MB/sec [Average]
[info]   (min, avg, max) = (658.482, 1054.777, 1319.925), stdev = 360.816
[info]   CI (99.9%): [≈ 0, 2444.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65484.682 ±(99.9%) 91125.078 B/op [Average]
[info]   (min, avg, max) = (39638.892, 65484.682, 85955.987), stdev = 23664.893
[info]   CI (99.9%): [≈ 0, 156609.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.447 ±(99.9%) 6.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.447, 3.562), stdev = 1.566
[info]   CI (99.9%): [≈ 0, 7.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   87.059 ±(99.9%) 362.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.059, 214.228), stdev = 94.185
[info]   CI (99.9%): [≈ 0, 449.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268083.457 ops/s
[info] # Warmup Iteration   2: 499730.617 ops/s
[info] # Warmup Iteration   3: 522899.512 ops/s
[info] # Warmup Iteration   4: 522662.826 ops/s
[info] # Warmup Iteration   5: 542273.906 ops/s
[info] Iteration   1: 520723.228 ops/s
[info]                  ·gc.alloc.rate:                   1222.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              3693.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4046.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 516215.681 ops/s
[info]                  ·gc.alloc.rate:               1203.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          3669.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4086.258 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 517287.032 ops/s
[info]                  ·gc.alloc.rate:                   1226.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              3730.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4079.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 545299.046 ops/s
[info]                  ·gc.alloc.rate:                   1263.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              3647.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3872.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 536398.175 ops/s
[info]                  ·gc.alloc.rate:                   1269.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              3723.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1962.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   527184.632 ±(99.9%) 49949.082 ops/s [Average]
[info]   (min, avg, max) = (516215.681, 527184.632, 545299.046), stdev = 12971.618
[info]   CI (99.9%): [477235.550, 577133.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1236.994 ±(99.9%) 108.611 MB/sec [Average]
[info]   (min, avg, max) = (1203.838, 1236.994, 1269.080), stdev = 28.206
[info]   CI (99.9%): [1128.383, 1345.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3692.853 ±(99.9%) 135.405 B/op [Average]
[info]   (min, avg, max) = (3647.593, 3692.853, 3730.041), stdev = 35.164
[info]   CI (99.9%): [3557.448, 3828.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.246 ±(99.9%) 1156.923 MB/sec [Average]
[info]   (min, avg, max) = (668.789, 1206.246, 1341.568), stdev = 300.449
[info]   CI (99.9%): [49.323, 2363.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3609.532 ±(99.9%) 3561.500 B/op [Average]
[info]   (min, avg, max) = (1962.403, 3609.532, 4086.258), stdev = 924.910
[info]   CI (99.9%): [48.032, 7171.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.810 ±(99.9%) 6.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 3.892), stdev = 1.723
[info]   CI (99.9%): [≈ 0, 7.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.340 ±(99.9%) 19.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.340, 11.232), stdev = 4.972
[info]   CI (99.9%): [≈ 0, 21.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278856.871 ops/s
[info] # Warmup Iteration   2: 578015.872 ops/s
[info] # Warmup Iteration   3: 605375.946 ops/s
[info] # Warmup Iteration   4: 607665.021 ops/s
[info] # Warmup Iteration   5: 607966.769 ops/s
[info] Iteration   1: 607143.154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 609704.098 ops/s
[info]                  ·gc.alloc.rate:      3.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.818 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 615646.136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 615368.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 615710.833 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   612714.632 ±(99.9%) 15489.089 ops/s [Average]
[info]   (min, avg, max) = (607143.154, 612714.632, 615710.833), stdev = 4022.467
[info]   CI (99.9%): [597225.543, 628203.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.683 ±(99.9%) 5.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.683, 3.416), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.764 ±(99.9%) 15.183 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.764, 8.818), stdev = 3.943
[info]   CI (99.9%): [≈ 0, 16.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4795.728 ops/s
[info] # Warmup Iteration   2: 16687.512 ops/s
[info] # Warmup Iteration   3: 21597.340 ops/s
[info] # Warmup Iteration   4: 23057.541 ops/s
[info] # Warmup Iteration   5: 26964.966 ops/s
[info] Iteration   1: 24827.216 ops/s
[info]                  ·gc.alloc.rate:                   1479.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              93778.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1952.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123750.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 23827.510 ops/s
[info]                  ·gc.alloc.rate:                   1357.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              89662.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86042.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 25638.861 ops/s
[info]                  ·gc.alloc.rate:                   1187.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              72885.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79939.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 25919.478 ops/s
[info]                  ·gc.alloc.rate:                   1196.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              72626.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39556.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24549.008 ops/s
[info]                  ·gc.alloc.rate:                   1147.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              73520.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1300.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83356.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   24952.415 ±(99.9%) 3250.455 ops/s [Average]
[info]   (min, avg, max) = (23827.510, 24952.415, 25919.478), stdev = 844.133
[info]   CI (99.9%): [21701.959, 28202.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1273.563 ±(99.9%) 541.078 MB/sec [Average]
[info]   (min, avg, max) = (1147.030, 1273.563, 1479.731), stdev = 140.516
[info]   CI (99.9%): [732.485, 1814.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80494.787 ±(99.9%) 39875.481 B/op [Average]
[info]   (min, avg, max) = (72626.802, 80494.787, 93778.831), stdev = 10355.536
[info]   CI (99.9%): [40619.306, 120370.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1301.935 ±(99.9%) 1771.441 MB/sec [Average]
[info]   (min, avg, max) = (651.474, 1301.935, 1952.654), stdev = 460.038
[info]   CI (99.9%): [≈ 0, 3073.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82529.256 ±(99.9%) 114965.760 B/op [Average]
[info]   (min, avg, max) = (39556.695, 82529.256, 123750.633), stdev = 29856.243
[info]   CI (99.9%): [≈ 0, 197495.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.489 ±(99.9%) 8.784 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.489, 4.995), stdev = 2.281
[info]   CI (99.9%): [≈ 0, 11.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   158.310 ±(99.9%) 558.690 B/op [Average]
[info]   (min, avg, max) = (1.320, 158.310, 306.612), stdev = 145.090
[info]   CI (99.9%): [≈ 0, 717.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.400, 24.000), stdev = 8.473
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1401.406 ops/s
[info] # Warmup Iteration   2: 8834.795 ops/s
[info] # Warmup Iteration   3: 11282.873 ops/s
[info] # Warmup Iteration   4: 13300.130 ops/s
[info] # Warmup Iteration   5: 13664.283 ops/s
[info] Iteration   1: 13652.665 ops/s
[info]                  ·gc.alloc.rate:               1455.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          167760.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152725.371 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 12885.065 ops/s
[info]                  ·gc.alloc.rate:                   1577.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              192684.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161920.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 466.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 13519.371 ops/s
[info]                  ·gc.alloc.rate:                   1308.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              152265.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154083.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 505.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13740.887 ops/s
[info]                  ·gc.alloc.rate:                   1555.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              178164.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151213.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13381.166 ops/s
[info]                  ·gc.alloc.rate:                   1442.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              169672.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155124.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13435.831 ±(99.9%) 1296.396 ops/s [Average]
[info]   (min, avg, max) = (12885.065, 13435.831, 13740.887), stdev = 336.670
[info]   CI (99.9%): [12139.435, 14732.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1467.856 ±(99.9%) 413.128 MB/sec [Average]
[info]   (min, avg, max) = (1308.045, 1467.856, 1577.478), stdev = 107.288
[info]   CI (99.9%): [1054.728, 1880.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   172109.642 ±(99.9%) 57069.030 B/op [Average]
[info]   (min, avg, max) = (152265.608, 172109.642, 192684.003), stdev = 14820.646
[info]   CI (99.9%): [115040.612, 229178.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1322.714 ±(99.9%) 11.029 MB/sec [Average]
[info]   (min, avg, max) = (1319.113, 1322.714, 1325.619), stdev = 2.864
[info]   CI (99.9%): [1311.685, 1333.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   155013.377 ±(99.9%) 15906.440 B/op [Average]
[info]   (min, avg, max) = (151213.448, 155013.377, 161920.248), stdev = 4130.852
[info]   CI (99.9%): [139106.937, 170919.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.728 ±(99.9%) 8.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.728, 4.343), stdev = 2.163
[info]   CI (99.9%): [≈ 0, 10.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   205.376 ±(99.9%) 991.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 205.376, 505.564), stdev = 257.391
[info]   CI (99.9%): [≈ 0, 1196.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 4.123
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1602.126 ops/s
[info] # Warmup Iteration   2: 11408.248 ops/s
[info] # Warmup Iteration   3: 13978.327 ops/s
[info] # Warmup Iteration   4: 14091.706 ops/s
[info] # Warmup Iteration   5: 13691.167 ops/s
[info] Iteration   1: 14075.064 ops/s
[info]                  ·gc.alloc.rate:               1284.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          143645.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148668.681 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 13888.913 ops/s
[info]                  ·gc.alloc.rate:               1239.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          140490.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150821.024 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 14082.245 ops/s
[info]                  ·gc.alloc.rate:                   1240.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              138662.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148903.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 13559.869 ops/s
[info]                  ·gc.alloc.rate:                   1373.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              159471.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154700.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 312.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 13228.721 ops/s
[info]                  ·gc.alloc.rate:                   1350.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              160658.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158490.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13766.963 ±(99.9%) 1417.164 ops/s [Average]
[info]   (min, avg, max) = (13228.721, 13766.963, 14082.245), stdev = 368.033
[info]   CI (99.9%): [12349.798, 15184.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1298.020 ±(99.9%) 238.651 MB/sec [Average]
[info]   (min, avg, max) = (1239.853, 1298.020, 1373.967), stdev = 61.977
[info]   CI (99.9%): [1059.369, 1536.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   148585.586 ±(99.9%) 40962.787 B/op [Average]
[info]   (min, avg, max) = (138662.349, 148585.586, 160658.671), stdev = 10637.906
[info]   CI (99.9%): [107622.799, 189548.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1331.703 ±(99.9%) 5.210 MB/sec [Average]
[info]   (min, avg, max) = (1329.639, 1331.703, 1332.863), stdev = 1.353
[info]   CI (99.9%): [1326.493, 1336.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   152316.824 ±(99.9%) 16223.076 B/op [Average]
[info]   (min, avg, max) = (148668.681, 152316.824, 158490.931), stdev = 4213.081
[info]   CI (99.9%): [136093.748, 168539.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.214 ±(99.9%) 6.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.214, 3.368), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 7.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   142.864 ±(99.9%) 761.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.864, 400.601), stdev = 197.678
[info]   CI (99.9%): [≈ 0, 904.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 10.000), stdev = 2.510
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76281.887 ops/s
[info] # Warmup Iteration   2: 267975.947 ops/s
[info] # Warmup Iteration   3: 351047.706 ops/s
[info] # Warmup Iteration   4: 356852.108 ops/s
[info] # Warmup Iteration   5: 340220.468 ops/s
[info] Iteration   1: 342841.201 ops/s
[info]                  ·gc.alloc.rate:                   1647.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              7562.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6091.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 357925.931 ops/s
[info]                  ·gc.alloc.rate:                   1713.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              7531.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8758.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 359184.506 ops/s
[info]                  ·gc.alloc.rate:                   1716.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              7517.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5811.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 359779.665 ops/s
[info]                  ·gc.alloc.rate:                   1724.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8698.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 359576.893 ops/s
[info]                  ·gc.alloc.rate:               1714.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          7502.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5810.828 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   355861.639 ±(99.9%) 28164.281 ops/s [Average]
[info]   (min, avg, max) = (342841.201, 355861.639, 359779.665), stdev = 7314.174
[info]   CI (99.9%): [327697.358, 384025.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1703.062 ±(99.9%) 121.291 MB/sec [Average]
[info]   (min, avg, max) = (1647.311, 1703.062, 1724.702), stdev = 31.499
[info]   CI (99.9%): [1581.772, 1824.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7531.469 ±(99.9%) 90.112 B/op [Average]
[info]   (min, avg, max) = (7502.111, 7531.469, 7562.318), stdev = 23.402
[info]   CI (99.9%): [7441.357, 7621.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1592.393 ±(99.9%) 1398.683 MB/sec [Average]
[info]   (min, avg, max) = (1326.668, 1592.393, 1992.136), stdev = 363.234
[info]   CI (99.9%): [193.710, 2991.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7034.086 ±(99.9%) 5971.854 B/op [Average]
[info]   (min, avg, max) = (5810.828, 7034.086, 8758.198), stdev = 1550.872
[info]   CI (99.9%): [1062.232, 13005.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.966), stdev = 1.755
[info]   CI (99.9%): [≈ 0, 7.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.643 ±(99.9%) 29.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.643, 17.438), stdev = 7.714
[info]   CI (99.9%): [≈ 0, 33.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679.746 ops/s
[info] # Warmup Iteration   2: 7396.724 ops/s
[info] # Warmup Iteration   3: 10996.524 ops/s
[info] # Warmup Iteration   4: 13691.719 ops/s
[info] # Warmup Iteration   5: 13664.449 ops/s
[info] Iteration   1: 12697.071 ops/s
[info]                  ·gc.alloc.rate:                   1598.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              198130.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247879.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 12894.313 ops/s
[info]                  ·gc.alloc.rate:                   1594.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              194512.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162945.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 12989.925 ops/s
[info]                  ·gc.alloc.rate:                   1593.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              193036.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161902.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12964.449 ops/s
[info]                  ·gc.alloc.rate:                   1601.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              194386.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243061.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12859.822 ops/s
[info]                  ·gc.alloc.rate:                   1733.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              212140.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163404.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12881.116 ±(99.9%) 444.428 ops/s [Average]
[info]   (min, avg, max) = (12697.071, 12881.116, 12989.925), stdev = 115.417
[info]   CI (99.9%): [12436.688, 13325.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1624.215 ±(99.9%) 235.476 MB/sec [Average]
[info]   (min, avg, max) = (1593.552, 1624.215, 1733.462), stdev = 61.152
[info]   CI (99.9%): [1388.739, 1859.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   198441.246 ±(99.9%) 30371.502 B/op [Average]
[info]   (min, avg, max) = (193036.476, 198441.246, 212140.229), stdev = 7887.383
[info]   CI (99.9%): [168069.744, 228812.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.883 ±(99.9%) 1403.085 MB/sec [Average]
[info]   (min, avg, max) = (1335.227, 1601.883, 2002.299), stdev = 364.377
[info]   CI (99.9%): [198.798, 3004.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   195838.811 ±(99.9%) 174598.418 B/op [Average]
[info]   (min, avg, max) = (161902.975, 195838.811, 247879.766), stdev = 45342.655
[info]   CI (99.9%): [21240.392, 370437.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.748 ±(99.9%) 2.253 MB/sec [Average]
[info]   (min, avg, max) = (0.208, 0.748, 1.739), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91.132 ±(99.9%) 274.568 B/op [Average]
[info]   (min, avg, max) = (25.804, 91.132, 212.210), stdev = 71.305
[info]   CI (99.9%): [≈ 0, 365.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6581.045 ops/s
[info] # Warmup Iteration   2: 23615.041 ops/s
[info] # Warmup Iteration   3: 37403.882 ops/s
[info] # Warmup Iteration   4: 35117.095 ops/s
[info] # Warmup Iteration   5: 33896.024 ops/s
[info] Iteration   1: 34372.769 ops/s
[info]                  ·gc.alloc.rate:                   1802.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              82499.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90937.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 36141.448 ops/s
[info]                  ·gc.alloc.rate:                   1456.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              63442.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57625.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 36673.727 ops/s
[info]                  ·gc.alloc.rate:                   1449.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              62185.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56732.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 36234.711 ops/s
[info]                  ·gc.alloc.rate:                   1451.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              63016.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86105.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 37153.293 ops/s
[info]                  ·gc.alloc.rate:                   1474.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              62480.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56241.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   36115.190 ±(99.9%) 4057.191 ops/s [Average]
[info]   (min, avg, max) = (34372.769, 36115.190, 37153.293), stdev = 1053.640
[info]   CI (99.9%): [32057.999, 40172.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1527.043 ±(99.9%) 594.419 MB/sec [Average]
[info]   (min, avg, max) = (1449.080, 1527.043, 1802.597), stdev = 154.369
[info]   CI (99.9%): [932.624, 2121.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66724.985 ±(99.9%) 34006.645 B/op [Average]
[info]   (min, avg, max) = (62185.812, 66724.985, 82499.354), stdev = 8831.418
[info]   CI (99.9%): [32718.339, 100731.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1588.710 ±(99.9%) 1394.078 MB/sec [Average]
[info]   (min, avg, max) = (1322.009, 1588.710, 1986.962), stdev = 362.038
[info]   CI (99.9%): [194.632, 2982.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69528.526 ±(99.9%) 67113.383 B/op [Average]
[info]   (min, avg, max) = (56241.239, 69528.526, 90937.181), stdev = 17429.132
[info]   CI (99.9%): [2415.144, 136641.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.433 ±(99.9%) 13.609 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.433, 7.901), stdev = 3.534
[info]   CI (99.9%): [≈ 0, 16.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   107.766 ±(99.9%) 597.150 B/op [Average]
[info]   (min, avg, max) = (0.893, 107.766, 344.040), stdev = 155.078
[info]   CI (99.9%): [≈ 0, 704.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17511.849 ops/s
[info] # Warmup Iteration   2: 93360.079 ops/s
[info] # Warmup Iteration   3: 127002.433 ops/s
[info] # Warmup Iteration   4: 130257.978 ops/s
[info] # Warmup Iteration   5: 130913.573 ops/s
[info] Iteration   1: 132664.224 ops/s
[info]                  ·gc.alloc.rate:                   2476.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              29372.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23677.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 130979.259 ops/s
[info]                  ·gc.alloc.rate:                   2455.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              29500.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32114.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 132149.388 ops/s
[info]                  ·gc.alloc.rate:                   2476.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              29498.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23970.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 131418.851 ops/s
[info]                  ·gc.alloc.rate:                   2504.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              29996.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32237.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 130318.277 ops/s
[info]                  ·gc.alloc.rate:                   2457.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              29676.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24445.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   131506.000 ±(99.9%) 3576.732 ops/s [Average]
[info]   (min, avg, max) = (130318.277, 131506.000, 132664.224), stdev = 928.866
[info]   CI (99.9%): [127929.268, 135082.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2474.177 ±(99.9%) 77.037 MB/sec [Average]
[info]   (min, avg, max) = (2455.181, 2474.177, 2504.764), stdev = 20.006
[info]   CI (99.9%): [2397.139, 2551.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29609.112 ±(99.9%) 932.858 B/op [Average]
[info]   (min, avg, max) = (29372.942, 29609.112, 29996.916), stdev = 242.260
[info]   CI (99.9%): [28676.253, 30541.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2279.577 ±(99.9%) 1416.257 MB/sec [Average]
[info]   (min, avg, max) = (1996.647, 2279.577, 2691.854), stdev = 367.797
[info]   CI (99.9%): [863.320, 3695.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27288.939 ±(99.9%) 17211.230 B/op [Average]
[info]   (min, avg, max) = (23677.166, 27288.939, 32237.489), stdev = 4469.702
[info]   CI (99.9%): [10077.709, 44500.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.549 ±(99.9%) 2.587 B/op [Average]
[info]   (min, avg, max) = (0.247, 0.549, 1.751), stdev = 0.672
[info]   CI (99.9%): [≈ 0, 3.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 466113.744 ops/s
[info] # Warmup Iteration   2: 803983.940 ops/s
[info] # Warmup Iteration   3: 870075.327 ops/s
[info] # Warmup Iteration   4: 845856.941 ops/s
[info] # Warmup Iteration   5: 873102.705 ops/s
[info] Iteration   1: 873635.550 ops/s
[info]                  ·gc.alloc.rate:                   1247.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              2246.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2413.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 872782.664 ops/s
[info]                  ·gc.alloc.rate:                   1238.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              2232.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2416.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 871105.026 ops/s
[info]                  ·gc.alloc.rate:                   1242.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              2245.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2422.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 877958.338 ops/s
[info]                  ·gc.alloc.rate:                   1231.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              2207.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1202.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.696 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 853124.737 ops/s
[info]                  ·gc.alloc.rate:                   1211.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              2234.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2471.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   869721.263 ±(99.9%) 37029.437 ops/s [Average]
[info]   (min, avg, max) = (853124.737, 869721.263, 877958.338), stdev = 9616.427
[info]   CI (99.9%): [832691.826, 906750.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1234.261 ±(99.9%) 53.188 MB/sec [Average]
[info]   (min, avg, max) = (1211.781, 1234.261, 1247.051), stdev = 13.813
[info]   CI (99.9%): [1181.073, 1287.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2233.400 ±(99.9%) 60.251 B/op [Average]
[info]   (min, avg, max) = (2207.563, 2233.400, 2246.565), stdev = 15.647
[info]   CI (99.9%): [2173.150, 2293.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.341 ±(99.9%) 1152.729 MB/sec [Average]
[info]   (min, avg, max) = (670.831, 1206.341, 1341.007), stdev = 299.360
[info]   CI (99.9%): [53.612, 2359.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2185.336 ±(99.9%) 2117.515 B/op [Average]
[info]   (min, avg, max) = (1202.523, 2185.336, 2471.312), stdev = 549.912
[info]   CI (99.9%): [67.822, 4302.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 5.254 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.831, 3.177), stdev = 1.364
[info]   CI (99.9%): [≈ 0, 6.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.499 ±(99.9%) 9.420 B/op [Average]
[info]   (min, avg, max) = (0.014, 1.499, 5.696), stdev = 2.446
[info]   CI (99.9%): [≈ 0, 10.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538485.823 ops/s
[info] # Warmup Iteration   2: 880987.466 ops/s
[info] # Warmup Iteration   3: 956058.346 ops/s
[info] # Warmup Iteration   4: 954840.660 ops/s
[info] # Warmup Iteration   5: 961056.083 ops/s
[info] Iteration   1: 964233.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 961823.823 ops/s
[info]                  ·gc.alloc.rate:      0.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.137 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 963416.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 963166.515 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 964029.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   963333.959 ±(99.9%) 3657.014 ops/s [Average]
[info]   (min, avg, max) = (961823.823, 963333.959, 964233.276), stdev = 949.715
[info]   CI (99.9%): [959676.946, 966990.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.017, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.028 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.028, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13580.680 ops/s
[info] # Warmup Iteration   2: 89667.327 ops/s
[info] # Warmup Iteration   3: 103861.472 ops/s
[info] # Warmup Iteration   4: 124669.880 ops/s
[info] # Warmup Iteration   5: 125693.791 ops/s
[info] Iteration   1: 123874.453 ops/s
[info]                  ·gc.alloc.rate:                   2765.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              35130.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33962.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 126029.005 ops/s
[info]                  ·gc.alloc.rate:                   2806.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              35052.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33441.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 124950.573 ops/s
[info]                  ·gc.alloc.rate:                   2807.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              35359.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33830.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 123922.581 ops/s
[info]                  ·gc.alloc.rate:               2826.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          35893.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34212.834 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 124832.097 ops/s
[info]                  ·gc.alloc.rate:                   2795.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              35240.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34055.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   124721.742 ±(99.9%) 3406.262 ops/s [Average]
[info]   (min, avg, max) = (123874.453, 124721.742, 126029.005), stdev = 884.595
[info]   CI (99.9%): [121315.480, 128128.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2800.200 ±(99.9%) 86.008 MB/sec [Average]
[info]   (min, avg, max) = (2765.530, 2800.200, 2826.180), stdev = 22.336
[info]   CI (99.9%): [2714.191, 2886.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35335.271 ±(99.9%) 1282.023 B/op [Average]
[info]   (min, avg, max) = (35052.216, 35335.271, 35893.509), stdev = 332.937
[info]   CI (99.9%): [34053.248, 36617.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2686.469 ±(99.9%) 43.563 MB/sec [Average]
[info]   (min, avg, max) = (2673.596, 2686.469, 2701.195), stdev = 11.313
[info]   CI (99.9%): [2642.906, 2730.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33900.556 ±(99.9%) 1124.368 B/op [Average]
[info]   (min, avg, max) = (33441.297, 33900.556, 34212.834), stdev = 291.995
[info]   CI (99.9%): [32776.188, 35024.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.229), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.739 ±(99.9%) 4.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.739, 2.909), stdev = 1.219
[info]   CI (99.9%): [≈ 0, 5.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4755.110 ops/s
[info] # Warmup Iteration   2: 10452.873 ops/s
[info] # Warmup Iteration   3: 18378.848 ops/s
[info] # Warmup Iteration   4: 18890.345 ops/s
[info] # Warmup Iteration   5: 17413.617 ops/s
[info] Iteration   1: 18167.338 ops/s
[info]                  ·gc.alloc.rate:                   932.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              80815.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115274.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 17623.054 ops/s
[info]                  ·gc.alloc.rate:               1090.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          97361.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59430.808 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 17792.800 ops/s
[info]                  ·gc.alloc.rate:               1238.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          109533.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117844.010 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   4: 17843.950 ops/s
[info]                  ·gc.alloc.rate:                   1064.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              93879.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117154.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 19034.927 ops/s
[info]                  ·gc.alloc.rate:               952.609 MB/sec
[info]                  ·gc.alloc.rate.norm:          78763.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54802.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18092.414 ±(99.9%) 2166.091 ops/s [Average]
[info]   (min, avg, max) = (17623.054, 18092.414, 19034.927), stdev = 562.527
[info]   CI (99.9%): [15926.323, 20258.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1055.787 ±(99.9%) 472.829 MB/sec [Average]
[info]   (min, avg, max) = (932.959, 1055.787, 1238.258), stdev = 122.792
[info]   CI (99.9%): [582.958, 1528.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92070.853 ±(99.9%) 48705.959 B/op [Average]
[info]   (min, avg, max) = (78763.993, 92070.853, 109533.782), stdev = 12648.783
[info]   CI (99.9%): [43364.894, 140776.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1063.994 ±(99.9%) 1405.217 MB/sec [Average]
[info]   (min, avg, max) = (662.809, 1063.994, 1332.203), stdev = 364.930
[info]   CI (99.9%): [≈ 0, 2469.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   92901.265 ±(99.9%) 125997.434 B/op [Average]
[info]   (min, avg, max) = (54802.664, 92901.265, 117844.010), stdev = 32721.134
[info]   CI (99.9%): [≈ 0, 218898.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.594 ±(99.9%) 4.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.594, 2.617), stdev = 1.141
[info]   CI (99.9%): [≈ 0, 4.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52.287 ±(99.9%) 387.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.287, 230.778), stdev = 100.658
[info]   CI (99.9%): [≈ 0, 439.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.800, 16.000), stdev = 4.868
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5542.709 ops/s
[info] # Warmup Iteration   2: 12867.236 ops/s
[info] # Warmup Iteration   3: 19159.303 ops/s
[info] # Warmup Iteration   4: 19147.389 ops/s
[info] # Warmup Iteration   5: 19475.410 ops/s
[info] Iteration   1: 19539.374 ops/s
[info]                  ·gc.alloc.rate:               816.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          65773.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      644.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51911.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 17992.134 ops/s
[info]                  ·gc.alloc.rate:               1143.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          100067.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1292.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113102.863 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Iteration   3: 18263.145 ops/s
[info]                  ·gc.alloc.rate:                   1113.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              95995.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          636.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54877.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.846 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 19213.540 ops/s
[info]                  ·gc.alloc.rate:                   798.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              65370.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          636.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52164.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 18874.405 ops/s
[info]                  ·gc.alloc.rate:               795.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          66339.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1279.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106651.794 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18776.519 ±(99.9%) 2481.597 ops/s [Average]
[info]   (min, avg, max) = (17992.134, 18776.519, 19539.374), stdev = 644.463
[info]   CI (99.9%): [16294.923, 21258.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   933.733 ±(99.9%) 688.063 MB/sec [Average]
[info]   (min, avg, max) = (795.906, 933.733, 1143.950), stdev = 178.688
[info]   CI (99.9%): [245.670, 1621.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   78709.229 ±(99.9%) 68158.904 B/op [Average]
[info]   (min, avg, max) = (65370.857, 78709.229, 100067.414), stdev = 17700.651
[info]   CI (99.9%): [10550.325, 146868.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   898.164 ±(99.9%) 1364.397 MB/sec [Average]
[info]   (min, avg, max) = (636.780, 898.164, 1292.969), stdev = 354.330
[info]   CI (99.9%): [≈ 0, 2262.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   75741.375 ±(99.9%) 120396.929 B/op [Average]
[info]   (min, avg, max) = (51911.031, 75741.375, 113102.863), stdev = 31266.700
[info]   CI (99.9%): [≈ 0, 196138.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.573 ±(99.9%) 10.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.573, 6.253), stdev = 2.708
[info]   CI (99.9%): [≈ 0, 11.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   134.175 ±(99.9%) 898.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.175, 538.846), stdev = 233.330
[info]   CI (99.9%): [≈ 0, 1032.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.600, 17.000), stdev = 5.079
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67487.899 ops/s
[info] # Warmup Iteration   2: 133849.932 ops/s
[info] # Warmup Iteration   3: 165966.717 ops/s
[info] # Warmup Iteration   4: 165595.692 ops/s
[info] # Warmup Iteration   5: 158935.480 ops/s
[info] Iteration   1: 160446.276 ops/s
[info]                  ·gc.alloc.rate:               415.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          4074.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6482.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 166276.333 ops/s
[info]                  ·gc.alloc.rate:      418.030 MB/sec
[info]                  ·gc.alloc.rate.norm: 3956.615 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 165975.597 ops/s
[info]                  ·gc.alloc.rate:               432.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          4101.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6266.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 166405.173 ops/s
[info]                  ·gc.alloc.rate:      417.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 166015.982 ops/s
[info]                  ·gc.alloc.rate:                   435.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              4127.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6270.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   165023.872 ±(99.9%) 9877.688 ops/s [Average]
[info]   (min, avg, max) = (160446.276, 165023.872, 166405.173), stdev = 2565.204
[info]   CI (99.9%): [155146.184, 174901.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   423.884 ±(99.9%) 36.078 MB/sec [Average]
[info]   (min, avg, max) = (415.407, 423.884, 435.410), stdev = 9.369
[info]   CI (99.9%): [387.806, 459.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4042.409 ±(99.9%) 317.869 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4042.409, 4127.278), stdev = 82.550
[info]   CI (99.9%): [3724.540, 4360.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   396.679 ±(99.9%) 1394.383 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.679, 661.555), stdev = 362.117
[info]   CI (99.9%): [≈ 0, 1791.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3803.872 ±(99.9%) 13375.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3803.872, 6482.292), stdev = 3473.541
[info]   CI (99.9%): [≈ 0, 17179.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1809.328 ops/s
[info] # Warmup Iteration   2: 10360.639 ops/s
[info] # Warmup Iteration   3: 18314.559 ops/s
[info] # Warmup Iteration   4: 18469.223 ops/s
[info] # Warmup Iteration   5: 17664.388 ops/s
[info] Iteration   1: 18489.189 ops/s
[info]                  ·gc.alloc.rate:                   1276.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              108655.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111565.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 17552.802 ops/s
[info]                  ·gc.alloc.rate:                        1383.905 MB/sec
[info]                  ·gc.alloc.rate.norm:                   124080.965 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.014 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.258 B/op
[info]                  ·gc.churn.Metaspace:                   0.042 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              3.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1325.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          118854.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      500.443 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              51.000 ms
[info] Iteration   3: 17239.740 ops/s
[info]                  ·gc.alloc.rate:                   1318.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              120372.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119927.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17535.616 ops/s
[info]                  ·gc.alloc.rate:                   1230.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              110372.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117777.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17905.833 ops/s
[info]                  ·gc.alloc.rate:               1233.213 MB/sec
[info]                  ·gc.alloc.rate.norm:          108394.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57639.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   17744.636 ±(99.9%) 1842.436 ops/s [Average]
[info]   (min, avg, max) = (17239.740, 17744.636, 18489.189), stdev = 478.475
[info]   CI (99.9%): [15902.200, 19587.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1288.480 ±(99.9%) 248.066 MB/sec [Average]
[info]   (min, avg, max) = (1230.258, 1288.480, 1383.905), stdev = 64.422
[info]   CI (99.9%): [1040.414, 1536.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114375.180 ±(99.9%) 28209.632 B/op [Average]
[info]   (min, avg, max) = (108394.346, 114375.180, 124080.965), stdev = 7325.952
[info]   CI (99.9%): [86165.548, 142584.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.252 ±(99.9%) 2.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.252, 1.258), stdev = 0.562
[info]   CI (99.9%): [≈ 0, 2.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   0.746 ±(99.9%) 6.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.746, 3.728), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 7.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1183.704 ±(99.9%) 1136.640 MB/sec [Average]
[info]   (min, avg, max) = (655.770, 1183.704, 1325.619), stdev = 295.182
[info]   CI (99.9%): [47.063, 2320.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105153.004 ±(99.9%) 103037.328 B/op [Average]
[info]   (min, avg, max) = (57639.479, 105153.004, 119927.611), stdev = 26758.467
[info]   CI (99.9%): [2115.676, 208190.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.247 ±(99.9%) 9.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.247, 5.582), stdev = 2.342
[info]   CI (99.9%): [≈ 0, 11.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   198.276 ±(99.9%) 797.515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 198.276, 500.443), stdev = 207.112
[info]   CI (99.9%): [≈ 0, 995.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 13.600, 51.000), stdev = 21.114
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15427.999 ops/s
[info] # Warmup Iteration   2: 54358.974 ops/s
[info] # Warmup Iteration   3: 58135.332 ops/s
[info] # Warmup Iteration   4: 59353.972 ops/s
[info] # Warmup Iteration   5: 63248.143 ops/s
[info] Iteration   1: 63413.151 ops/s
[info]                  ·gc.alloc.rate:                   1839.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              45564.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49466.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 63997.684 ops/s
[info]                  ·gc.alloc.rate:                   1818.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              44715.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32805.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 63940.537 ops/s
[info]                  ·gc.alloc.rate:                   1840.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              45288.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49124.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 63969.847 ops/s
[info]                  ·gc.alloc.rate:                   1824.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              44898.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49077.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 63418.357 ops/s
[info]                  ·gc.alloc.rate:               1823.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          45236.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33030.442 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   63747.915 ±(99.9%) 1170.206 ops/s [Average]
[info]   (min, avg, max) = (63413.151, 63747.915, 63997.684), stdev = 303.899
[info]   CI (99.9%): [62577.710, 64918.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1829.104 ±(99.9%) 38.089 MB/sec [Average]
[info]   (min, avg, max) = (1818.215, 1829.104, 1840.031), stdev = 9.891
[info]   CI (99.9%): [1791.015, 1867.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   45140.846 ±(99.9%) 1291.128 B/op [Average]
[info]   (min, avg, max) = (44715.957, 45140.846, 45564.206), stdev = 335.302
[info]   CI (99.9%): [43849.717, 46431.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1730.503 ±(99.9%) 1398.707 MB/sec [Average]
[info]   (min, avg, max) = (1331.257, 1730.503, 1996.667), stdev = 363.240
[info]   CI (99.9%): [331.795, 3129.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42701.114 ±(99.9%) 34394.655 B/op [Average]
[info]   (min, avg, max) = (32805.884, 42701.114, 49466.410), stdev = 8932.183
[info]   CI (99.9%): [8306.459, 77095.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 5.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.479), stdev = 1.484
[info]   CI (99.9%): [≈ 0, 6.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.074 ±(99.9%) 141.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.074, 86.187), stdev = 36.762
[info]   CI (99.9%): [≈ 0, 164.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32147.380 ops/s
[info] # Warmup Iteration   2: 80891.404 ops/s
[info] # Warmup Iteration   3: 97943.972 ops/s
[info] # Warmup Iteration   4: 102145.480 ops/s
[info] # Warmup Iteration   5: 102687.368 ops/s
[info] Iteration   1: 97805.015 ops/s
[info]                  ·gc.alloc.rate:                   1860.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              29941.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32201.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 103270.618 ops/s
[info]                  ·gc.alloc.rate:                   1956.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              29804.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30456.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 102352.686 ops/s
[info]                  ·gc.alloc.rate:                   1949.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              29980.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30657.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 100850.215 ops/s
[info]                  ·gc.alloc.rate:                   1919.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              29956.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31113.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 102888.900 ops/s
[info]                  ·gc.alloc.rate:               1958.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          29965.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30553.959 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   101433.487 ±(99.9%) 8576.703 ops/s [Average]
[info]   (min, avg, max) = (97805.015, 101433.487, 103270.618), stdev = 2227.342
[info]   CI (99.9%): [92856.784, 110010.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1929.127 ±(99.9%) 158.850 MB/sec [Average]
[info]   (min, avg, max) = (1860.791, 1929.127, 1958.883), stdev = 41.253
[info]   CI (99.9%): [1770.278, 2087.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29929.490 ±(99.9%) 275.567 B/op [Average]
[info]   (min, avg, max) = (29804.048, 29929.490, 29980.724), stdev = 71.564
[info]   CI (99.9%): [29653.923, 30205.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1997.126 ±(99.9%) 12.205 MB/sec [Average]
[info]   (min, avg, max) = (1994.003, 1997.126, 2001.276), stdev = 3.170
[info]   CI (99.9%): [1984.921, 2009.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30996.682 ±(99.9%) 2769.332 B/op [Average]
[info]   (min, avg, max) = (30456.480, 30996.682, 32201.868), stdev = 719.187
[info]   CI (99.9%): [28227.350, 33766.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.969 ±(99.9%) 6.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.969, 3.638), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 7.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.389 ±(99.9%) 97.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.389, 58.533), stdev = 25.234
[info]   CI (99.9%): [≈ 0, 112.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.438
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156830.611 ops/s
[info] # Warmup Iteration   2: 301296.226 ops/s
[info] # Warmup Iteration   3: 350429.664 ops/s
[info] # Warmup Iteration   4: 351397.853 ops/s
[info] # Warmup Iteration   5: 351618.397 ops/s
[info] Iteration   1: 349098.217 ops/s
[info]                  ·gc.alloc.rate:               692.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          3120.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3015.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 336748.782 ops/s
[info]                  ·gc.alloc.rate:               669.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          3130.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3128.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 348855.827 ops/s
[info]                  ·gc.alloc.rate:               692.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          3122.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3020.352 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 351334.580 ops/s
[info]                  ·gc.alloc.rate:                   696.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              3121.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3000.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 351791.015 ops/s
[info]                  ·gc.alloc.rate:               694.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          3108.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2996.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   347565.684 ±(99.9%) 23820.870 ops/s [Average]
[info]   (min, avg, max) = (336748.782, 347565.684, 351791.015), stdev = 6186.204
[info]   CI (99.9%): [323744.815, 371386.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   689.145 ±(99.9%) 42.510 MB/sec [Average]
[info]   (min, avg, max) = (669.727, 689.145, 696.923), stdev = 11.040
[info]   CI (99.9%): [646.635, 731.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3120.467 ±(99.9%) 29.884 B/op [Average]
[info]   (min, avg, max) = (3108.452, 3120.467, 3130.011), stdev = 7.761
[info]   CI (99.9%): [3090.583, 3150.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.527 ±(99.9%) 1.796 MB/sec [Average]
[info]   (min, avg, max) = (668.771, 669.527, 669.975), stdev = 0.466
[info]   CI (99.9%): [667.731, 671.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3032.336 ±(99.9%) 211.096 B/op [Average]
[info]   (min, avg, max) = (2996.706, 3032.336, 3128.804), stdev = 54.821
[info]   CI (99.9%): [2821.239, 3243.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.280), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189836.301 ops/s
[info] # Warmup Iteration   2: 321462.411 ops/s
[info] # Warmup Iteration   3: 370552.438 ops/s
[info] # Warmup Iteration   4: 376481.391 ops/s
[info] # Warmup Iteration   5: 376963.391 ops/s
[info] Iteration   1: 377905.654 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 377729.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 378160.252 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 377113.706 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.540 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 378624.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   377906.761 ±(99.9%) 2143.768 ops/s [Average]
[info]   (min, avg, max) = (377113.706, 377906.761, 378624.553), stdev = 556.730
[info]   CI (99.9%): [375762.994, 380050.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.709 ±(99.9%) 6.093 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.709, 3.540), stdev = 1.582
[info]   CI (99.9%): [≈ 0, 6.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11777.988 ops/s
[info] # Warmup Iteration   2: 54849.220 ops/s
[info] # Warmup Iteration   3: 63510.725 ops/s
[info] # Warmup Iteration   4: 84318.041 ops/s
[info] # Warmup Iteration   5: 86724.958 ops/s
[info] Iteration   1: 86155.562 ops/s
[info]                  ·gc.alloc.rate:                   1780.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              32534.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24240.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 88071.193 ops/s
[info]                  ·gc.alloc.rate:                   1845.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              32977.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35440.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 89049.944 ops/s
[info]                  ·gc.alloc.rate:                   1853.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              32749.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35003.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.943 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 86561.998 ops/s
[info]                  ·gc.alloc.rate:                   1781.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              32388.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24040.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 86451.820 ops/s
[info]                  ·gc.alloc.rate:               1791.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          32613.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1986.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36168.038 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   87258.103 ±(99.9%) 4802.535 ops/s [Average]
[info]   (min, avg, max) = (86155.562, 87258.103, 89049.944), stdev = 1247.203
[info]   CI (99.9%): [82455.568, 92060.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1810.504 ±(99.9%) 137.730 MB/sec [Average]
[info]   (min, avg, max) = (1780.925, 1810.504, 1853.112), stdev = 35.768
[info]   CI (99.9%): [1672.774, 1948.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32652.649 ±(99.9%) 861.548 B/op [Average]
[info]   (min, avg, max) = (32388.691, 32652.649, 32977.535), stdev = 223.741
[info]   CI (99.9%): [31791.101, 33514.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1720.007 ±(99.9%) 1390.015 MB/sec [Average]
[info]   (min, avg, max) = (1322.244, 1720.007, 1986.888), stdev = 360.983
[info]   CI (99.9%): [329.992, 3110.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30978.678 ±(99.9%) 24092.361 B/op [Average]
[info]   (min, avg, max) = (24040.464, 30978.678, 36168.038), stdev = 6256.710
[info]   CI (99.9%): [6886.317, 55071.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 7.413 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.394), stdev = 1.925
[info]   CI (99.9%): [≈ 0, 8.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.390 ±(99.9%) 135.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.390, 80.278), stdev = 35.187
[info]   CI (99.9%): [≈ 0, 152.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23943.321 ops/s
[info] # Warmup Iteration   2: 162418.728 ops/s
[info] # Warmup Iteration   3: 189947.528 ops/s
[info] # Warmup Iteration   4: 219258.835 ops/s
[info] # Warmup Iteration   5: 219575.654 ops/s
[info] Iteration   1: 211213.375 ops/s
[info]                  ·gc.alloc.rate:                   2719.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              20267.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19880.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.927 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 222642.935 ops/s
[info]                  ·gc.alloc.rate:                   2862.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              20225.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18827.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 222787.545 ops/s
[info]                  ·gc.alloc.rate:                   2863.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              20225.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18810.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 219600.536 ops/s
[info]                  ·gc.alloc.rate:                   2849.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              20425.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19127.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 222983.601 ops/s
[info]                  ·gc.alloc.rate:                   2893.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              20420.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18896.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   219845.598 ±(99.9%) 19339.909 ops/s [Average]
[info]   (min, avg, max) = (211213.375, 219845.598, 222983.601), stdev = 5022.513
[info]   CI (99.9%): [200505.690, 239185.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2837.593 ±(99.9%) 260.484 MB/sec [Average]
[info]   (min, avg, max) = (2719.976, 2837.593, 2893.026), stdev = 67.647
[info]   CI (99.9%): [2577.109, 3098.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20312.768 ±(99.9%) 393.244 B/op [Average]
[info]   (min, avg, max) = (20225.177, 20312.768, 20425.859), stdev = 102.124
[info]   CI (99.9%): [19919.524, 20706.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2668.183 ±(99.9%) 21.524 MB/sec [Average]
[info]   (min, avg, max) = (2662.740, 2668.183, 2677.108), stdev = 5.590
[info]   CI (99.9%): [2646.658, 2689.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19108.417 ±(99.9%) 1732.155 B/op [Average]
[info]   (min, avg, max) = (18810.036, 19108.417, 19880.453), stdev = 449.835
[info]   CI (99.9%): [17376.262, 20840.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.702 ±(99.9%) 4.043 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.702, 2.406), stdev = 1.050
[info]   CI (99.9%): [≈ 0, 4.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.143 ±(99.9%) 30.021 B/op [Average]
[info]   (min, avg, max) = (0.147, 5.143, 17.927), stdev = 7.796
[info]   CI (99.9%): [≈ 0, 35.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.599 ops/s
[info] # Warmup Iteration   2: 731778.990 ops/s
[info] # Warmup Iteration   3: 807591.603 ops/s
[info] # Warmup Iteration   4: 821540.303 ops/s
[info] # Warmup Iteration   5: 826565.185 ops/s
[info] Iteration   1: 824121.184 ops/s
[info]                  ·gc.alloc.rate:                   473.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              903.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1266.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 825592.357 ops/s
[info]                  ·gc.alloc.rate:               474.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          904.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1264.197 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 828581.457 ops/s
[info]                  ·gc.alloc.rate:      459.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 824879.875 ops/s
[info]                  ·gc.alloc.rate:               471.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          898.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1266.571 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 827917.506 ops/s
[info]                  ·gc.alloc.rate:                   471.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1261.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   826218.476 ±(99.9%) 7469.876 ops/s [Average]
[info]   (min, avg, max) = (824121.184, 826218.476, 828581.457), stdev = 1939.903
[info]   CI (99.9%): [818748.600, 833688.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   469.913 ±(99.9%) 23.569 MB/sec [Average]
[info]   (min, avg, max) = (459.198, 469.913, 474.371), stdev = 6.121
[info]   CI (99.9%): [446.344, 493.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   894.987 ±(99.9%) 50.924 B/op [Average]
[info]   (min, avg, max) = (872.001, 894.987, 904.184), stdev = 13.225
[info]   CI (99.9%): [844.062, 945.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.882 ±(99.9%) 1142.764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.882, 663.995), stdev = 296.772
[info]   CI (99.9%): [≈ 0, 1673.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1011.828 ±(99.9%) 2178.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1011.828, 1266.571), stdev = 565.633
[info]   CI (99.9%): [≈ 0, 3189.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45860.537 ops/s
[info] # Warmup Iteration   2: 389431.958 ops/s
[info] # Warmup Iteration   3: 422735.103 ops/s
[info] # Warmup Iteration   4: 419274.288 ops/s
[info] # Warmup Iteration   5: 417436.100 ops/s
[info] Iteration   1: 419693.978 ops/s
[info]                  ·gc.alloc.rate:      366.950 MB/sec
[info]                  ·gc.alloc.rate.norm: 1376.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 418047.333 ops/s
[info]                  ·gc.alloc.rate:               376.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          1417.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2497.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 418962.798 ops/s
[info]                  ·gc.alloc.rate:               381.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          1434.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2492.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 421349.540 ops/s
[info]                  ·gc.alloc.rate:      368.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 1376.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 418932.052 ops/s
[info]                  ·gc.alloc.rate:               382.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          1438.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2493.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   419397.140 ±(99.9%) 4765.674 ops/s [Average]
[info]   (min, avg, max) = (418047.333, 419397.140, 421349.540), stdev = 1237.630
[info]   CI (99.9%): [414631.466, 424162.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   375.333 ±(99.9%) 28.565 MB/sec [Average]
[info]   (min, avg, max) = (366.950, 375.333, 382.863), stdev = 7.418
[info]   CI (99.9%): [346.768, 403.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1408.473 ±(99.9%) 118.175 B/op [Average]
[info]   (min, avg, max) = (1376.001, 1408.473, 1438.387), stdev = 30.690
[info]   CI (99.9%): [1290.297, 1526.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   398.194 ±(99.9%) 1399.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.194, 663.771), stdev = 363.500
[info]   CI (99.9%): [≈ 0, 1797.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1496.854 ±(99.9%) 5261.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1496.854, 2497.995), stdev = 1366.436
[info]   CI (99.9%): [≈ 0, 6758.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 432801.958 ops/s
[info] # Warmup Iteration   2: 986159.892 ops/s
[info] # Warmup Iteration   3: 1095679.458 ops/s
[info] # Warmup Iteration   4: 1104829.935 ops/s
[info] # Warmup Iteration   5: 1097528.329 ops/s
[info] Iteration   1: 1101450.892 ops/s
[info]                  ·gc.alloc.rate:                   398.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              569.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1095903.888 ops/s
[info]                  ·gc.alloc.rate:      379.689 MB/sec
[info]                  ·gc.alloc.rate.norm: 545.275 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1096479.211 ops/s
[info]                  ·gc.alloc.rate:               419.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          602.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 959.044 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1115823.098 ops/s
[info]                  ·gc.alloc.rate:      385.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1105872.317 ops/s
[info]                  ·gc.alloc.rate:                   397.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              565.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     950.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1103105.881 ±(99.9%) 31513.070 ops/s [Average]
[info]   (min, avg, max) = (1095903.888, 1103105.881, 1115823.098), stdev = 8183.844
[info]   CI (99.9%): [1071592.811, 1134618.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   396.337 ±(99.9%) 59.367 MB/sec [Average]
[info]   (min, avg, max) = (379.689, 396.337, 419.860), stdev = 15.417
[info]   CI (99.9%): [336.971, 455.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   565.503 ±(99.9%) 91.510 B/op [Average]
[info]   (min, avg, max) = (544.000, 565.503, 602.507), stdev = 23.765
[info]   CI (99.9%): [473.993, 657.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.609 ±(99.9%) 1322.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.609, 668.315), stdev = 343.412
[info]   CI (99.9%): [≈ 0, 1691.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   528.188 ±(99.9%) 1889.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 528.188, 959.044), stdev = 490.767
[info]   CI (99.9%): [≈ 0, 2417.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.063), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6012.865 ops/s
[info] # Warmup Iteration   2: 86411.004 ops/s
[info] # Warmup Iteration   3: 108548.222 ops/s
[info] # Warmup Iteration   4: 106316.177 ops/s
[info] # Warmup Iteration   5: 109204.325 ops/s
[info] Iteration   1: 109164.115 ops/s
[info]                  ·gc.alloc.rate:                   3601.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              51928.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48254.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 110556.257 ops/s
[info]                  ·gc.alloc.rate:                   3646.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              51910.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47809.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 107872.556 ops/s
[info]                  ·gc.alloc.rate:                   3575.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              52157.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49182.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 107875.061 ops/s
[info]                  ·gc.alloc.rate:                   3575.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              52163.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49327.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.607 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 111163.635 ops/s
[info]                  ·gc.alloc.rate:                   3681.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              52115.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47991.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   109326.325 ±(99.9%) 5818.922 ops/s [Average]
[info]   (min, avg, max) = (107872.556, 109326.325, 111163.635), stdev = 1511.156
[info]   CI (99.9%): [103507.403, 115145.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3616.086 ±(99.9%) 178.751 MB/sec [Average]
[info]   (min, avg, max) = (3575.435, 3616.086, 3681.080), stdev = 46.421
[info]   CI (99.9%): [3437.335, 3794.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52054.983 ±(99.9%) 483.499 B/op [Average]
[info]   (min, avg, max) = (51910.077, 52054.983, 52163.586), stdev = 125.563
[info]   CI (99.9%): [51571.483, 52538.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3369.583 ±(99.9%) 66.554 MB/sec [Average]
[info]   (min, avg, max) = (3346.902, 3369.583, 3389.811), stdev = 17.284
[info]   CI (99.9%): [3303.029, 3436.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48513.029 ±(99.9%) 2685.323 B/op [Average]
[info]   (min, avg, max) = (47809.103, 48513.029, 49327.545), stdev = 697.370
[info]   CI (99.9%): [45827.706, 51198.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.599 ±(99.9%) 1.416 B/op [Average]
[info]   (min, avg, max) = (0.296, 0.599, 1.200), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 2.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93312.431 ops/s
[info] # Warmup Iteration   2: 270927.611 ops/s
[info] # Warmup Iteration   3: 307320.905 ops/s
[info] # Warmup Iteration   4: 308827.366 ops/s
[info] # Warmup Iteration   5: 314328.209 ops/s
[info] Iteration   1: 315296.900 ops/s
[info]                  ·gc.alloc.rate:                   1851.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              9240.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10019.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 316385.887 ops/s
[info]                  ·gc.alloc.rate:                   1851.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              9209.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6650.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 316180.001 ops/s
[info]                  ·gc.alloc.rate:                   1863.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              9273.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9961.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 317881.210 ops/s
[info]                  ·gc.alloc.rate:                   1873.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9896.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 317888.109 ops/s
[info]                  ·gc.alloc.rate:               1872.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          9271.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9905.418 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   316726.422 ±(99.9%) 4365.484 ops/s [Average]
[info]   (min, avg, max) = (315296.900, 316726.422, 317888.109), stdev = 1133.702
[info]   CI (99.9%): [312360.937, 321091.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1862.433 ±(99.9%) 41.098 MB/sec [Average]
[info]   (min, avg, max) = (1851.420, 1862.433, 1873.044), stdev = 10.673
[info]   CI (99.9%): [1821.334, 1903.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9253.697 ±(99.9%) 108.152 B/op [Average]
[info]   (min, avg, max) = (9209.840, 9253.697, 9273.998), stdev = 28.087
[info]   CI (99.9%): [9145.544, 9361.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1869.145 ±(99.9%) 1145.171 MB/sec [Average]
[info]   (min, avg, max) = (1337.174, 1869.145, 2007.308), stdev = 297.397
[info]   CI (99.9%): [723.974, 3014.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9286.538 ±(99.9%) 5676.662 B/op [Average]
[info]   (min, avg, max) = (6650.861, 9286.538, 10019.057), stdev = 1474.211
[info]   CI (99.9%): [3609.876, 14963.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.894 ±(99.9%) 5.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.894, 3.178), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 6.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.456 ±(99.9%) 26.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.456, 15.860), stdev = 6.843
[info]   CI (99.9%): [≈ 0, 30.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.844 ops/s
[info] # Warmup Iteration   2: 1837720.581 ops/s
[info] # Warmup Iteration   3: 1765485.663 ops/s
[info] # Warmup Iteration   4: 1922422.821 ops/s
[info] # Warmup Iteration   5: 1991885.329 ops/s
[info] Iteration   1: 2037519.367 ops/s
[info]                  ·gc.alloc.rate:                   713.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     512.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2021101.409 ops/s
[info]                  ·gc.alloc.rate:                   718.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2018497.754 ops/s
[info]                  ·gc.alloc.rate:               701.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.606 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2018414.719 ops/s
[info]                  ·gc.alloc.rate:               706.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 518.128 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2019833.489 ops/s
[info]                  ·gc.alloc.rate:                   706.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   2023073.348 ±(99.9%) 31384.022 ops/s [Average]
[info]   (min, avg, max) = (2018414.719, 2023073.348, 2037519.367), stdev = 8150.331
[info]   CI (99.9%): [1991689.325, 2054457.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   709.320 ±(99.9%) 25.797 MB/sec [Average]
[info]   (min, avg, max) = (701.488, 709.320, 718.358), stdev = 6.699
[info]   CI (99.9%): [683.523, 735.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   551.715 ±(99.9%) 17.814 B/op [Average]
[info]   (min, avg, max) = (546.807, 551.715, 559.372), stdev = 4.626
[info]   CI (99.9%): [533.901, 569.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.142 ±(99.9%) 1.761 MB/sec [Average]
[info]   (min, avg, max) = (663.643, 664.142, 664.741), stdev = 0.457
[info]   CI (99.9%): [662.380, 665.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   516.583 ±(99.9%) 8.949 B/op [Average]
[info]   (min, avg, max) = (512.503, 516.583, 518.128), stdev = 2.324
[info]   CI (99.9%): [507.634, 525.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.022), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505577.789 ops/s
[info] # Warmup Iteration   2: 1730928.975 ops/s
[info] # Warmup Iteration   3: 1821389.527 ops/s
[info] # Warmup Iteration   4: 1855224.190 ops/s
[info] # Warmup Iteration   5: 1847013.065 ops/s
[info] Iteration   1: 1841103.966 ops/s
[info]                  ·gc.alloc.rate:                   651.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1843722.159 ops/s
[info]                  ·gc.alloc.rate:               653.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 568.355 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1834340.780 ops/s
[info]                  ·gc.alloc.rate:               655.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 571.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1928230.940 ops/s
[info]                  ·gc.alloc.rate:                   680.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1841181.306 ops/s
[info]                  ·gc.alloc.rate:      627.131 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1857715.830 ±(99.9%) 152379.728 ops/s [Average]
[info]   (min, avg, max) = (1834340.780, 1857715.830, 1928230.940), stdev = 39572.532
[info]   CI (99.9%): [1705336.102, 2010095.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   653.617 ±(99.9%) 73.066 MB/sec [Average]
[info]   (min, avg, max) = (627.131, 653.617, 680.640), stdev = 18.975
[info]   CI (99.9%): [580.552, 726.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   553.615 ±(99.9%) 39.175 B/op [Average]
[info]   (min, avg, max) = (536.000, 553.615, 562.212), stdev = 10.174
[info]   CI (99.9%): [514.440, 592.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.835 ±(99.9%) 1146.969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.835, 666.809), stdev = 297.864
[info]   CI (99.9%): [≈ 0, 1679.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   450.494 ±(99.9%) 970.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 450.494, 571.282), stdev = 252.072
[info]   CI (99.9%): [≈ 0, 1421.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1078047.893 ops/s
[info] # Warmup Iteration   2: 2092675.439 ops/s
[info] # Warmup Iteration   3: 2242583.021 ops/s
[info] # Warmup Iteration   4: 2280576.271 ops/s
[info] # Warmup Iteration   5: 2285167.180 ops/s
[info] Iteration   1: 2247597.387 ops/s
[info]                  ·gc.alloc.rate:                   800.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     935.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2256556.006 ops/s
[info]                  ·gc.alloc.rate:               793.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 466.239 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2256414.437 ops/s
[info]                  ·gc.alloc.rate:                   789.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2220022.710 ops/s
[info]                  ·gc.alloc.rate:               772.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 474.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2157957.548 ops/s
[info]                  ·gc.alloc.rate:               751.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 488.296 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   2227709.618 ±(99.9%) 160808.118 ops/s [Average]
[info]   (min, avg, max) = (2157957.548, 2227709.618, 2256556.006), stdev = 41761.357
[info]   CI (99.9%): [2066901.500, 2388517.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   781.527 ±(99.9%) 74.900 MB/sec [Average]
[info]   (min, avg, max) = (751.778, 781.527, 800.354), stdev = 19.451
[info]   CI (99.9%): [706.627, 856.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   551.976 ±(99.9%) 19.990 B/op [Average]
[info]   (min, avg, max) = (547.649, 551.976, 560.434), stdev = 5.191
[info]   CI (99.9%): [531.987, 571.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.734 ±(99.9%) 1149.189 MB/sec [Average]
[info]   (min, avg, max) = (668.721, 802.734, 1336.601), stdev = 298.441
[info]   CI (99.9%): [≈ 0, 1951.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   566.320 ±(99.9%) 796.355 B/op [Average]
[info]   (min, avg, max) = (466.239, 566.320, 935.931), stdev = 206.811
[info]   CI (99.9%): [≈ 0, 1362.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1126258.943 ops/s
[info] # Warmup Iteration   2: 2173081.802 ops/s
[info] # Warmup Iteration   3: 2353138.803 ops/s
[info] # Warmup Iteration   4: 2349699.927 ops/s
[info] # Warmup Iteration   5: 2351335.478 ops/s
[info] Iteration   1: 2352388.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2352099.463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2349544.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2351492.586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2350358.313 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2351176.686 ±(99.9%) 4619.213 ops/s [Average]
[info]   (min, avg, max) = (2349544.082, 2351176.686, 2352388.986), stdev = 1199.595
[info]   CI (99.9%): [2346557.473, 2355795.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3463.214 ops/s
[info] # Warmup Iteration   2: 28949.275 ops/s
[info] # Warmup Iteration   3: 46893.788 ops/s
[info] # Warmup Iteration   4: 45835.016 ops/s
[info] # Warmup Iteration   5: 43841.171 ops/s
[info] Iteration   1: 48247.158 ops/s
[info]                  ·gc.alloc.rate:                   1893.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              61774.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65106.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 48872.499 ops/s
[info]                  ·gc.alloc.rate:                   1922.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              61892.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64164.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.838 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 49016.560 ops/s
[info]                  ·gc.alloc.rate:                   1931.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              62002.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63826.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 49065.934 ops/s
[info]                  ·gc.alloc.rate:                   1917.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              61484.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63758.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 49131.274 ops/s
[info]                  ·gc.alloc.rate:                   1903.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              60949.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42526.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   48866.685 ±(99.9%) 1383.042 ops/s [Average]
[info]   (min, avg, max) = (48247.158, 48866.685, 49131.274), stdev = 359.172
[info]   CI (99.9%): [47483.643, 50249.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1913.627 ±(99.9%) 58.243 MB/sec [Average]
[info]   (min, avg, max) = (1893.782, 1913.627, 1931.472), stdev = 15.125
[info]   CI (99.9%): [1855.384, 1971.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   61620.670 ±(99.9%) 1624.731 B/op [Average]
[info]   (min, avg, max) = (60949.385, 61620.670, 62002.078), stdev = 421.937
[info]   CI (99.9%): [59995.940, 63245.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1858.676 ±(99.9%) 1142.793 MB/sec [Average]
[info]   (min, avg, max) = (1327.811, 1858.676, 1995.932), stdev = 296.780
[info]   CI (99.9%): [715.883, 3001.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59876.554 ±(99.9%) 37403.940 B/op [Average]
[info]   (min, avg, max) = (42526.851, 59876.554, 65106.808), stdev = 9713.684
[info]   CI (99.9%): [22472.614, 97280.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.116 ±(99.9%) 7.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.116, 4.372), stdev = 1.859
[info]   CI (99.9%): [≈ 0, 8.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.295 ±(99.9%) 233.668 B/op [Average]
[info]   (min, avg, max) = (2.000, 36.295, 142.623), stdev = 60.683
[info]   CI (99.9%): [≈ 0, 269.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.413
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4546.877 ops/s
[info] # Warmup Iteration   2: 11536.522 ops/s
[info] # Warmup Iteration   3: 14812.122 ops/s
[info] # Warmup Iteration   4: 17812.964 ops/s
[info] # Warmup Iteration   5: 17790.139 ops/s
[info] Iteration   1: 18108.321 ops/s
[info]                  ·gc.alloc.rate:                   2049.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              178100.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170333.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 17971.355 ops/s
[info]                  ·gc.alloc.rate:                   2249.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              196874.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172088.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 17488.739 ops/s
[info]                  ·gc.alloc.rate:                   2432.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              218789.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2621.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235767.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.674 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   4: 18096.815 ops/s
[info]                  ·gc.alloc.rate:                   2412.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              209736.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2609.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226834.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501.151 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   5: 15832.056 ops/s
[info]                  ·gc.alloc.rate:                   2310.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              229571.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1953.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194132.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17499.457 ±(99.9%) 3718.704 ops/s [Average]
[info]   (min, avg, max) = (15832.056, 17499.457, 18108.321), stdev = 965.736
[info]   CI (99.9%): [13780.754, 21218.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2290.730 ±(99.9%) 594.641 MB/sec [Average]
[info]   (min, avg, max) = (2049.134, 2290.730, 2432.358), stdev = 154.426
[info]   CI (99.9%): [1696.089, 2885.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206614.363 ±(99.9%) 76842.695 B/op [Average]
[info]   (min, avg, max) = (178100.040, 206614.363, 229571.037), stdev = 19955.804
[info]   CI (99.9%): [129771.668, 283457.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2221.981 ±(99.9%) 1382.329 MB/sec [Average]
[info]   (min, avg, max) = (1953.783, 2221.981, 2621.106), stdev = 358.986
[info]   CI (99.9%): [839.651, 3604.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   199831.475 ±(99.9%) 116998.959 B/op [Average]
[info]   (min, avg, max) = (170333.532, 199831.475, 235767.746), stdev = 30384.258
[info]   CI (99.9%): [82832.516, 316830.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.566 ±(99.9%) 9.827 MB/sec [Average]
[info]   (min, avg, max) = (0.016, 2.566, 5.765), stdev = 2.552
[info]   CI (99.9%): [≈ 0, 12.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   226.143 ±(99.9%) 866.430 B/op [Average]
[info]   (min, avg, max) = (1.624, 226.143, 501.151), stdev = 225.009
[info]   CI (99.9%): [≈ 0, 1092.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   112.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (18.000, 22.400, 27.000), stdev = 3.847
[info]   CI (99.9%): [112.000, 112.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29987.518 ops/s
[info] # Warmup Iteration   2: 84771.481 ops/s
[info] # Warmup Iteration   3: 90947.291 ops/s
[info] # Warmup Iteration   4: 110726.103 ops/s
[info] # Warmup Iteration   5: 110122.977 ops/s
[info] Iteration   1: 109903.955 ops/s
[info]                  ·gc.alloc.rate:               1212.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          17361.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19007.002 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 110229.492 ops/s
[info]                  ·gc.alloc.rate:                   1215.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              17352.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18980.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 109114.773 ops/s
[info]                  ·gc.alloc.rate:                   1209.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              17443.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19207.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 109698.475 ops/s
[info]                  ·gc.alloc.rate:               1193.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          17120.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9561.963 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 108670.933 ops/s
[info]                  ·gc.alloc.rate:                   1195.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              17309.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19342.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   109523.526 ±(99.9%) 2410.666 ops/s [Average]
[info]   (min, avg, max) = (108670.933, 109523.526, 110229.492), stdev = 626.042
[info]   CI (99.9%): [107112.860, 111934.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1205.148 ±(99.9%) 39.284 MB/sec [Average]
[info]   (min, avg, max) = (1193.312, 1205.148, 1215.542), stdev = 10.202
[info]   CI (99.9%): [1165.864, 1244.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17317.408 ±(99.9%) 463.391 B/op [Average]
[info]   (min, avg, max) = (17120.352, 17317.408, 17443.259), stdev = 120.341
[info]   CI (99.9%): [16854.018, 17780.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.119 ±(99.9%) 1144.450 MB/sec [Average]
[info]   (min, avg, max) = (666.482, 1198.119, 1335.617), stdev = 297.210
[info]   CI (99.9%): [53.669, 2342.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17220.022 ±(99.9%) 16494.509 B/op [Average]
[info]   (min, avg, max) = (9561.963, 17220.022, 19342.683), stdev = 4283.572
[info]   CI (99.9%): [725.512, 33714.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 1.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.604), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.048 ±(99.9%) 14.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.048, 8.743), stdev = 3.763
[info]   CI (99.9%): [≈ 0, 16.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112947.056 ops/s
[info] # Warmup Iteration   2: 212090.564 ops/s
[info] # Warmup Iteration   3: 265924.320 ops/s
[info] # Warmup Iteration   4: 277564.119 ops/s
[info] # Warmup Iteration   5: 280060.290 ops/s
[info] Iteration   1: 280926.482 ops/s
[info]                  ·gc.alloc.rate:               935.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          5243.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3715.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 280718.430 ops/s
[info]                  ·gc.alloc.rate:               933.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          5235.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3721.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 279283.191 ops/s
[info]                  ·gc.alloc.rate:                   947.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              5340.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7485.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 276490.320 ops/s
[info]                  ·gc.alloc.rate:               916.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          5216.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3782.359 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 278956.642 ops/s
[info]                  ·gc.alloc.rate:                   947.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7509.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   279275.013 ±(99.9%) 6852.292 ops/s [Average]
[info]   (min, avg, max) = (276490.320, 279275.013, 280926.482), stdev = 1779.518
[info]   CI (99.9%): [272422.721, 286127.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   936.225 ±(99.9%) 49.093 MB/sec [Average]
[info]   (min, avg, max) = (916.483, 936.225, 947.700), stdev = 12.749
[info]   CI (99.9%): [887.133, 985.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5276.108 ±(99.9%) 236.749 B/op [Average]
[info]   (min, avg, max) = (5216.863, 5276.108, 5344.727), stdev = 61.483
[info]   CI (99.9%): [5039.359, 5512.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   930.135 ±(99.9%) 1404.261 MB/sec [Average]
[info]   (min, avg, max) = (663.126, 930.135, 1330.919), stdev = 364.682
[info]   CI (99.9%): [≈ 0, 2334.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5242.774 ±(99.9%) 7925.663 B/op [Average]
[info]   (min, avg, max) = (3715.126, 5242.774, 7509.157), stdev = 2058.270
[info]   CI (99.9%): [≈ 0, 13168.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.117), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1626.591 ops/s
[info] # Warmup Iteration   2: 8890.068 ops/s
[info] # Warmup Iteration   3: 14664.971 ops/s
[info] # Warmup Iteration   4: 16776.226 ops/s
[info] # Warmup Iteration   5: 16625.068 ops/s
[info] Iteration   1: 16399.251 ops/s
[info]                  ·gc.alloc.rate:                   2079.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              199595.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1962.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188369.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 16391.293 ops/s
[info]                  ·gc.alloc.rate:                   2076.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              199363.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188972.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 15423.996 ops/s
[info]                  ·gc.alloc.rate:                        2230.390 MB/sec
[info]                  ·gc.alloc.rate.norm:                   227515.351 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.028 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.860 B/op
[info]                  ·gc.churn.Metaspace:                   0.076 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              7.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2211.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          225589.879 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  19.681 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             2007.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           8.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      838.868 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              61.000 ms
[info] Iteration   4: 16669.244 ops/s
[info]                  ·gc.alloc.rate:                   2366.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              223457.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2612.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246671.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.844 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 16859.715 ops/s
[info]                  ·gc.alloc.rate:                   2214.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              206688.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1957.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182659.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.830 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16348.700 ±(99.9%) 2129.490 ops/s [Average]
[info]   (min, avg, max) = (15423.996, 16348.700, 16859.715), stdev = 553.022
[info]   CI (99.9%): [14219.210, 18478.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2193.591 ±(99.9%) 465.526 MB/sec [Average]
[info]   (min, avg, max) = (2076.469, 2193.591, 2366.804), stdev = 120.896
[info]   CI (99.9%): [1728.065, 2659.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   211324.133 ±(99.9%) 51355.317 B/op [Average]
[info]   (min, avg, max) = (199363.780, 211324.133, 227515.351), stdev = 13336.813
[info]   CI (99.9%): [159968.816, 262679.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.572 ±(99.9%) 4.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.572, 2.860), stdev = 1.279
[info]   CI (99.9%): [≈ 0, 5.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.015 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   1.549 ±(99.9%) 13.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.549, 7.746), stdev = 3.464
[info]   CI (99.9%): [≈ 0, 14.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2142.461 ±(99.9%) 1094.019 MB/sec [Average]
[info]   (min, avg, max) = (1957.053, 2142.461, 2612.685), stdev = 284.113
[info]   CI (99.9%): [1048.442, 3236.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   206452.670 ±(99.9%) 108614.339 B/op [Average]
[info]   (min, avg, max) = (182659.788, 206452.670, 246671.969), stdev = 28206.799
[info]   CI (99.9%): [97838.330, 315067.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen":
[info]   3.936 ±(99.9%) 33.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.936, 19.681), stdev = 8.802
[info]   CI (99.9%): [≈ 0, 37.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   401.524 ±(99.9%) 3457.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 401.524, 2007.622), stdev = 897.836
[info]   CI (99.9%): [≈ 0, 3858.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3.612 ±(99.9%) 15.652 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 3.612, 8.224), stdev = 4.065
[info]   CI (99.9%): [≈ 0, 19.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   354.079 ±(99.9%) 1546.353 B/op [Average]
[info]   (min, avg, max) = (5.830, 354.079, 838.868), stdev = 401.583
[info]   CI (99.9%): [≈ 0, 1900.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   124.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 24.800, 61.000), stdev = 20.897
[info]   CI (99.9%): [124.000, 124.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9861.342 ops/s
[info] # Warmup Iteration   2: 35985.875 ops/s
[info] # Warmup Iteration   3: 41746.036 ops/s
[info] # Warmup Iteration   4: 39399.506 ops/s
[info] # Warmup Iteration   5: 41873.506 ops/s
[info] Iteration   1: 41335.250 ops/s
[info]                  ·gc.alloc.rate:                   3217.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              122490.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101479.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.793 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 41293.415 ops/s
[info]                  ·gc.alloc.rate:                   3244.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              123600.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127273.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.141 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 41696.255 ops/s
[info]                  ·gc.alloc.rate:                   3269.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              123365.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126599.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.786 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 41641.550 ops/s
[info]                  ·gc.alloc.rate:                   3304.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              124897.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127238.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 41646.162 ops/s
[info]                  ·gc.alloc.rate:               3278.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          123903.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102108.524 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   41522.526 ±(99.9%) 738.679 ops/s [Average]
[info]   (min, avg, max) = (41293.415, 41522.526, 41696.255), stdev = 191.832
[info]   CI (99.9%): [40783.848, 42261.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3262.720 ±(99.9%) 128.920 MB/sec [Average]
[info]   (min, avg, max) = (3217.014, 3262.720, 3304.628), stdev = 33.480
[info]   CI (99.9%): [3133.800, 3391.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123651.434 ±(99.9%) 3362.148 B/op [Average]
[info]   (min, avg, max) = (122490.226, 123651.434, 124897.773), stdev = 873.139
[info]   CI (99.9%): [120289.286, 127013.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3085.819 ±(99.9%) 1415.238 MB/sec [Average]
[info]   (min, avg, max) = (2665.192, 3085.819, 3366.573), stdev = 367.533
[info]   CI (99.9%): [1670.581, 4501.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   116939.887 ±(99.9%) 53257.351 B/op [Average]
[info]   (min, avg, max) = (101479.188, 116939.887, 127273.226), stdev = 13830.765
[info]   CI (99.9%): [63682.537, 170197.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.901 ±(99.9%) 11.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.901, 7.141), stdev = 2.949
[info]   CI (99.9%): [≈ 0, 13.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34710.930 ops/s
[info] # Warmup Iteration   2: 112711.861 ops/s
[info] # Warmup Iteration   3: 130595.307 ops/s
[info] # Warmup Iteration   4: 147155.876 ops/s
[info] # Warmup Iteration   5: 147562.753 ops/s
[info] Iteration   1: 147454.889 ops/s
[info]                  ·gc.alloc.rate:                   2033.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              21700.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21369.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 147208.976 ops/s
[info]                  ·gc.alloc.rate:                   2036.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              21765.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21476.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 146276.933 ops/s
[info]                  ·gc.alloc.rate:                   2022.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              21755.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21655.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 147872.753 ops/s
[info]                  ·gc.alloc.rate:               2043.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          21746.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21471.784 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 144575.483 ops/s
[info]                  ·gc.alloc.rate:               2000.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          21759.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21962.326 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   146677.807 ±(99.9%) 5055.339 ops/s [Average]
[info]   (min, avg, max) = (144575.483, 146677.807, 147872.753), stdev = 1312.855
[info]   CI (99.9%): [141622.468, 151733.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2027.320 ±(99.9%) 63.562 MB/sec [Average]
[info]   (min, avg, max) = (2000.918, 2027.320, 2043.566), stdev = 16.507
[info]   CI (99.9%): [1963.758, 2090.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21745.573 ±(99.9%) 100.122 B/op [Average]
[info]   (min, avg, max) = (21700.666, 21745.573, 21765.484), stdev = 26.001
[info]   CI (99.9%): [21645.451, 21845.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2012.424 ±(99.9%) 27.124 MB/sec [Average]
[info]   (min, avg, max) = (2002.145, 2012.424, 2019.593), stdev = 7.044
[info]   CI (99.9%): [1985.300, 2039.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21587.253 ±(99.9%) 899.416 B/op [Average]
[info]   (min, avg, max) = (21369.981, 21587.253, 21962.326), stdev = 233.576
[info]   CI (99.9%): [20687.837, 22486.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.152 ±(99.9%) 1.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.698), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.626 ±(99.9%) 12.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.626, 7.459), stdev = 3.266
[info]   CI (99.9%): [≈ 0, 14.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95453.742 ops/s
[info] # Warmup Iteration   2: 237309.548 ops/s
[info] # Warmup Iteration   3: 237024.660 ops/s
[info] # Warmup Iteration   4: 250120.058 ops/s
[info] # Warmup Iteration   5: 252285.554 ops/s
[info] Iteration   1: 249013.493 ops/s
[info]                  ·gc.alloc.rate:                   837.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              5291.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4229.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 251573.283 ops/s
[info]                  ·gc.alloc.rate:               826.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          5172.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4186.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 253908.982 ops/s
[info]                  ·gc.alloc.rate:                   823.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              5106.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4149.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 253130.845 ops/s
[info]                  ·gc.alloc.rate:               830.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          5161.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4162.298 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 252043.254 ops/s
[info]                  ·gc.alloc.rate:                   837.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              5230.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8369.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   251933.971 ±(99.9%) 7205.029 ops/s [Average]
[info]   (min, avg, max) = (249013.493, 251933.971, 253908.982), stdev = 1871.123
[info]   CI (99.9%): [244728.943, 259139.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   831.259 ±(99.9%) 23.576 MB/sec [Average]
[info]   (min, avg, max) = (823.971, 831.259, 837.699), stdev = 6.123
[info]   CI (99.9%): [807.683, 854.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5192.526 ±(99.9%) 273.000 B/op [Average]
[info]   (min, avg, max) = (5106.329, 5192.526, 5291.806), stdev = 70.897
[info]   CI (99.9%): [4919.526, 5465.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.623 ±(99.9%) 1155.549 MB/sec [Average]
[info]   (min, avg, max) = (669.144, 803.623, 1340.444), stdev = 300.092
[info]   CI (99.9%): [≈ 0, 1959.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5019.413 ±(99.9%) 7212.702 B/op [Average]
[info]   (min, avg, max) = (4149.759, 5019.413, 8369.705), stdev = 1873.116
[info]   CI (99.9%): [≈ 0, 12232.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.132), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168689.106 ops/s
[info] # Warmup Iteration   2: 258263.719 ops/s
[info] # Warmup Iteration   3: 270714.357 ops/s
[info] # Warmup Iteration   4: 269054.667 ops/s
[info] # Warmup Iteration   5: 277750.928 ops/s
[info] Iteration   1: 276942.791 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 277742.774 ops/s
[info]                  ·gc.alloc.rate:      0.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.289 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 277738.774 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 275362.572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 277823.760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   277122.134 ±(99.9%) 4032.132 ops/s [Average]
[info]   (min, avg, max) = (275362.572, 277122.134, 277823.760), stdev = 1047.132
[info]   CI (99.9%): [273090.002, 281154.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.046 ±(99.9%) 0.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.046, 0.228), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.259 ±(99.9%) 2.217 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.259, 1.289), stdev = 0.576
[info]   CI (99.9%): [≈ 0, 2.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11217.664 ops/s
[info] # Warmup Iteration   2: 48228.377 ops/s
[info] # Warmup Iteration   3: 55400.051 ops/s
[info] # Warmup Iteration   4: 57876.276 ops/s
[info] # Warmup Iteration   5: 61188.598 ops/s
[info] Iteration   1: 61990.194 ops/s
[info]                  ·gc.alloc.rate:                   4037.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              102430.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3995.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101371.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.693 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 61357.474 ops/s
[info]                  ·gc.alloc.rate:                   3959.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              101574.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85947.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 61247.146 ops/s
[info]                  ·gc.alloc.rate:                   4034.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              103669.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4038.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103777.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.070 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 61393.557 ops/s
[info]                  ·gc.alloc.rate:                   4043.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              103661.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103956.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.067 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 61578.874 ops/s
[info]                  ·gc.alloc.rate:                   4056.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              103672.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103965.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.064 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   61513.449 ±(99.9%) 1124.602 ops/s [Average]
[info]   (min, avg, max) = (61247.146, 61513.449, 61990.194), stdev = 292.056
[info]   CI (99.9%): [60388.847, 62638.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4026.460 ±(99.9%) 146.799 MB/sec [Average]
[info]   (min, avg, max) = (3959.921, 4026.460, 4056.298), stdev = 38.123
[info]   CI (99.9%): [3879.661, 4173.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103001.685 ±(99.9%) 3701.418 B/op [Average]
[info]   (min, avg, max) = (101574.340, 103001.685, 103672.366), stdev = 961.246
[info]   CI (99.9%): [99300.267, 106703.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3901.697 ±(99.9%) 1190.661 MB/sec [Average]
[info]   (min, avg, max) = (3350.700, 3901.697, 4067.766), stdev = 309.211
[info]   CI (99.9%): [2711.037, 5092.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99803.604 ±(99.9%) 30124.170 B/op [Average]
[info]   (min, avg, max) = (85947.452, 99803.604, 103965.470), stdev = 7823.151
[info]   CI (99.9%): [69679.434, 129927.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.486 ±(99.9%) 4.834 B/op [Average]
[info]   (min, avg, max) = (0.534, 1.486, 3.693), stdev = 1.255
[info]   CI (99.9%): [≈ 0, 6.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2739.551 ops/s
[info] # Warmup Iteration   2: 20481.583 ops/s
[info] # Warmup Iteration   3: 27116.578 ops/s
[info] # Warmup Iteration   4: 37640.091 ops/s
[info] # Warmup Iteration   5: 34029.493 ops/s
[info] Iteration   1: 36282.750 ops/s
[info]                  ·gc.alloc.rate:                   2060.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              89370.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1909.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82813.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 35829.659 ops/s
[info]                  ·gc.alloc.rate:                   1761.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              77353.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1921.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84394.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 315.703 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   3: 37321.636 ops/s
[info]                  ·gc.alloc.rate:                   1587.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              66934.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1280.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53993.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 36927.391 ops/s
[info]                  ·gc.alloc.rate:                   1597.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              68083.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1921.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81878.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 36199.914 ops/s
[info]                  ·gc.alloc.rate:                   1550.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              67424.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1275.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55433.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   36512.270 ±(99.9%) 2313.275 ops/s [Average]
[info]   (min, avg, max) = (35829.659, 36512.270, 37321.636), stdev = 600.750
[info]   CI (99.9%): [34198.995, 38825.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1711.450 ±(99.9%) 813.144 MB/sec [Average]
[info]   (min, avg, max) = (1550.799, 1711.450, 2060.320), stdev = 211.171
[info]   CI (99.9%): [898.306, 2524.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   73833.254 ±(99.9%) 37309.101 B/op [Average]
[info]   (min, avg, max) = (66934.984, 73833.254, 89370.066), stdev = 9689.055
[info]   CI (99.9%): [36524.154, 111142.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1661.477 ±(99.9%) 1349.061 MB/sec [Average]
[info]   (min, avg, max) = (1275.008, 1661.477, 1921.531), stdev = 350.347
[info]   CI (99.9%): [312.415, 3010.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71702.610 ±(99.9%) 59851.217 B/op [Average]
[info]   (min, avg, max) = (53993.545, 71702.610, 84394.083), stdev = 15543.171
[info]   CI (99.9%): [11851.392, 131553.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   5.377 ±(99.9%) 14.020 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 5.377, 9.468), stdev = 3.641
[info]   CI (99.9%): [≈ 0, 19.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   232.142 ±(99.9%) 610.612 B/op [Average]
[info]   (min, avg, max) = (1.810, 232.142, 410.696), stdev = 158.574
[info]   CI (99.9%): [≈ 0, 842.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   80.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 16.000, 27.000), stdev = 9.695
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1266.335 ops/s
[info] # Warmup Iteration   2: 31772.764 ops/s
[info] # Warmup Iteration   3: 40599.932 ops/s
[info] # Warmup Iteration   4: 44200.320 ops/s
[info] # Warmup Iteration   5: 36168.309 ops/s
[info] Iteration   1: 37487.352 ops/s
[info]                  ·gc.alloc.rate:                   1182.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              49641.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55432.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 37182.588 ops/s
[info]                  ·gc.alloc.rate:                   1172.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              49598.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55942.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 36045.875 ops/s
[info]                  ·gc.alloc.rate:               1122.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          48992.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28868.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 37465.377 ops/s
[info]                  ·gc.alloc.rate:                   1178.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              49522.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55603.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 36201.112 ops/s
[info]                  ·gc.alloc.rate:                   1146.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              49862.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57657.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   36876.461 ±(99.9%) 2695.239 ops/s [Average]
[info]   (min, avg, max) = (36045.875, 36876.461, 37487.352), stdev = 699.945
[info]   CI (99.9%): [34181.222, 39571.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1160.595 ±(99.9%) 98.415 MB/sec [Average]
[info]   (min, avg, max) = (1122.235, 1160.595, 1182.578), stdev = 25.558
[info]   CI (99.9%): [1062.180, 1259.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   49523.288 ±(99.9%) 1242.287 B/op [Average]
[info]   (min, avg, max) = (48992.243, 49523.288, 49862.018), stdev = 322.618
[info]   CI (99.9%): [48281.001, 50765.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.798 ±(99.9%) 1139.867 MB/sec [Average]
[info]   (min, avg, max) = (661.274, 1190.798, 1326.254), stdev = 296.020
[info]   CI (99.9%): [50.930, 2330.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   50700.823 ±(99.9%) 47118.802 B/op [Average]
[info]   (min, avg, max) = (28868.563, 50700.823, 57657.345), stdev = 12236.603
[info]   CI (99.9%): [3582.021, 97819.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.710 ±(99.9%) 5.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.710, 3.028), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.927 ±(99.9%) 211.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.927, 127.094), stdev = 54.943
[info]   CI (99.9%): [≈ 0, 241.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170315.002 ops/s
[info] # Warmup Iteration   2: 578729.562 ops/s
[info] # Warmup Iteration   3: 603377.381 ops/s
[info] # Warmup Iteration   4: 665929.796 ops/s
[info] # Warmup Iteration   5: 664245.940 ops/s
[info] Iteration   1: 638770.801 ops/s
[info]                  ·gc.alloc.rate:                   1713.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              4220.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4908.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 644207.989 ops/s
[info]                  ·gc.alloc.rate:                   1706.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              4167.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3250.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.619 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 642506.940 ops/s
[info]                  ·gc.alloc.rate:                   1725.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              4227.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4879.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 656150.608 ops/s
[info]                  ·gc.alloc.rate:                   1746.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              4189.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3183.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 668900.305 ops/s
[info]                  ·gc.alloc.rate:               1793.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          4220.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4688.945 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   650107.329 ±(99.9%) 47582.420 ops/s [Average]
[info]   (min, avg, max) = (638770.801, 650107.329, 668900.305), stdev = 12357.003
[info]   CI (99.9%): [602524.908, 697689.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1737.195 ±(99.9%) 135.817 MB/sec [Average]
[info]   (min, avg, max) = (1706.007, 1737.195, 1793.841), stdev = 35.271
[info]   CI (99.9%): [1601.378, 1873.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4205.126 ±(99.9%) 100.229 B/op [Average]
[info]   (min, avg, max) = (4167.081, 4205.126, 4227.795), stdev = 26.029
[info]   CI (99.9%): [4104.897, 4305.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1727.035 ±(99.9%) 1398.707 MB/sec [Average]
[info]   (min, avg, max) = (1327.654, 1727.035, 1992.756), stdev = 363.240
[info]   CI (99.9%): [328.328, 3125.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4182.025 ±(99.9%) 3409.158 B/op [Average]
[info]   (min, avg, max) = (3183.710, 4182.025, 4908.217), stdev = 885.348
[info]   CI (99.9%): [772.867, 7591.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.838 ±(99.9%) 6.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.838, 3.938), stdev = 1.735
[info]   CI (99.9%): [≈ 0, 7.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.047 ±(99.9%) 16.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.047, 9.619), stdev = 4.238
[info]   CI (99.9%): [≈ 0, 18.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 12.000), stdev = 3.847
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1189.326 ops/s
[info] # Warmup Iteration   2: 15467.725 ops/s
[info] # Warmup Iteration   3: 25973.519 ops/s
[info] # Warmup Iteration   4: 33974.400 ops/s
[info] # Warmup Iteration   5: 35851.758 ops/s
[info] Iteration   1: 33312.606 ops/s
[info]                  ·gc.alloc.rate:                   2174.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              102692.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93898.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 34229.008 ops/s
[info]                  ·gc.alloc.rate:                   2122.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              97569.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91340.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 37080.453 ops/s
[info]                  ·gc.alloc.rate:                   2176.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              92370.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84259.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 37044.181 ops/s
[info]                  ·gc.alloc.rate:                   2191.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              93108.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2640.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112190.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 37158.557 ops/s
[info]                  ·gc.alloc.rate:                   2161.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              91511.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84009.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   35764.961 ±(99.9%) 7121.668 ops/s [Average]
[info]   (min, avg, max) = (33312.606, 35764.961, 37158.557), stdev = 1849.475
[info]   CI (99.9%): [28643.292, 42886.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2165.066 ±(99.9%) 101.532 MB/sec [Average]
[info]   (min, avg, max) = (2122.008, 2165.066, 2191.464), stdev = 26.368
[info]   CI (99.9%): [2063.534, 2266.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   95450.574 ±(99.9%) 18000.702 B/op [Average]
[info]   (min, avg, max) = (91511.871, 95450.574, 102692.252), stdev = 4674.725
[info]   CI (99.9%): [77449.872, 113451.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2116.902 ±(99.9%) 1127.287 MB/sec [Average]
[info]   (min, avg, max) = (1983.969, 2116.902, 2640.587), stdev = 292.753
[info]   CI (99.9%): [989.615, 3244.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   93139.773 ±(99.9%) 44281.384 B/op [Average]
[info]   (min, avg, max) = (84009.661, 93139.773, 112190.755), stdev = 11499.735
[info]   CI (99.9%): [48858.389, 137421.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.017 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.017, 5.020), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 10.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   92.013 ±(99.9%) 375.594 B/op [Average]
[info]   (min, avg, max) = (0.882, 92.013, 237.097), stdev = 97.541
[info]   CI (99.9%): [≈ 0, 467.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 15.000), stdev = 4.159
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16224.465 ops/s
[info] # Warmup Iteration   2: 86909.535 ops/s
[info] # Warmup Iteration   3: 85369.826 ops/s
[info] # Warmup Iteration   4: 95388.935 ops/s
[info] # Warmup Iteration   5: 92337.034 ops/s
[info] Iteration   1: 95942.785 ops/s
[info]                  ·gc.alloc.rate:                   2138.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              35076.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32706.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 96962.601 ops/s
[info]                  ·gc.alloc.rate:                   2166.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              35156.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32287.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 97037.567 ops/s
[info]                  ·gc.alloc.rate:               2154.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          34937.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1989.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32261.550 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 96549.652 ops/s
[info]                  ·gc.alloc.rate:                   2143.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              34936.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32478.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 94567.788 ops/s
[info]                  ·gc.alloc.rate:                   2126.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              35393.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33265.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   96212.079 ±(99.9%) 3915.028 ops/s [Average]
[info]   (min, avg, max) = (94567.788, 96212.079, 97037.567), stdev = 1016.720
[info]   CI (99.9%): [92297.051, 100127.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2145.824 ±(99.9%) 58.406 MB/sec [Average]
[info]   (min, avg, max) = (2126.744, 2145.824, 2166.257), stdev = 15.168
[info]   CI (99.9%): [2087.418, 2204.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   35099.971 ±(99.9%) 728.564 B/op [Average]
[info]   (min, avg, max) = (34936.214, 35099.971, 35393.435), stdev = 189.206
[info]   CI (99.9%): [34371.408, 35828.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1992.844 ±(99.9%) 14.912 MB/sec [Average]
[info]   (min, avg, max) = (1989.461, 1992.844, 1998.880), stdev = 3.873
[info]   CI (99.9%): [1977.932, 2007.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32599.930 ±(99.9%) 1589.405 B/op [Average]
[info]   (min, avg, max) = (32261.550, 32599.930, 33265.514), stdev = 412.763
[info]   CI (99.9%): [31010.524, 34189.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.415 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.351), stdev = 1.926
[info]   CI (99.9%): [≈ 0, 8.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.885 ±(99.9%) 121.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.885, 71.372), stdev = 31.591
[info]   CI (99.9%): [≈ 0, 136.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50554.416 ops/s
[info] # Warmup Iteration   2: 230058.819 ops/s
[info] # Warmup Iteration   3: 222770.294 ops/s
[info] # Warmup Iteration   4: 245911.746 ops/s
[info] # Warmup Iteration   5: 245190.220 ops/s
[info] Iteration   1: 248249.377 ops/s
[info]                  ·gc.alloc.rate:                   1695.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              10747.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8433.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 245779.442 ops/s
[info]                  ·gc.alloc.rate:                   1687.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              10803.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12799.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 253829.999 ops/s
[info]                  ·gc.alloc.rate:                   1724.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              10691.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8275.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 253741.074 ops/s
[info]                  ·gc.alloc.rate:                   1763.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              10934.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12428.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 252089.667 ops/s
[info]                  ·gc.alloc.rate:               1725.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          10770.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8355.403 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   250737.912 ±(99.9%) 13774.661 ops/s [Average]
[info]   (min, avg, max) = (245779.442, 250737.912, 253829.999), stdev = 3577.236
[info]   CI (99.9%): [236963.251, 264512.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1719.091 ±(99.9%) 115.757 MB/sec [Average]
[info]   (min, avg, max) = (1687.145, 1719.091, 1763.297), stdev = 30.062
[info]   CI (99.9%): [1603.334, 1834.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10789.312 ±(99.9%) 349.901 B/op [Average]
[info]   (min, avg, max) = (10691.063, 10789.312, 10934.323), stdev = 90.868
[info]   CI (99.9%): [10439.410, 11139.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1601.346 ±(99.9%) 1406.886 MB/sec [Average]
[info]   (min, avg, max) = (1330.271, 1601.346, 2004.315), stdev = 365.364
[info]   CI (99.9%): [194.460, 3008.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10058.588 ±(99.9%) 9000.213 B/op [Average]
[info]   (min, avg, max) = (8275.286, 10058.588, 12799.581), stdev = 2337.327
[info]   CI (99.9%): [1058.375, 19058.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.237 ±(99.9%) 1.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 0.958), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.511 ±(99.9%) 10.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.511, 6.132), stdev = 2.606
[info]   CI (99.9%): [≈ 0, 11.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 836145.671 ops/s
[info] # Warmup Iteration   2: 1004915.907 ops/s
[info] # Warmup Iteration   3: 1096393.218 ops/s
[info] # Warmup Iteration   4: 1087232.351 ops/s
[info] # Warmup Iteration   5: 1106829.472 ops/s
[info] Iteration   1: 1124312.758 ops/s
[info]                  ·gc.alloc.rate:               946.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          1324.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 937.167 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1113277.639 ops/s
[info]                  ·gc.alloc.rate:               965.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          1363.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1892.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1073150.310 ops/s
[info]                  ·gc.alloc.rate:                   907.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              1330.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     982.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1061617.702 ops/s
[info]                  ·gc.alloc.rate:               913.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          1354.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 993.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1108734.629 ops/s
[info]                  ·gc.alloc.rate:                   961.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              1364.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1903.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1096218.608 ±(99.9%) 104860.459 ops/s [Average]
[info]   (min, avg, max) = (1061617.702, 1096218.608, 1124312.758), stdev = 27231.928
[info]   CI (99.9%): [991358.149, 1201079.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   938.859 ±(99.9%) 103.535 MB/sec [Average]
[info]   (min, avg, max) = (907.477, 938.859, 965.226), stdev = 26.888
[info]   CI (99.9%): [835.324, 1042.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1347.705 ±(99.9%) 72.286 B/op [Average]
[info]   (min, avg, max) = (1324.671, 1347.705, 1364.757), stdev = 18.772
[info]   CI (99.9%): [1275.419, 1419.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.121 ±(99.9%) 1413.637 MB/sec [Average]
[info]   (min, avg, max) = (669.776, 938.121, 1340.910), stdev = 367.117
[info]   CI (99.9%): [≈ 0, 2351.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1342.000 ±(99.9%) 1957.072 B/op [Average]
[info]   (min, avg, max) = (937.167, 1342.000, 1903.539), stdev = 508.245
[info]   CI (99.9%): [≈ 0, 3299.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.059), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 887669.971 ops/s
[info] # Warmup Iteration   2: 1104255.088 ops/s
[info] # Warmup Iteration   3: 1189910.051 ops/s
[info] # Warmup Iteration   4: 1189475.056 ops/s
[info] # Warmup Iteration   5: 1190237.038 ops/s
[info] Iteration   1: 1189144.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1189999.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1189606.343 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1190206.257 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1189843.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1189760.197 ±(99.9%) 1571.230 ops/s [Average]
[info]   (min, avg, max) = (1189144.639, 1189760.197, 1190206.257), stdev = 408.043
[info]   CI (99.9%): [1188188.968, 1191331.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23229.346 ops/s
[info] # Warmup Iteration   2: 164516.583 ops/s
[info] # Warmup Iteration   3: 212609.703 ops/s
[info] # Warmup Iteration   4: 241636.071 ops/s
[info] # Warmup Iteration   5: 240466.083 ops/s
[info] Iteration   1: 244487.429 ops/s
[info]                  ·gc.alloc.rate:                   2555.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              16447.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12912.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 243994.104 ops/s
[info]                  ·gc.alloc.rate:                   2573.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              16602.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17239.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 238324.194 ops/s
[info]                  ·gc.alloc.rate:               2515.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          16607.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17674.013 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 240385.531 ops/s
[info]                  ·gc.alloc.rate:               2576.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          16868.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17567.711 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 244166.323 ops/s
[info]                  ·gc.alloc.rate:                   2589.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              16685.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13008.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   242271.516 ±(99.9%) 10651.428 ops/s [Average]
[info]   (min, avg, max) = (238324.194, 242271.516, 244487.429), stdev = 2766.142
[info]   CI (99.9%): [231620.088, 252922.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2561.941 ±(99.9%) 110.514 MB/sec [Average]
[info]   (min, avg, max) = (2515.420, 2561.941, 2589.053), stdev = 28.700
[info]   CI (99.9%): [2451.427, 2672.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   16642.358 ±(99.9%) 589.197 B/op [Average]
[info]   (min, avg, max) = (16447.327, 16642.358, 16868.076), stdev = 153.013
[info]   CI (99.9%): [16053.161, 17231.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.388 ±(99.9%) 1403.570 MB/sec [Average]
[info]   (min, avg, max) = (2005.876, 2411.388, 2683.105), stdev = 364.503
[info]   CI (99.9%): [1007.819, 3814.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15680.314 ±(99.9%) 9582.328 B/op [Average]
[info]   (min, avg, max) = (12912.135, 15680.314, 17674.013), stdev = 2488.500
[info]   CI (99.9%): [6097.986, 25262.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 1.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.645), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.885 ±(99.9%) 7.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 4.154), stdev = 1.829
[info]   CI (99.9%): [≈ 0, 7.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3693.495 ops/s
[info] # Warmup Iteration   2: 44932.941 ops/s
[info] # Warmup Iteration   3: 58820.926 ops/s
[info] # Warmup Iteration   4: 48468.435 ops/s
[info] # Warmup Iteration   5: 26923.881 ops/s
[info] Iteration   1: 27267.126 ops/s
[info]                  ·gc.alloc.rate:               745.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          43026.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37681.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 27131.102 ops/s
[info]                  ·gc.alloc.rate:               742.060 MB/sec
[info]                  ·gc.alloc.rate.norm:          43034.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37870.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 27028.190 ops/s
[info]                  ·gc.alloc.rate:               743.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          43271.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38112.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 27175.213 ops/s
[info]                  ·gc.alloc.rate:                   747.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              43268.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37905.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27189.036 ops/s
[info]                  ·gc.alloc.rate:               739.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          42782.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37980.708 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   27158.133 ±(99.9%) 337.574 ops/s [Average]
[info]   (min, avg, max) = (27028.190, 27158.133, 27267.126), stdev = 87.667
[info]   CI (99.9%): [26820.559, 27495.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   743.349 ±(99.9%) 11.872 MB/sec [Average]
[info]   (min, avg, max) = (739.094, 743.349, 747.082), stdev = 3.083
[info]   CI (99.9%): [731.477, 755.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43076.602 ±(99.9%) 783.740 B/op [Average]
[info]   (min, avg, max) = (42782.377, 43076.602, 43271.643), stdev = 203.535
[info]   CI (99.9%): [42292.862, 43860.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   654.190 ±(99.9%) 5.198 MB/sec [Average]
[info]   (min, avg, max) = (652.813, 654.190, 656.142), stdev = 1.350
[info]   CI (99.9%): [648.992, 659.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   37909.995 ±(99.9%) 609.048 B/op [Average]
[info]   (min, avg, max) = (37681.217, 37909.995, 38112.756), stdev = 158.168
[info]   CI (99.9%): [37300.947, 38519.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.482 ±(99.9%) 4.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.482, 2.411), stdev = 1.078
[info]   CI (99.9%): [≈ 0, 4.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368103.122 ops/s
[info] # Warmup Iteration   2: 722817.838 ops/s
[info] # Warmup Iteration   3: 805976.911 ops/s
[info] # Warmup Iteration   4: 803092.342 ops/s
[info] # Warmup Iteration   5: 806510.948 ops/s
[info] Iteration   1: 793633.045 ops/s
[info]                  ·gc.alloc.rate:                   1581.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              3136.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2657.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 766429.362 ops/s
[info]                  ·gc.alloc.rate:                   1535.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2753.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 808783.392 ops/s
[info]                  ·gc.alloc.rate:                   1633.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              3177.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3911.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 810121.954 ops/s
[info]                  ·gc.alloc.rate:                   1634.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              3175.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2596.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 774183.104 ops/s
[info]                  ·gc.alloc.rate:                   1590.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              3232.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2716.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   790630.172 ±(99.9%) 76400.878 ops/s [Average]
[info]   (min, avg, max) = (766429.362, 790630.172, 810121.954), stdev = 19841.065
[info]   CI (99.9%): [714229.294, 867031.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1595.165 ±(99.9%) 159.158 MB/sec [Average]
[info]   (min, avg, max) = (1535.068, 1595.165, 1634.769), stdev = 41.333
[info]   CI (99.9%): [1436.007, 1754.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3174.916 ±(99.9%) 140.968 B/op [Average]
[info]   (min, avg, max) = (3136.644, 3174.916, 3232.921), stdev = 36.609
[info]   CI (99.9%): [3033.949, 3315.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1472.965 ±(99.9%) 1156.371 MB/sec [Average]
[info]   (min, avg, max) = (1336.649, 1472.965, 2010.157), stdev = 300.306
[info]   CI (99.9%): [316.594, 2629.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2926.982 ±(99.9%) 2130.773 B/op [Average]
[info]   (min, avg, max) = (2596.119, 2926.982, 3911.044), stdev = 553.355
[info]   CI (99.9%): [796.209, 5057.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.784 ±(99.9%) 4.848 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.784, 2.928), stdev = 1.259
[info]   CI (99.9%): [≈ 0, 5.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.589 ±(99.9%) 9.949 B/op [Average]
[info]   (min, avg, max) = (0.040, 1.589, 6.012), stdev = 2.584
[info]   CI (99.9%): [≈ 0, 11.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 745.692 ops/s
[info] # Warmup Iteration   2: 19112.766 ops/s
[info] # Warmup Iteration   3: 50730.494 ops/s
[info] # Warmup Iteration   4: 47659.451 ops/s
[info] # Warmup Iteration   5: 48531.446 ops/s
[info] Iteration   1: 43795.301 ops/s
[info]                  ·gc.alloc.rate:                   2540.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              91285.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95806.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 46202.216 ops/s
[info]                  ·gc.alloc.rate:                   2520.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              85839.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90997.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.837 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 45767.380 ops/s
[info]                  ·gc.alloc.rate:                   2481.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              85344.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69020.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 45560.302 ops/s
[info]                  ·gc.alloc.rate:                   2500.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              86384.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92549.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 44459.826 ops/s
[info]                  ·gc.alloc.rate:                   2425.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              85867.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94722.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   45157.005 ±(99.9%) 3835.195 ops/s [Average]
[info]   (min, avg, max) = (43795.301, 45157.005, 46202.216), stdev = 995.988
[info]   CI (99.9%): [41321.810, 48992.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2493.837 ±(99.9%) 168.342 MB/sec [Average]
[info]   (min, avg, max) = (2425.987, 2493.837, 2540.148), stdev = 43.718
[info]   CI (99.9%): [2325.494, 2662.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86944.422 ±(99.9%) 9451.158 B/op [Average]
[info]   (min, avg, max) = (85344.931, 86944.422, 91285.489), stdev = 2454.436
[info]   CI (99.9%): [77493.264, 96395.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2540.064 ±(99.9%) 1147.186 MB/sec [Average]
[info]   (min, avg, max) = (2007.202, 2540.064, 2679.133), stdev = 297.920
[info]   CI (99.9%): [1392.879, 3687.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88619.155 ±(99.9%) 42796.685 B/op [Average]
[info]   (min, avg, max) = (69020.830, 88619.155, 95806.058), stdev = 11114.163
[info]   CI (99.9%): [45822.469, 131415.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.092 ±(99.9%) 5.470 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.092, 2.962), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   38.362 ±(99.9%) 191.624 B/op [Average]
[info]   (min, avg, max) = (1.474, 38.362, 102.328), stdev = 49.764
[info]   CI (99.9%): [≈ 0, 229.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 13.000), stdev = 2.950
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120748.649 ops/s
[info] # Warmup Iteration   2: 330978.989 ops/s
[info] # Warmup Iteration   3: 412807.666 ops/s
[info] # Warmup Iteration   4: 416177.623 ops/s
[info] # Warmup Iteration   5: 414842.923 ops/s
[info] Iteration   1: 404064.004 ops/s
[info]                  ·gc.alloc.rate:                   1067.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              4158.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5186.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 409535.628 ops/s
[info]                  ·gc.alloc.rate:               1068.460 MB/sec
[info]                  ·gc.alloc.rate.norm:          4105.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2560.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 412604.030 ops/s
[info]                  ·gc.alloc.rate:                   1080.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              4123.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5087.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 418121.610 ops/s
[info]                  ·gc.alloc.rate:               1089.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          4100.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2512.490 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 411880.516 ops/s
[info]                  ·gc.alloc.rate:                   1093.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              4179.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5102.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   411241.158 ±(99.9%) 19637.075 ops/s [Average]
[info]   (min, avg, max) = (404064.004, 411241.158, 418121.610), stdev = 5099.686
[info]   CI (99.9%): [391604.082, 430878.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1080.081 ±(99.9%) 45.283 MB/sec [Average]
[info]   (min, avg, max) = (1067.944, 1080.081, 1093.625), stdev = 11.760
[info]   CI (99.9%): [1034.798, 1125.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4133.263 ±(99.9%) 131.556 B/op [Average]
[info]   (min, avg, max) = (4100.341, 4133.263, 4179.127), stdev = 34.165
[info]   CI (99.9%): [4001.707, 4264.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.965 ±(99.9%) 1406.362 MB/sec [Average]
[info]   (min, avg, max) = (666.239, 1066.965, 1335.178), stdev = 365.228
[info]   CI (99.9%): [≈ 0, 2473.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4089.733 ±(99.9%) 5462.920 B/op [Average]
[info]   (min, avg, max) = (2512.490, 4089.733, 5186.834), stdev = 1418.703
[info]   CI (99.9%): [≈ 0, 9552.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.552), stdev = 1.585
[info]   CI (99.9%): [≈ 0, 6.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.736 ±(99.9%) 23.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.736, 13.572), stdev = 6.057
[info]   CI (99.9%): [≈ 0, 26.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 553182.814 ops/s
[info] # Warmup Iteration   2: 1535961.814 ops/s
[info] # Warmup Iteration   3: 1639087.902 ops/s
[info] # Warmup Iteration   4: 1649146.848 ops/s
[info] # Warmup Iteration   5: 1643691.293 ops/s
[info] Iteration   1: 1606496.633 ops/s
[info]                  ·gc.alloc.rate:                   963.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1609970.482 ops/s
[info]                  ·gc.alloc.rate:               958.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 654.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1607694.358 ops/s
[info]                  ·gc.alloc.rate:                   976.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              955.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1311.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1621334.747 ops/s
[info]                  ·gc.alloc.rate:               984.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          955.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 650.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1636448.530 ops/s
[info]                  ·gc.alloc.rate:                   996.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1289.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1616388.950 ±(99.9%) 48764.201 ops/s [Average]
[info]   (min, avg, max) = (1606496.633, 1616388.950, 1636448.530), stdev = 12663.908
[info]   CI (99.9%): [1567624.750, 1665153.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   975.991 ±(99.9%) 59.382 MB/sec [Average]
[info]   (min, avg, max) = (958.448, 975.991, 996.649), stdev = 15.421
[info]   CI (99.9%): [916.610, 1035.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   950.148 ±(99.9%) 35.660 B/op [Average]
[info]   (min, avg, max) = (936.915, 950.148, 958.492), stdev = 9.261
[info]   CI (99.9%): [914.488, 985.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.674 ±(99.9%) 1414.226 MB/sec [Average]
[info]   (min, avg, max) = (669.070, 937.674, 1340.364), stdev = 367.270
[info]   CI (99.9%): [≈ 0, 2351.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   912.014 ±(99.9%) 1364.496 B/op [Average]
[info]   (min, avg, max) = (650.224, 912.014, 1311.133), stdev = 354.355
[info]   CI (99.9%): [≈ 0, 2276.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.033), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1101051.836 ops/s
[info] # Warmup Iteration   2: 1602330.449 ops/s
[info] # Warmup Iteration   3: 1755152.802 ops/s
[info] # Warmup Iteration   4: 1756412.846 ops/s
[info] # Warmup Iteration   5: 1756332.927 ops/s
[info] Iteration   1: 1756397.380 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1757312.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1756430.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1761021.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1756224.917 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1757477.296 ±(99.9%) 7800.599 ops/s [Average]
[info]   (min, avg, max) = (1756224.917, 1757477.296, 1761021.097), stdev = 2025.791
[info]   CI (99.9%): [1749676.697, 1765277.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27089.325 ops/s
[info] # Warmup Iteration   2: 284543.980 ops/s
[info] # Warmup Iteration   3: 353193.911 ops/s
[info] # Warmup Iteration   4: 366934.433 ops/s
[info] # Warmup Iteration   5: 362753.759 ops/s
[info] Iteration   1: 366215.593 ops/s
[info]                  ·gc.alloc.rate:                   2326.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              9997.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11514.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 367924.321 ops/s
[info]                  ·gc.alloc.rate:                   2332.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              9975.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8599.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 368420.463 ops/s
[info]                  ·gc.alloc.rate:                   2323.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              9923.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11458.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 367756.549 ops/s
[info]                  ·gc.alloc.rate:               2318.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          9923.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8625.451 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 363342.323 ops/s
[info]                  ·gc.alloc.rate:                   2305.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              9986.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8750.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   366731.850 ±(99.9%) 7956.688 ops/s [Average]
[info]   (min, avg, max) = (363342.323, 366731.850, 368420.463), stdev = 2066.327
[info]   CI (99.9%): [358775.162, 374688.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2321.253 ±(99.9%) 38.652 MB/sec [Average]
[info]   (min, avg, max) = (2305.532, 2321.253, 2332.108), stdev = 10.038
[info]   CI (99.9%): [2282.601, 2359.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9961.552 ±(99.9%) 136.748 B/op [Average]
[info]   (min, avg, max) = (9923.204, 9961.552, 9997.712), stdev = 35.513
[info]   CI (99.9%): [9824.805, 10098.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2281.616 ±(99.9%) 1404.424 MB/sec [Average]
[info]   (min, avg, max) = (2010.422, 2281.616, 2682.911), stdev = 364.724
[info]   CI (99.9%): [877.192, 3686.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9789.683 ±(99.9%) 5968.594 B/op [Average]
[info]   (min, avg, max) = (8599.837, 9789.683, 11514.382), stdev = 1550.025
[info]   CI (99.9%): [3821.088, 15758.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.434 ±(99.9%) 3.511 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.434, 2.064), stdev = 0.912
[info]   CI (99.9%): [≈ 0, 3.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.863 ±(99.9%) 15.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.863, 8.871), stdev = 3.918
[info]   CI (99.9%): [≈ 0, 16.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16876.065 ops/s
[info] # Warmup Iteration   2: 35612.341 ops/s
[info] # Warmup Iteration   3: 75937.617 ops/s
[info] # Warmup Iteration   4: 77960.524 ops/s
[info] # Warmup Iteration   5: 85681.754 ops/s
[info] Iteration   1: 82016.533 ops/s
[info]                  ·gc.alloc.rate:               1649.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          31652.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25437.843 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 84691.191 ops/s
[info]                  ·gc.alloc.rate:                   1723.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              32035.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36939.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 84648.321 ops/s
[info]                  ·gc.alloc.rate:                   1708.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              31770.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24572.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.709 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 83845.142 ops/s
[info]                  ·gc.alloc.rate:                   1725.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              32378.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37175.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.735 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 85240.769 ops/s
[info]                  ·gc.alloc.rate:                   1708.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              31539.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24402.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   84088.391 ±(99.9%) 4854.191 ops/s [Average]
[info]   (min, avg, max) = (82016.533, 84088.391, 85240.769), stdev = 1260.618
[info]   CI (99.9%): [79234.201, 88942.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1703.182 ±(99.9%) 119.811 MB/sec [Average]
[info]   (min, avg, max) = (1649.490, 1703.182, 1725.626), stdev = 31.115
[info]   CI (99.9%): [1583.371, 1822.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31875.018 ±(99.9%) 1295.058 B/op [Average]
[info]   (min, avg, max) = (31539.335, 31875.018, 32378.310), stdev = 336.322
[info]   CI (99.9%): [30579.960, 33170.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1587.602 ±(99.9%) 1395.452 MB/sec [Average]
[info]   (min, avg, max) = (1321.571, 1587.602, 1987.832), stdev = 362.394
[info]   CI (99.9%): [192.150, 2983.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29705.569 ±(99.9%) 25889.648 B/op [Average]
[info]   (min, avg, max) = (24402.365, 29705.569, 37175.831), stdev = 6723.459
[info]   CI (99.9%): [3815.921, 55595.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.998 ±(99.9%) 7.832 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.998, 4.635), stdev = 2.034
[info]   CI (99.9%): [≈ 0, 8.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.544 ±(99.9%) 145.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.544, 86.122), stdev = 37.795
[info]   CI (99.9%): [≈ 0, 164.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.808
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22890.667 ops/s
[info] # Warmup Iteration   2: 75809.511 ops/s
[info] # Warmup Iteration   3: 88418.127 ops/s
[info] # Warmup Iteration   4: 95689.323 ops/s
[info] # Warmup Iteration   5: 95149.608 ops/s
[info] Iteration   1: 95427.022 ops/s
[info]                  ·gc.alloc.rate:                   1246.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              20557.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21709.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 94779.500 ops/s
[info]                  ·gc.alloc.rate:               1240.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          20592.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1318.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21891.655 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 95449.722 ops/s
[info]                  ·gc.alloc.rate:                   1243.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              20496.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21787.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 95585.918 ops/s
[info]                  ·gc.alloc.rate:                   1237.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              20381.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21810.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92588.176 ops/s
[info]                  ·gc.alloc.rate:                   1195.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              20339.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11272.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   94766.068 ±(99.9%) 4840.103 ops/s [Average]
[info]   (min, avg, max) = (92588.176, 94766.068, 95585.918), stdev = 1256.960
[info]   CI (99.9%): [89925.964, 99606.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1232.649 ±(99.9%) 80.253 MB/sec [Average]
[info]   (min, avg, max) = (1195.792, 1232.649, 1246.302), stdev = 20.841
[info]   CI (99.9%): [1152.396, 1312.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20473.584 ±(99.9%) 422.491 B/op [Average]
[info]   (min, avg, max) = (20339.756, 20473.584, 20592.833), stdev = 109.720
[info]   CI (99.9%): [20051.093, 20896.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.672 ±(99.9%) 1132.218 MB/sec [Average]
[info]   (min, avg, max) = (662.721, 1188.672, 1324.778), stdev = 294.033
[info]   CI (99.9%): [56.454, 2320.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19694.407 ±(99.9%) 18130.477 B/op [Average]
[info]   (min, avg, max) = (11272.515, 19694.407, 21891.655), stdev = 4708.427
[info]   CI (99.9%): [1563.931, 37824.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.233 ±(99.9%) 1.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 1.041), stdev = 0.452
[info]   CI (99.9%): [≈ 0, 1.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.847 ±(99.9%) 28.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.847, 17.138), stdev = 7.437
[info]   CI (99.9%): [≈ 0, 32.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32416.801 ops/s
[info] # Warmup Iteration   2: 93415.935 ops/s
[info] # Warmup Iteration   3: 95867.484 ops/s
[info] # Warmup Iteration   4: 99334.751 ops/s
[info] # Warmup Iteration   5: 100674.531 ops/s
[info] Iteration   1: 97446.427 ops/s
[info]                  ·gc.alloc.rate:                   1206.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              19484.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21367.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 100557.950 ops/s
[info]                  ·gc.alloc.rate:                   1236.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              19351.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20727.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 93489.199 ops/s
[info]                  ·gc.alloc.rate:                   1140.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11158.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 98780.250 ops/s
[info]                  ·gc.alloc.rate:                   1232.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              19631.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21099.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 99086.194 ops/s
[info]                  ·gc.alloc.rate:                   1223.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              19434.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21002.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   97872.004 ±(99.9%) 10350.924 ops/s [Average]
[info]   (min, avg, max) = (93489.199, 97872.004, 100557.950), stdev = 2688.102
[info]   CI (99.9%): [87521.080, 108222.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1207.896 ±(99.9%) 151.571 MB/sec [Average]
[info]   (min, avg, max) = (1140.586, 1207.896, 1236.451), stdev = 39.362
[info]   CI (99.9%): [1056.325, 1359.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19420.753 ±(99.9%) 615.268 B/op [Average]
[info]   (min, avg, max) = (19200.635, 19420.753, 19631.984), stdev = 159.783
[info]   CI (99.9%): [18805.484, 20036.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1191.392 ±(99.9%) 1137.780 MB/sec [Average]
[info]   (min, avg, max) = (662.828, 1191.392, 1324.591), stdev = 295.478
[info]   CI (99.9%): [53.611, 2329.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19070.783 ±(99.9%) 17055.541 B/op [Average]
[info]   (min, avg, max) = (11158.046, 19070.783, 21367.014), stdev = 4429.270
[info]   CI (99.9%): [2015.242, 36126.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.914 ±(99.9%) 5.478 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.914, 3.365), stdev = 1.423
[info]   CI (99.9%): [≈ 0, 6.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.174 ±(99.9%) 92.315 B/op [Average]
[info]   (min, avg, max) = (0.326, 15.174, 56.640), stdev = 23.974
[info]   CI (99.9%): [≈ 0, 107.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1945.940 ops/s
[info] # Warmup Iteration   2: 35306.146 ops/s
[info] # Warmup Iteration   3: 55758.461 ops/s
[info] # Warmup Iteration   4: 52404.307 ops/s
[info] # Warmup Iteration   5: 52792.057 ops/s
[info] Iteration   1: 52947.444 ops/s
[info]                  ·gc.alloc.rate:                   2069.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              61507.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59335.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 52936.148 ops/s
[info]                  ·gc.alloc.rate:                   2066.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              61443.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59406.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52755.258 ops/s
[info]                  ·gc.alloc.rate:                   2049.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              61130.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59640.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52999.139 ops/s
[info]                  ·gc.alloc.rate:                   2067.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              61362.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79177.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.234 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 52910.838 ops/s
[info]                  ·gc.alloc.rate:                   2061.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              61317.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59731.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   52909.765 ±(99.9%) 354.893 ops/s [Average]
[info]   (min, avg, max) = (52755.258, 52909.765, 52999.139), stdev = 92.164
[info]   CI (99.9%): [52554.873, 53264.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2062.882 ±(99.9%) 31.742 MB/sec [Average]
[info]   (min, avg, max) = (2049.114, 2062.882, 2069.198), stdev = 8.243
[info]   CI (99.9%): [2031.140, 2094.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61352.372 ±(99.9%) 555.004 B/op [Average]
[info]   (min, avg, max) = (61130.258, 61352.372, 61507.480), stdev = 144.133
[info]   CI (99.9%): [60797.367, 61907.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2133.986 ±(99.9%) 1150.245 MB/sec [Average]
[info]   (min, avg, max) = (1996.133, 2133.986, 2668.281), stdev = 298.715
[info]   CI (99.9%): [983.742, 3284.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63458.440 ±(99.9%) 33843.056 B/op [Average]
[info]   (min, avg, max) = (59335.612, 63458.440, 79177.865), stdev = 8788.934
[info]   CI (99.9%): [29615.384, 97301.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.497 ±(99.9%) 3.313 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.497, 2.029), stdev = 0.860
[info]   CI (99.9%): [≈ 0, 3.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.786 ±(99.9%) 98.469 B/op [Average]
[info]   (min, avg, max) = (0.619, 14.786, 60.298), stdev = 25.572
[info]   CI (99.9%): [≈ 0, 113.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42657.645 ops/s
[info] # Warmup Iteration   2: 134705.929 ops/s
[info] # Warmup Iteration   3: 146135.655 ops/s
[info] # Warmup Iteration   4: 156527.135 ops/s
[info] # Warmup Iteration   5: 157275.848 ops/s
[info] Iteration   1: 156868.153 ops/s
[info]                  ·gc.alloc.rate:               1479.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          14848.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13379.792 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 155826.443 ops/s
[info]                  ·gc.alloc.rate:                   1467.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              14821.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13483.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 156998.786 ops/s
[info]                  ·gc.alloc.rate:                   1469.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              14731.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13382.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 157095.709 ops/s
[info]                  ·gc.alloc.rate:                   1481.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              14844.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19994.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 157811.872 ops/s
[info]                  ·gc.alloc.rate:                   1473.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              14691.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13253.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   156920.193 ±(99.9%) 2743.885 ops/s [Average]
[info]   (min, avg, max) = (155826.443, 156920.193, 157811.872), stdev = 712.578
[info]   CI (99.9%): [154176.307, 159664.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1474.349 ±(99.9%) 24.047 MB/sec [Average]
[info]   (min, avg, max) = (1467.448, 1474.349, 1481.636), stdev = 6.245
[info]   CI (99.9%): [1450.302, 1498.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14787.488 ±(99.9%) 274.920 B/op [Average]
[info]   (min, avg, max) = (14691.588, 14787.488, 14848.169), stdev = 71.396
[info]   CI (99.9%): [14512.568, 15062.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1465.621 ±(99.9%) 1140.988 MB/sec [Average]
[info]   (min, avg, max) = (1328.978, 1465.621, 1995.661), stdev = 296.311
[info]   CI (99.9%): [324.633, 2606.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14698.677 ±(99.9%) 11404.221 B/op [Average]
[info]   (min, avg, max) = (13253.352, 14698.677, 19994.614), stdev = 2961.640
[info]   CI (99.9%): [3294.456, 26102.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.970 ±(99.9%) 7.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.970, 4.580), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.724 ±(99.9%) 77.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.724, 45.911), stdev = 20.250
[info]   CI (99.9%): [≈ 0, 87.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134394.104 ops/s
[info] # Warmup Iteration   2: 335054.016 ops/s
[info] # Warmup Iteration   3: 397054.640 ops/s
[info] # Warmup Iteration   4: 396884.643 ops/s
[info] # Warmup Iteration   5: 396954.332 ops/s
[info] Iteration   1: 395436.477 ops/s
[info]                  ·gc.alloc.rate:                   507.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              2019.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2627.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 388534.352 ops/s
[info]                  ·gc.alloc.rate:               502.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          2035.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2674.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 397241.382 ops/s
[info]                  ·gc.alloc.rate:      492.690 MB/sec
[info]                  ·gc.alloc.rate.norm: 1952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 398920.711 ops/s
[info]                  ·gc.alloc.rate:                   518.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              2043.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2608.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 391086.415 ops/s
[info]                  ·gc.alloc.rate:               532.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          2142.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2660.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   394243.867 ±(99.9%) 16656.911 ops/s [Average]
[info]   (min, avg, max) = (388534.352, 394243.867, 398920.711), stdev = 4325.747
[info]   CI (99.9%): [377586.957, 410900.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   510.645 ±(99.9%) 58.602 MB/sec [Average]
[info]   (min, avg, max) = (492.690, 510.645, 532.373), stdev = 15.219
[info]   CI (99.9%): [452.043, 569.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2038.618 ±(99.9%) 263.163 B/op [Average]
[info]   (min, avg, max) = (1952.001, 2038.618, 2142.430), stdev = 68.343
[info]   CI (99.9%): [1775.455, 2301.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.595 ±(99.9%) 1137.842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.595, 661.322), stdev = 295.494
[info]   CI (99.9%): [≈ 0, 1666.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2114.160 ±(99.9%) 4551.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2114.160, 2674.202), stdev = 1182.139
[info]   CI (99.9%): [≈ 0, 6666.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.082), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556442.290 ops/s
[info] # Warmup Iteration   2: 964358.265 ops/s
[info] # Warmup Iteration   3: 946547.688 ops/s
[info] # Warmup Iteration   4: 940326.044 ops/s
[info] # Warmup Iteration   5: 937317.239 ops/s
[info] Iteration   1: 937292.701 ops/s
[info]                  ·gc.alloc.rate:               1181.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1124.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 947513.166 ops/s
[info]                  ·gc.alloc.rate:                   1210.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              2010.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2225.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 944801.004 ops/s
[info]                  ·gc.alloc.rate:               1225.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          2040.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2232.734 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 959772.971 ops/s
[info]                  ·gc.alloc.rate:                   1218.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              1998.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2198.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.759 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 960327.477 ops/s
[info]                  ·gc.alloc.rate:                   1204.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              1974.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1096.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   949941.464 ±(99.9%) 38354.036 ops/s [Average]
[info]   (min, avg, max) = (937292.701, 949941.464, 960327.477), stdev = 9960.421
[info]   CI (99.9%): [911587.428, 988295.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1208.116 ±(99.9%) 64.477 MB/sec [Average]
[info]   (min, avg, max) = (1181.671, 1208.116, 1225.149), stdev = 16.744
[info]   CI (99.9%): [1143.639, 1272.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2001.547 ±(99.9%) 99.571 B/op [Average]
[info]   (min, avg, max) = (1974.352, 2001.547, 2040.846), stdev = 25.858
[info]   CI (99.9%): [1901.976, 2101.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.938 ±(99.9%) 1415.815 MB/sec [Average]
[info]   (min, avg, max) = (668.781, 1071.938, 1341.248), stdev = 367.683
[info]   CI (99.9%): [≈ 0, 2487.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1775.448 ±(99.9%) 2339.404 B/op [Average]
[info]   (min, avg, max) = (1096.115, 1775.448, 2232.734), stdev = 607.536
[info]   CI (99.9%): [≈ 0, 4114.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 6.986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 4.123), stdev = 1.814
[info]   CI (99.9%): [≈ 0, 7.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.451 ±(99.9%) 11.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.451, 6.759), stdev = 2.974
[info]   CI (99.9%): [≈ 0, 12.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552749.284 ops/s
[info] # Warmup Iteration   2: 930431.623 ops/s
[info] # Warmup Iteration   3: 858745.978 ops/s
[info] # Warmup Iteration   4: 975873.793 ops/s
[info] # Warmup Iteration   5: 979734.160 ops/s
[info] Iteration   1: 972010.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 970373.027 ops/s
[info]                  ·gc.alloc.rate:      5.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.130 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 978083.826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 974013.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 982298.673 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   975355.865 ±(99.9%) 18613.683 ops/s [Average]
[info]   (min, avg, max) = (970373.027, 975355.865, 982298.673), stdev = 4833.914
[info]   CI (99.9%): [956742.182, 993969.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.003 ±(99.9%) 8.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.003, 5.014), stdev = 2.242
[info]   CI (99.9%): [≈ 0, 9.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.626 ±(99.9%) 14.000 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.626, 8.130), stdev = 3.636
[info]   CI (99.9%): [≈ 0, 15.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60584.368 ops/s
[info] # Warmup Iteration   2: 145025.321 ops/s
[info] # Warmup Iteration   3: 233836.432 ops/s
[info] # Warmup Iteration   4: 309975.916 ops/s
[info] # Warmup Iteration   5: 303932.892 ops/s
[info] Iteration   1: 309459.995 ops/s
[info]                  ·gc.alloc.rate:               938.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          4773.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3360.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 300419.640 ops/s
[info]                  ·gc.alloc.rate:                   913.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              4787.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3461.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 299737.891 ops/s
[info]                  ·gc.alloc.rate:                   928.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              4876.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6941.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 308284.951 ops/s
[info]                  ·gc.alloc.rate:               934.790 MB/sec
[info]                  ·gc.alloc.rate.norm:          4771.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3375.350 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 309321.574 ops/s
[info]                  ·gc.alloc.rate:                   955.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              4862.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6734.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   305444.810 ±(99.9%) 18966.001 ops/s [Average]
[info]   (min, avg, max) = (299737.891, 305444.810, 309459.995), stdev = 4925.410
[info]   CI (99.9%): [286478.809, 324410.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   934.310 ±(99.9%) 58.447 MB/sec [Average]
[info]   (min, avg, max) = (913.931, 934.310, 955.684), stdev = 15.178
[info]   CI (99.9%): [875.863, 992.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4814.059 ±(99.9%) 195.986 B/op [Average]
[info]   (min, avg, max) = (4771.577, 4814.059, 4876.172), stdev = 50.897
[info]   CI (99.9%): [4618.073, 5010.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   925.750 ±(99.9%) 1396.046 MB/sec [Average]
[info]   (min, avg, max) = (660.802, 925.750, 1323.767), stdev = 362.549
[info]   CI (99.9%): [≈ 0, 2321.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4774.878 ±(99.9%) 7259.732 B/op [Average]
[info]   (min, avg, max) = (3360.788, 4774.878, 6941.606), stdev = 1885.329
[info]   CI (99.9%): [≈ 0, 12034.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.882 ±(99.9%) 7.342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.882, 4.291), stdev = 1.907
[info]   CI (99.9%): [≈ 0, 8.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.489 ±(99.9%) 37.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.489, 21.833), stdev = 9.698
[info]   CI (99.9%): [≈ 0, 41.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12309.743 ops/s
[info] # Warmup Iteration   2: 83990.031 ops/s
[info] # Warmup Iteration   3: 142816.803 ops/s
[info] # Warmup Iteration   4: 144207.306 ops/s
[info] # Warmup Iteration   5: 143761.823 ops/s
[info] Iteration   1: 144470.414 ops/s
[info]                  ·gc.alloc.rate:                   1792.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              19527.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14484.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 144828.344 ops/s
[info]                  ·gc.alloc.rate:                   1820.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              19784.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21630.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.239 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 145304.309 ops/s
[info]                  ·gc.alloc.rate:                   1829.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              19812.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21495.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 145907.853 ops/s
[info]                  ·gc.alloc.rate:                   1807.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              19495.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14273.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 145649.920 ops/s
[info]                  ·gc.alloc.rate:                   1813.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              19596.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21475.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   145232.168 ±(99.9%) 2261.424 ops/s [Average]
[info]   (min, avg, max) = (144470.414, 145232.168, 145907.853), stdev = 587.285
[info]   CI (99.9%): [142970.744, 147493.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1812.621 ±(99.9%) 53.657 MB/sec [Average]
[info]   (min, avg, max) = (1792.436, 1812.621, 1829.192), stdev = 13.935
[info]   CI (99.9%): [1758.964, 1866.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19643.110 ±(99.9%) 564.870 B/op [Average]
[info]   (min, avg, max) = (19495.187, 19643.110, 19812.446), stdev = 146.695
[info]   CI (99.9%): [19078.240, 20207.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1723.088 ±(99.9%) 1394.450 MB/sec [Average]
[info]   (min, avg, max) = (1323.220, 1723.088, 1990.615), stdev = 362.134
[info]   CI (99.9%): [328.638, 3117.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18672.091 ±(99.9%) 15094.110 B/op [Average]
[info]   (min, avg, max) = (14273.941, 18672.091, 21630.871), stdev = 3919.892
[info]   CI (99.9%): [3577.981, 33766.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.225 ±(99.9%) 8.595 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.225, 5.191), stdev = 2.232
[info]   CI (99.9%): [≈ 0, 9.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.343 ±(99.9%) 93.650 B/op [Average]
[info]   (min, avg, max) = (0.225, 13.343, 56.546), stdev = 24.321
[info]   CI (99.9%): [≈ 0, 106.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51125.329 ops/s
[info] # Warmup Iteration   2: 167723.629 ops/s
[info] # Warmup Iteration   3: 193679.985 ops/s
[info] # Warmup Iteration   4: 221163.461 ops/s
[info] # Warmup Iteration   5: 211410.148 ops/s
[info] Iteration   1: 221534.769 ops/s
[info]                  ·gc.alloc.rate:               810.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          5756.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4713.531 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 222711.753 ops/s
[info]                  ·gc.alloc.rate:                   839.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              5931.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9377.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 219800.847 ops/s
[info]                  ·gc.alloc.rate:               808.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          5791.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4753.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 220479.858 ops/s
[info]                  ·gc.alloc.rate:                   806.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              5758.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4738.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 218514.986 ops/s
[info]                  ·gc.alloc.rate:               802.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          5774.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4785.926 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   220608.443 ±(99.9%) 6189.034 ops/s [Average]
[info]   (min, avg, max) = (218514.986, 220608.443, 222711.753), stdev = 1607.272
[info]   CI (99.9%): [214419.409, 226797.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   813.462 ±(99.9%) 57.305 MB/sec [Average]
[info]   (min, avg, max) = (802.041, 813.462, 839.494), stdev = 14.882
[info]   CI (99.9%): [756.157, 870.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   5802.612 ±(99.9%) 283.438 B/op [Average]
[info]   (min, avg, max) = (5756.653, 5802.612, 5931.793), stdev = 73.608
[info]   CI (99.9%): [5519.174, 6086.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.574 ±(99.9%) 1142.034 MB/sec [Average]
[info]   (min, avg, max) = (663.441, 796.574, 1327.117), stdev = 296.582
[info]   CI (99.9%): [≈ 0, 1938.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5673.652 ±(99.9%) 7973.001 B/op [Average]
[info]   (min, avg, max) = (4713.531, 5673.652, 9377.291), stdev = 2070.563
[info]   CI (99.9%): [≈ 0, 13646.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.089 ±(99.9%) 0.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.297), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128680.109 ops/s
[info] # Warmup Iteration   2: 461525.116 ops/s
[info] # Warmup Iteration   3: 492329.288 ops/s
[info] # Warmup Iteration   4: 572817.911 ops/s
[info] # Warmup Iteration   5: 568098.112 ops/s
[info] Iteration   1: 568522.670 ops/s
[info]                  ·gc.alloc.rate:                   1146.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              3172.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3677.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 569316.930 ops/s
[info]                  ·gc.alloc.rate:               1125.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          3110.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1836.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 566874.349 ops/s
[info]                  ·gc.alloc.rate:                   1149.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              3192.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3688.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 570401.887 ops/s
[info]                  ·gc.alloc.rate:                   1148.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              3169.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3667.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 576355.535 ops/s
[info]                  ·gc.alloc.rate:                   1134.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              3098.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1815.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.819 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   570294.274 ±(99.9%) 13955.614 ops/s [Average]
[info]   (min, avg, max) = (566874.349, 570294.274, 576355.535), stdev = 3624.229
[info]   CI (99.9%): [556338.660, 584249.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1141.019 ±(99.9%) 40.873 MB/sec [Average]
[info]   (min, avg, max) = (1125.370, 1141.019, 1149.920), stdev = 10.615
[info]   CI (99.9%): [1100.146, 1181.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3148.917 ±(99.9%) 159.711 B/op [Average]
[info]   (min, avg, max) = (3098.793, 3148.917, 3192.572), stdev = 41.476
[info]   CI (99.9%): [2989.206, 3308.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1063.106 ±(99.9%) 1401.043 MB/sec [Average]
[info]   (min, avg, max) = (664.244, 1063.106, 1329.280), stdev = 363.846
[info]   CI (99.9%): [≈ 0, 2464.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2937.095 ±(99.9%) 3906.717 B/op [Average]
[info]   (min, avg, max) = (1815.442, 2937.095, 3688.900), stdev = 1014.562
[info]   CI (99.9%): [≈ 0, 6843.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 5.350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.219), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 6.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.163 ±(99.9%) 14.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.163, 8.881), stdev = 3.834
[info]   CI (99.9%): [≈ 0, 16.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1702.241 ops/s
[info] # Warmup Iteration   2: 54676.614 ops/s
[info] # Warmup Iteration   3: 97927.081 ops/s
[info] # Warmup Iteration   4: 95107.499 ops/s
[info] # Warmup Iteration   5: 98541.582 ops/s
[info] Iteration   1: 99475.405 ops/s
[info]                  ·gc.alloc.rate:                   3139.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              49667.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42288.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 102385.290 ops/s
[info]                  ·gc.alloc.rate:                   3238.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              49768.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51450.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.960 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 101452.172 ops/s
[info]                  ·gc.alloc.rate:               3218.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          49929.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3359.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52121.353 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 101409.944 ops/s
[info]                  ·gc.alloc.rate:                   3218.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              49934.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41850.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 99417.021 ops/s
[info]                  ·gc.alloc.rate:                   3197.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              50612.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53504.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.659 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   100827.966 ±(99.9%) 5084.373 ops/s [Average]
[info]   (min, avg, max) = (99417.021, 100827.966, 102385.290), stdev = 1320.396
[info]   CI (99.9%): [95743.593, 105912.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3202.533 ±(99.9%) 146.209 MB/sec [Average]
[info]   (min, avg, max) = (3139.693, 3202.533, 3238.534), stdev = 37.970
[info]   CI (99.9%): [3056.323, 3348.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49982.652 ±(99.9%) 1424.663 B/op [Average]
[info]   (min, avg, max) = (49667.281, 49982.652, 50612.880), stdev = 369.980
[info]   CI (99.9%): [48557.989, 51407.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3091.728 ±(99.9%) 1430.110 MB/sec [Average]
[info]   (min, avg, max) = (2673.248, 3091.728, 3380.465), stdev = 371.395
[info]   CI (99.9%): [1661.619, 4521.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48243.109 ±(99.9%) 21895.230 B/op [Average]
[info]   (min, avg, max) = (41850.819, 48243.109, 53504.479), stdev = 5686.122
[info]   CI (99.9%): [26347.879, 70138.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.208), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.047 ±(99.9%) 5.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.047, 3.293), stdev = 1.306
[info]   CI (99.9%): [≈ 0, 6.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52741.014 ops/s
[info] # Warmup Iteration   2: 215788.888 ops/s
[info] # Warmup Iteration   3: 228497.139 ops/s
[info] # Warmup Iteration   4: 241515.802 ops/s
[info] # Warmup Iteration   5: 244414.529 ops/s
[info] Iteration   1: 239902.872 ops/s
[info]                  ·gc.alloc.rate:                   1549.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              10161.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13101.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 240846.489 ops/s
[info]                  ·gc.alloc.rate:                   1519.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              9930.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8710.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 242153.462 ops/s
[info]                  ·gc.alloc.rate:                   1523.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              9902.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8659.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 241545.372 ops/s
[info]                  ·gc.alloc.rate:                   1531.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              9977.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8663.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 237492.617 ops/s
[info]                  ·gc.alloc.rate:                   1492.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              9889.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8802.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   240388.162 ±(99.9%) 7017.573 ops/s [Average]
[info]   (min, avg, max) = (237492.617, 240388.162, 242153.462), stdev = 1822.441
[info]   CI (99.9%): [233370.590, 247405.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1523.276 ±(99.9%) 79.705 MB/sec [Average]
[info]   (min, avg, max) = (1492.305, 1523.276, 1549.357), stdev = 20.699
[info]   CI (99.9%): [1443.571, 1602.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9972.304 ±(99.9%) 427.482 B/op [Average]
[info]   (min, avg, max) = (9889.843, 9972.304, 10161.682), stdev = 111.016
[info]   CI (99.9%): [9544.823, 10399.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1464.199 ±(99.9%) 1148.184 MB/sec [Average]
[info]   (min, avg, max) = (1328.235, 1464.199, 1997.587), stdev = 298.180
[info]   CI (99.9%): [316.016, 2612.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9587.521 ±(99.9%) 7567.282 B/op [Average]
[info]   (min, avg, max) = (8659.405, 9587.521, 13101.464), stdev = 1965.199
[info]   CI (99.9%): [2020.239, 17154.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.894 ±(99.9%) 5.384 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.894, 3.240), stdev = 1.398
[info]   CI (99.9%): [≈ 0, 6.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.832 ±(99.9%) 35.168 B/op [Average]
[info]   (min, avg, max) = (0.137, 5.832, 21.171), stdev = 9.133
[info]   CI (99.9%): [≈ 0, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 14.000), stdev = 5.030
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220192.193 ops/s
[info] # Warmup Iteration   2: 685518.252 ops/s
[info] # Warmup Iteration   3: 788122.960 ops/s
[info] # Warmup Iteration   4: 787693.138 ops/s
[info] # Warmup Iteration   5: 788314.238 ops/s
[info] Iteration   1: 786852.111 ops/s
[info]                  ·gc.alloc.rate:                   605.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              1211.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1328.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 789041.290 ops/s
[info]                  ·gc.alloc.rate:               602.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1324.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 785606.816 ops/s
[info]                  ·gc.alloc.rate:               597.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          1197.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1327.872 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 787055.702 ops/s
[info]                  ·gc.alloc.rate:      584.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 782339.110 ops/s
[info]                  ·gc.alloc.rate:                   599.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              1206.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1333.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   786179.006 ±(99.9%) 9527.239 ops/s [Average]
[info]   (min, avg, max) = (782339.110, 786179.006, 789041.290), stdev = 2474.194
[info]   CI (99.9%): [776651.767, 795706.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   597.908 ±(99.9%) 31.860 MB/sec [Average]
[info]   (min, avg, max) = (584.078, 597.908, 605.521), stdev = 8.274
[info]   CI (99.9%): [566.048, 629.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1196.926 ±(99.9%) 65.221 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1196.926, 1211.151), stdev = 16.938
[info]   CI (99.9%): [1131.705, 1262.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.809 ±(99.9%) 1142.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.809, 664.152), stdev = 296.732
[info]   CI (99.9%): [≈ 0, 1673.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1062.882 ±(99.9%) 2287.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1062.882, 1333.400), stdev = 594.177
[info]   CI (99.9%): [≈ 0, 3350.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.354), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.158 ±(99.9%) 1.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.708), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 6.000), stdev = 2.345
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 445638.414 ops/s
[info] # Warmup Iteration   2: 1192492.164 ops/s
[info] # Warmup Iteration   3: 1342123.812 ops/s
[info] # Warmup Iteration   4: 1383036.406 ops/s
[info] # Warmup Iteration   5: 1356623.948 ops/s
[info] Iteration   1: 1383584.554 ops/s
[info]                  ·gc.alloc.rate:               1046.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          1190.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 760.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1398731.791 ops/s
[info]                  ·gc.alloc.rate:                   1077.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1506.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1400671.387 ops/s
[info]                  ·gc.alloc.rate:               1056.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          1186.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 752.630 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1337537.595 ops/s
[info]                  ·gc.alloc.rate:               1033.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          1216.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1576.632 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 1395259.807 ops/s
[info]                  ·gc.alloc.rate:               1050.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          1184.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 755.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1383157.027 ±(99.9%) 101461.339 ops/s [Average]
[info]   (min, avg, max) = (1337537.595, 1383157.027, 1400671.387), stdev = 26349.188
[info]   CI (99.9%): [1281695.688, 1484618.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1053.086 ±(99.9%) 62.162 MB/sec [Average]
[info]   (min, avg, max) = (1033.832, 1053.086, 1077.904), stdev = 16.143
[info]   CI (99.9%): [990.924, 1115.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1198.174 ±(99.9%) 58.725 B/op [Average]
[info]   (min, avg, max) = (1184.555, 1198.174, 1216.470), stdev = 15.251
[info]   CI (99.9%): [1139.449, 1256.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.669 ±(99.9%) 1412.341 MB/sec [Average]
[info]   (min, avg, max) = (669.058, 937.669, 1339.920), stdev = 366.781
[info]   CI (99.9%): [≈ 0, 2350.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1070.516 ±(99.9%) 1658.768 B/op [Average]
[info]   (min, avg, max) = (752.630, 1070.516, 1576.632), stdev = 430.777
[info]   CI (99.9%): [≈ 0, 2729.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753224.830 ops/s
[info] # Warmup Iteration   2: 1409485.128 ops/s
[info] # Warmup Iteration   3: 1493429.531 ops/s
[info] # Warmup Iteration   4: 1493498.193 ops/s
[info] # Warmup Iteration   5: 1493663.157 ops/s
[info] Iteration   1: 1493315.924 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1492755.040 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1493257.691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1493270.100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1488532.144 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1492226.180 ±(99.9%) 8000.383 ops/s [Average]
[info]   (min, avg, max) = (1488532.144, 1492226.180, 1493315.924), stdev = 2077.674
[info]   CI (99.9%): [1484225.797, 1500226.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53623.997 ops/s
[info] # Warmup Iteration   2: 559857.864 ops/s
[info] # Warmup Iteration   3: 573817.027 ops/s
[info] # Warmup Iteration   4: 632642.139 ops/s
[info] # Warmup Iteration   5: 619603.350 ops/s
[info] Iteration   1: 619868.804 ops/s
[info]                  ·gc.alloc.rate:                   1509.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              3833.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3386.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 629596.142 ops/s
[info]                  ·gc.alloc.rate:                   1544.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              3861.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5011.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 631389.774 ops/s
[info]                  ·gc.alloc.rate:                   1553.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              3872.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3338.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 632941.023 ops/s
[info]                  ·gc.alloc.rate:               1559.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          3877.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3332.778 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 623353.067 ops/s
[info]                  ·gc.alloc.rate:                   1521.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              3840.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3384.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   627429.762 ±(99.9%) 21485.801 ops/s [Average]
[info]   (min, avg, max) = (619868.804, 627429.762, 632941.023), stdev = 5579.794
[info]   CI (99.9%): [605943.960, 648915.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1537.750 ±(99.9%) 81.911 MB/sec [Average]
[info]   (min, avg, max) = (1509.946, 1537.750, 1559.180), stdev = 21.272
[info]   CI (99.9%): [1455.839, 1619.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3857.072 ±(99.9%) 74.620 B/op [Average]
[info]   (min, avg, max) = (3833.721, 3857.072, 3877.181), stdev = 19.379
[info]   CI (99.9%): [3782.452, 3931.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.775 ±(99.9%) 1147.485 MB/sec [Average]
[info]   (min, avg, max) = (1333.685, 1471.775, 2004.826), stdev = 297.998
[info]   CI (99.9%): [324.290, 2619.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3690.756 ±(99.9%) 2844.848 B/op [Average]
[info]   (min, avg, max) = (3332.778, 3690.756, 5011.600), stdev = 738.798
[info]   CI (99.9%): [845.908, 6535.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.385 ±(99.9%) 3.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.822), stdev = 0.803
[info]   CI (99.9%): [≈ 0, 3.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.961 ±(99.9%) 7.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.961, 4.541), stdev = 2.002
[info]   CI (99.9%): [≈ 0, 8.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173.920 ops/s
[info] # Warmup Iteration   2: 487.589 ops/s
[info] # Warmup Iteration   3: 871.314 ops/s
[info] # Warmup Iteration   4: 938.963 ops/s
[info] # Warmup Iteration   5: 945.997 ops/s
[info] Iteration   1: 912.360 ops/s
[info]                  ·gc.alloc.rate:                   1956.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              3375422.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3442613.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8887.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 937.397 ops/s
[info]                  ·gc.alloc.rate:                   2012.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              3378754.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3341916.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2585.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 815.701 ops/s
[info]                  ·gc.alloc.rate:                        1832.991 MB/sec
[info]                  ·gc.alloc.rate.norm:                   3536384.892 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.015 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 28.500 B/op
[info]                  ·gc.churn.Metaspace:                   0.042 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              80.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2087.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          4028043.304 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.463 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             4751.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           1.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      2129.588 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              52.000 ms
[info] Iteration   4: 860.860 ops/s
[info]                  ·gc.alloc.rate:               2144.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          3919810.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1982.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3624346.314 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 924.893 ops/s
[info]                  ·gc.alloc.rate:                   1967.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              3346911.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3377864.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7557.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   890.242 ±(99.9%) 195.713 ops/s [Average]
[info]   (min, avg, max) = (815.701, 890.242, 937.397), stdev = 50.826
[info]   CI (99.9%): [694.529, 1085.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1983.004 ±(99.9%) 432.064 MB/sec [Average]
[info]   (min, avg, max) = (1832.991, 1983.004, 2144.388), stdev = 112.206
[info]   CI (99.9%): [1550.940, 2415.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3511456.695 ±(99.9%) 924483.629 B/op [Average]
[info]   (min, avg, max) = (3346911.654, 3511456.695, 3919810.016), stdev = 240085.463
[info]   CI (99.9%): [2586973.066, 4435940.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   5.700 ±(99.9%) 49.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.700, 28.500), stdev = 12.746
[info]   CI (99.9%): [≈ 0, 54.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace.norm":
[info]   16.180 ±(99.9%) 139.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.180, 80.902), stdev = 36.180
[info]   CI (99.9%): [≈ 0, 155.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2008.685 ±(99.9%) 171.463 MB/sec [Average]
[info]   (min, avg, max) = (1982.750, 2008.685, 2087.829), stdev = 44.528
[info]   CI (99.9%): [1837.222, 2180.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3562956.908 ±(99.9%) 1085161.906 B/op [Average]
[info]   (min, avg, max) = (3341916.793, 3562956.908, 4028043.304), stdev = 281813.101
[info]   CI (99.9%): [2477795.002, 4648118.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen":
[info]   0.493 ±(99.9%) 4.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.493, 2.463), stdev = 1.101
[info]   CI (99.9%): [≈ 0, 4.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm":
[info]   950.284 ±(99.9%) 8182.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 950.284, 4751.422), stdev = 2124.900
[info]   CI (99.9%): [≈ 0, 9132.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.448 ±(99.9%) 8.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.448, 5.153), stdev = 2.232
[info]   CI (99.9%): [≈ 0, 11.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4231.829 ±(99.9%) 14633.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4231.829, 8887.395), stdev = 3800.359
[info]   CI (99.9%): [≈ 0, 18865.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   88.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 17.600, 52.000), stdev = 19.807
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93.932 ops/s
[info] # Warmup Iteration   2: 553.762 ops/s
[info] # Warmup Iteration   3: 910.196 ops/s
[info] # Warmup Iteration   4: 931.200 ops/s
[info] # Warmup Iteration   5: 922.486 ops/s
[info] Iteration   1: 926.038 ops/s
[info]                  ·gc.alloc.rate:                   1970.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              3347404.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3367998.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 921.367 ops/s
[info]                  ·gc.alloc.rate:                   1957.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              3342410.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3397636.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1876.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 889.739 ops/s
[info]                  ·gc.alloc.rate:                   1967.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480113.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3532758.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 250.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 893.128 ops/s
[info]                  ·gc.alloc.rate:                   1972.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              3474874.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3525162.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.998 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 940.786 ops/s
[info]                  ·gc.alloc.rate:                   2008.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              3359811.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3360234.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.823 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   914.212 ±(99.9%) 84.816 ops/s [Average]
[info]   (min, avg, max) = (889.739, 914.212, 940.786), stdev = 22.027
[info]   CI (99.9%): [829.395, 999.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1975.262 ±(99.9%) 76.017 MB/sec [Average]
[info]   (min, avg, max) = (1957.136, 1975.262, 2008.986), stdev = 19.741
[info]   CI (99.9%): [1899.245, 2051.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3400922.898 ±(99.9%) 270355.442 B/op [Average]
[info]   (min, avg, max) = (3342410.803, 3400922.898, 3480113.663), stdev = 70210.450
[info]   CI (99.9%): [3130567.456, 3671278.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1995.866 ±(99.9%) 40.110 MB/sec [Average]
[info]   (min, avg, max) = (1982.246, 1995.866, 2009.239), stdev = 10.416
[info]   CI (99.9%): [1955.757, 2035.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3436758.229 ±(99.9%) 328692.273 B/op [Average]
[info]   (min, avg, max) = (3360234.780, 3436758.229, 3532758.580), stdev = 85360.339
[info]   CI (99.9%): [3108065.957, 3765450.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.318 ±(99.9%) 1.741 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.318, 1.099), stdev = 0.452
[info]   CI (99.9%): [≈ 0, 2.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   547.154 ±(99.9%) 2969.568 B/op [Average]
[info]   (min, avg, max) = (34.823, 547.154, 1876.200), stdev = 771.187
[info]   CI (99.9%): [≈ 0, 3516.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17391.790 ops/s
[info] # Warmup Iteration   2: 38213.471 ops/s
[info] # Warmup Iteration   3: 46658.390 ops/s
[info] # Warmup Iteration   4: 44746.721 ops/s
[info] # Warmup Iteration   5: 44816.952 ops/s
[info] Iteration   1: 46076.188 ops/s
[info]                  ·gc.alloc.rate:               770.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          26300.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22458.271 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 45482.907 ops/s
[info]                  ·gc.alloc.rate:               758.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          26240.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22773.083 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 45949.917 ops/s
[info]                  ·gc.alloc.rate:                   765.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              26212.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22541.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.713 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43682.331 ops/s
[info]                  ·gc.alloc.rate:               724.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          26076.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23748.906 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 45340.361 ops/s
[info]                  ·gc.alloc.rate:               754.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          26198.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22880.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   45306.341 ±(99.9%) 3691.700 ops/s [Average]
[info]   (min, avg, max) = (43682.331, 45306.341, 46076.188), stdev = 958.723
[info]   CI (99.9%): [41614.641, 48998.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   754.539 ±(99.9%) 69.405 MB/sec [Average]
[info]   (min, avg, max) = (724.076, 754.539, 770.014), stdev = 18.024
[info]   CI (99.9%): [685.134, 823.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26205.594 ±(99.9%) 316.995 B/op [Average]
[info]   (min, avg, max) = (26076.053, 26205.594, 26300.511), stdev = 82.323
[info]   CI (99.9%): [25888.599, 26522.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   658.519 ±(99.9%) 3.039 MB/sec [Average]
[info]   (min, avg, max) = (657.522, 658.519, 659.456), stdev = 0.789
[info]   CI (99.9%): [655.480, 661.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22880.505 ±(99.9%) 1981.065 B/op [Average]
[info]   (min, avg, max) = (22458.271, 22880.505, 23748.906), stdev = 514.476
[info]   CI (99.9%): [20899.441, 24861.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 1.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.713), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143.719 ops/s
[info] # Warmup Iteration   2: 523.189 ops/s
[info] # Warmup Iteration   3: 848.088 ops/s
[info] # Warmup Iteration   4: 903.933 ops/s
[info] # Warmup Iteration   5: 855.564 ops/s
[info] Iteration   1: 869.231 ops/s
[info]                  ·gc.alloc.rate:                   1911.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              3459814.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3606739.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1842.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 871.010 ops/s
[info]                  ·gc.alloc.rate:                   1920.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              3467057.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3610492.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1277.651 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 833.185 ops/s
[info]                  ·gc.alloc.rate:                   1889.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              3567215.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3785057.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 275.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 899.714 ops/s
[info]                  ·gc.alloc.rate:                   1984.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              3469622.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3513312.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3150.800 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 922.030 ops/s
[info]                  ·gc.alloc.rate:                   2018.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              3444639.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3434853.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 532.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   879.034 ±(99.9%) 129.713 ops/s [Average]
[info]   (min, avg, max) = (833.185, 879.034, 922.030), stdev = 33.686
[info]   CI (99.9%): [749.321, 1008.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1944.884 ±(99.9%) 208.873 MB/sec [Average]
[info]   (min, avg, max) = (1889.593, 1944.884, 2018.674), stdev = 54.244
[info]   CI (99.9%): [1736.011, 2153.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3481670.197 ±(99.9%) 187910.282 B/op [Average]
[info]   (min, avg, max) = (3444639.627, 3481670.197, 3567215.866), stdev = 48799.703
[info]   CI (99.9%): [3293759.915, 3669580.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.937 ±(99.9%) 30.636 MB/sec [Average]
[info]   (min, avg, max) = (1992.774, 2003.937, 2012.938), stdev = 7.956
[info]   CI (99.9%): [1973.300, 2034.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3590091.066 ±(99.9%) 504636.918 B/op [Average]
[info]   (min, avg, max) = (3434853.235, 3590091.066, 3785057.612), stdev = 131052.605
[info]   CI (99.9%): [3085454.148, 4094727.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.797 ±(99.9%) 2.529 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 0.797, 1.802), stdev = 0.657
[info]   CI (99.9%): [≈ 0, 3.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1415.663 ±(99.9%) 4429.391 B/op [Average]
[info]   (min, avg, max) = (275.031, 1415.663, 3150.800), stdev = 1150.299
[info]   CI (99.9%): [≈ 0, 5845.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1892.196 ops/s
[info] # Warmup Iteration   2: 11488.172 ops/s
[info] # Warmup Iteration   3: 15596.566 ops/s
[info] # Warmup Iteration   4: 16893.048 ops/s
[info] # Warmup Iteration   5: 16782.323 ops/s
[info] Iteration   1: 16023.789 ops/s
[info]                  ·gc.alloc.rate:                   1207.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              118523.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1282.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125886.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 16012.605 ops/s
[info]                  ·gc.alloc.rate:                   1221.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              120021.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1286.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126489.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 15799.731 ops/s
[info]                  ·gc.alloc.rate:                   1541.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              153516.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1292.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128666.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 462.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 15524.428 ops/s
[info]                  ·gc.alloc.rate:                   1575.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              159629.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1913.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193885.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         31.000 ms
[info] Iteration   5: 16268.175 ops/s
[info]                  ·gc.alloc.rate:                   1318.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              127533.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1240.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119995.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   15925.746 ±(99.9%) 1074.306 ops/s [Average]
[info]   (min, avg, max) = (15524.428, 15925.746, 16268.175), stdev = 278.994
[info]   CI (99.9%): [14851.440, 17000.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1372.802 ±(99.9%) 675.149 MB/sec [Average]
[info]   (min, avg, max) = (1207.255, 1372.802, 1575.274), stdev = 175.334
[info]   CI (99.9%): [697.653, 2047.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   135844.816 ±(99.9%) 74504.874 B/op [Average]
[info]   (min, avg, max) = (118523.086, 135844.816, 159629.395), stdev = 19348.679
[info]   CI (99.9%): [61339.942, 210349.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.069 ±(99.9%) 1101.201 MB/sec [Average]
[info]   (min, avg, max) = (1240.508, 1403.069, 1913.325), stdev = 285.979
[info]   CI (99.9%): [301.868, 2504.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   138984.704 ±(99.9%) 118823.053 B/op [Average]
[info]   (min, avg, max) = (119995.606, 138984.704, 193885.599), stdev = 30857.970
[info]   CI (99.9%): [20161.650, 257807.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.484 ±(99.9%) 9.240 MB/sec [Average]
[info]   (min, avg, max) = (0.009, 2.484, 4.958), stdev = 2.400
[info]   CI (99.9%): [≈ 0, 11.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   245.458 ±(99.9%) 906.932 B/op [Average]
[info]   (min, avg, max) = (0.909, 245.458, 479.618), stdev = 235.527
[info]   CI (99.9%): [≈ 0, 1152.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   97.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (15.000, 19.400, 31.000), stdev = 6.986
[info]   CI (99.9%): [97.000, 97.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2590.926 ops/s
[info] # Warmup Iteration   2: 16119.105 ops/s
[info] # Warmup Iteration   3: 18986.031 ops/s
[info] # Warmup Iteration   4: 20608.175 ops/s
[info] # Warmup Iteration   5: 20637.172 ops/s
[info] Iteration   1: 20649.504 ops/s
[info]                  ·gc.alloc.rate:                   1192.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              90875.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99968.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 19191.104 ops/s
[info]                  ·gc.alloc.rate:               1527.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          125198.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1313.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107703.844 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Iteration   3: 19650.960 ops/s
[info]                  ·gc.alloc.rate:                   1323.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              105938.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1301.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104196.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 312.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   4: 19092.622 ops/s
[info]                  ·gc.alloc.rate:                   1310.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              108045.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106279.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 19055.164 ops/s
[info]                  ·gc.alloc.rate:                   1304.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              107762.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1291.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106623.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   19527.871 ±(99.9%) 2582.743 ops/s [Average]
[info]   (min, avg, max) = (19055.164, 19527.871, 20649.504), stdev = 670.730
[info]   CI (99.9%): [16945.128, 22110.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1331.822 ±(99.9%) 466.941 MB/sec [Average]
[info]   (min, avg, max) = (1192.740, 1331.822, 1527.357), stdev = 121.263
[info]   CI (99.9%): [864.881, 1798.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   107564.073 ±(99.9%) 46861.096 B/op [Average]
[info]   (min, avg, max) = (90875.380, 107564.073, 125198.652), stdev = 12169.678
[info]   CI (99.9%): [60702.977, 154425.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1301.610 ±(99.9%) 44.038 MB/sec [Average]
[info]   (min, avg, max) = (1289.304, 1301.610, 1313.930), stdev = 11.437
[info]   CI (99.9%): [1257.572, 1345.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   104954.334 ±(99.9%) 11796.179 B/op [Average]
[info]   (min, avg, max) = (99968.341, 104954.334, 107703.844), stdev = 3063.430
[info]   CI (99.9%): [93158.155, 116750.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.194 ±(99.9%) 6.716 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.194, 3.906), stdev = 1.744
[info]   CI (99.9%): [≈ 0, 7.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   96.574 ±(99.9%) 539.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.574, 312.690), stdev = 140.220
[info]   CI (99.9%): [≈ 0, 636.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 15.000, 20.000), stdev = 3.674
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135832.495 ops/s
[info] # Warmup Iteration   2: 305236.370 ops/s
[info] # Warmup Iteration   3: 318100.740 ops/s
[info] # Warmup Iteration   4: 316515.531 ops/s
[info] # Warmup Iteration   5: 326148.787 ops/s
[info] Iteration   1: 330986.177 ops/s
[info]                  ·gc.alloc.rate:                   1208.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              5747.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6354.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 325169.255 ops/s
[info]                  ·gc.alloc.rate:               1165.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          5640.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3233.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 325028.041 ops/s
[info]                  ·gc.alloc.rate:                   1187.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              5747.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6470.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 328548.977 ops/s
[info]                  ·gc.alloc.rate:                   1186.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              5683.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6404.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 324429.284 ops/s
[info]                  ·gc.alloc.rate:                   1172.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              5682.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6461.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   326832.347 ±(99.9%) 10890.795 ops/s [Average]
[info]   (min, avg, max) = (324429.284, 326832.347, 330986.177), stdev = 2828.305
[info]   CI (99.9%): [315941.552, 337723.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1183.982 ±(99.9%) 63.771 MB/sec [Average]
[info]   (min, avg, max) = (1165.479, 1183.982, 1208.556), stdev = 16.561
[info]   CI (99.9%): [1120.211, 1247.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5700.375 ±(99.9%) 178.276 B/op [Average]
[info]   (min, avg, max) = (5640.658, 5700.375, 5747.739), stdev = 46.298
[info]   CI (99.9%): [5522.099, 5878.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1202.135 ±(99.9%) 1149.328 MB/sec [Average]
[info]   (min, avg, max) = (668.210, 1202.135, 1336.911), stdev = 298.477
[info]   CI (99.9%): [52.807, 2351.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5784.903 ±(99.9%) 5494.023 B/op [Average]
[info]   (min, avg, max) = (3233.987, 5784.903, 6470.402), stdev = 1426.780
[info]   CI (99.9%): [290.880, 11278.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.193 ±(99.9%) 8.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.193, 4.967), stdev = 2.145
[info]   CI (99.9%): [≈ 0, 9.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.726 ±(99.9%) 39.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.726, 23.795), stdev = 10.272
[info]   CI (99.9%): [≈ 0, 45.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.240
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99459.538 ops/s
[info] # Warmup Iteration   2: 361999.539 ops/s
[info] # Warmup Iteration   3: 390217.373 ops/s
[info] # Warmup Iteration   4: 388391.812 ops/s
[info] # Warmup Iteration   5: 385057.190 ops/s
[info] Iteration   1: 390797.424 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 390605.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 390661.562 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 390406.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 390893.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   390673.108 ±(99.9%) 719.338 ops/s [Average]
[info]   (min, avg, max) = (390406.975, 390673.108, 390893.693), stdev = 186.810
[info]   CI (99.9%): [389953.769, 391392.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4410.377 ops/s
[info] # Warmup Iteration   2: 10901.069 ops/s
[info] # Warmup Iteration   3: 15566.304 ops/s
[info] # Warmup Iteration   4: 15568.924 ops/s
[info] # Warmup Iteration   5: 17977.941 ops/s
[info] Iteration   1: 19742.318 ops/s
[info]                  ·gc.alloc.rate:                   1205.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              96100.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1248.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99573.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 19494.700 ops/s
[info]                  ·gc.alloc.rate:                   1465.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              118227.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1257.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101485.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 18532.904 ops/s
[info]                  ·gc.alloc.rate:                   1424.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              120997.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1898.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161195.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 751.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         33.000 ms
[info] Iteration   4: 18210.711 ops/s
[info]                  ·gc.alloc.rate:                   1516.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              131042.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1264.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109261.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 707.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 19190.609 ops/s
[info]                  ·gc.alloc.rate:                   1172.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              96121.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1263.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103579.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 321.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   19034.248 ±(99.9%) 2486.117 ops/s [Average]
[info]   (min, avg, max) = (18210.711, 19034.248, 19742.318), stdev = 645.637
[info]   CI (99.9%): [16548.131, 21520.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1356.914 ±(99.9%) 605.784 MB/sec [Average]
[info]   (min, avg, max) = (1172.228, 1356.914, 1516.932), stdev = 157.320
[info]   CI (99.9%): [751.130, 1962.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   112497.882 ±(99.9%) 60457.761 B/op [Average]
[info]   (min, avg, max) = (96100.241, 112497.882, 131042.717), stdev = 15700.689
[info]   CI (99.9%): [52040.121, 172955.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1386.564 ±(99.9%) 1101.519 MB/sec [Average]
[info]   (min, avg, max) = (1248.984, 1386.564, 1898.167), stdev = 286.061
[info]   CI (99.9%): [285.045, 2488.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   115019.026 ±(99.9%) 100375.422 B/op [Average]
[info]   (min, avg, max) = (99573.563, 115019.026, 161195.366), stdev = 26067.178
[info]   CI (99.9%): [14643.604, 215394.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   4.197 ±(99.9%) 16.413 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 4.197, 8.851), stdev = 4.262
[info]   CI (99.9%): [≈ 0, 20.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   356.534 ±(99.9%) 1405.793 B/op [Average]
[info]   (min, avg, max) = (0.343, 356.534, 751.619), stdev = 365.080
[info]   CI (99.9%): [≈ 0, 1762.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   93.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 18.600, 33.000), stdev = 9.940
[info]   CI (99.9%): [93.000, 93.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704923.902 ops/s
[info] # Warmup Iteration   2: 1229641.714 ops/s
[info] # Warmup Iteration   3: 1290538.878 ops/s
[info] # Warmup Iteration   4: 1364367.203 ops/s
[info] # Warmup Iteration   5: 1366234.471 ops/s
[info] Iteration   1: 1369111.248 ops/s
[info]                  ·gc.alloc.rate:      55.691 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1371843.750 ops/s
[info]                  ·gc.alloc.rate:      55.868 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.094 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1402839.461 ops/s
[info]                  ·gc.alloc.rate:      57.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1402462.690 ops/s
[info]                  ·gc.alloc.rate:      57.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.081 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1381714.598 ops/s
[info]                  ·gc.alloc.rate:      56.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1385594.349 ±(99.9%) 62617.641 ops/s [Average]
[info]   (min, avg, max) = (1369111.248, 1385594.349, 1402839.461), stdev = 16261.603
[info]   CI (99.9%): [1322976.708, 1448211.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   56.381 ±(99.9%) 2.535 MB/sec [Average]
[info]   (min, avg, max) = (55.691, 56.381, 57.102), stdev = 0.658
[info]   CI (99.9%): [53.846, 58.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.035 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.035, 64.094), stdev = 0.048
[info]   CI (99.9%): [63.851, 64.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3014.835 ops/s
[info] # Warmup Iteration   2: 79861.267 ops/s
[info] # Warmup Iteration   3: 118732.869 ops/s
[info] # Warmup Iteration   4: 122730.786 ops/s
[info] # Warmup Iteration   5: 123868.501 ops/s
[info] Iteration   1: 123767.996 ops/s
[info]                  ·gc.alloc.rate:                   4357.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              55406.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4026.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51198.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 122958.212 ops/s
[info]                  ·gc.alloc.rate:                   4397.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              56284.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4718.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60400.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 123512.544 ops/s
[info]                  ·gc.alloc.rate:                   4403.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              56111.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4061.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51746.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.796 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 119774.572 ops/s
[info]                  ·gc.alloc.rate:               4312.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          56668.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4062.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53378.550 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Iteration   5: 131089.282 ops/s
[info]                  ·gc.alloc.rate:                   4461.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              53556.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4715.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56616.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.000 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   124220.521 ±(99.9%) 16021.382 ops/s [Average]
[info]   (min, avg, max) = (119774.572, 124220.521, 131089.282), stdev = 4160.702
[info]   CI (99.9%): [108199.139, 140241.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4386.308 ±(99.9%) 213.538 MB/sec [Average]
[info]   (min, avg, max) = (4312.531, 4386.308, 4461.026), stdev = 55.455
[info]   CI (99.9%): [4172.771, 4599.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   55605.502 ±(99.9%) 4749.678 B/op [Average]
[info]   (min, avg, max) = (53556.438, 55605.502, 56668.657), stdev = 1233.476
[info]   CI (99.9%): [50855.825, 60355.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4316.821 ±(99.9%) 1409.188 MB/sec [Average]
[info]   (min, avg, max) = (4026.154, 4316.821, 4718.918), stdev = 365.962
[info]   CI (99.9%): [2907.633, 5726.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54667.971 ±(99.9%) 14774.506 B/op [Average]
[info]   (min, avg, max) = (51198.395, 54667.971, 60400.154), stdev = 3836.892
[info]   CI (99.9%): [39893.465, 69442.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.571 ±(99.9%) 1.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.571, 1.000), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 2.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.200, 17.000), stdev = 3.962
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379864.294 ops/s
[info] # Warmup Iteration   2: 1984448.021 ops/s
[info] # Warmup Iteration   3: 2235300.818 ops/s
[info] # Warmup Iteration   4: 2212394.349 ops/s
[info] # Warmup Iteration   5: 2237723.613 ops/s
[info] Iteration   1: 2246718.495 ops/s
[info]                  ·gc.alloc.rate:      605.274 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2235354.182 ops/s
[info]                  ·gc.alloc.rate:               620.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 2235653.766 ops/s
[info]                  ·gc.alloc.rate:                   625.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2232252.934 ops/s
[info]                  ·gc.alloc.rate:               624.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2234542.024 ops/s
[info]                  ·gc.alloc.rate:                   626.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   2236904.280 ±(99.9%) 21740.003 ops/s [Average]
[info]   (min, avg, max) = (2232252.934, 2236904.280, 2246718.495), stdev = 5645.810
[info]   CI (99.9%): [2215164.277, 2258644.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.386 ±(99.9%) 33.851 MB/sec [Average]
[info]   (min, avg, max) = (605.274, 620.386, 626.842), stdev = 8.791
[info]   CI (99.9%): [586.535, 654.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   436.495 ±(99.9%) 27.741 B/op [Average]
[info]   (min, avg, max) = (424.000, 436.495, 441.445), stdev = 7.204
[info]   CI (99.9%): [408.754, 464.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.799 ±(99.9%) 1144.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.799, 665.556), stdev = 297.285
[info]   CI (99.9%): [≈ 0, 1676.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   374.562 ±(99.9%) 806.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 374.562, 468.709), stdev = 209.387
[info]   CI (99.9%): [≈ 0, 1180.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 920509.353 ops/s
[info] # Warmup Iteration   2: 1669958.701 ops/s
[info] # Warmup Iteration   3: 1843673.505 ops/s
[info] # Warmup Iteration   4: 1874058.579 ops/s
[info] # Warmup Iteration   5: 1878061.000 ops/s
[info] Iteration   1: 1879870.361 ops/s
[info]                  ·gc.alloc.rate:               526.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558.821 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1957799.763 ops/s
[info]                  ·gc.alloc.rate:      527.490 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1916238.722 ops/s
[info]                  ·gc.alloc.rate:               532.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 548.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1931855.181 ops/s
[info]                  ·gc.alloc.rate:                   536.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1936163.951 ops/s
[info]                  ·gc.alloc.rate:               539.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 543.112 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1924385.596 ±(99.9%) 111585.798 ops/s [Average]
[info]   (min, avg, max) = (1879870.361, 1924385.596, 1957799.763), stdev = 28978.477
[info]   CI (99.9%): [1812799.797, 2035971.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   532.620 ±(99.9%) 21.687 MB/sec [Average]
[info]   (min, avg, max) = (526.767, 532.620, 539.507), stdev = 5.632
[info]   CI (99.9%): [510.933, 554.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.616 ±(99.9%) 25.692 B/op [Average]
[info]   (min, avg, max) = (424.000, 435.616, 441.017), stdev = 6.672
[info]   CI (99.9%): [409.923, 461.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.311 ±(99.9%) 1150.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.311, 668.196), stdev = 298.689
[info]   CI (99.9%): [≈ 0, 1684.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   438.898 ±(99.9%) 945.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 438.898, 558.821), stdev = 245.430
[info]   CI (99.9%): [≈ 0, 1383.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1059952.932 ops/s
[info] # Warmup Iteration   2: 1765938.544 ops/s
[info] # Warmup Iteration   3: 1959094.743 ops/s
[info] # Warmup Iteration   4: 1957222.902 ops/s
[info] # Warmup Iteration   5: 1958644.397 ops/s
[info] Iteration   1: 1947171.102 ops/s
[info]                  ·gc.alloc.rate:      3.309 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.674 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1953663.852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1952332.267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1965313.863 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1964015.021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1956499.221 ±(99.9%) 30234.408 ops/s [Average]
[info]   (min, avg, max) = (1947171.102, 1956499.221, 1965313.863), stdev = 7851.780
[info]   CI (99.9%): [1926264.813, 1986733.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.662 ±(99.9%) 5.698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.662, 3.309), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.535 ±(99.9%) 4.605 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.535, 2.674), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4387.237 ops/s
[info] # Warmup Iteration   2: 32366.672 ops/s
[info] # Warmup Iteration   3: 56640.895 ops/s
[info] # Warmup Iteration   4: 51043.667 ops/s
[info] # Warmup Iteration   5: 57927.625 ops/s
[info] Iteration   1: 57087.718 ops/s
[info]                  ·gc.alloc.rate:                   2006.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              55309.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54782.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.695 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 57285.650 ops/s
[info]                  ·gc.alloc.rate:                   2002.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              55003.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54732.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.867 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 56222.004 ops/s
[info]                  ·gc.alloc.rate:                   1969.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              55127.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55916.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 57247.818 ops/s
[info]                  ·gc.alloc.rate:                   1999.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              54962.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55039.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 57511.626 ops/s
[info]                  ·gc.alloc.rate:                   2005.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              54876.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54809.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   57070.963 ±(99.9%) 1918.150 ops/s [Average]
[info]   (min, avg, max) = (56222.004, 57070.963, 57511.626), stdev = 498.137
[info]   CI (99.9%): [55152.814, 58989.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1996.629 ±(99.9%) 59.823 MB/sec [Average]
[info]   (min, avg, max) = (1969.306, 1996.629, 2006.244), stdev = 15.536
[info]   CI (99.9%): [1936.806, 2056.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55056.027 ±(99.9%) 648.270 B/op [Average]
[info]   (min, avg, max) = (54876.537, 55056.027, 55309.977), stdev = 168.354
[info]   CI (99.9%): [54407.756, 55704.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1996.534 ±(99.9%) 26.069 MB/sec [Average]
[info]   (min, avg, max) = (1987.102, 1996.534, 2003.420), stdev = 6.770
[info]   CI (99.9%): [1970.466, 2022.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55056.062 ±(99.9%) 1907.971 B/op [Average]
[info]   (min, avg, max) = (54732.106, 55056.062, 55916.967), stdev = 495.494
[info]   CI (99.9%): [53148.091, 56964.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.082 ±(99.9%) 5.304 MB/sec [Average]
[info]   (min, avg, max) = (0.187, 1.082, 3.475), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 6.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   29.689 ±(99.9%) 144.988 B/op [Average]
[info]   (min, avg, max) = (5.245, 29.689, 95.056), stdev = 37.653
[info]   CI (99.9%): [≈ 0, 174.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 12.000), stdev = 2.236
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50311.443 ops/s
[info] # Warmup Iteration   2: 476097.015 ops/s
[info] # Warmup Iteration   3: 1089499.157 ops/s
[info] # Warmup Iteration   4: 1192831.440 ops/s
[info] # Warmup Iteration   5: 1210479.217 ops/s
[info] Iteration   1: 1221445.582 ops/s
[info]                  ·gc.alloc.rate:                   3494.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              4502.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3322.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4281.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1187663.273 ops/s
[info]                  ·gc.alloc.rate:                   3424.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              4538.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3331.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4415.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1168507.349 ops/s
[info]                  ·gc.alloc.rate:               3407.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          4589.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3347.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4508.022 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1202200.218 ops/s
[info]                  ·gc.alloc.rate:                   3486.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              4564.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4403.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1189221.885 ops/s
[info]                  ·gc.alloc.rate:                   3459.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              4577.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4467.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   1193807.661 ±(99.9%) 75387.561 ops/s [Average]
[info]   (min, avg, max) = (1168507.349, 1193807.661, 1221445.582), stdev = 19577.910
[info]   CI (99.9%): [1118420.100, 1269195.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3454.498 ±(99.9%) 145.991 MB/sec [Average]
[info]   (min, avg, max) = (3407.394, 3454.498, 3494.317), stdev = 37.914
[info]   CI (99.9%): [3308.506, 3600.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4554.513 ±(99.9%) 133.681 B/op [Average]
[info]   (min, avg, max) = (4502.472, 4554.513, 4589.341), stdev = 34.716
[info]   CI (99.9%): [4420.832, 4688.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3348.224 ±(99.9%) 84.768 MB/sec [Average]
[info]   (min, avg, max) = (3322.701, 3348.224, 3376.098), stdev = 22.014
[info]   CI (99.9%): [3263.457, 3432.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4415.104 ±(99.9%) 330.154 B/op [Average]
[info]   (min, avg, max) = (4281.342, 4415.104, 4508.022), stdev = 85.740
[info]   CI (99.9%): [4084.950, 4745.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.161), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.689 ops/s
[info] # Warmup Iteration   2: 3897396.643 ops/s
[info] # Warmup Iteration   3: 5097638.097 ops/s
[info] # Warmup Iteration   4: 5045886.034 ops/s
[info] # Warmup Iteration   5: 5127549.405 ops/s
[info] Iteration   1: 5100389.521 ops/s
[info]                  ·gc.alloc.rate:                   321.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              99.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5123073.415 ops/s
[info]                  ·gc.alloc.rate:      312.541 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5104206.588 ops/s
[info]                  ·gc.alloc.rate:               326.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4843269.424 ops/s
[info]                  ·gc.alloc.rate:      295.490 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4823564.955 ops/s
[info]                  ·gc.alloc.rate:                   307.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   4998900.781 ±(99.9%) 583254.645 ops/s [Average]
[info]   (min, avg, max) = (4823564.955, 4998900.781, 5123073.415), stdev = 151469.379
[info]   CI (99.9%): [4415646.136, 5582155.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   312.478 ±(99.9%) 46.242 MB/sec [Average]
[info]   (min, avg, max) = (295.490, 312.478, 326.032), stdev = 12.009
[info]   CI (99.9%): [266.236, 358.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.371 ±(99.9%) 8.575 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.371, 100.530), stdev = 2.227
[info]   CI (99.9%): [89.796, 106.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.190 ±(99.9%) 1312.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.190, 662.177), stdev = 340.786
[info]   CI (99.9%): [≈ 0, 1679.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   115.619 ±(99.9%) 414.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.619, 216.048), stdev = 107.761
[info]   CI (99.9%): [≈ 0, 530.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6182.727 ops/s
[info] # Warmup Iteration   2: 554474.589 ops/s
[info] # Warmup Iteration   3: 1087898.448 ops/s
[info] # Warmup Iteration   4: 1115192.171 ops/s
[info] # Warmup Iteration   5: 1119736.474 ops/s
[info] Iteration   1: 1122194.296 ops/s
[info]                  ·gc.alloc.rate:               1275.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          1789.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1865.710 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1121907.433 ops/s
[info]                  ·gc.alloc.rate:               1269.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          1780.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1869.951 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1127560.024 ops/s
[info]                  ·gc.alloc.rate:               1248.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          1743.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1125507.591 ops/s
[info]                  ·gc.alloc.rate:                   1261.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              1764.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1869.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1116597.948 ops/s
[info]                  ·gc.alloc.rate:                   1249.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1761.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1887.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.936 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1122753.458 ±(99.9%) 16063.123 ops/s [Average]
[info]   (min, avg, max) = (1116597.948, 1122753.458, 1127560.024), stdev = 4171.542
[info]   CI (99.9%): [1106690.335, 1138816.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1261.087 ±(99.9%) 45.576 MB/sec [Average]
[info]   (min, avg, max) = (1248.911, 1261.087, 1275.842), stdev = 11.836
[info]   CI (99.9%): [1215.511, 1306.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1767.735 ±(99.9%) 68.837 B/op [Average]
[info]   (min, avg, max) = (1743.201, 1767.735, 1789.380), stdev = 17.877
[info]   CI (99.9%): [1698.898, 1836.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.415 ±(99.9%) 1148.694 MB/sec [Average]
[info]   (min, avg, max) = (667.811, 1201.415, 1338.856), stdev = 298.312
[info]   CI (99.9%): [52.722, 2350.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1684.891 ±(99.9%) 1620.719 B/op [Average]
[info]   (min, avg, max) = (932.116, 1684.891, 1887.157), stdev = 420.896
[info]   CI (99.9%): [64.172, 3305.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.283 ±(99.9%) 2.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.283, 1.374), stdev = 0.610
[info]   CI (99.9%): [≈ 0, 2.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.399 ±(99.9%) 3.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 1.936), stdev = 0.860
[info]   CI (99.9%): [≈ 0, 3.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1829570.103 ops/s
[info] # Warmup Iteration   2: 9492435.933 ops/s
[info] # Warmup Iteration   3: 10491353.195 ops/s
[info] # Warmup Iteration   4: 10459098.456 ops/s
[info] # Warmup Iteration   5: 10502629.430 ops/s
[info] Iteration   1: 10492792.519 ops/s
[info]                  ·gc.alloc.rate:                   491.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              73.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10430199.590 ops/s
[info]                  ·gc.alloc.rate:               500.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 10512496.260 ops/s
[info]                  ·gc.alloc.rate:      493.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 73.894 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10483215.438 ops/s
[info]                  ·gc.alloc.rate:                   487.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              73.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10433011.272 ops/s
[info]                  ·gc.alloc.rate:               500.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.996 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   10470343.016 ±(99.9%) 142157.737 ops/s [Average]
[info]   (min, avg, max) = (10430199.590, 10470343.016, 10512496.260), stdev = 36917.913
[info]   CI (99.9%): [10328185.278, 10612500.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   494.715 ±(99.9%) 22.427 MB/sec [Average]
[info]   (min, avg, max) = (487.457, 494.715, 500.668), stdev = 5.824
[info]   CI (99.9%): [472.288, 517.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.362 ±(99.9%) 4.239 B/op [Average]
[info]   (min, avg, max) = (73.168, 74.362, 75.533), stdev = 1.101
[info]   CI (99.9%): [70.123, 78.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.892 ±(99.9%) 1116.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.892, 669.444), stdev = 289.843
[info]   CI (99.9%): [≈ 0, 1619.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   75.832 ±(99.9%) 168.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.832, 100.996), stdev = 43.655
[info]   CI (99.9%): [≈ 0, 243.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 781.663 ops/s
[info] # Warmup Iteration   2: 284149.746 ops/s
[info] # Warmup Iteration   3: 742103.674 ops/s
[info] # Warmup Iteration   4: 794068.097 ops/s
[info] # Warmup Iteration   5: 789722.143 ops/s
[info] Iteration   1: 802084.177 ops/s
[info]                  ·gc.alloc.rate:                   2993.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              5873.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6551.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.225 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 804588.644 ops/s
[info]                  ·gc.alloc.rate:                   2974.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              5818.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5226.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 773631.570 ops/s
[info]                  ·gc.alloc.rate:               2875.540 MB/sec
[info]                  ·gc.alloc.rate.norm:          5849.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5447.873 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 780034.215 ops/s
[info]                  ·gc.alloc.rate:                   2914.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              5879.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5420.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 804146.292 ops/s
[info]                  ·gc.alloc.rate:               3028.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          5926.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6593.961 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   792896.980 ±(99.9%) 57252.140 ops/s [Average]
[info]   (min, avg, max) = (773631.570, 792896.980, 804588.644), stdev = 14868.199
[info]   CI (99.9%): [735644.840, 850149.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2957.098 ±(99.9%) 237.113 MB/sec [Average]
[info]   (min, avg, max) = (2875.540, 2957.098, 3028.073), stdev = 61.578
[info]   CI (99.9%): [2719.984, 3194.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   5869.607 ±(99.9%) 154.376 B/op [Average]
[info]   (min, avg, max) = (5818.052, 5869.607, 5926.687), stdev = 40.091
[info]   CI (99.9%): [5715.231, 6023.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.831 ±(99.9%) 1424.805 MB/sec [Average]
[info]   (min, avg, max) = (2671.712, 2948.831, 3368.997), stdev = 370.017
[info]   CI (99.9%): [1524.026, 4373.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5848.044 ±(99.9%) 2569.424 B/op [Average]
[info]   (min, avg, max) = (5226.044, 5848.044, 6593.961), stdev = 667.271
[info]   CI (99.9%): [3278.621, 8417.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 1.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.625), stdev = 0.271
[info]   CI (99.9%): [≈ 0, 1.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.278 ±(99.9%) 2.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.278, 1.225), stdev = 0.531
[info]   CI (99.9%): [≈ 0, 2.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 575.506 ops/s
[info] # Warmup Iteration   2: 2676.563 ops/s
[info] # Warmup Iteration   3: 4886.892 ops/s
[info] # Warmup Iteration   4: 5074.946 ops/s
[info] # Warmup Iteration   5: 5333.820 ops/s
[info] Iteration   1: 5309.056 ops/s
[info]                  ·gc.alloc.rate:                   2347.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              695788.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     592205.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5342.713 ops/s
[info]                  ·gc.alloc.rate:                   2376.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              700042.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786628.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.672 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5321.379 ops/s
[info]                  ·gc.alloc.rate:                   2351.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              695296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     593923.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.651 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5339.226 ops/s
[info]                  ·gc.alloc.rate:                   2405.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              709030.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791192.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5359.032 ops/s
[info]                  ·gc.alloc.rate:                   2385.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              700731.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     592758.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.907 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   5334.281 ±(99.9%) 74.838 ops/s [Average]
[info]   (min, avg, max) = (5309.056, 5334.281, 5359.032), stdev = 19.435
[info]   CI (99.9%): [5259.443, 5409.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2373.319 ±(99.9%) 94.237 MB/sec [Average]
[info]   (min, avg, max) = (2347.258, 2373.319, 2405.768), stdev = 24.473
[info]   CI (99.9%): [2279.082, 2467.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   700177.584 ±(99.9%) 21247.689 B/op [Average]
[info]   (min, avg, max) = (695296.003, 700177.584, 709030.150), stdev = 5517.957
[info]   CI (99.9%): [678929.895, 721425.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2275.891 ±(99.9%) 1412.124 MB/sec [Average]
[info]   (min, avg, max) = (1997.820, 2275.891, 2684.549), stdev = 366.724
[info]   CI (99.9%): [863.767, 3688.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   671341.794 ±(99.9%) 413324.393 B/op [Average]
[info]   (min, avg, max) = (592205.557, 671341.794, 791192.900), stdev = 107339.032
[info]   CI (99.9%): [258017.400, 1084666.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 1.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.354, 0.839), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   104.600 ±(99.9%) 353.152 B/op [Average]
[info]   (min, avg, max) = (6.135, 104.600, 248.636), stdev = 91.712
[info]   CI (99.9%): [≈ 0, 457.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485.781 ops/s
[info] # Warmup Iteration   2: 4709.944 ops/s
[info] # Warmup Iteration   3: 7389.615 ops/s
[info] # Warmup Iteration   4: 7702.818 ops/s
[info] # Warmup Iteration   5: 7798.493 ops/s
[info] Iteration   1: 7973.515 ops/s
[info]                  ·gc.alloc.rate:                   3254.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              642337.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     527772.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7960.661 ops/s
[info]                  ·gc.alloc.rate:                   3236.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              639844.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     662043.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.231 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7963.377 ops/s
[info]                  ·gc.alloc.rate:               3290.969 MB/sec
[info]                  ·gc.alloc.rate.norm:          650363.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 664098.133 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 7782.118 ops/s
[info]                  ·gc.alloc.rate:                   3207.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              648311.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680431.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.201 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7754.561 ops/s
[info]                  ·gc.alloc.rate:                   3229.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              655424.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549028.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.225 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7886.846 ±(99.9%) 418.661 ops/s [Average]
[info]   (min, avg, max) = (7754.561, 7886.846, 7973.515), stdev = 108.725
[info]   CI (99.9%): [7468.185, 8305.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3243.832 ±(99.9%) 119.993 MB/sec [Average]
[info]   (min, avg, max) = (3207.940, 3243.832, 3290.969), stdev = 31.162
[info]   CI (99.9%): [3123.840, 3363.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   647255.981 ±(99.9%) 24094.997 B/op [Average]
[info]   (min, avg, max) = (639844.046, 647255.981, 655424.376), stdev = 6257.394
[info]   CI (99.9%): [623160.984, 671350.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3091.048 ±(99.9%) 1412.296 MB/sec [Average]
[info]   (min, avg, max) = (2673.925, 3091.048, 3366.877), stdev = 366.769
[info]   CI (99.9%): [1678.751, 4503.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   616674.914 ±(99.9%) 278020.030 B/op [Average]
[info]   (min, avg, max) = (527772.296, 616674.914, 680431.721), stdev = 72200.919
[info]   CI (99.9%): [338654.884, 894694.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.458), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.410 ±(99.9%) 148.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.410, 90.394), stdev = 38.673
[info]   CI (99.9%): [≈ 0, 170.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30016.464 ops/s
[info] # Warmup Iteration   2: 51295.498 ops/s
[info] # Warmup Iteration   3: 55112.053 ops/s
[info] # Warmup Iteration   4: 56179.293 ops/s
[info] # Warmup Iteration   5: 56288.673 ops/s
[info] Iteration   1: 56454.270 ops/s
[info]                  ·gc.alloc.rate:               927.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          25854.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18664.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 52564.740 ops/s
[info]                  ·gc.alloc.rate:                   956.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              28630.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40092.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 56491.774 ops/s
[info]                  ·gc.alloc.rate:               923.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          25737.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18652.322 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 56495.041 ops/s
[info]                  ·gc.alloc.rate:               922.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          25685.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18651.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 56300.578 ops/s
[info]                  ·gc.alloc.rate:               945.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          26438.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37466.434 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   55661.281 ±(99.9%) 6672.559 ops/s [Average]
[info]   (min, avg, max) = (52564.740, 55661.281, 56495.041), stdev = 1732.842
[info]   CI (99.9%): [48988.722, 62333.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   935.071 ±(99.9%) 58.325 MB/sec [Average]
[info]   (min, avg, max) = (922.020, 935.071, 956.244), stdev = 15.147
[info]   CI (99.9%): [876.745, 993.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26469.386 ±(99.9%) 4793.107 B/op [Average]
[info]   (min, avg, max) = (25685.045, 26469.386, 28630.166), stdev = 1244.755
[info]   CI (99.9%): [21676.279, 31262.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.579 ±(99.9%) 1413.436 MB/sec [Average]
[info]   (min, avg, max) = (669.499, 937.579, 1340.286), stdev = 367.065
[info]   CI (99.9%): [≈ 0, 2351.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26705.199 ±(99.9%) 42592.180 B/op [Average]
[info]   (min, avg, max) = (18651.001, 26705.199, 40092.025), stdev = 11061.054
[info]   CI (99.9%): [≈ 0, 69297.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.199 ±(99.9%) 1.711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.994), stdev = 0.444
[info]   CI (99.9%): [≈ 0, 1.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.951 ±(99.9%) 51.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.951, 29.753), stdev = 13.306
[info]   CI (99.9%): [≈ 0, 57.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1118.211 ops/s
[info] # Warmup Iteration   2: 3924.456 ops/s
[info] # Warmup Iteration   3: 5020.008 ops/s
[info] # Warmup Iteration   4: 5537.426 ops/s
[info] # Warmup Iteration   5: 5490.398 ops/s
[info] Iteration   1: 5495.630 ops/s
[info]                  ·gc.alloc.rate:                   976.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              279614.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190372.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5488.341 ops/s
[info]                  ·gc.alloc.rate:               988.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          283457.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381421.907 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 5483.346 ops/s
[info]                  ·gc.alloc.rate:               984.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          282463.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190980.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 5483.710 ops/s
[info]                  ·gc.alloc.rate:                   979.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              280996.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191075.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 5475.330 ops/s
[info]                  ·gc.alloc.rate:                   991.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              285059.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     382805.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1018.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   5485.271 ±(99.9%) 28.667 ops/s [Average]
[info]   (min, avg, max) = (5475.330, 5485.271, 5495.630), stdev = 7.445
[info]   CI (99.9%): [5456.604, 5513.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   984.010 ±(99.9%) 24.638 MB/sec [Average]
[info]   (min, avg, max) = (976.401, 984.010, 991.718), stdev = 6.398
[info]   CI (99.9%): [959.372, 1008.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   282318.509 ±(99.9%) 8143.566 B/op [Average]
[info]   (min, avg, max) = (279614.929, 282318.509, 285059.584), stdev = 2114.858
[info]   CI (99.9%): [274174.943, 290462.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931.621 ±(99.9%) 1404.123 MB/sec [Average]
[info]   (min, avg, max) = (664.772, 931.621, 1331.775), stdev = 364.646
[info]   CI (99.9%): [≈ 0, 2335.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   267331.370 ±(99.9%) 403482.449 B/op [Average]
[info]   (min, avg, max) = (190372.721, 267331.370, 382805.863), stdev = 104783.111
[info]   CI (99.9%): [≈ 0, 670813.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.732 ±(99.9%) 6.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.732, 3.542), stdev = 1.571
[info]   CI (99.9%): [≈ 0, 6.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   210.321 ±(99.9%) 1739.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 210.321, 1018.005), stdev = 451.682
[info]   CI (99.9%): [≈ 0, 1949.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 10.000), stdev = 2.302
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617.669 ops/s
[info] # Warmup Iteration   2: 3917.952 ops/s
[info] # Warmup Iteration   3: 5011.574 ops/s
[info] # Warmup Iteration   4: 5411.251 ops/s
[info] # Warmup Iteration   5: 5436.525 ops/s
[info] Iteration   1: 5422.528 ops/s
[info]                  ·gc.alloc.rate:                   592.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              171855.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191968.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5398.585 ops/s
[info]                  ·gc.alloc.rate:               587.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          171368.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193112.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5384.805 ops/s
[info]                  ·gc.alloc.rate:               595.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          174025.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193614.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5382.543 ops/s
[info]                  ·gc.alloc.rate:               595.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          174139.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193978.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5378.253 ops/s
[info]                  ·gc.alloc.rate:      580.865 MB/sec
[info]                  ·gc.alloc.rate.norm: 169901.405 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5393.343 ±(99.9%) 69.324 ops/s [Average]
[info]   (min, avg, max) = (5378.253, 5393.343, 5422.528), stdev = 18.003
[info]   CI (99.9%): [5324.019, 5462.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   590.379 ±(99.9%) 23.801 MB/sec [Average]
[info]   (min, avg, max) = (580.865, 590.379, 595.585), stdev = 6.181
[info]   CI (99.9%): [566.578, 614.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   172258.041 ±(99.9%) 6987.611 B/op [Average]
[info]   (min, avg, max) = (169901.405, 172258.041, 174139.593), stdev = 1814.660
[info]   CI (99.9%): [165270.430, 179245.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.960 ±(99.9%) 1140.783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.960, 663.438), stdev = 296.258
[info]   CI (99.9%): [≈ 0, 1670.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   154534.902 ±(99.9%) 332660.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 154534.902, 193978.770), stdev = 86390.963
[info]   CI (99.9%): [≈ 0, 487195.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.208 ±(99.9%) 10.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.208, 6.041), stdev = 2.702
[info]   CI (99.9%): [≈ 0, 11.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3515.642 ops/s
[info] # Warmup Iteration   2: 6365.117 ops/s
[info] # Warmup Iteration   3: 6942.010 ops/s
[info] # Warmup Iteration   4: 6996.031 ops/s
[info] # Warmup Iteration   5: 6937.824 ops/s
[info] Iteration   1: 6960.140 ops/s
[info]                  ·gc.alloc.rate:      224.441 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6950.322 ops/s
[info]                  ·gc.alloc.rate:                   236.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              53479.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115854.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7003.771 ops/s
[info]                  ·gc.alloc.rate:      225.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6969.582 ops/s
[info]                  ·gc.alloc.rate:               239.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          54026.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115522.359 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7029.465 ops/s
[info]                  ·gc.alloc.rate:      226.722 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6982.656 ±(99.9%) 127.135 ops/s [Average]
[info]   (min, avg, max) = (6950.322, 6982.656, 7029.465), stdev = 33.017
[info]   CI (99.9%): [6855.521, 7109.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   230.513 ±(99.9%) 25.894 MB/sec [Average]
[info]   (min, avg, max) = (224.441, 230.513, 239.273), stdev = 6.725
[info]   CI (99.9%): [204.620, 256.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   51952.388 ±(99.9%) 6372.603 B/op [Average]
[info]   (min, avg, max) = (50752.061, 51952.388, 54026.389), stdev = 1654.945
[info]   CI (99.9%): [45579.785, 58324.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.654 ±(99.9%) 1079.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.654, 511.644), stdev = 280.234
[info]   CI (99.9%): [≈ 0, 1283.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46275.422 ±(99.9%) 243997.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46275.422, 115854.750), stdev = 63365.340
[info]   CI (99.9%): [≈ 0, 290272.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.809 ±(99.9%) 15.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.809, 9.043), stdev = 4.044
[info]   CI (99.9%): [≈ 0, 17.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3365.282 ops/s
[info] # Warmup Iteration   2: 6221.708 ops/s
[info] # Warmup Iteration   3: 6869.148 ops/s
[info] # Warmup Iteration   4: 6914.155 ops/s
[info] # Warmup Iteration   5: 6914.954 ops/s
[info] Iteration   1: 6871.101 ops/s
[info]                  ·gc.alloc.rate:                   182.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              41851.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117169.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6925.210 ops/s
[info]                  ·gc.alloc.rate:      172.753 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6946.309 ops/s
[info]                  ·gc.alloc.rate:      173.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6882.054 ops/s
[info]                  ·gc.alloc.rate:               182.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          41671.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116982.331 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6915.295 ops/s
[info]                  ·gc.alloc.rate:      172.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6907.994 ±(99.9%) 119.490 ops/s [Average]
[info]   (min, avg, max) = (6871.101, 6907.994, 6946.309), stdev = 31.031
[info]   CI (99.9%): [6788.504, 7027.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   176.710 ±(99.9%) 20.294 MB/sec [Average]
[info]   (min, avg, max) = (172.540, 176.710, 182.716), stdev = 5.270
[info]   CI (99.9%): [156.416, 197.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   40253.530 ±(99.9%) 5307.206 B/op [Average]
[info]   (min, avg, max) = (39248.062, 40253.530, 41851.758), stdev = 1378.265
[info]   CI (99.9%): [34946.324, 45560.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.619 ±(99.9%) 1078.896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.619, 511.556), stdev = 280.186
[info]   CI (99.9%): [≈ 0, 1283.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   46830.378 ±(99.9%) 246923.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46830.378, 117169.557), stdev = 64125.170
[info]   CI (99.9%): [≈ 0, 293753.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.954 ±(99.9%) 8.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.768), stdev = 2.132
[info]   CI (99.9%): [≈ 0, 9.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 842.325 ops/s
[info] # Warmup Iteration   2: 4236.942 ops/s
[info] # Warmup Iteration   3: 8000.010 ops/s
[info] # Warmup Iteration   4: 9105.057 ops/s
[info] # Warmup Iteration   5: 9203.060 ops/s
[info] Iteration   1: 9153.294 ops/s
[info]                  ·gc.alloc.rate:                   2108.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              362518.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342596.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 768.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 9440.779 ops/s
[info]                  ·gc.alloc.rate:                   2164.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              360820.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     331351.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9293.025 ops/s
[info]                  ·gc.alloc.rate:                   2138.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              362155.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336401.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8800.658 ops/s
[info]                  ·gc.alloc.rate:                   2166.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              387349.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355600.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9129.872 ops/s
[info]                  ·gc.alloc.rate:                   2103.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              362529.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343669.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   9163.526 ±(99.9%) 916.400 ops/s [Average]
[info]   (min, avg, max) = (8800.658, 9163.526, 9440.779), stdev = 237.986
[info]   CI (99.9%): [8247.126, 10079.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2136.189 ±(99.9%) 114.873 MB/sec [Average]
[info]   (min, avg, max) = (2103.168, 2136.189, 2166.042), stdev = 29.832
[info]   CI (99.9%): [2021.315, 2251.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   367074.890 ±(99.9%) 43726.458 B/op [Average]
[info]   (min, avg, max) = (360820.072, 367074.890, 387349.686), stdev = 11355.622
[info]   CI (99.9%): [323348.432, 410801.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1989.849 ±(99.9%) 12.058 MB/sec [Average]
[info]   (min, avg, max) = (1986.648, 1989.849, 1993.751), stdev = 3.131
[info]   CI (99.9%): [1977.791, 2001.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   341923.984 ±(99.9%) 35125.061 B/op [Average]
[info]   (min, avg, max) = (331351.349, 341923.984, 355600.927), stdev = 9121.867
[info]   CI (99.9%): [306798.922, 377049.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.391 ±(99.9%) 7.182 MB/sec [Average]
[info]   (min, avg, max) = (0.075, 1.391, 4.470), stdev = 1.865
[info]   CI (99.9%): [≈ 0, 8.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   241.369 ±(99.9%) 1239.272 B/op [Average]
[info]   (min, avg, max) = (12.895, 241.369, 768.517), stdev = 321.835
[info]   CI (99.9%): [≈ 0, 1480.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 13.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.807 ops/s
[info] # Warmup Iteration   2: 14003.726 ops/s
[info] # Warmup Iteration   3: 17794.100 ops/s
[info] # Warmup Iteration   4: 17416.895 ops/s
[info] # Warmup Iteration   5: 17623.072 ops/s
[info] Iteration   1: 17619.183 ops/s
[info]                  ·gc.alloc.rate:               463.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          41373.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59146.779 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17818.680 ops/s
[info]                  ·gc.alloc.rate:      552.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 48773.891 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17329.857 ops/s
[info]                  ·gc.alloc.rate:               508.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          46144.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60132.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 17859.375 ops/s
[info]                  ·gc.alloc.rate:               452.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          39900.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58410.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17691.124 ops/s
[info]                  ·gc.alloc.rate:      436.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   17663.644 ±(99.9%) 808.847 ops/s [Average]
[info]   (min, avg, max) = (17329.857, 17663.644, 17859.375), stdev = 210.055
[info]   CI (99.9%): [16854.797, 18472.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   482.624 ±(99.9%) 181.789 MB/sec [Average]
[info]   (min, avg, max) = (436.512, 482.624, 552.322), stdev = 47.210
[info]   CI (99.9%): [300.835, 664.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   43004.745 ±(99.9%) 16432.988 B/op [Average]
[info]   (min, avg, max) = (38832.024, 43004.745, 48773.891), stdev = 4267.595
[info]   CI (99.9%): [26571.758, 59437.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   397.482 ±(99.9%) 1397.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.482, 662.808), stdev = 362.850
[info]   CI (99.9%): [≈ 0, 1794.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   35538.101 ±(99.9%) 124943.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35538.101, 60132.957), stdev = 32447.453
[info]   CI (99.9%): [≈ 0, 160481.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2683.979 ops/s
[info] # Warmup Iteration   2: 12944.985 ops/s
[info] # Warmup Iteration   3: 14906.016 ops/s
[info] # Warmup Iteration   4: 14838.473 ops/s
[info] # Warmup Iteration   5: 13888.134 ops/s
[info] Iteration   1: 14915.443 ops/s
[info]                  ·gc.alloc.rate:                   411.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              43438.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69832.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14956.221 ops/s
[info]                  ·gc.alloc.rate:      397.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 41800.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14578.144 ops/s
[info]                  ·gc.alloc.rate:               496.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          53524.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71446.420 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 14129.831 ops/s
[info]                  ·gc.alloc.rate:               488.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          54398.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73790.605 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 14951.737 ops/s
[info]                  ·gc.alloc.rate:      396.837 MB/sec
[info]                  ·gc.alloc.rate.norm: 41776.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14706.275 ±(99.9%) 1381.922 ops/s [Average]
[info]   (min, avg, max) = (14129.831, 14706.275, 14956.221), stdev = 358.881
[info]   CI (99.9%): [13324.353, 16088.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   438.030 ±(99.9%) 192.096 MB/sec [Average]
[info]   (min, avg, max) = (396.837, 438.030, 496.016), stdev = 49.887
[info]   CI (99.9%): [245.934, 630.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   46987.707 ±(99.9%) 24680.455 B/op [Average]
[info]   (min, avg, max) = (41776.029, 46987.707, 54398.875), stdev = 6409.436
[info]   CI (99.9%): [22307.252, 71668.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.276 ±(99.9%) 1396.482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.276, 662.491), stdev = 362.662
[info]   CI (99.9%): [≈ 0, 1793.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43013.892 ±(99.9%) 151296.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43013.892, 73790.605), stdev = 39291.344
[info]   CI (99.9%): [≈ 0, 194310.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.879 ±(99.9%) 7.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 4.393), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8803.040 ops/s
[info] # Warmup Iteration   2: 18901.184 ops/s
[info] # Warmup Iteration   3: 22417.406 ops/s
[info] # Warmup Iteration   4: 21499.220 ops/s
[info] # Warmup Iteration   5: 22120.237 ops/s
[info] Iteration   1: 21764.896 ops/s
[info]                  ·gc.alloc.rate:               565.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          40910.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48336.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 23602.384 ops/s
[info]                  ·gc.alloc.rate:      436.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 29092.880 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23467.388 ops/s
[info]                  ·gc.alloc.rate:                   443.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              29740.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44831.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22739.001 ops/s
[info]                  ·gc.alloc.rate:                   429.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              29730.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46289.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.441 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23581.604 ops/s
[info]                  ·gc.alloc.rate:      433.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23031.055 ±(99.9%) 3049.288 ops/s [Average]
[info]   (min, avg, max) = (21764.896, 23031.055, 23602.384), stdev = 791.890
[info]   CI (99.9%): [19981.767, 26080.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   461.746 ±(99.9%) 224.955 MB/sec [Average]
[info]   (min, avg, max) = (429.542, 461.746, 565.853), stdev = 58.420
[info]   CI (99.9%): [236.792, 686.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   31680.632 ±(99.9%) 19918.805 B/op [Average]
[info]   (min, avg, max) = (28928.018, 31680.632, 40910.748), stdev = 5172.851
[info]   CI (99.9%): [11761.826, 51599.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.167 ±(99.9%) 1410.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.167, 668.785), stdev = 366.213
[info]   CI (99.9%): [≈ 0, 1811.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27891.703 ±(99.9%) 98160.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27891.703, 48336.902), stdev = 25491.949
[info]   CI (99.9%): [≈ 0, 126052.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.157 ±(99.9%) 1.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.766), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.562 ±(99.9%) 87.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.562, 51.368), stdev = 22.820
[info]   CI (99.9%): [≈ 0, 98.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147.909 ops/s
[info] # Warmup Iteration   2: 2418.923 ops/s
[info] # Warmup Iteration   3: 5725.471 ops/s
[info] # Warmup Iteration   4: 6287.187 ops/s
[info] # Warmup Iteration   5: 6272.895 ops/s
[info] Iteration   1: 6416.614 ops/s
[info]                  ·gc.alloc.rate:                   2513.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              616575.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     491530.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 668.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 6303.211 ops/s
[info]                  ·gc.alloc.rate:                   2491.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              621969.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666565.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6382.942 ops/s
[info]                  ·gc.alloc.rate:                   2546.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              627987.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658645.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.531 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6365.340 ops/s
[info]                  ·gc.alloc.rate:                   2513.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              621413.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496455.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6246.241 ops/s
[info]                  ·gc.alloc.rate:               2508.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          632010.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 676170.407 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   6342.870 ±(99.9%) 261.581 ops/s [Average]
[info]   (min, avg, max) = (6246.241, 6342.870, 6416.614), stdev = 67.932
[info]   CI (99.9%): [6081.289, 6604.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2514.732 ±(99.9%) 77.883 MB/sec [Average]
[info]   (min, avg, max) = (2491.109, 2514.732, 2546.919), stdev = 20.226
[info]   CI (99.9%): [2436.848, 2592.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   623991.335 ±(99.9%) 23263.300 B/op [Average]
[info]   (min, avg, max) = (616575.907, 623991.335, 632010.120), stdev = 6041.405
[info]   CI (99.9%): [600728.035, 647254.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.331 ±(99.9%) 1410.953 MB/sec [Average]
[info]   (min, avg, max) = (2003.996, 2407.331, 2683.707), stdev = 366.420
[info]   CI (99.9%): [996.378, 3818.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   597873.241 ±(99.9%) 365996.619 B/op [Average]
[info]   (min, avg, max) = (491530.211, 597873.241, 676170.407), stdev = 95048.160
[info]   CI (99.9%): [231876.622, 963869.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 4.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 2.727), stdev = 1.170
[info]   CI (99.9%): [≈ 0, 5.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   161.761 ±(99.9%) 1104.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 161.761, 668.839), stdev = 286.772
[info]   CI (99.9%): [≈ 0, 1266.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1332.057 ops/s
[info] # Warmup Iteration   2: 9560.355 ops/s
[info] # Warmup Iteration   3: 11066.242 ops/s
[info] # Warmup Iteration   4: 12075.391 ops/s
[info] # Warmup Iteration   5: 11904.818 ops/s
[info] Iteration   1: 12207.526 ops/s
[info]                  ·gc.alloc.rate:                   2312.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              298108.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255682.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11912.660 ops/s
[info]                  ·gc.alloc.rate:                   2278.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              300938.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2642.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349026.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 11924.352 ops/s
[info]                  ·gc.alloc.rate:                   2279.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              300807.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261946.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.747 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11964.370 ops/s
[info]                  ·gc.alloc.rate:                   2273.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              299033.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261771.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11497.754 ops/s
[info]                  ·gc.alloc.rate:               2599.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          355665.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2665.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 364722.087 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   11901.332 ±(99.9%) 984.105 ops/s [Average]
[info]   (min, avg, max) = (11497.754, 11901.332, 12207.526), stdev = 255.569
[info]   CI (99.9%): [10917.227, 12885.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2348.525 ±(99.9%) 543.281 MB/sec [Average]
[info]   (min, avg, max) = (2273.261, 2348.525, 2599.377), stdev = 141.088
[info]   CI (99.9%): [1805.243, 2891.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   310910.711 ±(99.9%) 96448.895 B/op [Average]
[info]   (min, avg, max) = (298108.008, 310910.711, 355665.729), stdev = 25047.472
[info]   CI (99.9%): [214461.815, 407359.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2253.222 ±(99.9%) 1409.477 MB/sec [Average]
[info]   (min, avg, max) = (1983.330, 2253.222, 2665.565), stdev = 366.037
[info]   CI (99.9%): [843.745, 3662.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   298629.739 ±(99.9%) 206079.112 B/op [Average]
[info]   (min, avg, max) = (255682.175, 298629.739, 364722.087), stdev = 53518.091
[info]   CI (99.9%): [92550.627, 504708.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.228 ±(99.9%) 1.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.228, 0.640), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   29.802 ±(99.9%) 151.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.802, 84.488), stdev = 39.363
[info]   CI (99.9%): [≈ 0, 181.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 52719.845 ops/s
[info] # Warmup Iteration   3: 62844.880 ops/s
[info] # Warmup Iteration   4: 62373.723 ops/s
[info] # Warmup Iteration   5: 64803.560 ops/s
[info] Iteration   1: 64711.136 ops/s
[info]                  ·gc.alloc.rate:                   624.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              15197.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16071.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.633 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 64427.600 ops/s
[info]                  ·gc.alloc.rate:               620.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          15155.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16159.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 64598.366 ops/s
[info]                  ·gc.alloc.rate:               629.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          15335.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16116.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 64859.885 ops/s
[info]                  ·gc.alloc.rate:               628.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          15250.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16067.777 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 64278.093 ops/s
[info]                  ·gc.alloc.rate:                   643.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              15746.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16213.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   64575.016 ±(99.9%) 882.543 ops/s [Average]
[info]   (min, avg, max) = (64278.093, 64575.016, 64859.885), stdev = 229.194
[info]   CI (99.9%): [63692.473, 65457.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   629.342 ±(99.9%) 32.793 MB/sec [Average]
[info]   (min, avg, max) = (620.516, 629.342, 643.174), stdev = 8.516
[info]   CI (99.9%): [596.549, 662.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15337.258 ±(99.9%) 918.723 B/op [Average]
[info]   (min, avg, max) = (15155.889, 15337.258, 15746.754), stdev = 238.590
[info]   CI (99.9%): [14418.534, 16255.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   661.713 ±(99.9%) 2.213 MB/sec [Average]
[info]   (min, avg, max) = (660.812, 661.713, 662.227), stdev = 0.575
[info]   CI (99.9%): [659.500, 663.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16125.865 ±(99.9%) 236.854 B/op [Average]
[info]   (min, avg, max) = (16067.777, 16125.865, 16213.243), stdev = 61.510
[info]   CI (99.9%): [15889.011, 16362.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.410 ±(99.9%) 2.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.410, 1.419), stdev = 0.627
[info]   CI (99.9%): [≈ 0, 2.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13223.349 ops/s
[info] # Warmup Iteration   2: 44591.077 ops/s
[info] # Warmup Iteration   3: 45673.084 ops/s
[info] # Warmup Iteration   4: 43272.346 ops/s
[info] # Warmup Iteration   5: 44578.372 ops/s
[info] Iteration   1: 44174.789 ops/s
[info]                  ·gc.alloc.rate:                   655.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              23369.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23543.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.967 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 44654.293 ops/s
[info]                  ·gc.alloc.rate:               659.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          23236.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23291.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 44646.070 ops/s
[info]                  ·gc.alloc.rate:               654.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          23083.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23307.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 44676.152 ops/s
[info]                  ·gc.alloc.rate:                   662.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              23332.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23290.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 44666.407 ops/s
[info]                  ·gc.alloc.rate:               663.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          23364.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23317.596 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   44563.542 ±(99.9%) 837.985 ops/s [Average]
[info]   (min, avg, max) = (44174.789, 44563.542, 44676.152), stdev = 217.622
[info]   CI (99.9%): [43725.557, 45401.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   659.110 ±(99.9%) 14.264 MB/sec [Average]
[info]   (min, avg, max) = (654.827, 659.110, 663.116), stdev = 3.704
[info]   CI (99.9%): [644.845, 673.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23277.184 ±(99.9%) 464.967 B/op [Average]
[info]   (min, avg, max) = (23083.492, 23277.184, 23369.084), stdev = 120.750
[info]   CI (99.9%): [22812.217, 23742.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   661.166 ±(99.9%) 1.438 MB/sec [Average]
[info]   (min, avg, max) = (660.806, 661.166, 661.779), stdev = 0.374
[info]   CI (99.9%): [659.728, 662.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23350.051 ±(99.9%) 418.102 B/op [Average]
[info]   (min, avg, max) = (23290.998, 23350.051, 23543.239), stdev = 108.580
[info]   CI (99.9%): [22931.949, 23768.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.887 ±(99.9%) 5.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 2.967), stdev = 1.325
[info]   CI (99.9%): [≈ 0, 5.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49225.345 ops/s
[info] # Warmup Iteration   2: 107611.362 ops/s
[info] # Warmup Iteration   3: 109236.566 ops/s
[info] # Warmup Iteration   4: 119502.603 ops/s
[info] # Warmup Iteration   5: 119344.722 ops/s
[info] Iteration   1: 121389.365 ops/s
[info]                  ·gc.alloc.rate:                   926.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              12007.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8671.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 122538.586 ops/s
[info]                  ·gc.alloc.rate:               946.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          12158.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8590.467 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 115181.439 ops/s
[info]                  ·gc.alloc.rate:                   937.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              12801.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18278.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 117303.746 ops/s
[info]                  ·gc.alloc.rate:               909.786 MB/sec
[info]                  ·gc.alloc.rate.norm:          12206.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8973.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 117515.189 ops/s
[info]                  ·gc.alloc.rate:               903.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          12098.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8961.464 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   118785.665 ±(99.9%) 11815.942 ops/s [Average]
[info]   (min, avg, max) = (115181.439, 118785.665, 122538.586), stdev = 3068.563
[info]   CI (99.9%): [106969.723, 130601.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   924.689 ±(99.9%) 69.943 MB/sec [Average]
[info]   (min, avg, max) = (903.486, 924.689, 946.746), stdev = 18.164
[info]   CI (99.9%): [854.746, 994.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12254.339 ±(99.9%) 1211.421 B/op [Average]
[info]   (min, avg, max) = (12007.143, 12254.339, 12801.170), stdev = 314.602
[info]   CI (99.9%): [11042.918, 13465.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.840 ±(99.9%) 1152.789 MB/sec [Average]
[info]   (min, avg, max) = (668.846, 802.840, 1338.380), stdev = 299.376
[info]   CI (99.9%): [≈ 0, 1955.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10695.176 ±(99.9%) 16336.975 B/op [Average]
[info]   (min, avg, max) = (8590.467, 10695.176, 18278.532), stdev = 4242.660
[info]   CI (99.9%): [≈ 0, 27032.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.312), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59999.825 ops/s
[info] # Warmup Iteration   2: 114927.853 ops/s
[info] # Warmup Iteration   3: 119830.246 ops/s
[info] # Warmup Iteration   4: 136575.237 ops/s
[info] # Warmup Iteration   5: 136932.885 ops/s
[info] Iteration   1: 136783.245 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 137076.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 137080.511 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 136991.120 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 136917.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   136969.737 ±(99.9%) 477.947 ops/s [Average]
[info]   (min, avg, max) = (136783.245, 136969.737, 137080.511), stdev = 124.121
[info]   CI (99.9%): [136491.790, 137447.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 370.845 ops/s
[info] # Warmup Iteration   2: 6733.120 ops/s
[info] # Warmup Iteration   3: 8646.622 ops/s
[info] # Warmup Iteration   4: 9266.975 ops/s
[info] # Warmup Iteration   5: 9394.946 ops/s
[info] Iteration   1: 9257.991 ops/s
[info]                  ·gc.alloc.rate:                   2412.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              410203.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454590.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274.244 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9375.453 ops/s
[info]                  ·gc.alloc.rate:                   2462.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              413268.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449477.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.628 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9389.882 ops/s
[info]                  ·gc.alloc.rate:               2451.460 MB/sec
[info]                  ·gc.alloc.rate.norm:          410883.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 337002.412 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 9462.531 ops/s
[info]                  ·gc.alloc.rate:                   2497.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              415332.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446857.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.847 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9493.552 ops/s
[info]                  ·gc.alloc.rate:               2492.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          413112.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 334912.701 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   9395.882 ±(99.9%) 352.122 ops/s [Average]
[info]   (min, avg, max) = (9257.991, 9395.882, 9493.552), stdev = 91.445
[info]   CI (99.9%): [9043.759, 9748.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2463.284 ±(99.9%) 131.912 MB/sec [Average]
[info]   (min, avg, max) = (2412.954, 2463.284, 2497.224), stdev = 34.257
[info]   CI (99.9%): [2331.372, 2595.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   412560.066 ±(99.9%) 7905.751 B/op [Average]
[info]   (min, avg, max) = (410203.352, 412560.066, 415332.751), stdev = 2053.098
[info]   CI (99.9%): [404654.316, 420465.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2414.025 ±(99.9%) 1400.097 MB/sec [Average]
[info]   (min, avg, max) = (2010.663, 2414.025, 2686.771), stdev = 363.601
[info]   CI (99.9%): [1013.928, 3814.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   404568.197 ±(99.9%) 241430.441 B/op [Average]
[info]   (min, avg, max) = (334912.701, 404568.197, 454590.535), stdev = 62698.719
[info]   CI (99.9%): [163137.756, 645998.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.433 ±(99.9%) 2.648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.433, 1.613), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 3.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73.344 ±(99.9%) 450.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.344, 274.244), stdev = 116.927
[info]   CI (99.9%): [≈ 0, 523.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 825543.370 ops/s
[info] # Warmup Iteration   2: 10695610.445 ops/s
[info] # Warmup Iteration   3: 11401730.453 ops/s
[info] # Warmup Iteration   4: 13232568.364 ops/s
[info] # Warmup Iteration   5: 13604340.345 ops/s
[info] Iteration   1: 13519287.751 ops/s
[info]                  ·gc.alloc.rate:                   6012.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              699.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6058.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     705.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13536027.771 ops/s
[info]                  ·gc.alloc.rate:                   5994.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5415.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     629.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 13592246.262 ops/s
[info]                  ·gc.alloc.rate:                   6035.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              698.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6112.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 13728877.875 ops/s
[info]                  ·gc.alloc.rate:                   6025.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              690.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6123.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 13746637.381 ops/s
[info]                  ·gc.alloc.rate:                   6086.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5445.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   13624615.408 ±(99.9%) 411809.538 ops/s [Average]
[info]   (min, avg, max) = (13519287.751, 13624615.408, 13746637.381), stdev = 106945.629
[info]   CI (99.9%): [13212805.870, 14036424.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   6031.016 ±(99.9%) 133.065 MB/sec [Average]
[info]   (min, avg, max) = (5994.848, 6031.016, 6086.467), stdev = 34.556
[info]   CI (99.9%): [5897.951, 6164.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   696.687 ±(99.9%) 13.739 B/op [Average]
[info]   (min, avg, max) = (690.730, 696.687, 699.944), stdev = 3.568
[info]   CI (99.9%): [682.948, 710.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   5831.381 ±(99.9%) 1412.328 MB/sec [Average]
[info]   (min, avg, max) = (5415.389, 5831.381, 6123.970), stdev = 366.777
[info]   CI (99.9%): [4419.053, 7243.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   673.664 ±(99.9%) 165.826 B/op [Average]
[info]   (min, avg, max) = (623.558, 673.664, 707.784), stdev = 43.065
[info]   CI (99.9%): [507.837, 839.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.007, 0.012), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 12.000), stdev = 1.414
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.552 ops/s
[info] # Warmup Iteration   2: 39947494.673 ops/s
[info] # Warmup Iteration   3: 41715696.449 ops/s
[info] # Warmup Iteration   4: 42952043.306 ops/s
[info] # Warmup Iteration   5: 42950975.881 ops/s
[info] Iteration   1: 42944282.288 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42935759.857 ops/s
[info]                  ·gc.alloc.rate:      0.243 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42678262.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42932764.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42952391.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   42888692.377 ±(99.9%) 453927.618 ops/s [Average]
[info]   (min, avg, max) = (42678262.966, 42888692.377, 42952391.862), stdev = 117883.561
[info]   CI (99.9%): [42434764.759, 43342619.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.049 ±(99.9%) 0.418 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.049, 0.243), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 289014.895 ops/s
[info] # Warmup Iteration   2: 18899159.435 ops/s
[info] # Warmup Iteration   3: 19494719.235 ops/s
[info] # Warmup Iteration   4: 26672213.872 ops/s
[info] # Warmup Iteration   5: 26791191.099 ops/s
[info] Iteration   1: 26747028.292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 26711514.082 ops/s
[info]                  ·gc.alloc.rate:      0.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26791726.448 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26810371.232 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 26815669.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   26775261.916 ±(99.9%) 172178.515 ops/s [Average]
[info]   (min, avg, max) = (26711514.082, 26775261.916, 26815669.524), stdev = 44714.214
[info]   CI (99.9%): [26603083.401, 26947440.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   0.086 ±(99.9%) 0.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.086, 0.429), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10781353.614 ops/s
[info] # Warmup Iteration   2: 45422194.930 ops/s
[info] # Warmup Iteration   3: 47670145.470 ops/s
[info] # Warmup Iteration   4: 47658870.647 ops/s
[info] # Warmup Iteration   5: 47652729.975 ops/s
[info] Iteration   1: 47699160.613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47672638.540 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47695841.893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47685267.035 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47706043.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   47691790.266 ±(99.9%) 50325.220 ops/s [Average]
[info]   (min, avg, max) = (47672638.540, 47691790.266, 47706043.249), stdev = 13069.300
[info]   CI (99.9%): [47641465.046, 47742115.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7112935.717 ops/s
[info] # Warmup Iteration   2: 28876887.743 ops/s
[info] # Warmup Iteration   3: 31333277.659 ops/s
[info] # Warmup Iteration   4: 30541230.260 ops/s
[info] # Warmup Iteration   5: 31533716.325 ops/s
[info] Iteration   1: 31359535.217 ops/s
[info]                  ·gc.alloc.rate:                   843.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              42.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 31487940.153 ops/s
[info]                  ·gc.alloc.rate:               814.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 31415853.766 ops/s
[info]                  ·gc.alloc.rate:               821.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.590 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 31290301.339 ops/s
[info]                  ·gc.alloc.rate:               812.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.724 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 31452340.186 ops/s
[info]                  ·gc.alloc.rate:                   816.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31401194.132 ±(99.9%) 300673.238 ops/s [Average]
[info]   (min, avg, max) = (31290301.339, 31401194.132, 31487940.153), stdev = 78083.885
[info]   CI (99.9%): [31100520.894, 31701867.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   821.784 ±(99.9%) 47.696 MB/sec [Average]
[info]   (min, avg, max) = (812.459, 821.784, 843.033), stdev = 12.387
[info]   CI (99.9%): [774.087, 869.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.187 ±(99.9%) 2.502 B/op [Average]
[info]   (min, avg, max) = (40.712, 41.187, 42.309), stdev = 0.650
[info]   CI (99.9%): [38.685, 43.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   804.364 ±(99.9%) 1152.373 MB/sec [Average]
[info]   (min, avg, max) = (670.334, 804.364, 1339.710), stdev = 299.268
[info]   CI (99.9%): [≈ 0, 1956.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.323 ±(99.9%) 57.933 B/op [Average]
[info]   (min, avg, max) = (33.497, 40.323, 67.236), stdev = 15.045
[info]   CI (99.9%): [≈ 0, 98.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 750128.676 ops/s
[info] # Warmup Iteration   2: 20283247.415 ops/s
[info] # Warmup Iteration   3: 22889519.334 ops/s
[info] # Warmup Iteration   4: 23653060.560 ops/s
[info] # Warmup Iteration   5: 23713727.069 ops/s
[info] Iteration   1: 23710133.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23711954.269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23699005.295 ops/s
[info]                  ·gc.alloc.rate:      2.756 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.183 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22883858.267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23858584.615 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   23572707.276 ±(99.9%) 1504298.555 ops/s [Average]
[info]   (min, avg, max) = (22883858.267, 23572707.276, 23858584.615), stdev = 390661.558
[info]   CI (99.9%): [22068408.721, 25077005.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   0.551 ±(99.9%) 4.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.551, 2.756), stdev = 1.232
[info]   CI (99.9%): [≈ 0, 5.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   0.037 ±(99.9%) 0.315 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1976479.339 ops/s
[info] # Warmup Iteration   2: 20571262.088 ops/s
[info] # Warmup Iteration   3: 22155608.226 ops/s
[info] # Warmup Iteration   4: 22356923.560 ops/s
[info] # Warmup Iteration   5: 21766038.999 ops/s
[info] Iteration   1: 21992952.269 ops/s
[info]                  ·gc.alloc.rate:                   1728.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 22323732.202 ops/s
[info]                  ·gc.alloc.rate:                   1753.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 22457290.823 ops/s
[info]                  ·gc.alloc.rate:                   1778.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              124.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 22370987.322 ops/s
[info]                  ·gc.alloc.rate:                   1758.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22323275.356 ops/s
[info]                  ·gc.alloc.rate:                   1755.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22293647.594 ±(99.9%) 680598.201 ops/s [Average]
[info]   (min, avg, max) = (21992952.269, 22293647.594, 22457290.823), stdev = 176749.191
[info]   CI (99.9%): [21613049.394, 22974245.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1754.787 ±(99.9%) 68.524 MB/sec [Average]
[info]   (min, avg, max) = (1728.495, 1754.787, 1778.435), stdev = 17.795
[info]   CI (99.9%): [1686.263, 1823.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123.869 ±(99.9%) 1.609 B/op [Average]
[info]   (min, avg, max) = (123.601, 123.869, 124.611), stdev = 0.418
[info]   CI (99.9%): [122.260, 125.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1736.891 ±(99.9%) 1410.825 MB/sec [Average]
[info]   (min, avg, max) = (1333.809, 1736.891, 2007.720), stdev = 366.387
[info]   CI (99.9%): [326.066, 3147.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   122.518 ±(99.9%) 97.609 B/op [Average]
[info]   (min, avg, max) = (93.825, 122.518, 141.546), stdev = 25.349
[info]   CI (99.9%): [24.909, 220.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.902 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.824, 4.031), stdev = 1.792
[info]   CI (99.9%): [≈ 0, 7.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.487 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.058, 0.284), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.684 ops/s
[info] # Warmup Iteration   2: 53033040.793 ops/s
[info] # Warmup Iteration   3: 56194961.269 ops/s
[info] # Warmup Iteration   4: 59081056.363 ops/s
[info] # Warmup Iteration   5: 57070569.277 ops/s
[info] Iteration   1: 58874110.520 ops/s
[info]                  ·gc.alloc.rate:                   1244.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 58869544.063 ops/s
[info]                  ·gc.alloc.rate:                   1241.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 59009969.958 ops/s
[info]                  ·gc.alloc.rate:                   1236.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 59115300.764 ops/s
[info]                  ·gc.alloc.rate:               1227.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 58900765.293 ops/s
[info]                  ·gc.alloc.rate:                   1235.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   58953938.120 ±(99.9%) 410683.504 ops/s [Average]
[info]   (min, avg, max) = (58869544.063, 58953938.120, 59115300.764), stdev = 106653.202
[info]   CI (99.9%): [58543254.616, 59364621.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1237.139 ±(99.9%) 24.387 MB/sec [Average]
[info]   (min, avg, max) = (1227.799, 1237.139, 1244.091), stdev = 6.333
[info]   CI (99.9%): [1212.753, 1261.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   33.025 ±(99.9%) 0.862 B/op [Average]
[info]   (min, avg, max) = (32.685, 33.025, 33.257), stdev = 0.224
[info]   CI (99.9%): [32.162, 33.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1199.557 ±(99.9%) 1145.929 MB/sec [Average]
[info]   (min, avg, max) = (667.208, 1199.557, 1333.746), stdev = 297.594
[info]   CI (99.9%): [53.628, 2345.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   32.031 ±(99.9%) 30.717 B/op [Average]
[info]   (min, avg, max) = (17.761, 32.031, 35.627), stdev = 7.977
[info]   CI (99.9%): [1.314, 62.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.947 ±(99.9%) 7.967 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.947, 4.648), stdev = 2.069
[info]   CI (99.9%): [≈ 0, 8.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1031572.777 ops/s
[info] # Warmup Iteration   2: 12036923.828 ops/s
[info] # Warmup Iteration   3: 27935741.956 ops/s
[info] # Warmup Iteration   4: 28051979.928 ops/s
[info] # Warmup Iteration   5: 28111590.359 ops/s
[info] Iteration   1: 28074742.964 ops/s
[info]                  ·gc.alloc.rate:               584.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.307 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 27567225.061 ops/s
[info]                  ·gc.alloc.rate:               615.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          35.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 27976857.844 ops/s
[info]                  ·gc.alloc.rate:               588.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 27380889.197 ops/s
[info]                  ·gc.alloc.rate:      556.752 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28079251.256 ops/s
[info]                  ·gc.alloc.rate:                   591.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   27815793.264 ±(99.9%) 1237810.675 ops/s [Average]
[info]   (min, avg, max) = (27380889.197, 27815793.264, 28079251.256), stdev = 321455.501
[info]   CI (99.9%): [26577982.589, 29053603.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   587.515 ±(99.9%) 81.204 MB/sec [Average]
[info]   (min, avg, max) = (556.752, 587.515, 615.996), stdev = 21.088
[info]   CI (99.9%): [506.311, 668.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33.241 ±(99.9%) 4.509 B/op [Average]
[info]   (min, avg, max) = (32.000, 33.241, 35.168), stdev = 1.171
[info]   CI (99.9%): [28.731, 37.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.708 ±(99.9%) 1146.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.708, 666.283), stdev = 297.793
[info]   CI (99.9%): [≈ 0, 1679.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.023 ±(99.9%) 64.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.023, 37.995), stdev = 16.786
[info]   CI (99.9%): [≈ 0, 94.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11840965.936 ops/s
[info] # Warmup Iteration   2: 47934093.333 ops/s
[info] # Warmup Iteration   3: 50664796.756 ops/s
[info] # Warmup Iteration   4: 51028747.576 ops/s
[info] # Warmup Iteration   5: 50869665.444 ops/s
[info] Iteration   1: 50583150.842 ops/s
[info]                  ·gc.alloc.rate:               1050.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 50029282.921 ops/s
[info]                  ·gc.alloc.rate:                   1056.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 51043799.005 ops/s
[info]                  ·gc.alloc.rate:               1053.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.643 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 48669798.101 ops/s
[info]                  ·gc.alloc.rate:               1074.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          34.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.310 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 50854005.198 ops/s
[info]                  ·gc.alloc.rate:                   1070.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   50236007.214 ±(99.9%) 3678677.013 ops/s [Average]
[info]   (min, avg, max) = (48669798.101, 50236007.214, 51043799.005), stdev = 955340.738
[info]   CI (99.9%): [46557330.201, 53914684.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1060.952 ±(99.9%) 42.411 MB/sec [Average]
[info]   (min, avg, max) = (1050.132, 1060.952, 1074.740), stdev = 11.014
[info]   CI (99.9%): [1018.541, 1103.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   33.248 ±(99.9%) 3.446 B/op [Average]
[info]   (min, avg, max) = (32.475, 33.248, 34.751), stdev = 0.895
[info]   CI (99.9%): [29.802, 36.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1070.747 ±(99.9%) 1412.256 MB/sec [Average]
[info]   (min, avg, max) = (668.485, 1070.747, 1339.447), stdev = 366.758
[info]   CI (99.9%): [≈ 0, 2483.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   33.649 ±(99.9%) 45.518 B/op [Average]
[info]   (min, avg, max) = (20.643, 33.649, 43.310), stdev = 11.821
[info]   CI (99.9%): [≈ 0, 79.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.797 ±(99.9%) 6.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.965), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 7.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.123), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14824315.338 ops/s
[info] # Warmup Iteration   2: 54297997.665 ops/s
[info] # Warmup Iteration   3: 65940598.448 ops/s
[info] # Warmup Iteration   4: 64626560.786 ops/s
[info] # Warmup Iteration   5: 66070089.092 ops/s
[info] Iteration   1: 66011071.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 66034004.827 ops/s
[info]                  ·gc.alloc.rate:      0.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 66069726.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 65131628.667 ops/s
[info]                  ·gc.alloc.rate:      35.276 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.852 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 66005786.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   65850443.541 ±(99.9%) 1550341.264 ops/s [Average]
[info]   (min, avg, max) = (65131628.667, 65850443.541, 66069726.561), stdev = 402618.703
[info]   CI (99.9%): [64300102.277, 67400784.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.072 ±(99.9%) 60.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 7.072, 35.276), stdev = 15.767
[info]   CI (99.9%): [≈ 0, 67.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.171 ±(99.9%) 1.467 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.171, 0.852), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 1.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6423994.409 ops/s
[info] # Warmup Iteration   2: 25003533.255 ops/s
[info] # Warmup Iteration   3: 26525687.538 ops/s
[info] # Warmup Iteration   4: 26630397.434 ops/s
[info] # Warmup Iteration   5: 26437960.557 ops/s
[info] Iteration   1: 26383359.026 ops/s
[info]                  ·gc.alloc.rate:                   2076.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 26262893.445 ops/s
[info]                  ·gc.alloc.rate:                   2056.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26670179.901 ops/s
[info]                  ·gc.alloc.rate:                   2097.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26820571.806 ops/s
[info]                  ·gc.alloc.rate:               2111.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          123.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.129 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 26889053.126 ops/s
[info]                  ·gc.alloc.rate:               2131.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          124.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.986 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   26605211.461 ±(99.9%) 1050257.739 ops/s [Average]
[info]   (min, avg, max) = (26262893.445, 26605211.461, 26889053.126), stdev = 272748.600
[info]   CI (99.9%): [25554953.722, 27655469.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2094.840 ±(99.9%) 112.264 MB/sec [Average]
[info]   (min, avg, max) = (2056.546, 2094.840, 2131.241), stdev = 29.155
[info]   CI (99.9%): [1982.576, 2207.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   123.906 ±(99.9%) 2.026 B/op [Average]
[info]   (min, avg, max) = (123.221, 123.906, 124.698), stdev = 0.526
[info]   CI (99.9%): [121.880, 125.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2014.915 ±(99.9%) 9.501 MB/sec [Average]
[info]   (min, avg, max) = (2012.538, 2014.915, 2018.374), stdev = 2.467
[info]   CI (99.9%): [2005.415, 2024.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   119.192 ±(99.9%) 4.891 B/op [Average]
[info]   (min, avg, max) = (117.986, 119.192, 120.679), stdev = 1.270
[info]   CI (99.9%): [114.301, 124.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.644 ±(99.9%) 5.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.094), stdev = 1.370
[info]   CI (99.9%): [≈ 0, 5.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.185), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314435.645 ops/s
[info] # Warmup Iteration   2: 1510404.619 ops/s
[info] # Warmup Iteration   3: 3662960.220 ops/s
[info] # Warmup Iteration   4: 3755981.801 ops/s
[info] # Warmup Iteration   5: 3774943.079 ops/s
[info] Iteration   1: 3769459.883 ops/s
[info]                  ·gc.alloc.rate:               1551.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          647.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 555.702 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 3683829.025 ops/s
[info]                  ·gc.alloc.rate:                   1528.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              652.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     569.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 3772714.805 ops/s
[info]                  ·gc.alloc.rate:                   1585.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              661.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3801185.858 ops/s
[info]                  ·gc.alloc.rate:                   1566.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     550.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3802470.596 ops/s
[info]                  ·gc.alloc.rate:                   1567.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   3765932.033 ±(99.9%) 186440.909 ops/s [Average]
[info]   (min, avg, max) = (3683829.025, 3765932.033, 3802470.596), stdev = 48418.112
[info]   CI (99.9%): [3579491.124, 3952372.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1560.068 ±(99.9%) 81.998 MB/sec [Average]
[info]   (min, avg, max) = (1528.641, 1560.068, 1585.750), stdev = 21.295
[info]   CI (99.9%): [1478.070, 1642.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   651.881 ±(99.9%) 21.688 B/op [Average]
[info]   (min, avg, max) = (647.925, 651.881, 661.359), stdev = 5.632
[info]   CI (99.9%): [630.193, 673.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.346 ±(99.9%) 1152.341 MB/sec [Average]
[info]   (min, avg, max) = (1328.568, 1464.346, 1999.669), stdev = 299.259
[info]   CI (99.9%): [312.005, 2616.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   611.846 ±(99.9%) 479.121 B/op [Average]
[info]   (min, avg, max) = (549.788, 611.846, 833.989), stdev = 124.426
[info]   CI (99.9%): [132.725, 1090.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.198), stdev = 1.843
[info]   CI (99.9%): [≈ 0, 8.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 2.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.751), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 3.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30167.830 ops/s
[info] # Warmup Iteration   2: 184367.730 ops/s
[info] # Warmup Iteration   3: 192557.000 ops/s
[info] # Warmup Iteration   4: 204895.794 ops/s
[info] # Warmup Iteration   5: 205831.130 ops/s
[info] Iteration   1: 209193.239 ops/s
[info]                  ·gc.alloc.rate:               3930.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          29571.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3338.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25121.100 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 207166.811 ops/s
[info]                  ·gc.alloc.rate:                   3961.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              30092.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4025.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30581.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 206878.389 ops/s
[info]                  ·gc.alloc.rate:                   3957.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              30095.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4046.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30769.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 209097.608 ops/s
[info]                  ·gc.alloc.rate:                   3971.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              29888.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25460.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 204261.681 ops/s
[info]                  ·gc.alloc.rate:                   3928.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              30267.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31356.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   207319.546 ±(99.9%) 7759.004 ops/s [Average]
[info]   (min, avg, max) = (204261.681, 207319.546, 209193.239), stdev = 2014.989
[info]   CI (99.9%): [199560.542, 215078.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3949.759 ±(99.9%) 74.510 MB/sec [Average]
[info]   (min, avg, max) = (3928.072, 3949.759, 3971.150), stdev = 19.350
[info]   CI (99.9%): [3875.249, 4024.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29982.960 ±(99.9%) 1025.572 B/op [Average]
[info]   (min, avg, max) = (29571.427, 29982.960, 30267.083), stdev = 266.338
[info]   CI (99.9%): [28957.388, 31008.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3772.667 ±(99.9%) 1449.835 MB/sec [Average]
[info]   (min, avg, max) = (3338.960, 3772.667, 4069.394), stdev = 376.518
[info]   CI (99.9%): [2322.832, 5222.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28657.764 ±(99.9%) 11895.203 B/op [Average]
[info]   (min, avg, max) = (25121.100, 28657.764, 31356.011), stdev = 3089.146
[info]   CI (99.9%): [16762.561, 40552.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 0.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.321), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1218.424 ops/s
[info] # Warmup Iteration   2: 21378.359 ops/s
[info] # Warmup Iteration   3: 43708.495 ops/s
[info] # Warmup Iteration   4: 43896.983 ops/s
[info] # Warmup Iteration   5: 44347.832 ops/s
[info] Iteration   1: 44350.407 ops/s
[info]                  ·gc.alloc.rate:                   2849.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              101128.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94865.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 44763.521 ops/s
[info]                  ·gc.alloc.rate:                   2874.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              101067.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117572.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.464 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 45091.533 ops/s
[info]                  ·gc.alloc.rate:                   2890.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              100892.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93629.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 45456.631 ops/s
[info]                  ·gc.alloc.rate:                   2908.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              100656.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93159.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45672.323 ops/s
[info]                  ·gc.alloc.rate:                   2964.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              102149.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92948.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.717 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   45066.883 ±(99.9%) 2041.600 ops/s [Average]
[info]   (min, avg, max) = (44350.407, 45066.883, 45672.323), stdev = 530.197
[info]   CI (99.9%): [43025.283, 47108.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2897.486 ±(99.9%) 166.177 MB/sec [Average]
[info]   (min, avg, max) = (2849.659, 2897.486, 2964.437), stdev = 43.156
[info]   CI (99.9%): [2731.309, 3063.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   101178.904 ±(99.9%) 2204.722 B/op [Average]
[info]   (min, avg, max) = (100656.672, 101178.904, 102149.239), stdev = 572.559
[info]   CI (99.9%): [98974.181, 103383.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2817.736 ±(99.9%) 1133.552 MB/sec [Average]
[info]   (min, avg, max) = (2673.158, 2817.736, 3344.083), stdev = 294.380
[info]   CI (99.9%): [1684.184, 3951.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   98435.022 ±(99.9%) 41294.838 B/op [Average]
[info]   (min, avg, max) = (92948.120, 98435.022, 117572.793), stdev = 10724.138
[info]   CI (99.9%): [57140.185, 139729.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.765 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.125, 0.479), stdev = 0.199
[info]   CI (99.9%): [≈ 0, 0.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.415 ±(99.9%) 27.172 B/op [Average]
[info]   (min, avg, max) = (0.717, 4.415, 16.991), stdev = 7.057
[info]   CI (99.9%): [≈ 0, 31.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17924.681 ops/s
[info] # Warmup Iteration   2: 148239.898 ops/s
[info] # Warmup Iteration   3: 198090.044 ops/s
[info] # Warmup Iteration   4: 228592.565 ops/s
[info] # Warmup Iteration   5: 228857.423 ops/s
[info] Iteration   1: 224146.638 ops/s
[info]                  ·gc.alloc.rate:                   840.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              5903.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9303.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 228790.941 ops/s
[info]                  ·gc.alloc.rate:               826.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          5684.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4566.637 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 225520.006 ops/s
[info]                  ·gc.alloc.rate:                   819.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              5717.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4632.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 222311.512 ops/s
[info]                  ·gc.alloc.rate:               814.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          5762.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4708.722 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 222497.016 ops/s
[info]                  ·gc.alloc.rate:                   805.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              5700.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4704.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   224653.223 ±(99.9%) 10235.307 ops/s [Average]
[info]   (min, avg, max) = (222311.512, 224653.223, 228790.941), stdev = 2658.077
[info]   CI (99.9%): [214417.916, 234888.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   821.461 ±(99.9%) 50.723 MB/sec [Average]
[info]   (min, avg, max) = (805.962, 821.461, 840.788), stdev = 13.173
[info]   CI (99.9%): [770.738, 872.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5753.740 ±(99.9%) 341.370 B/op [Average]
[info]   (min, avg, max) = (5684.892, 5753.740, 5903.451), stdev = 88.653
[info]   CI (99.9%): [5412.370, 6095.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.756 ±(99.9%) 1137.232 MB/sec [Average]
[info]   (min, avg, max) = (663.997, 796.756, 1325.067), stdev = 295.335
[info]   CI (99.9%): [≈ 0, 1933.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5583.286 ±(99.9%) 8011.695 B/op [Average]
[info]   (min, avg, max) = (4566.637, 5583.286, 9303.732), stdev = 2080.612
[info]   CI (99.9%): [≈ 0, 13594.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.366), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201953.049 ops/s
[info] # Warmup Iteration   2: 450945.338 ops/s
[info] # Warmup Iteration   3: 535866.674 ops/s
[info] # Warmup Iteration   4: 532365.298 ops/s
[info] # Warmup Iteration   5: 527305.318 ops/s
[info] Iteration   1: 518476.249 ops/s
[info]                  ·gc.alloc.rate:                   959.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              2912.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4052.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 518007.462 ops/s
[info]                  ·gc.alloc.rate:               942.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          2862.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2030.018 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 518759.158 ops/s
[info]                  ·gc.alloc.rate:                   950.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              2883.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2027.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 512178.895 ops/s
[info]                  ·gc.alloc.rate:                   947.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              2910.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4106.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 519632.191 ops/s
[info]                  ·gc.alloc.rate:                   943.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              2856.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2025.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   517410.791 ±(99.9%) 11490.264 ops/s [Average]
[info]   (min, avg, max) = (512178.895, 517410.791, 519632.191), stdev = 2983.985
[info]   CI (99.9%): [505920.527, 528901.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   948.555 ±(99.9%) 26.558 MB/sec [Average]
[info]   (min, avg, max) = (942.228, 948.555, 959.375), stdev = 6.897
[info]   CI (99.9%): [921.997, 975.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2885.153 ±(99.9%) 99.588 B/op [Average]
[info]   (min, avg, max) = (2856.946, 2885.153, 2912.249), stdev = 25.863
[info]   CI (99.9%): [2785.566, 2984.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.356 ±(99.9%) 1407.661 MB/sec [Average]
[info]   (min, avg, max) = (668.168, 935.356, 1336.706), stdev = 365.565
[info]   CI (99.9%): [≈ 0, 2343.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2848.250 ±(99.9%) 4327.726 B/op [Average]
[info]   (min, avg, max) = (2025.680, 2848.250, 4106.243), stdev = 1123.897
[info]   CI (99.9%): [≈ 0, 7175.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.177), stdev = 1.411
[info]   CI (99.9%): [≈ 0, 6.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.980 ±(99.9%) 16.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.980, 9.623), stdev = 4.273
[info]   CI (99.9%): [≈ 0, 18.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196112.748 ops/s
[info] # Warmup Iteration   2: 504616.550 ops/s
[info] # Warmup Iteration   3: 565366.888 ops/s
[info] # Warmup Iteration   4: 579436.175 ops/s
[info] # Warmup Iteration   5: 568222.437 ops/s
[info] Iteration   1: 567609.767 ops/s
[info]                  ·gc.alloc.rate:      392.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 562513.631 ops/s
[info]                  ·gc.alloc.rate:               405.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          1134.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1869.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 569402.291 ops/s
[info]                  ·gc.alloc.rate:                   415.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              1148.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 579012.990 ops/s
[info]                  ·gc.alloc.rate:      404.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 1099.367 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 576502.837 ops/s
[info]                  ·gc.alloc.rate:               422.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          1153.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1824.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   571008.303 ±(99.9%) 25870.604 ops/s [Average]
[info]   (min, avg, max) = (562513.631, 571008.303, 579012.990), stdev = 6718.514
[info]   CI (99.9%): [545137.700, 596878.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   408.079 ±(99.9%) 44.434 MB/sec [Average]
[info]   (min, avg, max) = (392.377, 408.079, 422.619), stdev = 11.539
[info]   CI (99.9%): [363.645, 452.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1124.781 ±(99.9%) 113.658 B/op [Average]
[info]   (min, avg, max) = (1088.001, 1124.781, 1153.780), stdev = 29.517
[info]   CI (99.9%): [1011.123, 1238.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   401.038 ±(99.9%) 1409.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.038, 668.559), stdev = 366.096
[info]   CI (99.9%): [≈ 0, 1810.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1108.417 ±(99.9%) 3896.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1108.417, 1869.428), stdev = 1011.964
[info]   CI (99.9%): [≈ 0, 5005.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3302.410 ops/s
[info] # Warmup Iteration   2: 58869.542 ops/s
[info] # Warmup Iteration   3: 71909.831 ops/s
[info] # Warmup Iteration   4: 77963.624 ops/s
[info] # Warmup Iteration   5: 83680.620 ops/s
[info] Iteration   1: 84643.919 ops/s
[info]                  ·gc.alloc.rate:                   1395.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              25956.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24772.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 84869.407 ops/s
[info]                  ·gc.alloc.rate:               1409.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          26131.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24719.611 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 83085.725 ops/s
[info]                  ·gc.alloc.rate:                   1385.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              26237.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25262.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 83758.941 ops/s
[info]                  ·gc.alloc.rate:                   1409.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              26471.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25059.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 85091.102 ops/s
[info]                  ·gc.alloc.rate:                   1407.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              26032.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24672.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   84289.819 ±(99.9%) 3241.773 ops/s [Average]
[info]   (min, avg, max) = (83085.725, 84289.819, 85091.102), stdev = 841.878
[info]   CI (99.9%): [81048.046, 87531.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1401.351 ±(99.9%) 40.798 MB/sec [Average]
[info]   (min, avg, max) = (1385.141, 1401.351, 1409.186), stdev = 10.595
[info]   CI (99.9%): [1360.553, 1442.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26166.034 ±(99.9%) 773.308 B/op [Average]
[info]   (min, avg, max) = (25956.907, 26166.034, 26471.730), stdev = 200.826
[info]   CI (99.9%): [25392.726, 26939.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1333.341 ±(99.9%) 2.689 MB/sec [Average]
[info]   (min, avg, max) = (1332.260, 1333.341, 1333.919), stdev = 0.698
[info]   CI (99.9%): [1330.652, 1336.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24897.163 ±(99.9%) 976.555 B/op [Average]
[info]   (min, avg, max) = (24672.159, 24897.163, 25262.027), stdev = 253.608
[info]   CI (99.9%): [23920.608, 25873.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.596 ±(99.9%) 3.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.596, 2.061), stdev = 0.857
[info]   CI (99.9%): [≈ 0, 3.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.236 ±(99.9%) 62.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.236, 39.038), stdev = 16.248
[info]   CI (99.9%): [≈ 0, 73.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51112.619 ops/s
[info] # Warmup Iteration   2: 349672.064 ops/s
[info] # Warmup Iteration   3: 356025.953 ops/s
[info] # Warmup Iteration   4: 382324.915 ops/s
[info] # Warmup Iteration   5: 381359.208 ops/s
[info] Iteration   1: 389496.176 ops/s
[info]                  ·gc.alloc.rate:                   2823.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              11408.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10745.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 382670.028 ops/s
[info]                  ·gc.alloc.rate:                   2773.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              11403.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10936.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.758 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 392714.160 ops/s
[info]                  ·gc.alloc.rate:                   2843.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              11396.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10665.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 383693.154 ops/s
[info]                  ·gc.alloc.rate:                   2807.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              11516.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10953.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 389516.774 ops/s
[info]                  ·gc.alloc.rate:               2848.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          11511.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10825.851 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   387618.058 ±(99.9%) 16448.896 ops/s [Average]
[info]   (min, avg, max) = (382670.028, 387618.058, 392714.160), stdev = 4271.726
[info]   CI (99.9%): [371169.162, 404066.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2819.425 ±(99.9%) 117.514 MB/sec [Average]
[info]   (min, avg, max) = (2773.533, 2819.425, 2848.914), stdev = 30.518
[info]   CI (99.9%): [2701.912, 2936.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11447.475 ±(99.9%) 234.743 B/op [Average]
[info]   (min, avg, max) = (11396.977, 11447.475, 11516.639), stdev = 60.962
[info]   CI (99.9%): [11212.732, 11682.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2666.037 ±(99.9%) 33.262 MB/sec [Average]
[info]   (min, avg, max) = (2659.168, 2666.037, 2679.225), stdev = 8.638
[info]   CI (99.9%): [2632.775, 2699.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10825.591 ±(99.9%) 475.037 B/op [Average]
[info]   (min, avg, max) = (10665.675, 10825.591, 10953.975), stdev = 123.366
[info]   CI (99.9%): [10350.554, 11300.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.345 ±(99.9%) 1.758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.345, 0.914), stdev = 0.457
[info]   CI (99.9%): [≈ 0, 2.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.408 ±(99.9%) 7.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.408, 3.758), stdev = 1.865
[info]   CI (99.9%): [≈ 0, 8.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 9.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37455.017 ops/s
[info] # Warmup Iteration   2: 550679.035 ops/s
[info] # Warmup Iteration   3: 779513.150 ops/s
[info] # Warmup Iteration   4: 870132.926 ops/s
[info] # Warmup Iteration   5: 870684.323 ops/s
[info] Iteration   1: 839371.517 ops/s
[info]                  ·gc.alloc.rate:               1840.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          3449.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3740.940 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 850464.245 ops/s
[info]                  ·gc.alloc.rate:                   1849.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              3421.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3704.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 872841.309 ops/s
[info]                  ·gc.alloc.rate:                   1916.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              3455.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3619.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 876704.012 ops/s
[info]                  ·gc.alloc.rate:               1898.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          3408.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2407.284 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 873324.822 ops/s
[info]                  ·gc.alloc.rate:               1904.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          3432.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3633.248 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   862541.181 ±(99.9%) 64019.518 ops/s [Average]
[info]   (min, avg, max) = (839371.517, 862541.181, 876704.012), stdev = 16625.666
[info]   CI (99.9%): [798521.663, 926560.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1882.004 ±(99.9%) 133.902 MB/sec [Average]
[info]   (min, avg, max) = (1840.231, 1882.004, 1916.867), stdev = 34.774
[info]   CI (99.9%): [1748.102, 2015.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3433.431 ±(99.9%) 74.454 B/op [Average]
[info]   (min, avg, max) = (3408.259, 3433.431, 3455.171), stdev = 19.335
[info]   CI (99.9%): [3358.977, 3507.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872.681 ±(99.9%) 1144.643 MB/sec [Average]
[info]   (min, avg, max) = (1341.096, 1872.681, 2016.164), stdev = 297.260
[info]   CI (99.9%): [728.038, 3017.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3421.150 ±(99.9%) 2190.904 B/op [Average]
[info]   (min, avg, max) = (2407.284, 3421.150, 3740.940), stdev = 568.971
[info]   CI (99.9%): [1230.246, 5612.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.479), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.886), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 498984.743 ops/s
[info] # Warmup Iteration   2: 1443973.354 ops/s
[info] # Warmup Iteration   3: 1580260.600 ops/s
[info] # Warmup Iteration   4: 1579071.219 ops/s
[info] # Warmup Iteration   5: 1636259.415 ops/s
[info] Iteration   1: 1634068.571 ops/s
[info]                  ·gc.alloc.rate:                   3267.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              3147.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3215.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1633203.121 ops/s
[info]                  ·gc.alloc.rate:                   3330.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              3208.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3224.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1643481.014 ops/s
[info]                  ·gc.alloc.rate:                   3331.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              3190.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3217.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1616847.254 ops/s
[info]                  ·gc.alloc.rate:               3276.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          3189.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2624.942 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1627680.202 ops/s
[info]                  ·gc.alloc.rate:                   3311.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              3202.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3268.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1631056.032 ±(99.9%) 37598.101 ops/s [Average]
[info]   (min, avg, max) = (1616847.254, 1631056.032, 1643481.014), stdev = 9764.107
[info]   CI (99.9%): [1593457.932, 1668654.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3303.706 ±(99.9%) 115.474 MB/sec [Average]
[info]   (min, avg, max) = (3267.600, 3303.706, 3331.811), stdev = 29.988
[info]   CI (99.9%): [3188.232, 3419.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3187.710 ±(99.9%) 92.705 B/op [Average]
[info]   (min, avg, max) = (3147.204, 3187.710, 3208.931), stdev = 24.075
[info]   CI (99.9%): [3095.005, 3280.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3224.269 ±(99.9%) 1136.802 MB/sec [Average]
[info]   (min, avg, max) = (2696.923, 3224.269, 3380.186), stdev = 295.224
[info]   CI (99.9%): [2087.466, 4361.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3110.043 ±(99.9%) 1047.550 B/op [Average]
[info]   (min, avg, max) = (2624.942, 3110.043, 3268.389), stdev = 272.045
[info]   CI (99.9%): [2062.493, 4157.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.040), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5268.911 ops/s
[info] # Warmup Iteration   2: 139496.073 ops/s
[info] # Warmup Iteration   3: 171583.897 ops/s
[info] # Warmup Iteration   4: 175820.602 ops/s
[info] # Warmup Iteration   5: 174639.286 ops/s
[info] Iteration   1: 177597.863 ops/s
[info]                  ·gc.alloc.rate:                   4647.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              41184.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35720.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 172233.509 ops/s
[info]                  ·gc.alloc.rate:                   4526.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              41338.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4727.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43174.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 173040.785 ops/s
[info]                  ·gc.alloc.rate:                   4527.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              41167.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4065.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36971.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 173484.094 ops/s
[info]                  ·gc.alloc.rate:               4567.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          41422.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4754.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43117.827 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   5: 177493.355 ops/s
[info]                  ·gc.alloc.rate:                   4638.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              41133.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36177.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   174769.921 ±(99.9%) 9909.518 ops/s [Average]
[info]   (min, avg, max) = (172233.509, 174769.921, 177597.863), stdev = 2573.470
[info]   CI (99.9%): [164860.404, 184679.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4581.453 ±(99.9%) 226.336 MB/sec [Average]
[info]   (min, avg, max) = (4526.147, 4581.453, 4647.217), stdev = 58.779
[info]   CI (99.9%): [4355.117, 4807.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41249.262 ±(99.9%) 479.614 B/op [Average]
[info]   (min, avg, max) = (41133.763, 41249.262, 41422.145), stdev = 124.554
[info]   CI (99.9%): [40769.648, 41728.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4331.667 ±(99.9%) 1440.764 MB/sec [Average]
[info]   (min, avg, max) = (4030.651, 4331.667, 4754.653), stdev = 374.162
[info]   CI (99.9%): [2890.903, 5772.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39032.372 ±(99.9%) 14563.682 B/op [Average]
[info]   (min, avg, max) = (35720.144, 39032.372, 43174.761), stdev = 3782.142
[info]   CI (99.9%): [24468.691, 53596.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.262 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.262, 0.380), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 11.000), stdev = 1.342
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113517.838 ops/s
[info] # Warmup Iteration   2: 375953.210 ops/s
[info] # Warmup Iteration   3: 474129.309 ops/s
[info] # Warmup Iteration   4: 476269.515 ops/s
[info] # Warmup Iteration   5: 477751.488 ops/s
[info] Iteration   1: 469077.476 ops/s
[info]                  ·gc.alloc.rate:                   1533.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              5146.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4483.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 476227.253 ops/s
[info]                  ·gc.alloc.rate:                   1582.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              5228.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6632.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 482400.161 ops/s
[info]                  ·gc.alloc.rate:                   1565.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              5106.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4360.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 481588.785 ops/s
[info]                  ·gc.alloc.rate:               1575.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          5148.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4358.426 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 479275.120 ops/s
[info]                  ·gc.alloc.rate:                   1565.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              5142.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4375.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   477713.759 ±(99.9%) 20755.215 ops/s [Average]
[info]   (min, avg, max) = (469077.476, 477713.759, 482400.161), stdev = 5390.063
[info]   CI (99.9%): [456958.544, 498468.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1564.475 ±(99.9%) 71.083 MB/sec [Average]
[info]   (min, avg, max) = (1533.926, 1564.475, 1582.113), stdev = 18.460
[info]   CI (99.9%): [1493.392, 1635.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5154.473 ±(99.9%) 172.945 B/op [Average]
[info]   (min, avg, max) = (5106.277, 5154.473, 5228.659), stdev = 44.913
[info]   CI (99.9%): [4981.528, 5327.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1469.124 ±(99.9%) 1157.423 MB/sec [Average]
[info]   (min, avg, max) = (1332.251, 1469.124, 2006.806), stdev = 300.579
[info]   CI (99.9%): [311.701, 2626.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4842.044 ±(99.9%) 3858.647 B/op [Average]
[info]   (min, avg, max) = (4358.426, 4842.044, 6632.210), stdev = 1002.078
[info]   CI (99.9%): [983.397, 8700.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.871 ±(99.9%) 5.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.871, 3.396), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.870 ±(99.9%) 18.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.870, 11.223), stdev = 4.830
[info]   CI (99.9%): [≈ 0, 21.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.147
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 355836.916 ops/s
[info] # Warmup Iteration   2: 1107867.119 ops/s
[info] # Warmup Iteration   3: 940761.822 ops/s
[info] # Warmup Iteration   4: 963326.474 ops/s
[info] # Warmup Iteration   5: 924125.741 ops/s
[info] Iteration   1: 973061.422 ops/s
[info]                  ·gc.alloc.rate:      450.279 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 970323.600 ops/s
[info]                  ·gc.alloc.rate:               463.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1067.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 966156.094 ops/s
[info]                  ·gc.alloc.rate:                   468.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              762.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1074.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 963388.734 ops/s
[info]                  ·gc.alloc.rate:      445.613 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 967686.215 ops/s
[info]                  ·gc.alloc.rate:               467.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          760.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1073.134 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   968123.213 ±(99.9%) 14369.588 ops/s [Average]
[info]   (min, avg, max) = (963388.734, 968123.213, 973061.422), stdev = 3731.736
[info]   CI (99.9%): [953753.625, 982492.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   459.099 ±(99.9%) 40.351 MB/sec [Average]
[info]   (min, avg, max) = (445.613, 459.099, 468.247), stdev = 10.479
[info]   CI (99.9%): [418.748, 499.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   746.271 ±(99.9%) 66.170 B/op [Average]
[info]   (min, avg, max) = (728.001, 746.271, 762.757), stdev = 17.184
[info]   CI (99.9%): [680.101, 812.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   395.632 ±(99.9%) 1390.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 395.632, 659.891), stdev = 361.161
[info]   CI (99.9%): [≈ 0, 1786.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   643.181 ±(99.9%) 2260.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 643.181, 1074.840), stdev = 587.147
[info]   CI (99.9%): [≈ 0, 2904.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1365636.712 ops/s
[info] # Warmup Iteration   2: 2687602.793 ops/s
[info] # Warmup Iteration   3: 2772728.571 ops/s
[info] # Warmup Iteration   4: 2774041.072 ops/s
[info] # Warmup Iteration   5: 2712055.682 ops/s
[info] Iteration   1: 2761177.998 ops/s
[info]                  ·gc.alloc.rate:                   1315.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2753521.102 ops/s
[info]                  ·gc.alloc.rate:                   1318.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2762724.842 ops/s
[info]                  ·gc.alloc.rate:                   1312.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2776668.326 ops/s
[info]                  ·gc.alloc.rate:                   1337.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     758.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2782237.921 ops/s
[info]                  ·gc.alloc.rate:               1339.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          757.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 755.926 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2767266.038 ±(99.9%) 45527.668 ops/s [Average]
[info]   (min, avg, max) = (2753521.102, 2767266.038, 2782237.921), stdev = 11823.391
[info]   CI (99.9%): [2721738.370, 2812793.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1324.958 ±(99.9%) 48.779 MB/sec [Average]
[info]   (min, avg, max) = (1312.981, 1324.958, 1339.860), stdev = 12.668
[info]   CI (99.9%): [1276.179, 1373.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   753.505 ±(99.9%) 17.696 B/op [Average]
[info]   (min, avg, max) = (747.966, 753.505, 758.067), stdev = 4.596
[info]   CI (99.9%): [735.809, 771.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1338.844 ±(99.9%) 5.715 MB/sec [Average]
[info]   (min, avg, max) = (1336.383, 1338.844, 1340.308), stdev = 1.484
[info]   CI (99.9%): [1333.130, 1344.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   761.426 ±(99.9%) 15.107 B/op [Average]
[info]   (min, avg, max) = (755.926, 761.426, 765.701), stdev = 3.923
[info]   CI (99.9%): [746.319, 776.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.813 ±(99.9%) 5.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.813, 3.164), stdev = 1.363
[info]   CI (99.9%): [≈ 0, 6.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.463 ±(99.9%) 2.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 1.803), stdev = 0.777
[info]   CI (99.9%): [≈ 0, 3.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1224017.665 ops/s
[info] # Warmup Iteration   2: 2662865.301 ops/s
[info] # Warmup Iteration   3: 2948689.077 ops/s
[info] # Warmup Iteration   4: 2948487.321 ops/s
[info] # Warmup Iteration   5: 2946225.231 ops/s
[info] Iteration   1: 2918656.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2948873.150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2944818.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2931669.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2879758.427 ops/s
[info]                  ·gc.alloc.rate:      22.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 12.096 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2924755.068 ±(99.9%) 107091.868 ops/s [Average]
[info]   (min, avg, max) = (2879758.427, 2924755.068, 2948873.150), stdev = 27811.418
[info]   CI (99.9%): [2817663.201, 3031846.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.427 ±(99.9%) 38.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.427, 22.134), stdev = 9.898
[info]   CI (99.9%): [≈ 0, 42.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.419 ±(99.9%) 20.830 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.419, 12.096), stdev = 5.410
[info]   CI (99.9%): [≈ 0, 23.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60484.685 ops/s
[info] # Warmup Iteration   2: 481818.665 ops/s
[info] # Warmup Iteration   3: 514952.710 ops/s
[info] # Warmup Iteration   4: 605286.148 ops/s
[info] # Warmup Iteration   5: 655565.677 ops/s
[info] Iteration   1: 682769.514 ops/s
[info]                  ·gc.alloc.rate:               945.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          2178.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1521.716 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 685345.373 ops/s
[info]                  ·gc.alloc.rate:               945.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          2170.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1517.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 669579.615 ops/s
[info]                  ·gc.alloc.rate:                   959.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              2256.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 676236.687 ops/s
[info]                  ·gc.alloc.rate:                   936.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              2180.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1539.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 664955.786 ops/s
[info]                  ·gc.alloc.rate:                   936.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              2216.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3132.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   675777.395 ±(99.9%) 33133.811 ops/s [Average]
[info]   (min, avg, max) = (664955.786, 675777.395, 685345.373), stdev = 8604.746
[info]   CI (99.9%): [642643.584, 708911.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   944.826 ±(99.9%) 36.297 MB/sec [Average]
[info]   (min, avg, max) = (936.833, 944.826, 959.958), stdev = 9.426
[info]   CI (99.9%): [908.530, 981.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2200.621 ±(99.9%) 138.231 B/op [Average]
[info]   (min, avg, max) = (2170.793, 2200.621, 2256.419), stdev = 35.898
[info]   CI (99.9%): [2062.390, 2338.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   925.758 ±(99.9%) 1396.937 MB/sec [Average]
[info]   (min, avg, max) = (660.137, 925.758, 1323.998), stdev = 362.780
[info]   CI (99.9%): [≈ 0, 2322.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2163.968 ±(99.9%) 3362.871 B/op [Average]
[info]   (min, avg, max) = (1517.529, 2163.968, 3132.935), stdev = 873.327
[info]   CI (99.9%): [≈ 0, 5526.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.917 ±(99.9%) 7.849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.917, 4.563), stdev = 2.038
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.169 ±(99.9%) 18.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.169, 10.797), stdev = 4.823
[info]   CI (99.9%): [≈ 0, 20.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.600, 13.000), stdev = 2.608
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7596.442 ops/s
[info] # Warmup Iteration   2: 55428.480 ops/s
[info] # Warmup Iteration   3: 74464.554 ops/s
[info] # Warmup Iteration   4: 77129.609 ops/s
[info] # Warmup Iteration   5: 74231.347 ops/s
[info] Iteration   1: 75710.767 ops/s
[info]                  ·gc.alloc.rate:                   2202.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              45777.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41573.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 76438.073 ops/s
[info]                  ·gc.alloc.rate:                   2248.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              46275.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54728.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 77595.267 ops/s
[info]                  ·gc.alloc.rate:                   2237.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              45368.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40439.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 77635.631 ops/s
[info]                  ·gc.alloc.rate:                   2248.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              45587.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40492.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 77508.633 ops/s
[info]                  ·gc.alloc.rate:                   2272.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              46150.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40654.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.845 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   76977.674 ±(99.9%) 3330.567 ops/s [Average]
[info]   (min, avg, max) = (75710.767, 76977.674, 77635.631), stdev = 864.938
[info]   CI (99.9%): [73647.107, 80308.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2241.960 ±(99.9%) 97.701 MB/sec [Average]
[info]   (min, avg, max) = (2202.851, 2241.960, 2272.620), stdev = 25.373
[info]   CI (99.9%): [2144.258, 2339.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45831.887 ±(99.9%) 1459.889 B/op [Average]
[info]   (min, avg, max) = (45368.793, 45831.887, 46275.408), stdev = 379.129
[info]   CI (99.9%): [44371.998, 47291.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2130.626 ±(99.9%) 1137.246 MB/sec [Average]
[info]   (min, avg, max) = (1994.305, 2130.626, 2658.918), stdev = 295.339
[info]   CI (99.9%): [993.380, 3267.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43577.656 ±(99.9%) 24067.684 B/op [Average]
[info]   (min, avg, max) = (40439.496, 43577.656, 54728.351), stdev = 6250.301
[info]   CI (99.9%): [19509.972, 67645.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.936 ±(99.9%) 7.297 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.936, 4.324), stdev = 1.895
[info]   CI (99.9%): [≈ 0, 8.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.417 ±(99.9%) 151.693 B/op [Average]
[info]   (min, avg, max) = (0.422, 19.417, 89.853), stdev = 39.394
[info]   CI (99.9%): [≈ 0, 171.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14784.750 ops/s
[info] # Warmup Iteration   2: 57946.740 ops/s
[info] # Warmup Iteration   3: 89643.276 ops/s
[info] # Warmup Iteration   4: 105740.465 ops/s
[info] # Warmup Iteration   5: 105083.863 ops/s
[info] Iteration   1: 107949.794 ops/s
[info]                  ·gc.alloc.rate:                   1969.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              28721.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29054.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 105899.422 ops/s
[info]                  ·gc.alloc.rate:                   1901.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              28251.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19790.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 105046.969 ops/s
[info]                  ·gc.alloc.rate:                   1910.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              28626.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29977.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 104777.810 ops/s
[info]                  ·gc.alloc.rate:                   1891.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              28409.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30113.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 104414.730 ops/s
[info]                  ·gc.alloc.rate:                   1910.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              28801.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30278.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   105617.745 ±(99.9%) 5444.378 ops/s [Average]
[info]   (min, avg, max) = (104414.730, 105617.745, 107949.794), stdev = 1413.888
[info]   CI (99.9%): [100173.367, 111062.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1916.727 ±(99.9%) 118.694 MB/sec [Average]
[info]   (min, avg, max) = (1891.221, 1916.727, 1969.939), stdev = 30.824
[info]   CI (99.9%): [1798.034, 2035.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28562.122 ±(99.9%) 875.183 B/op [Average]
[info]   (min, avg, max) = (28251.936, 28562.122, 28801.842), stdev = 227.282
[info]   CI (99.9%): [27686.939, 29437.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1867.756 ±(99.9%) 1154.138 MB/sec [Average]
[info]   (min, avg, max) = (1331.693, 1867.756, 2008.757), stdev = 299.726
[info]   CI (99.9%): [713.617, 3021.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27843.016 ±(99.9%) 17429.203 B/op [Average]
[info]   (min, avg, max) = (19790.804, 27843.016, 30278.763), stdev = 4526.309
[info]   CI (99.9%): [10413.814, 45272.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.288 ±(99.9%) 1.844 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.288, 1.126), stdev = 0.479
[info]   CI (99.9%): [≈ 0, 2.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.281 ±(99.9%) 27.402 B/op [Average]
[info]   (min, avg, max) = (0.304, 4.281, 16.730), stdev = 7.116
[info]   CI (99.9%): [≈ 0, 31.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31848.167 ops/s
[info] # Warmup Iteration   2: 144109.818 ops/s
[info] # Warmup Iteration   3: 162380.993 ops/s
[info] # Warmup Iteration   4: 159056.759 ops/s
[info] # Warmup Iteration   5: 159273.708 ops/s
[info] Iteration   1: 163605.085 ops/s
[info]                  ·gc.alloc.rate:                   2577.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              24795.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25645.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 164181.564 ops/s
[info]                  ·gc.alloc.rate:                   2605.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              24970.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25542.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 164144.067 ops/s
[info]                  ·gc.alloc.rate:                   2603.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              24964.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25599.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 163540.765 ops/s
[info]                  ·gc.alloc.rate:               2582.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          24842.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19331.766 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 163475.688 ops/s
[info]                  ·gc.alloc.rate:               2607.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          25104.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25863.609 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   163789.434 ±(99.9%) 1325.243 ops/s [Average]
[info]   (min, avg, max) = (163475.688, 163789.434, 164181.564), stdev = 344.161
[info]   CI (99.9%): [162464.191, 165114.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2595.252 ±(99.9%) 54.930 MB/sec [Average]
[info]   (min, avg, max) = (2577.535, 2595.252, 2607.574), stdev = 14.265
[info]   CI (99.9%): [2540.321, 2650.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24935.487 ±(99.9%) 466.925 B/op [Average]
[info]   (min, avg, max) = (24795.621, 24935.487, 25104.082), stdev = 121.259
[info]   CI (99.9%): [24468.563, 25402.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2539.343 ±(99.9%) 1141.406 MB/sec [Average]
[info]   (min, avg, max) = (2009.317, 2539.343, 2686.466), stdev = 296.420
[info]   CI (99.9%): [1397.936, 3680.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24396.787 ±(99.9%) 10912.855 B/op [Average]
[info]   (min, avg, max) = (19331.766, 24396.787, 25863.609), stdev = 2834.034
[info]   CI (99.9%): [13483.933, 35309.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.229), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.560 ±(99.9%) 3.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 2.203), stdev = 0.933
[info]   CI (99.9%): [≈ 0, 4.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1103.507 ops/s
[info] # Warmup Iteration   2: 25748.507 ops/s
[info] # Warmup Iteration   3: 44519.679 ops/s
[info] # Warmup Iteration   4: 39846.595 ops/s
[info] # Warmup Iteration   5: 42783.418 ops/s
[info] Iteration   1: 43963.503 ops/s
[info]                  ·gc.alloc.rate:                   2489.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              89108.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95545.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 43917.901 ops/s
[info]                  ·gc.alloc.rate:                   2484.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              88998.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95607.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.714 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45743.829 ops/s
[info]                  ·gc.alloc.rate:                   2544.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              87536.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68965.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.432 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 44823.154 ops/s
[info]                  ·gc.alloc.rate:                   2519.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              88465.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94072.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.924 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45662.735 ops/s
[info]                  ·gc.alloc.rate:               2565.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          88416.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92622.032 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   44822.225 ±(99.9%) 3395.896 ops/s [Average]
[info]   (min, avg, max) = (43917.901, 44822.225, 45743.829), stdev = 881.903
[info]   CI (99.9%): [41426.328, 48218.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2520.578 ±(99.9%) 134.270 MB/sec [Average]
[info]   (min, avg, max) = (2484.404, 2520.578, 2565.151), stdev = 34.870
[info]   CI (99.9%): [2386.307, 2654.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88505.151 ±(99.9%) 2400.762 B/op [Average]
[info]   (min, avg, max) = (87536.674, 88505.151, 89108.778), stdev = 623.470
[info]   CI (99.9%): [86104.389, 90905.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2541.803 ±(99.9%) 1156.346 MB/sec [Average]
[info]   (min, avg, max) = (2004.787, 2541.803, 2687.155), stdev = 300.299
[info]   CI (99.9%): [1385.457, 3698.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89362.486 ±(99.9%) 44159.820 B/op [Average]
[info]   (min, avg, max) = (68965.359, 89362.486, 95607.214), stdev = 11468.165
[info]   CI (99.9%): [45202.666, 133522.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.577 ±(99.9%) 4.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.577, 2.571), stdev = 1.117
[info]   CI (99.9%): [≈ 0, 4.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.624 ±(99.9%) 154.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.624, 92.049), stdev = 40.006
[info]   CI (99.9%): [≈ 0, 174.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28167.104 ops/s
[info] # Warmup Iteration   2: 193892.394 ops/s
[info] # Warmup Iteration   3: 216951.604 ops/s
[info] # Warmup Iteration   4: 224206.405 ops/s
[info] # Warmup Iteration   5: 229066.179 ops/s
[info] Iteration   1: 222162.424 ops/s
[info]                  ·gc.alloc.rate:                   999.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              7076.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4693.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 224544.044 ops/s
[info]                  ·gc.alloc.rate:               1031.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          7226.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9305.838 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 231397.496 ops/s
[info]                  ·gc.alloc.rate:                   1043.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              7094.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4524.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 231565.691 ops/s
[info]                  ·gc.alloc.rate:                   1057.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              7190.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9050.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 232151.960 ops/s
[info]                  ·gc.alloc.rate:               1040.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          7056.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4518.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   228364.323 ±(99.9%) 17943.048 ops/s [Average]
[info]   (min, avg, max) = (222162.424, 228364.323, 232151.960), stdev = 4659.753
[info]   CI (99.9%): [210421.275, 246307.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1034.400 ±(99.9%) 84.457 MB/sec [Average]
[info]   (min, avg, max) = (999.120, 1034.400, 1057.909), stdev = 21.933
[info]   CI (99.9%): [949.943, 1118.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7128.807 ±(99.9%) 288.784 B/op [Average]
[info]   (min, avg, max) = (7056.086, 7128.807, 7226.650), stdev = 74.996
[info]   CI (99.9%): [6840.022, 7417.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   930.745 ±(99.9%) 1402.473 MB/sec [Average]
[info]   (min, avg, max) = (662.604, 930.745, 1331.682), stdev = 364.218
[info]   CI (99.9%): [≈ 0, 2333.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6418.516 ±(99.9%) 9711.019 B/op [Average]
[info]   (min, avg, max) = (4518.517, 6418.516, 9305.838), stdev = 2521.921
[info]   CI (99.9%): [≈ 0, 16129.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 0.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.295), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186198.631 ops/s
[info] # Warmup Iteration   2: 493888.851 ops/s
[info] # Warmup Iteration   3: 558012.296 ops/s
[info] # Warmup Iteration   4: 584185.733 ops/s
[info] # Warmup Iteration   5: 579645.307 ops/s
[info] Iteration   1: 588535.668 ops/s
[info]                  ·gc.alloc.rate:                   670.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              1793.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1784.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 585598.516 ops/s
[info]                  ·gc.alloc.rate:               660.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          1774.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1793.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 566759.250 ops/s
[info]                  ·gc.alloc.rate:                   642.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              1784.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 568790.833 ops/s
[info]                  ·gc.alloc.rate:               646.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          1789.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1847.912 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 566173.263 ops/s
[info]                  ·gc.alloc.rate:                   647.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              1800.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1856.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   575171.506 ±(99.9%) 42171.618 ops/s [Average]
[info]   (min, avg, max) = (566173.263, 575171.506, 588535.668), stdev = 10951.835
[info]   CI (99.9%): [532999.888, 617343.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   653.655 ±(99.9%) 44.534 MB/sec [Average]
[info]   (min, avg, max) = (642.654, 653.655, 670.539), stdev = 11.565
[info]   CI (99.9%): [609.121, 698.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1788.507 ±(99.9%) 36.759 B/op [Average]
[info]   (min, avg, max) = (1774.898, 1788.507, 1800.351), stdev = 9.546
[info]   CI (99.9%): [1751.748, 1825.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   667.677 ±(99.9%) 0.846 MB/sec [Average]
[info]   (min, avg, max) = (667.457, 667.677, 667.963), stdev = 0.220
[info]   CI (99.9%): [666.831, 668.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1827.347 ±(99.9%) 134.354 B/op [Average]
[info]   (min, avg, max) = (1784.950, 1827.347, 1856.406), stdev = 34.891
[info]   CI (99.9%): [1692.993, 1961.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.058), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221338.181 ops/s
[info] # Warmup Iteration   2: 375366.439 ops/s
[info] # Warmup Iteration   3: 612582.960 ops/s
[info] # Warmup Iteration   4: 614417.804 ops/s
[info] # Warmup Iteration   5: 617827.866 ops/s
[info] Iteration   1: 618472.914 ops/s
[info]                  ·gc.alloc.rate:      6.288 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 618777.634 ops/s
[info]                  ·gc.alloc.rate:      6.291 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 608234.688 ops/s
[info]                  ·gc.alloc.rate:      23.742 MB/sec
[info]                  ·gc.alloc.rate.norm: 61.426 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 612532.302 ops/s
[info]                  ·gc.alloc.rate:      6.448 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.568 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 611018.867 ops/s
[info]                  ·gc.alloc.rate:      6.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   613807.281 ±(99.9%) 17950.688 ops/s [Average]
[info]   (min, avg, max) = (608234.688, 613807.281, 618777.634), stdev = 4661.737
[info]   CI (99.9%): [595856.593, 631757.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.796 ±(99.9%) 30.021 MB/sec [Average]
[info]   (min, avg, max) = (6.213, 9.796, 23.742), stdev = 7.796
[info]   CI (99.9%): [≈ 0, 39.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   25.199 ±(99.9%) 77.987 B/op [Average]
[info]   (min, avg, max) = (16.001, 25.199, 61.426), stdev = 20.253
[info]   CI (99.9%): [≈ 0, 103.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2763.823 ops/s
[info] # Warmup Iteration   2: 54813.143 ops/s
[info] # Warmup Iteration   3: 78493.115 ops/s
[info] # Warmup Iteration   4: 86543.769 ops/s
[info] # Warmup Iteration   5: 94343.023 ops/s
[info] Iteration   1: 94097.464 ops/s
[info]                  ·gc.alloc.rate:               1480.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          24763.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22266.628 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 93995.268 ops/s
[info]                  ·gc.alloc.rate:                   1485.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              24874.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22307.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 93915.712 ops/s
[info]                  ·gc.alloc.rate:                   1496.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              25085.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33518.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 90838.115 ops/s
[info]                  ·gc.alloc.rate:                   1427.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              24726.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23105.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 93503.688 ops/s
[info]                  ·gc.alloc.rate:                   1464.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              24657.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22457.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   93270.049 ±(99.9%) 5306.464 ops/s [Average]
[info]   (min, avg, max) = (90838.115, 93270.049, 94097.464), stdev = 1378.072
[info]   CI (99.9%): [87963.585, 98576.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1471.094 ±(99.9%) 104.370 MB/sec [Average]
[info]   (min, avg, max) = (1427.195, 1471.094, 1496.949), stdev = 27.105
[info]   CI (99.9%): [1366.723, 1575.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24821.508 ±(99.9%) 643.875 B/op [Average]
[info]   (min, avg, max) = (24657.314, 24821.508, 25085.406), stdev = 167.212
[info]   CI (99.9%): [24177.633, 25465.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1466.367 ±(99.9%) 1149.037 MB/sec [Average]
[info]   (min, avg, max) = (1331.448, 1466.367, 2000.159), stdev = 298.401
[info]   CI (99.9%): [317.330, 2615.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24731.191 ±(99.9%) 18958.922 B/op [Average]
[info]   (min, avg, max) = (22266.628, 24731.191, 33518.039), stdev = 4923.572
[info]   CI (99.9%): [5772.269, 43690.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.458 ±(99.9%) 3.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 1.936), stdev = 0.829
[info]   CI (99.9%): [≈ 0, 3.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.698 ±(99.9%) 53.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.698, 32.444), stdev = 13.890
[info]   CI (99.9%): [≈ 0, 61.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210978.177 ops/s
[info] # Warmup Iteration   2: 3438938.742 ops/s
[info] # Warmup Iteration   3: 8184155.154 ops/s
[info] # Warmup Iteration   4: 8429745.169 ops/s
[info] # Warmup Iteration   5: 8413560.522 ops/s
[info] Iteration   1: 8326052.283 ops/s
[info]                  ·gc.alloc.rate:                   7366.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1392.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7433.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1405.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 8391957.874 ops/s
[info]                  ·gc.alloc.rate:                   7313.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1371.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6790.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1273.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 8468144.213 ops/s
[info]                  ·gc.alloc.rate:                   7487.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7485.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 8446177.927 ops/s
[info]                  ·gc.alloc.rate:                   7469.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7490.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1395.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 8449238.906 ops/s
[info]                  ·gc.alloc.rate:                   7445.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6815.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1269.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   8416314.241 ±(99.9%) 222894.358 ops/s [Average]
[info]   (min, avg, max) = (8326052.283, 8416314.241, 8468144.213), stdev = 57884.957
[info]   CI (99.9%): [8193419.883, 8639208.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   7416.536 ±(99.9%) 283.432 MB/sec [Average]
[info]   (min, avg, max) = (7313.777, 7416.536, 7487.272), stdev = 73.606
[info]   CI (99.9%): [7133.105, 7699.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1386.831 ±(99.9%) 33.937 B/op [Average]
[info]   (min, avg, max) = (1371.617, 1386.831, 1392.602), stdev = 8.813
[info]   CI (99.9%): [1352.894, 1420.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   7203.088 ±(99.9%) 1408.985 MB/sec [Average]
[info]   (min, avg, max) = (6790.864, 7203.088, 7490.269), stdev = 365.909
[info]   CI (99.9%): [5794.102, 8612.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1346.979 ±(99.9%) 266.184 B/op [Average]
[info]   (min, avg, max) = (1269.404, 1346.979, 1405.239), stdev = 69.127
[info]   CI (99.9%): [1080.794, 1613.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.208), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.023, 0.039), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 14.000, 15.000), stdev = 1.225
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.594 ops/s
[info] # Warmup Iteration   2: 750524.572 ops/s
[info] # Warmup Iteration   3: 866771.739 ops/s
[info] # Warmup Iteration   4: 1003037.606 ops/s
[info] # Warmup Iteration   5: 1008409.170 ops/s
[info] Iteration   1: 1007224.679 ops/s
[info]                  ·gc.alloc.rate:                   651.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              1017.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1033.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 975731.225 ops/s
[info]                  ·gc.alloc.rate:               622.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          1003.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1067.500 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 971103.281 ops/s
[info]                  ·gc.alloc.rate:               620.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          1005.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1072.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 966282.159 ops/s
[info]                  ·gc.alloc.rate:               627.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          1022.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1079.042 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 966259.636 ops/s
[info]                  ·gc.alloc.rate:                   606.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              988.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1079.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   977320.196 ±(99.9%) 66126.534 ops/s [Average]
[info]   (min, avg, max) = (966259.636, 977320.196, 1007224.679), stdev = 17172.851
[info]   CI (99.9%): [911193.662, 1043446.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   625.550 ±(99.9%) 62.578 MB/sec [Average]
[info]   (min, avg, max) = (606.590, 625.550, 651.059), stdev = 16.251
[info]   CI (99.9%): [562.972, 688.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1007.246 ±(99.9%) 51.807 B/op [Average]
[info]   (min, avg, max) = (988.015, 1007.246, 1022.585), stdev = 13.454
[info]   CI (99.9%): [955.439, 1059.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   661.977 ±(99.9%) 2.078 MB/sec [Average]
[info]   (min, avg, max) = (661.226, 661.977, 662.532), stdev = 0.540
[info]   CI (99.9%): [659.898, 664.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1066.247 ±(99.9%) 73.811 B/op [Average]
[info]   (min, avg, max) = (1033.071, 1066.247, 1079.042), stdev = 19.168
[info]   CI (99.9%): [992.436, 1140.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.041), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16049.697 ops/s
[info] # Warmup Iteration   2: 134273.053 ops/s
[info] # Warmup Iteration   3: 325377.581 ops/s
[info] # Warmup Iteration   4: 444982.724 ops/s
[info] # Warmup Iteration   5: 443779.595 ops/s
[info] Iteration   1: 445376.387 ops/s
[info]                  ·gc.alloc.rate:               988.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          3492.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2347.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 439449.037 ops/s
[info]                  ·gc.alloc.rate:               1019.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          3652.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4764.498 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 450309.284 ops/s
[info]                  ·gc.alloc.rate:                   984.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              3441.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2327.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 448138.922 ops/s
[info]                  ·gc.alloc.rate:               1023.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          3594.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4681.446 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 449710.862 ops/s
[info]                  ·gc.alloc.rate:               1003.965 MB/sec
[info]                  ·gc.alloc.rate.norm:          3513.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2334.915 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   446596.898 ±(99.9%) 17051.656 ops/s [Average]
[info]   (min, avg, max) = (439449.037, 446596.898, 450309.284), stdev = 4428.261
[info]   CI (99.9%): [429545.242, 463648.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1004.029 ±(99.9%) 67.971 MB/sec [Average]
[info]   (min, avg, max) = (984.636, 1004.029, 1023.473), stdev = 17.652
[info]   CI (99.9%): [936.058, 1072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3538.839 ±(99.9%) 323.273 B/op [Average]
[info]   (min, avg, max) = (3441.282, 3538.839, 3652.068), stdev = 83.953
[info]   CI (99.9%): [3215.566, 3862.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   932.089 ±(99.9%) 1404.554 MB/sec [Average]
[info]   (min, avg, max) = (664.153, 932.089, 1332.984), stdev = 364.758
[info]   CI (99.9%): [≈ 0, 2336.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3290.986 ±(99.9%) 5034.975 B/op [Average]
[info]   (min, avg, max) = (2327.065, 3290.986, 4764.498), stdev = 1307.567
[info]   CI (99.9%): [≈ 0, 8325.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312909.648 ops/s
[info] # Warmup Iteration   2: 674696.913 ops/s
[info] # Warmup Iteration   3: 760539.877 ops/s
[info] # Warmup Iteration   4: 740611.462 ops/s
[info] # Warmup Iteration   5: 760341.875 ops/s
[info] Iteration   1: 761625.583 ops/s
[info]                  ·gc.alloc.rate:                   687.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1420.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1383.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 759292.225 ops/s
[info]                  ·gc.alloc.rate:               695.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          1441.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1389.117 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 739153.718 ops/s
[info]                  ·gc.alloc.rate:               703.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          1497.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1426.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 836097.641 ops/s
[info]                  ·gc.alloc.rate:               748.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1262.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 837744.748 ops/s
[info]                  ·gc.alloc.rate:               750.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          1409.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1260.255 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   786782.783 ±(99.9%) 179439.804 ops/s [Average]
[info]   (min, avg, max) = (739153.718, 786782.783, 837744.748), stdev = 46599.947
[info]   CI (99.9%): [607342.979, 966222.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   716.887 ±(99.9%) 115.410 MB/sec [Average]
[info]   (min, avg, max) = (687.617, 716.887, 750.208), stdev = 29.971
[info]   CI (99.9%): [601.478, 832.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1435.324 ±(99.9%) 142.350 B/op [Average]
[info]   (min, avg, max) = (1408.166, 1435.324, 1497.023), stdev = 36.968
[info]   CI (99.9%): [1292.974, 1577.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.340 ±(99.9%) 2.108 MB/sec [Average]
[info]   (min, avg, max) = (669.546, 670.340, 670.864), stdev = 0.547
[info]   CI (99.9%): [668.232, 672.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1344.519 ±(99.9%) 298.838 B/op [Average]
[info]   (min, avg, max) = (1260.255, 1344.519, 1426.995), stdev = 77.607
[info]   CI (99.9%): [1045.681, 1643.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 794468.768 ops/s
[info] # Warmup Iteration   2: 3651631.268 ops/s
[info] # Warmup Iteration   3: 4144872.251 ops/s
[info] # Warmup Iteration   4: 4065579.610 ops/s
[info] # Warmup Iteration   5: 4122785.984 ops/s
[info] Iteration   1: 4236833.110 ops/s
[info]                  ·gc.alloc.rate:                   2556.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4273424.431 ops/s
[info]                  ·gc.alloc.rate:                   2551.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              939.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     739.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4214381.546 ops/s
[info]                  ·gc.alloc.rate:                   2557.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              955.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1000.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8349926.816 ops/s
[info]                  ·gc.alloc.rate:                   4898.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              923.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4704.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 8297789.774 ops/s
[info]                  ·gc.alloc.rate:                   4885.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              926.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4726.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     896.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   5874471.135 ±(99.9%) 8610615.926 ops/s [Average]
[info]   (min, avg, max) = (4214381.546, 5874471.135, 8349926.816), stdev = 2236149.612
[info]   CI (99.9%): [≈ 0, 14485087.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   3489.757 ±(99.9%) 4928.451 MB/sec [Average]
[info]   (min, avg, max) = (2551.167, 3489.757, 4898.566), stdev = 1279.903
[info]   CI (99.9%): [≈ 0, 8418.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   938.702 ±(99.9%) 53.577 B/op [Average]
[info]   (min, avg, max) = (923.287, 938.702, 955.040), stdev = 13.914
[info]   CI (99.9%): [885.125, 992.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   3360.765 ±(99.9%) 4878.524 MB/sec [Average]
[info]   (min, avg, max) = (2009.609, 3360.765, 4726.558), stdev = 1266.937
[info]   CI (99.9%): [≈ 0, 8239.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   904.053 ±(99.9%) 409.683 B/op [Average]
[info]   (min, avg, max) = (739.724, 904.053, 1000.614), stdev = 106.393
[info]   CI (99.9%): [494.370, 1313.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 1.688 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.258, 1.041), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 1.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.636 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.092, 0.387), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1683277.583 ops/s
[info] # Warmup Iteration   2: 7733828.818 ops/s
[info] # Warmup Iteration   3: 25958813.007 ops/s
[info] # Warmup Iteration   4: 26380244.044 ops/s
[info] # Warmup Iteration   5: 26297800.243 ops/s
[info] Iteration   1: 26214188.760 ops/s
[info]                  ·gc.alloc.rate:                   2339.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 26468275.719 ops/s
[info]                  ·gc.alloc.rate:                   2356.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 26298043.387 ops/s
[info]                  ·gc.alloc.rate:                   2326.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              139.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26545346.538 ops/s
[info]                  ·gc.alloc.rate:                   2399.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              142.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 26515627.422 ops/s
[info]                  ·gc.alloc.rate:                   2371.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   26408296.365 ±(99.9%) 557126.135 ops/s [Average]
[info]   (min, avg, max) = (26214188.760, 26408296.365, 26545346.538), stdev = 144683.888
[info]   CI (99.9%): [25851170.230, 26965422.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   2358.550 ±(99.9%) 109.492 MB/sec [Average]
[info]   (min, avg, max) = (2326.391, 2358.550, 2399.358), stdev = 28.435
[info]   CI (99.9%): [2249.059, 2468.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   140.548 ±(99.9%) 4.352 B/op [Average]
[info]   (min, avg, max) = (139.158, 140.548, 142.259), stdev = 1.130
[info]   CI (99.9%): [136.196, 144.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   2279.278 ±(99.9%) 1409.706 MB/sec [Average]
[info]   (min, avg, max) = (2008.700, 2279.278, 2681.355), stdev = 366.096
[info]   CI (99.9%): [869.572, 3688.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   135.772 ±(99.9%) 82.190 B/op [Average]
[info]   (min, avg, max) = (119.512, 135.772, 159.437), stdev = 21.344
[info]   CI (99.9%): [53.582, 217.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 5.996 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.733, 3.518), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.044, 0.211), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1452.141 ops/s
[info] # Warmup Iteration   2: 48134.790 ops/s
[info] # Warmup Iteration   3: 322345.377 ops/s
[info] # Warmup Iteration   4: 355605.511 ops/s
[info] # Warmup Iteration   5: 392070.448 ops/s
[info] Iteration   1: 397116.165 ops/s
[info]                  ·gc.alloc.rate:                   2797.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              11084.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10600.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.828 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 400578.582 ops/s
[info]                  ·gc.alloc.rate:                   2811.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              11042.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10512.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 397908.106 ops/s
[info]                  ·gc.alloc.rate:                   2829.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              11191.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10597.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 398806.749 ops/s
[info]                  ·gc.alloc.rate:                   2823.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              11140.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13253.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 401291.928 ops/s
[info]                  ·gc.alloc.rate:                   2867.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              11244.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10567.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   399140.306 ±(99.9%) 6786.545 ops/s [Average]
[info]   (min, avg, max) = (397116.165, 399140.306, 401291.928), stdev = 1762.444
[info]   CI (99.9%): [392353.761, 405926.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2825.744 ±(99.9%) 101.380 MB/sec [Average]
[info]   (min, avg, max) = (2797.107, 2825.744, 2867.201), stdev = 26.328
[info]   CI (99.9%): [2724.364, 2927.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11140.703 ±(99.9%) 311.635 B/op [Average]
[info]   (min, avg, max) = (11042.371, 11140.703, 11244.863), stdev = 80.931
[info]   CI (99.9%): [10829.068, 11452.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2816.861 ±(99.9%) 1167.481 MB/sec [Average]
[info]   (min, avg, max) = (2674.797, 2816.861, 3359.044), stdev = 303.191
[info]   CI (99.9%): [1649.380, 3984.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11106.246 ±(99.9%) 4624.180 B/op [Average]
[info]   (min, avg, max) = (10512.535, 11106.246, 13253.530), stdev = 1200.885
[info]   CI (99.9%): [6482.066, 15730.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.500 ±(99.9%) 3.729 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.500, 2.228), stdev = 0.968
[info]   CI (99.9%): [≈ 0, 4.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.979 ±(99.9%) 14.782 B/op [Average]
[info]   (min, avg, max) = (0.082, 1.979, 8.828), stdev = 3.839
[info]   CI (99.9%): [≈ 0, 16.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 10.000), stdev = 1.924
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676838.772 ops/s
[info] # Warmup Iteration   2: 1365661.337 ops/s
[info] # Warmup Iteration   3: 1471956.629 ops/s
[info] # Warmup Iteration   4: 1467784.437 ops/s
[info] # Warmup Iteration   5: 1451740.765 ops/s
[info] Iteration   1: 1475814.827 ops/s
[info]                  ·gc.alloc.rate:      45.016 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1476288.586 ops/s
[info]                  ·gc.alloc.rate:      45.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1470350.049 ops/s
[info]                  ·gc.alloc.rate:      44.844 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1470130.256 ops/s
[info]                  ·gc.alloc.rate:      44.836 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1471486.924 ops/s
[info]                  ·gc.alloc.rate:      44.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1472814.129 ±(99.9%) 11569.949 ops/s [Average]
[info]   (min, avg, max) = (1470130.256, 1472814.129, 1476288.586), stdev = 3004.679
[info]   CI (99.9%): [1461244.180, 1484384.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   44.923 ±(99.9%) 0.357 MB/sec [Average]
[info]   (min, avg, max) = (44.836, 44.923, 45.027), stdev = 0.093
[info]   CI (99.9%): [44.565, 45.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3228.629 ops/s
[info] # Warmup Iteration   2: 64662.174 ops/s
[info] # Warmup Iteration   3: 105219.238 ops/s
[info] # Warmup Iteration   4: 108213.867 ops/s
[info] # Warmup Iteration   5: 106920.920 ops/s
[info] Iteration   1: 109569.393 ops/s
[info]                  ·gc.alloc.rate:                   4007.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              57570.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4018.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57718.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 109923.638 ops/s
[info]                  ·gc.alloc.rate:                   4074.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              58324.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4036.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57785.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.596 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 110075.815 ops/s
[info]                  ·gc.alloc.rate:                   4083.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              58337.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4048.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57847.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 109830.180 ops/s
[info]                  ·gc.alloc.rate:                   4058.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              58156.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48523.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 107260.723 ops/s
[info]                  ·gc.alloc.rate:                   3994.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              58608.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59761.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   109331.950 ±(99.9%) 4514.469 ops/s [Average]
[info]   (min, avg, max) = (107260.723, 109331.950, 110075.815), stdev = 1172.393
[info]   CI (99.9%): [104817.481, 113846.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4043.634 ±(99.9%) 154.249 MB/sec [Average]
[info]   (min, avg, max) = (3994.308, 4043.634, 4083.009), stdev = 40.058
[info]   CI (99.9%): [3889.385, 4197.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   58199.489 ±(99.9%) 1490.088 B/op [Average]
[info]   (min, avg, max) = (57570.676, 58199.489, 58608.196), stdev = 386.971
[info]   CI (99.9%): [56709.401, 59689.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3912.586 ±(99.9%) 1135.402 MB/sec [Average]
[info]   (min, avg, max) = (3386.317, 3912.586, 4072.883), stdev = 294.860
[info]   CI (99.9%): [2777.184, 5047.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56327.519 ±(99.9%) 17119.353 B/op [Average]
[info]   (min, avg, max) = (48523.797, 56327.519, 59761.120), stdev = 4445.842
[info]   CI (99.9%): [39208.167, 73446.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.359 ±(99.9%) 0.510 B/op [Average]
[info]   (min, avg, max) = (0.297, 0.359, 0.596), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.095
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411026.112 ops/s
[info] # Warmup Iteration   2: 2082666.823 ops/s
[info] # Warmup Iteration   3: 2102180.002 ops/s
[info] # Warmup Iteration   4: 2010208.343 ops/s
[info] # Warmup Iteration   5: 2083860.711 ops/s
[info] Iteration   1: 2086786.394 ops/s
[info]                  ·gc.alloc.rate:               581.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 500.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2094392.023 ops/s
[info]                  ·gc.alloc.rate:                   580.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              435.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     498.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2086442.453 ops/s
[info]                  ·gc.alloc.rate:               600.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          452.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 501.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2095642.638 ops/s
[info]                  ·gc.alloc.rate:               586.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 499.032 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2094422.885 ops/s
[info]                  ·gc.alloc.rate:               587.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 499.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   2091537.279 ±(99.9%) 17419.474 ops/s [Average]
[info]   (min, avg, max) = (2086442.453, 2091537.279, 2095642.638), stdev = 4523.782
[info]   CI (99.9%): [2074117.805, 2108956.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   587.223 ±(99.9%) 30.111 MB/sec [Average]
[info]   (min, avg, max) = (580.056, 587.223, 600.072), stdev = 7.820
[info]   CI (99.9%): [557.112, 617.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   441.810 ±(99.9%) 24.515 B/op [Average]
[info]   (min, avg, max) = (435.826, 441.810, 452.548), stdev = 6.366
[info]   CI (99.9%): [417.295, 466.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.331 ±(99.9%) 2.613 MB/sec [Average]
[info]   (min, avg, max) = (663.585, 664.331, 665.233), stdev = 0.679
[info]   CI (99.9%): [661.718, 666.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   499.818 ±(99.9%) 4.082 B/op [Average]
[info]   (min, avg, max) = (498.585, 499.818, 501.238), stdev = 1.060
[info]   CI (99.9%): [495.737, 503.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608361.908 ops/s
[info] # Warmup Iteration   2: 1812321.675 ops/s
[info] # Warmup Iteration   3: 2010753.500 ops/s
[info] # Warmup Iteration   4: 2009895.165 ops/s
[info] # Warmup Iteration   5: 2006000.843 ops/s
[info] Iteration   1: 2000400.018 ops/s
[info]                  ·gc.alloc.rate:               563.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 525.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1936307.018 ops/s
[info]                  ·gc.alloc.rate:      525.147 MB/sec
[info]                  ·gc.alloc.rate.norm: 426.665 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1940797.574 ops/s
[info]                  ·gc.alloc.rate:               541.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541.824 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2012448.067 ops/s
[info]                  ·gc.alloc.rate:                   566.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     522.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2010460.171 ops/s
[info]                  ·gc.alloc.rate:               556.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 523.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1980082.570 ±(99.9%) 147167.317 ops/s [Average]
[info]   (min, avg, max) = (1936307.018, 1980082.570, 2012448.067), stdev = 38218.885
[info]   CI (99.9%): [1832915.253, 2127249.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   550.550 ±(99.9%) 66.335 MB/sec [Average]
[info]   (min, avg, max) = (525.147, 550.550, 566.410), stdev = 17.227
[info]   CI (99.9%): [484.215, 616.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   437.482 ±(99.9%) 26.157 B/op [Average]
[info]   (min, avg, max) = (426.665, 437.482, 443.177), stdev = 6.793
[info]   CI (99.9%): [411.325, 463.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.673 ±(99.9%) 1150.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.673, 668.472), stdev = 298.891
[info]   CI (99.9%): [≈ 0, 1685.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   422.719 ±(99.9%) 910.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 422.719, 541.824), stdev = 236.436
[info]   CI (99.9%): [≈ 0, 1333.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1084763.635 ops/s
[info] # Warmup Iteration   2: 1835642.667 ops/s
[info] # Warmup Iteration   3: 2008512.480 ops/s
[info] # Warmup Iteration   4: 2011430.111 ops/s
[info] # Warmup Iteration   5: 2012362.859 ops/s
[info] Iteration   1: 2013537.916 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2017314.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2019710.991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2003738.016 ops/s
[info]                  ·gc.alloc.rate:      4.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.522 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2013631.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2013586.607 ±(99.9%) 23454.744 ops/s [Average]
[info]   (min, avg, max) = (2003738.016, 2013586.607, 2019710.991), stdev = 6091.122
[info]   CI (99.9%): [1990131.863, 2037041.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.897 ±(99.9%) 7.720 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.897, 4.483), stdev = 2.005
[info]   CI (99.9%): [≈ 0, 8.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.705 ±(99.9%) 6.064 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.705, 3.522), stdev = 1.575
[info]   CI (99.9%): [≈ 0, 6.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7706.432 ops/s
[info] # Warmup Iteration   2: 40816.167 ops/s
[info] # Warmup Iteration   3: 55110.516 ops/s
[info] # Warmup Iteration   4: 52872.216 ops/s
[info] # Warmup Iteration   5: 56440.956 ops/s
[info] Iteration   1: 56473.777 ops/s
[info]                  ·gc.alloc.rate:                   1977.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              55075.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55768.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 57095.903 ops/s
[info]                  ·gc.alloc.rate:                   1973.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              54387.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36809.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 57183.616 ops/s
[info]                  ·gc.alloc.rate:                   1999.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              55019.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55161.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 57945.919 ops/s
[info]                  ·gc.alloc.rate:                   2008.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              54546.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54496.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 58290.080 ops/s
[info]                  ·gc.alloc.rate:                   2032.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              54876.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54282.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.562 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   57397.859 ±(99.9%) 2781.696 ops/s [Average]
[info]   (min, avg, max) = (56473.777, 57397.859, 58290.080), stdev = 722.398
[info]   CI (99.9%): [54616.163, 60179.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1998.103 ±(99.9%) 92.748 MB/sec [Average]
[info]   (min, avg, max) = (1973.631, 1998.103, 2032.389), stdev = 24.086
[info]   CI (99.9%): [1905.356, 2090.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54780.985 ±(99.9%) 1159.517 B/op [Average]
[info]   (min, avg, max) = (54387.233, 54780.985, 55075.254), stdev = 301.123
[info]   CI (99.9%): [53621.468, 55940.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.771 ±(99.9%) 1153.897 MB/sec [Average]
[info]   (min, avg, max) = (1335.745, 1871.771, 2010.388), stdev = 299.663
[info]   CI (99.9%): [717.874, 3025.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51303.693 ±(99.9%) 31281.728 B/op [Average]
[info]   (min, avg, max) = (36809.054, 51303.693, 55768.604), stdev = 8123.765
[info]   CI (99.9%): [20021.965, 82585.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 2.263 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.450, 1.479), stdev = 0.588
[info]   CI (99.9%): [≈ 0, 2.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.471 ±(99.9%) 63.164 B/op [Average]
[info]   (min, avg, max) = (0.562, 12.471, 41.209), stdev = 16.403
[info]   CI (99.9%): [≈ 0, 75.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110772.946 ops/s
[info] # Warmup Iteration   2: 227670.679 ops/s
[info] # Warmup Iteration   3: 265173.491 ops/s
[info] # Warmup Iteration   4: 269055.322 ops/s
[info] # Warmup Iteration   5: 270595.671 ops/s
[info] Iteration   1: 275044.632 ops/s
[info]                  ·gc.alloc.rate:                   1116.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              6388.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7663.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 276848.484 ops/s
[info]                  ·gc.alloc.rate:               1104.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          6275.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3807.915 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 275604.477 ops/s
[info]                  ·gc.alloc.rate:                   1113.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              6355.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7654.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 275081.637 ops/s
[info]                  ·gc.alloc.rate:                   1114.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              6376.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7676.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 275849.878 ops/s
[info]                  ·gc.alloc.rate:                   1094.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              6243.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3827.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   275685.821 ±(99.9%) 2830.602 ops/s [Average]
[info]   (min, avg, max) = (275044.632, 275685.821, 276848.484), stdev = 735.098
[info]   CI (99.9%): [272855.219, 278516.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1108.509 ±(99.9%) 35.778 MB/sec [Average]
[info]   (min, avg, max) = (1094.190, 1108.509, 1116.331), stdev = 9.292
[info]   CI (99.9%): [1072.731, 1144.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6327.812 ±(99.9%) 249.106 B/op [Average]
[info]   (min, avg, max) = (6243.003, 6327.812, 6388.118), stdev = 64.692
[info]   CI (99.9%): [6078.706, 6576.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.489 ±(99.9%) 1413.479 MB/sec [Average]
[info]   (min, avg, max) = (669.968, 1072.489, 1341.577), stdev = 367.076
[info]   CI (99.9%): [≈ 0, 2485.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6125.800 ±(99.9%) 8113.804 B/op [Average]
[info]   (min, avg, max) = (3807.915, 6125.800, 7676.096), stdev = 2107.129
[info]   CI (99.9%): [≈ 0, 14239.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.644 ±(99.9%) 5.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.115), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 5.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.673 ±(99.9%) 30.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.673, 17.771), stdev = 7.882
[info]   CI (99.9%): [≈ 0, 34.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1146.584 ops/s
[info] # Warmup Iteration   2: 23666.935 ops/s
[info] # Warmup Iteration   3: 50831.347 ops/s
[info] # Warmup Iteration   4: 49000.963 ops/s
[info] # Warmup Iteration   5: 50984.171 ops/s
[info] Iteration   1: 52326.044 ops/s
[info]                  ·gc.alloc.rate:                   2089.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              62840.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60089.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 52330.376 ops/s
[info]                  ·gc.alloc.rate:                   2095.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              63016.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60105.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52829.884 ops/s
[info]                  ·gc.alloc.rate:                   2101.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              62607.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59535.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52818.169 ops/s
[info]                  ·gc.alloc.rate:                   2124.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              63310.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79537.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 52525.718 ops/s
[info]                  ·gc.alloc.rate:               2112.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          63301.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60149.309 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   52566.038 ±(99.9%) 958.695 ops/s [Average]
[info]   (min, avg, max) = (52326.044, 52566.038, 52829.884), stdev = 248.970
[info]   CI (99.9%): [51607.343, 53524.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2104.801 ±(99.9%) 54.011 MB/sec [Average]
[info]   (min, avg, max) = (2089.243, 2104.801, 2124.622), stdev = 14.027
[info]   CI (99.9%): [2050.789, 2158.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63015.173 ±(99.9%) 1163.803 B/op [Average]
[info]   (min, avg, max) = (62607.972, 63015.173, 63310.038), stdev = 302.236
[info]   CI (99.9%): [61851.370, 64178.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2134.396 ±(99.9%) 1151.301 MB/sec [Average]
[info]   (min, avg, max) = (1997.803, 2134.396, 2669.197), stdev = 298.989
[info]   CI (99.9%): [983.095, 3285.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63883.422 ±(99.9%) 33710.376 B/op [Average]
[info]   (min, avg, max) = (59535.334, 63883.422, 79537.425), stdev = 8754.478
[info]   CI (99.9%): [30173.045, 97593.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 3.850 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.352), stdev = 1.000
[info]   CI (99.9%): [≈ 0, 4.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.648 ±(99.9%) 115.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.648, 70.754), stdev = 30.075
[info]   CI (99.9%): [≈ 0, 133.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33487.479 ops/s
[info] # Warmup Iteration   2: 145354.882 ops/s
[info] # Warmup Iteration   3: 172093.361 ops/s
[info] # Warmup Iteration   4: 160588.422 ops/s
[info] # Warmup Iteration   5: 160048.840 ops/s
[info] Iteration   1: 157994.302 ops/s
[info]                  ·gc.alloc.rate:                   1600.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              15942.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19871.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 156137.090 ops/s
[info]                  ·gc.alloc.rate:               1560.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          15723.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13436.223 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 160326.937 ops/s
[info]                  ·gc.alloc.rate:                   1609.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              15802.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13111.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 159087.590 ops/s
[info]                  ·gc.alloc.rate:                   1609.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              15919.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19859.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 159808.671 ops/s
[info]                  ·gc.alloc.rate:                   1588.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              15643.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13205.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   158670.918 ±(99.9%) 6411.233 ops/s [Average]
[info]   (min, avg, max) = (156137.090, 158670.918, 160326.937), stdev = 1664.977
[info]   CI (99.9%): [152259.685, 165082.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1593.654 ±(99.9%) 78.778 MB/sec [Average]
[info]   (min, avg, max) = (1560.488, 1593.654, 1609.755), stdev = 20.459
[info]   CI (99.9%): [1514.876, 1672.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15806.052 ±(99.9%) 490.021 B/op [Average]
[info]   (min, avg, max) = (15643.242, 15806.052, 15942.419), stdev = 127.257
[info]   CI (99.9%): [15316.031, 16296.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1602.480 ±(99.9%) 1401.511 MB/sec [Average]
[info]   (min, avg, max) = (1333.508, 1602.480, 2007.569), stdev = 363.968
[info]   CI (99.9%): [200.969, 3003.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15896.851 ±(99.9%) 13957.165 B/op [Average]
[info]   (min, avg, max) = (13111.532, 15896.851, 19871.032), stdev = 3624.632
[info]   CI (99.9%): [1939.686, 29854.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 1.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.666), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.679 ±(99.9%) 10.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.679, 6.539), stdev = 2.777
[info]   CI (99.9%): [≈ 0, 12.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164281.510 ops/s
[info] # Warmup Iteration   2: 490862.355 ops/s
[info] # Warmup Iteration   3: 522732.910 ops/s
[info] # Warmup Iteration   4: 533144.316 ops/s
[info] # Warmup Iteration   5: 536558.334 ops/s
[info] Iteration   1: 535505.285 ops/s
[info]                  ·gc.alloc.rate:                   739.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              2172.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1965.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 531943.537 ops/s
[info]                  ·gc.alloc.rate:               735.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          2176.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1980.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 533140.883 ops/s
[info]                  ·gc.alloc.rate:                   727.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              2147.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1976.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 520519.119 ops/s
[info]                  ·gc.alloc.rate:               719.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          2175.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2024.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 519515.204 ops/s
[info]                  ·gc.alloc.rate:               714.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          2164.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2028.197 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   528124.805 ±(99.9%) 28955.903 ops/s [Average]
[info]   (min, avg, max) = (519515.204, 528124.805, 535505.285), stdev = 7519.756
[info]   CI (99.9%): [499168.903, 557080.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   727.197 ±(99.9%) 40.259 MB/sec [Average]
[info]   (min, avg, max) = (714.442, 727.197, 739.094), stdev = 10.455
[info]   CI (99.9%): [686.938, 767.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2167.154 ±(99.9%) 45.990 B/op [Average]
[info]   (min, avg, max) = (2147.460, 2167.154, 2176.457), stdev = 11.943
[info]   CI (99.9%): [2121.165, 2213.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.332 ±(99.9%) 1.148 MB/sec [Average]
[info]   (min, avg, max) = (668.800, 669.332, 669.482), stdev = 0.298
[info]   CI (99.9%): [668.184, 670.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1995.019 ±(99.9%) 111.777 B/op [Average]
[info]   (min, avg, max) = (1965.646, 1995.019, 2028.197), stdev = 29.028
[info]   CI (99.9%): [1883.242, 2106.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.122), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209810.091 ops/s
[info] # Warmup Iteration   2: 536384.712 ops/s
[info] # Warmup Iteration   3: 561378.964 ops/s
[info] # Warmup Iteration   4: 580715.349 ops/s
[info] # Warmup Iteration   5: 572839.329 ops/s
[info] Iteration   1: 581715.256 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 581876.845 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 582198.019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 583838.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 580685.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   582062.818 ±(99.9%) 4401.283 ops/s [Average]
[info]   (min, avg, max) = (580685.155, 582062.818, 583838.815), stdev = 1142.999
[info]   CI (99.9%): [577661.535, 586464.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3273.486 ops/s
[info] # Warmup Iteration   2: 51119.681 ops/s
[info] # Warmup Iteration   3: 72049.337 ops/s
[info] # Warmup Iteration   4: 78596.336 ops/s
[info] # Warmup Iteration   5: 84412.348 ops/s
[info] Iteration   1: 87524.660 ops/s
[info]                  ·gc.alloc.rate:                   1613.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              29013.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23932.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 86843.156 ops/s
[info]                  ·gc.alloc.rate:                   1605.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              29088.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24144.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 87709.897 ops/s
[info]                  ·gc.alloc.rate:                   1637.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              29378.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35896.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 87788.419 ops/s
[info]                  ·gc.alloc.rate:                   1610.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              28871.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23915.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 86096.053 ops/s
[info]                  ·gc.alloc.rate:                   1590.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              29075.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24404.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   87192.437 ±(99.9%) 2761.604 ops/s [Average]
[info]   (min, avg, max) = (86096.053, 87192.437, 87788.419), stdev = 717.180
[info]   CI (99.9%): [84430.833, 89954.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1611.463 ±(99.9%) 65.697 MB/sec [Average]
[info]   (min, avg, max) = (1590.556, 1611.463, 1637.588), stdev = 17.061
[info]   CI (99.9%): [1545.766, 1677.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29085.650 ±(99.9%) 713.160 B/op [Average]
[info]   (min, avg, max) = (28871.498, 29085.650, 29378.943), stdev = 185.205
[info]   CI (99.9%): [28372.490, 29798.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1466.639 ±(99.9%) 1150.001 MB/sec [Average]
[info]   (min, avg, max) = (1330.868, 1466.639, 2000.876), stdev = 298.652
[info]   CI (99.9%): [316.638, 2616.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26458.588 ±(99.9%) 20330.047 B/op [Average]
[info]   (min, avg, max) = (23915.143, 26458.588, 35896.464), stdev = 5279.649
[info]   CI (99.9%): [6128.541, 46788.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.466 ±(99.9%) 2.325 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.466, 1.499), stdev = 0.604
[info]   CI (99.9%): [≈ 0, 2.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.426 ±(99.9%) 42.144 B/op [Average]
[info]   (min, avg, max) = (0.374, 8.426, 27.162), stdev = 10.945
[info]   CI (99.9%): [≈ 0, 50.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6109.651 ops/s
[info] # Warmup Iteration   2: 67919.636 ops/s
[info] # Warmup Iteration   3: 96084.773 ops/s
[info] # Warmup Iteration   4: 103706.681 ops/s
[info] # Warmup Iteration   5: 104030.887 ops/s
[info] Iteration   1: 104261.570 ops/s
[info]                  ·gc.alloc.rate:                   1633.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              24650.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20191.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 103953.589 ops/s
[info]                  ·gc.alloc.rate:                   1642.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              24865.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30382.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 104814.455 ops/s
[info]                  ·gc.alloc.rate:                   1630.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              24478.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20070.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 104397.093 ops/s
[info]                  ·gc.alloc.rate:                   1661.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              25044.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30148.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 104985.913 ops/s
[info]                  ·gc.alloc.rate:                   1642.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              24627.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19971.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   104482.524 ±(99.9%) 1610.229 ops/s [Average]
[info]   (min, avg, max) = (103953.589, 104482.524, 104985.913), stdev = 418.171
[info]   CI (99.9%): [102872.295, 106092.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1642.010 ±(99.9%) 46.795 MB/sec [Average]
[info]   (min, avg, max) = (1630.189, 1642.010, 1661.208), stdev = 12.152
[info]   CI (99.9%): [1595.215, 1688.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24733.315 ±(99.9%) 855.164 B/op [Average]
[info]   (min, avg, max) = (24478.063, 24733.315, 25044.106), stdev = 222.083
[info]   CI (99.9%): [23878.151, 25588.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1602.716 ±(99.9%) 1408.995 MB/sec [Average]
[info]   (min, avg, max) = (1332.259, 1602.716, 2007.289), stdev = 365.912
[info]   CI (99.9%): [193.721, 3011.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24152.978 ±(99.9%) 21490.617 B/op [Average]
[info]   (min, avg, max) = (19971.925, 24152.978, 30382.472), stdev = 5581.045
[info]   CI (99.9%): [2662.360, 45643.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 5.818 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.895, 3.540), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.531 ±(99.9%) 88.078 B/op [Average]
[info]   (min, avg, max) = (0.312, 13.531, 53.579), stdev = 22.874
[info]   CI (99.9%): [≈ 0, 101.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 13.000), stdev = 4.438
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5482.835 ops/s
[info] # Warmup Iteration   2: 74790.554 ops/s
[info] # Warmup Iteration   3: 142008.639 ops/s
[info] # Warmup Iteration   4: 149856.370 ops/s
[info] # Warmup Iteration   5: 152896.636 ops/s
[info] Iteration   1: 160088.437 ops/s
[info]                  ·gc.alloc.rate:                   776.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              7636.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6516.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 159520.743 ops/s
[info]                  ·gc.alloc.rate:               767.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          7572.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6539.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 159442.933 ops/s
[info]                  ·gc.alloc.rate:               775.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          7652.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6552.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 159471.285 ops/s
[info]                  ·gc.alloc.rate:                   768.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              7585.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6551.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 158923.600 ops/s
[info]                  ·gc.alloc.rate:               781.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          7738.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13174.657 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   159489.400 ±(99.9%) 1590.512 ops/s [Average]
[info]   (min, avg, max) = (158923.600, 159489.400, 160088.437), stdev = 413.051
[info]   CI (99.9%): [157898.887, 161079.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   774.035 ±(99.9%) 22.367 MB/sec [Average]
[info]   (min, avg, max) = (767.605, 774.035, 781.413), stdev = 5.809
[info]   CI (99.9%): [751.668, 796.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7637.164 ±(99.9%) 253.537 B/op [Average]
[info]   (min, avg, max) = (7572.825, 7637.164, 7738.357), stdev = 65.843
[info]   CI (99.9%): [7383.627, 7890.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.837 ±(99.9%) 1148.464 MB/sec [Average]
[info]   (min, avg, max) = (662.894, 796.837, 1330.366), stdev = 298.252
[info]   CI (99.9%): [≈ 0, 1945.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7866.968 ±(99.9%) 11425.337 B/op [Average]
[info]   (min, avg, max) = (6516.352, 7866.968, 13174.657), stdev = 2967.124
[info]   CI (99.9%): [≈ 0, 19292.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.123 ±(99.9%) 0.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.411), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31914.939 ops/s
[info] # Warmup Iteration   2: 273407.558 ops/s
[info] # Warmup Iteration   3: 328145.751 ops/s
[info] # Warmup Iteration   4: 352183.756 ops/s
[info] # Warmup Iteration   5: 353017.818 ops/s
[info] Iteration   1: 340132.524 ops/s
[info]                  ·gc.alloc.rate:                   1436.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              6649.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6190.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 340444.216 ops/s
[info]                  ·gc.alloc.rate:                   1434.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              6630.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6188.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 340000.002 ops/s
[info]                  ·gc.alloc.rate:                   1428.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              6612.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6201.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 341709.315 ops/s
[info]                  ·gc.alloc.rate:                   1474.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              6792.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9241.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 344029.395 ops/s
[info]                  ·gc.alloc.rate:                   1455.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              6659.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6107.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   341263.091 ±(99.9%) 6499.405 ops/s [Average]
[info]   (min, avg, max) = (340000.002, 341263.091, 344029.395), stdev = 1687.875
[info]   CI (99.9%): [334763.685, 347762.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1446.094 ±(99.9%) 73.102 MB/sec [Average]
[info]   (min, avg, max) = (1428.662, 1446.094, 1474.816), stdev = 18.984
[info]   CI (99.9%): [1372.992, 1519.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6668.994 ±(99.9%) 275.005 B/op [Average]
[info]   (min, avg, max) = (6612.765, 6668.994, 6792.721), stdev = 71.418
[info]   CI (99.9%): [6393.989, 6943.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1471.541 ±(99.9%) 1151.524 MB/sec [Average]
[info]   (min, avg, max) = (1334.952, 1471.541, 2006.483), stdev = 299.047
[info]   CI (99.9%): [320.017, 2623.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6785.788 ±(99.9%) 5288.044 B/op [Average]
[info]   (min, avg, max) = (6107.074, 6785.788, 9241.475), stdev = 1373.288
[info]   CI (99.9%): [1497.744, 12073.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.851 ±(99.9%) 6.331 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.851, 3.779), stdev = 1.644
[info]   CI (99.9%): [≈ 0, 7.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.939 ±(99.9%) 29.305 B/op [Average]
[info]   (min, avg, max) = (0.095, 3.939, 17.490), stdev = 7.611
[info]   CI (99.9%): [≈ 0, 33.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 9.000), stdev = 3.194
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 888.463 ops/s
[info] # Warmup Iteration   2: 19802.645 ops/s
[info] # Warmup Iteration   3: 42242.900 ops/s
[info] # Warmup Iteration   4: 44071.936 ops/s
[info] # Warmup Iteration   5: 46542.800 ops/s
[info] Iteration   1: 45980.740 ops/s
[info]                  ·gc.alloc.rate:                   2477.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              84787.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91457.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 45462.409 ops/s
[info]                  ·gc.alloc.rate:                   2504.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              86706.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92291.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.359 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 46465.222 ops/s
[info]                  ·gc.alloc.rate:               2531.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          85727.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67838.948 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 46092.581 ops/s
[info]                  ·gc.alloc.rate:                   2382.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              81365.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91365.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.106 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 52533.672 ops/s
[info]                  ·gc.alloc.rate:                   2290.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              68603.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60217.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   47306.925 ±(99.9%) 11335.387 ops/s [Average]
[info]   (min, avg, max) = (45462.409, 47306.925, 52533.672), stdev = 2943.764
[info]   CI (99.9%): [35971.538, 58642.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2437.193 ±(99.9%) 383.073 MB/sec [Average]
[info]   (min, avg, max) = (2290.004, 2437.193, 2531.108), stdev = 99.483
[info]   CI (99.9%): [2054.121, 2820.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81438.153 ±(99.9%) 28693.786 B/op [Average]
[info]   (min, avg, max) = (68603.490, 81438.153, 86706.899), stdev = 7451.685
[info]   CI (99.9%): [52744.366, 110131.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2405.389 ±(99.9%) 1402.189 MB/sec [Average]
[info]   (min, avg, max) = (2002.949, 2405.389, 2675.865), stdev = 364.144
[info]   CI (99.9%): [1003.200, 3807.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80634.134 ±(99.9%) 59303.034 B/op [Average]
[info]   (min, avg, max) = (60217.686, 80634.134, 92291.477), stdev = 15400.810
[info]   CI (99.9%): [21331.100, 139937.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.981 ±(99.9%) 6.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.981, 3.855), stdev = 1.645
[info]   CI (99.9%): [≈ 0, 8.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66.516 ±(99.9%) 218.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.516, 131.941), stdev = 56.690
[info]   CI (99.9%): [≈ 0, 284.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 10.000), stdev = 1.517
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30826.970 ops/s
[info] # Warmup Iteration   2: 181874.433 ops/s
[info] # Warmup Iteration   3: 229711.580 ops/s
[info] # Warmup Iteration   4: 256532.934 ops/s
[info] # Warmup Iteration   5: 248493.896 ops/s
[info] Iteration   1: 247927.611 ops/s
[info]                  ·gc.alloc.rate:                   879.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              5581.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4209.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 256079.815 ops/s
[info]                  ·gc.alloc.rate:                   907.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              5572.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4075.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 255973.513 ops/s
[info]                  ·gc.alloc.rate:               929.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          5714.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8171.201 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 256741.913 ops/s
[info]                  ·gc.alloc.rate:                   906.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              5555.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4081.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 256544.326 ops/s
[info]                  ·gc.alloc.rate:               902.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          5532.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4084.714 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   254653.436 ±(99.9%) 14529.623 ops/s [Average]
[info]   (min, avg, max) = (247927.611, 254653.436, 256741.913), stdev = 3773.297
[info]   CI (99.9%): [240123.813, 269183.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   904.934 ±(99.9%) 68.524 MB/sec [Average]
[info]   (min, avg, max) = (879.367, 904.934, 929.388), stdev = 17.796
[info]   CI (99.9%): [836.410, 973.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5591.431 ±(99.9%) 274.264 B/op [Average]
[info]   (min, avg, max) = (5532.709, 5591.431, 5714.402), stdev = 71.226
[info]   CI (99.9%): [5317.167, 5865.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.539 ±(99.9%) 1143.937 MB/sec [Average]
[info]   (min, avg, max) = (663.191, 797.539, 1328.961), stdev = 297.077
[info]   CI (99.9%): [≈ 0, 1941.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4924.513 ±(99.9%) 6992.054 B/op [Average]
[info]   (min, avg, max) = (4075.562, 4924.513, 8171.201), stdev = 1815.814
[info]   CI (99.9%): [≈ 0, 11916.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.132), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271982.462 ops/s
[info] # Warmup Iteration   2: 593847.947 ops/s
[info] # Warmup Iteration   3: 634000.780 ops/s
[info] # Warmup Iteration   4: 643802.673 ops/s
[info] # Warmup Iteration   5: 669871.233 ops/s
[info] Iteration   1: 669293.315 ops/s
[info]                  ·gc.alloc.rate:                   751.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1768.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 648464.063 ops/s
[info]                  ·gc.alloc.rate:                   745.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              1809.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3248.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 648590.463 ops/s
[info]                  ·gc.alloc.rate:               735.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          1784.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1624.591 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 672561.317 ops/s
[info]                  ·gc.alloc.rate:               758.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          1774.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1566.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 649382.244 ops/s
[info]                  ·gc.alloc.rate:                   730.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1770.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1623.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   657658.280 ±(99.9%) 46873.831 ops/s [Average]
[info]   (min, avg, max) = (648464.063, 657658.280, 672561.317), stdev = 12172.985
[info]   CI (99.9%): [610784.450, 704532.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   744.377 ±(99.9%) 44.761 MB/sec [Average]
[info]   (min, avg, max) = (730.411, 744.377, 758.604), stdev = 11.624
[info]   CI (99.9%): [699.616, 789.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1781.444 ±(99.9%) 65.370 B/op [Average]
[info]   (min, avg, max) = (1768.203, 1781.444, 1809.770), stdev = 16.976
[info]   CI (99.9%): [1716.074, 1846.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.211 ±(99.9%) 1151.857 MB/sec [Average]
[info]   (min, avg, max) = (668.855, 803.211, 1338.318), stdev = 299.134
[info]   CI (99.9%): [≈ 0, 1955.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1927.095 ±(99.9%) 2845.560 B/op [Average]
[info]   (min, avg, max) = (1566.674, 1927.095, 3248.132), stdev = 738.983
[info]   CI (99.9%): [≈ 0, 4772.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.120), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252011.151 ops/s
[info] # Warmup Iteration   2: 722391.434 ops/s
[info] # Warmup Iteration   3: 764883.311 ops/s
[info] # Warmup Iteration   4: 763792.723 ops/s
[info] # Warmup Iteration   5: 764107.122 ops/s
[info] Iteration   1: 762748.745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 762614.176 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 759868.469 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 760179.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 761991.793 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   761480.479 ±(99.9%) 5254.079 ops/s [Average]
[info]   (min, avg, max) = (759868.469, 761480.479, 762748.745), stdev = 1364.468
[info]   CI (99.9%): [756226.400, 766734.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2039.079 ops/s
[info] # Warmup Iteration   2: 45233.397 ops/s
[info] # Warmup Iteration   3: 71567.584 ops/s
[info] # Warmup Iteration   4: 86349.689 ops/s
[info] # Warmup Iteration   5: 91143.441 ops/s
[info] Iteration   1: 85599.586 ops/s
[info]                  ·gc.alloc.rate:                   1744.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              32027.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36736.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 91526.646 ops/s
[info]                  ·gc.alloc.rate:                   1444.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              24826.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22995.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.824 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 92739.612 ops/s
[info]                  ·gc.alloc.rate:                   1459.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              24762.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22666.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 90284.602 ops/s
[info]                  ·gc.alloc.rate:                   1431.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              24944.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23269.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 93035.180 ops/s
[info]                  ·gc.alloc.rate:                   1467.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              24823.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22583.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   90637.125 ±(99.9%) 11626.049 ops/s [Average]
[info]   (min, avg, max) = (85599.586, 90637.125, 93035.180), stdev = 3019.248
[info]   CI (99.9%): [79011.076, 102263.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1509.525 ±(99.9%) 508.192 MB/sec [Average]
[info]   (min, avg, max) = (1431.547, 1509.525, 1744.287), stdev = 131.976
[info]   CI (99.9%): [1001.333, 2017.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26277.077 ±(99.9%) 12381.525 B/op [Average]
[info]   (min, avg, max) = (24762.557, 26277.077, 32027.829), stdev = 3215.443
[info]   CI (99.9%): [13895.552, 38658.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.076 ±(99.9%) 1144.465 MB/sec [Average]
[info]   (min, avg, max) = (1335.419, 1469.076, 2000.746), stdev = 297.214
[info]   CI (99.9%): [324.611, 2613.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   25650.282 ±(99.9%) 23887.780 B/op [Average]
[info]   (min, avg, max) = (22583.223, 25650.282, 36736.818), stdev = 6203.581
[info]   CI (99.9%): [1762.502, 49538.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.098 ±(99.9%) 7.295 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 1.098, 4.470), stdev = 1.894
[info]   CI (99.9%): [≈ 0, 8.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.999 ±(99.9%) 125.221 B/op [Average]
[info]   (min, avg, max) = (2.465, 18.999, 76.824), stdev = 32.519
[info]   CI (99.9%): [≈ 0, 144.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 11.000), stdev = 3.536
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9926.734 ops/s
[info] # Warmup Iteration   2: 86726.375 ops/s
[info] # Warmup Iteration   3: 120865.979 ops/s
[info] # Warmup Iteration   4: 114500.221 ops/s
[info] # Warmup Iteration   5: 120888.728 ops/s
[info] Iteration   1: 121373.282 ops/s
[info]                  ·gc.alloc.rate:                   1977.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              25624.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25953.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 121000.241 ops/s
[info]                  ·gc.alloc.rate:                   1982.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              25780.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26094.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 122122.841 ops/s
[info]                  ·gc.alloc.rate:                   1985.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              25573.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25889.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 122765.262 ops/s
[info]                  ·gc.alloc.rate:                   1964.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              25182.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17183.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 112321.445 ops/s
[info]                  ·gc.alloc.rate:                   2208.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              30937.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37513.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   119916.614 ±(99.9%) 16558.324 ops/s [Average]
[info]   (min, avg, max) = (112321.445, 119916.614, 122765.262), stdev = 4300.144
[info]   CI (99.9%): [103358.291, 136474.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2023.456 ±(99.9%) 399.134 MB/sec [Average]
[info]   (min, avg, max) = (1964.386, 2023.456, 2208.325), stdev = 103.654
[info]   CI (99.9%): [1624.322, 2422.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26619.714 ±(99.9%) 9333.693 B/op [Average]
[info]   (min, avg, max) = (25182.220, 26619.714, 30937.833), stdev = 2423.930
[info]   CI (99.9%): [17286.021, 35953.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2007.340 ±(99.9%) 1820.599 MB/sec [Average]
[info]   (min, avg, max) = (1340.429, 2007.340, 2677.691), stdev = 472.804
[info]   CI (99.9%): [186.742, 3827.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26526.777 ±(99.9%) 27829.218 B/op [Average]
[info]   (min, avg, max) = (17183.470, 26526.777, 37513.481), stdev = 7227.159
[info]   CI (99.9%): [≈ 0, 54355.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.652 ±(99.9%) 3.615 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.652, 2.155), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.381 ±(99.9%) 46.338 B/op [Average]
[info]   (min, avg, max) = (0.270, 8.381, 27.622), stdev = 12.034
[info]   CI (99.9%): [≈ 0, 54.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.280
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26454.741 ops/s
[info] # Warmup Iteration   2: 115553.496 ops/s
[info] # Warmup Iteration   3: 195413.767 ops/s
[info] # Warmup Iteration   4: 213016.337 ops/s
[info] # Warmup Iteration   5: 208976.439 ops/s
[info] Iteration   1: 213303.171 ops/s
[info]                  ·gc.alloc.rate:               882.561 MB/sec
[info]                  ·gc.alloc.rate.norm:          6511.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4880.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 212709.069 ops/s
[info]                  ·gc.alloc.rate:                   903.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              6683.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9798.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 212180.947 ops/s
[info]                  ·gc.alloc.rate:               886.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          6576.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4916.420 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 207213.068 ops/s
[info]                  ·gc.alloc.rate:                   869.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              6605.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5034.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 206814.231 ops/s
[info]                  ·gc.alloc.rate:               864.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          6580.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5051.760 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   210444.097 ±(99.9%) 12167.140 ops/s [Average]
[info]   (min, avg, max) = (206814.231, 210444.097, 213303.171), stdev = 3159.768
[info]   CI (99.9%): [198276.957, 222611.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   881.347 ±(99.9%) 58.677 MB/sec [Average]
[info]   (min, avg, max) = (864.618, 881.347, 903.317), stdev = 15.238
[info]   CI (99.9%): [822.670, 940.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6591.402 ±(99.9%) 238.804 B/op [Average]
[info]   (min, avg, max) = (6511.888, 6591.402, 6683.648), stdev = 62.017
[info]   CI (99.9%): [6352.597, 6830.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   795.043 ±(99.9%) 1139.305 MB/sec [Average]
[info]   (min, avg, max) = (661.474, 795.043, 1324.317), stdev = 295.874
[info]   CI (99.9%): [≈ 0, 1934.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5936.320 ±(99.9%) 8318.729 B/op [Average]
[info]   (min, avg, max) = (4880.618, 5936.320, 9798.624), stdev = 2160.347
[info]   CI (99.9%): [≈ 0, 14255.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 0.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.462), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68112.016 ops/s
[info] # Warmup Iteration   2: 166583.982 ops/s
[info] # Warmup Iteration   3: 247753.622 ops/s
[info] # Warmup Iteration   4: 279391.680 ops/s
[info] # Warmup Iteration   5: 276852.395 ops/s
[info] Iteration   1: 279485.024 ops/s
[info]                  ·gc.alloc.rate:               1011.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          5693.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3743.749 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 278222.367 ops/s
[info]                  ·gc.alloc.rate:                   1023.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              5786.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7523.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 275111.602 ops/s
[info]                  ·gc.alloc.rate:               1007.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          5762.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3805.278 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 278424.389 ops/s
[info]                  ·gc.alloc.rate:                   1034.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              5850.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7523.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 268728.733 ops/s
[info]                  ·gc.alloc.rate:                   1104.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              6469.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3901.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   275994.423 ±(99.9%) 16853.154 ops/s [Average]
[info]   (min, avg, max) = (268728.733, 275994.423, 279485.024), stdev = 4376.711
[info]   CI (99.9%): [259141.269, 292847.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1036.240 ±(99.9%) 153.100 MB/sec [Average]
[info]   (min, avg, max) = (1007.388, 1036.240, 1104.691), stdev = 39.760
[info]   CI (99.9%): [883.140, 1189.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5912.673 ±(99.9%) 1218.586 B/op [Average]
[info]   (min, avg, max) = (5693.815, 5912.673, 6469.874), stdev = 316.463
[info]   CI (99.9%): [4694.088, 7131.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   931.447 ±(99.9%) 1402.929 MB/sec [Average]
[info]   (min, avg, max) = (664.810, 931.447, 1330.904), stdev = 364.336
[info]   CI (99.9%): [≈ 0, 2334.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5299.443 ±(99.9%) 7820.541 B/op [Average]
[info]   (min, avg, max) = (3743.749, 5299.443, 7523.557), stdev = 2030.970
[info]   CI (99.9%): [≈ 0, 13119.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.594 ±(99.9%) 4.979 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.594, 2.907), stdev = 1.293
[info]   CI (99.9%): [≈ 0, 5.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.475 ±(99.9%) 29.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.475, 17.023), stdev = 7.574
[info]   CI (99.9%): [≈ 0, 32.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5268.933 ops/s
[info] # Warmup Iteration   2: 51467.094 ops/s
[info] # Warmup Iteration   3: 99190.941 ops/s
[info] # Warmup Iteration   4: 84213.617 ops/s
[info] # Warmup Iteration   5: 99366.625 ops/s
[info] Iteration   1: 100946.151 ops/s
[info]                  ·gc.alloc.rate:                   3275.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              51072.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3324.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51832.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 98910.370 ops/s
[info]                  ·gc.alloc.rate:                   3194.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              50826.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42504.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 100879.147 ops/s
[info]                  ·gc.alloc.rate:               3256.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          50801.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3353.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52321.756 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 100988.990 ops/s
[info]                  ·gc.alloc.rate:                   3314.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              51635.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52472.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 101855.886 ops/s
[info]                  ·gc.alloc.rate:                   3314.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              51210.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41760.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   100716.109 ±(99.9%) 4180.100 ops/s [Average]
[info]   (min, avg, max) = (98910.370, 100716.109, 101855.886), stdev = 1085.559
[info]   CI (99.9%): [96536.009, 104896.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3271.086 ±(99.9%) 191.709 MB/sec [Average]
[info]   (min, avg, max) = (3194.283, 3271.086, 3314.682), stdev = 49.786
[info]   CI (99.9%): [3079.376, 3462.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51109.272 ±(99.9%) 1310.933 B/op [Average]
[info]   (min, avg, max) = (50801.183, 51109.272, 51635.598), stdev = 340.445
[info]   CI (99.9%): [49798.339, 52420.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3084.137 ±(99.9%) 1397.485 MB/sec [Average]
[info]   (min, avg, max) = (2671.279, 3084.137, 3368.134), stdev = 362.922
[info]   CI (99.9%): [1686.652, 4481.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48178.386 ±(99.9%) 21296.441 B/op [Average]
[info]   (min, avg, max) = (41760.230, 48178.386, 52472.921), stdev = 5530.618
[info]   CI (99.9%): [26881.945, 69474.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 1.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.604), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.143 ±(99.9%) 15.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.143, 9.413), stdev = 4.070
[info]   CI (99.9%): [≈ 0, 17.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61654.638 ops/s
[info] # Warmup Iteration   2: 201311.741 ops/s
[info] # Warmup Iteration   3: 244529.211 ops/s
[info] # Warmup Iteration   4: 248080.007 ops/s
[info] # Warmup Iteration   5: 247160.168 ops/s
[info] Iteration   1: 249372.574 ops/s
[info]                  ·gc.alloc.rate:                   1724.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              10884.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12659.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 245943.718 ops/s
[info]                  ·gc.alloc.rate:                   1659.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              10621.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8559.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 243360.583 ops/s
[info]                  ·gc.alloc.rate:                   1652.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              10689.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8624.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 248261.811 ops/s
[info]                  ·gc.alloc.rate:               1717.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          10883.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12668.653 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 252945.486 ops/s
[info]                  ·gc.alloc.rate:                   1709.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              10635.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8289.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   247976.834 ±(99.9%) 13905.055 ops/s [Average]
[info]   (min, avg, max) = (243360.583, 247976.834, 252945.486), stdev = 3611.099
[info]   CI (99.9%): [234071.779, 261881.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1692.733 ±(99.9%) 129.716 MB/sec [Average]
[info]   (min, avg, max) = (1652.919, 1692.733, 1724.546), stdev = 33.687
[info]   CI (99.9%): [1563.018, 1822.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10742.996 ±(99.9%) 505.277 B/op [Average]
[info]   (min, avg, max) = (10621.846, 10742.996, 10884.599), stdev = 131.219
[info]   CI (99.9%): [10237.720, 11248.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1601.591 ±(99.9%) 1408.184 MB/sec [Average]
[info]   (min, avg, max) = (1332.259, 1601.591, 2005.716), stdev = 365.701
[info]   CI (99.9%): [193.407, 3009.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10160.440 ±(99.9%) 8813.442 B/op [Average]
[info]   (min, avg, max) = (8289.859, 10160.440, 12668.653), stdev = 2288.823
[info]   CI (99.9%): [1346.998, 18973.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.902 ±(99.9%) 7.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.902, 4.218), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 8.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.772 ±(99.9%) 45.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.772, 26.992), stdev = 11.872
[info]   CI (99.9%): [≈ 0, 51.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.183
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70247.300 ops/s
[info] # Warmup Iteration   2: 665404.853 ops/s
[info] # Warmup Iteration   3: 756048.750 ops/s
[info] # Warmup Iteration   4: 748267.754 ops/s
[info] # Warmup Iteration   5: 747653.064 ops/s
[info] Iteration   1: 755052.535 ops/s
[info]                  ·gc.alloc.rate:      399.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 751294.777 ops/s
[info]                  ·gc.alloc.rate:               418.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1383.662 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 745509.603 ops/s
[info]                  ·gc.alloc.rate:      397.752 MB/sec
[info]                  ·gc.alloc.rate.norm: 839.687 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 751417.840 ops/s
[info]                  ·gc.alloc.rate:                   410.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              859.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1383.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 743561.953 ops/s
[info]                  ·gc.alloc.rate:                   406.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   749367.342 ±(99.9%) 18145.652 ops/s [Average]
[info]   (min, avg, max) = (743561.953, 749367.342, 755052.535), stdev = 4712.368
[info]   CI (99.9%): [731221.689, 767512.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   406.571 ±(99.9%) 32.978 MB/sec [Average]
[info]   (min, avg, max) = (397.752, 406.571, 418.668), stdev = 8.564
[info]   CI (99.9%): [373.593, 439.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   853.934 ±(99.9%) 69.565 B/op [Average]
[info]   (min, avg, max) = (832.001, 853.934, 877.044), stdev = 18.066
[info]   CI (99.9%): [784.369, 923.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.614 ±(99.9%) 1394.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.614, 662.092), stdev = 362.058
[info]   CI (99.9%): [≈ 0, 1790.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   833.731 ±(99.9%) 2930.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 833.731, 1401.581), stdev = 761.125
[info]   CI (99.9%): [≈ 0, 3764.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.044), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254293.964 ops/s
[info] # Warmup Iteration   2: 788703.303 ops/s
[info] # Warmup Iteration   3: 848339.392 ops/s
[info] # Warmup Iteration   4: 887073.690 ops/s
[info] # Warmup Iteration   5: 892393.947 ops/s
[info] Iteration   1: 871102.481 ops/s
[info]                  ·gc.alloc.rate:                   477.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 860763.605 ops/s
[info]                  ·gc.alloc.rate:                   475.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              870.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1220.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 865452.955 ops/s
[info]                  ·gc.alloc.rate:      457.513 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 862598.845 ops/s
[info]                  ·gc.alloc.rate:               472.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          862.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1217.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 855511.951 ops/s
[info]                  ·gc.alloc.rate:               472.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1228.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   863085.967 ±(99.9%) 22192.499 ops/s [Average]
[info]   (min, avg, max) = (855511.951, 863085.967, 871102.481), stdev = 5763.321
[info]   CI (99.9%): [840893.469, 885278.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   471.298 ±(99.9%) 30.574 MB/sec [Average]
[info]   (min, avg, max) = (457.513, 471.298, 477.261), stdev = 7.940
[info]   CI (99.9%): [440.723, 501.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   859.391 ±(99.9%) 60.781 B/op [Average]
[info]   (min, avg, max) = (832.000, 859.391, 870.206), stdev = 15.785
[info]   CI (99.9%): [798.610, 920.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   502.921 ±(99.9%) 1113.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.921, 667.789), stdev = 289.151
[info]   CI (99.9%): [≈ 0, 1616.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   918.229 ±(99.9%) 2038.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 918.229, 1228.524), stdev = 529.286
[info]   CI (99.9%): [≈ 0, 2956.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.038), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334784.557 ops/s
[info] # Warmup Iteration   2: 801859.955 ops/s
[info] # Warmup Iteration   3: 919046.384 ops/s
[info] # Warmup Iteration   4: 918981.504 ops/s
[info] # Warmup Iteration   5: 919036.882 ops/s
[info] Iteration   1: 915285.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 902569.532 ops/s
[info]                  ·gc.alloc.rate:      54.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 95.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 919080.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 918854.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 919111.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   914980.401 ±(99.9%) 27432.350 ops/s [Average]
[info]   (min, avg, max) = (902569.532, 914980.401, 919111.944), stdev = 7124.094
[info]   CI (99.9%): [887548.051, 942412.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.901 ±(99.9%) 93.855 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 10.901, 54.502), stdev = 24.374
[info]   CI (99.9%): [≈ 0, 104.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   19.007 ±(99.9%) 163.651 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 19.007, 95.033), stdev = 42.500
[info]   CI (99.9%): [≈ 0, 182.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6237.660 ops/s
[info] # Warmup Iteration   2: 28699.139 ops/s
[info] # Warmup Iteration   3: 40421.380 ops/s
[info] # Warmup Iteration   4: 37561.929 ops/s
[info] # Warmup Iteration   5: 37192.109 ops/s
[info] Iteration   1: 36952.970 ops/s
[info]                  ·gc.alloc.rate:                   1884.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              80275.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84887.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 39980.335 ops/s
[info]                  ·gc.alloc.rate:                   1887.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              74279.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78224.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 39221.802 ops/s
[info]                  ·gc.alloc.rate:                   1857.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              74516.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79719.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 39020.927 ops/s
[info]                  ·gc.alloc.rate:                   1819.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              73387.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53468.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38987.364 ops/s
[info]                  ·gc.alloc.rate:                   1827.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              73773.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80362.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   38832.679 ±(99.9%) 4331.420 ops/s [Average]
[info]   (min, avg, max) = (36952.970, 38832.679, 39980.335), stdev = 1124.856
[info]   CI (99.9%): [34501.260, 43164.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1855.348 ±(99.9%) 120.719 MB/sec [Average]
[info]   (min, avg, max) = (1819.656, 1855.348, 1887.386), stdev = 31.350
[info]   CI (99.9%): [1734.630, 1976.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75246.527 ±(99.9%) 10957.167 B/op [Average]
[info]   (min, avg, max) = (73387.276, 75246.527, 80275.864), stdev = 2845.542
[info]   CI (99.9%): [64289.360, 86203.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1856.857 ±(99.9%) 1143.251 MB/sec [Average]
[info]   (min, avg, max) = (1325.768, 1856.857, 1993.082), stdev = 296.899
[info]   CI (99.9%): [713.606, 3000.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75332.494 ±(99.9%) 48026.294 B/op [Average]
[info]   (min, avg, max) = (53468.617, 75332.494, 84887.021), stdev = 12472.276
[info]   CI (99.9%): [27306.200, 123358.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.284 ±(99.9%) 9.187 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.284, 5.543), stdev = 2.386
[info]   CI (99.9%): [≈ 0, 10.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54.180 ±(99.9%) 392.226 B/op [Average]
[info]   (min, avg, max) = (0.840, 54.180, 236.084), stdev = 101.860
[info]   CI (99.9%): [≈ 0, 446.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 18.000), stdev = 5.148
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42617.285 ops/s
[info] # Warmup Iteration   2: 390151.441 ops/s
[info] # Warmup Iteration   3: 1069841.802 ops/s
[info] # Warmup Iteration   4: 1138976.613 ops/s
[info] # Warmup Iteration   5: 1126517.327 ops/s
[info] Iteration   1: 1136399.155 ops/s
[info]                  ·gc.alloc.rate:                   2591.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              3589.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3687.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.361 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1123355.145 ops/s
[info]                  ·gc.alloc.rate:                   2566.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              3595.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3718.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1123531.423 ops/s
[info]                  ·gc.alloc.rate:                   2580.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              3614.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3722.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1134776.407 ops/s
[info]                  ·gc.alloc.rate:                   2605.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              3613.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2772.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1155548.979 ops/s
[info]                  ·gc.alloc.rate:               2679.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          3649.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3641.825 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   1134722.222 ±(99.9%) 50611.190 ops/s [Average]
[info]   (min, avg, max) = (1123355.145, 1134722.222, 1155548.979), stdev = 13143.565
[info]   CI (99.9%): [1084111.032, 1185333.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2604.681 ±(99.9%) 169.671 MB/sec [Average]
[info]   (min, avg, max) = (2566.772, 2604.681, 2679.274), stdev = 44.063
[info]   CI (99.9%): [2435.010, 2774.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3612.443 ±(99.9%) 90.053 B/op [Average]
[info]   (min, avg, max) = (3589.188, 3612.443, 3649.288), stdev = 23.386
[info]   CI (99.9%): [3522.391, 3702.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2529.343 ±(99.9%) 1142.550 MB/sec [Average]
[info]   (min, avg, max) = (1998.726, 2529.343, 2673.794), stdev = 296.717
[info]   CI (99.9%): [1386.793, 3671.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3508.408 ±(99.9%) 1589.723 B/op [Average]
[info]   (min, avg, max) = (2772.133, 3508.408, 3722.332), stdev = 412.846
[info]   CI (99.9%): [1918.685, 5098.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.973 ±(99.9%) 7.801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.973, 4.593), stdev = 2.026
[info]   CI (99.9%): [≈ 0, 8.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.348 ±(99.9%) 10.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.348, 6.361), stdev = 2.805
[info]   CI (99.9%): [≈ 0, 12.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53806.247 ops/s
[info] # Warmup Iteration   2: 1225584.554 ops/s
[info] # Warmup Iteration   3: 1774337.672 ops/s
[info] # Warmup Iteration   4: 1864452.811 ops/s
[info] # Warmup Iteration   5: 1871374.244 ops/s
[info] Iteration   1: 1852851.538 ops/s
[info]                  ·gc.alloc.rate:               1168.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          992.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1128.866 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1846785.165 ops/s
[info]                  ·gc.alloc.rate:                   1167.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              994.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1134.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1866902.631 ops/s
[info]                  ·gc.alloc.rate:               1145.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          965.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1857056.836 ops/s
[info]                  ·gc.alloc.rate:                   1153.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              977.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1131.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1853713.912 ops/s
[info]                  ·gc.alloc.rate:                   1150.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              977.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1135.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1855462.017 ±(99.9%) 28465.437 ops/s [Average]
[info]   (min, avg, max) = (1846785.165, 1855462.017, 1866902.631), stdev = 7392.384
[info]   CI (99.9%): [1826996.580, 1883927.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1157.177 ±(99.9%) 40.817 MB/sec [Average]
[info]   (min, avg, max) = (1145.313, 1157.177, 1168.956), stdev = 10.600
[info]   CI (99.9%): [1116.360, 1197.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   981.431 ±(99.9%) 46.747 B/op [Average]
[info]   (min, avg, max) = (965.535, 981.431, 994.819), stdev = 12.140
[info]   CI (99.9%): [934.684, 1028.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.283 ±(99.9%) 1149.119 MB/sec [Average]
[info]   (min, avg, max) = (666.476, 1200.283, 1337.574), stdev = 298.423
[info]   CI (99.9%): [51.164, 2349.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1018.643 ±(99.9%) 983.314 B/op [Average]
[info]   (min, avg, max) = (561.860, 1018.643, 1135.683), stdev = 255.364
[info]   CI (99.9%): [35.329, 2001.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 2.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.249), stdev = 0.554
[info]   CI (99.9%): [≈ 0, 2.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.219 ±(99.9%) 1.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.219, 1.060), stdev = 0.470
[info]   CI (99.9%): [≈ 0, 2.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2466915.821 ops/s
[info] # Warmup Iteration   2: 8374922.873 ops/s
[info] # Warmup Iteration   3: 9726979.244 ops/s
[info] # Warmup Iteration   4: 9780848.432 ops/s
[info] # Warmup Iteration   5: 9738488.282 ops/s
[info] Iteration   1: 9715105.699 ops/s
[info]                  ·gc.alloc.rate:               308.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82.881 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 9794810.267 ops/s
[info]                  ·gc.alloc.rate:      298.800 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9691708.407 ops/s
[info]                  ·gc.alloc.rate:               307.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83.082 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 9654838.716 ops/s
[info]                  ·gc.alloc.rate:      294.469 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9628821.677 ops/s
[info]                  ·gc.alloc.rate:                   314.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   9697056.953 ±(99.9%) 246174.131 ops/s [Average]
[info]   (min, avg, max) = (9628821.677, 9697056.953, 9794810.267), stdev = 63930.640
[info]   CI (99.9%): [9450882.822, 9943231.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   304.743 ±(99.9%) 30.612 MB/sec [Average]
[info]   (min, avg, max) = (294.469, 304.743, 314.157), stdev = 7.950
[info]   CI (99.9%): [274.131, 335.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.463 ±(99.9%) 5.558 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.463, 51.349), stdev = 1.443
[info]   CI (99.9%): [43.906, 55.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.492 ±(99.9%) 1215.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.492, 669.192), stdev = 315.624
[info]   CI (99.9%): [≈ 0, 1553.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   55.069 ±(99.9%) 197.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.069, 109.379), stdev = 51.413
[info]   CI (99.9%): [≈ 0, 253.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2056.227 ops/s
[info] # Warmup Iteration   2: 173705.924 ops/s
[info] # Warmup Iteration   3: 480984.285 ops/s
[info] # Warmup Iteration   4: 496931.959 ops/s
[info] # Warmup Iteration   5: 498441.142 ops/s
[info] Iteration   1: 499806.652 ops/s
[info]                  ·gc.alloc.rate:                   2152.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              6778.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6310.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.146 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 492261.803 ops/s
[info]                  ·gc.alloc.rate:                   2164.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              6920.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6406.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 502904.950 ops/s
[info]                  ·gc.alloc.rate:                   2171.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              6792.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6262.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 490727.673 ops/s
[info]                  ·gc.alloc.rate:                   2118.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              6794.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6424.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 502259.989 ops/s
[info]                  ·gc.alloc.rate:               2180.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          6832.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6287.123 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   497592.214 ±(99.9%) 21990.198 ops/s [Average]
[info]   (min, avg, max) = (490727.673, 497592.214, 502904.950), stdev = 5710.785
[info]   CI (99.9%): [475602.016, 519582.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2157.581 ±(99.9%) 92.805 MB/sec [Average]
[info]   (min, avg, max) = (2118.464, 2157.581, 2180.644), stdev = 24.101
[info]   CI (99.9%): [2064.776, 2250.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6823.842 ±(99.9%) 222.622 B/op [Average]
[info]   (min, avg, max) = (6778.909, 6823.842, 6920.781), stdev = 57.814
[info]   CI (99.9%): [6601.220, 7046.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.840 ±(99.9%) 6.351 MB/sec [Average]
[info]   (min, avg, max) = (2002.013, 2003.840, 2006.448), stdev = 1.649
[info]   CI (99.9%): [1997.489, 2010.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6338.073 ±(99.9%) 280.234 B/op [Average]
[info]   (min, avg, max) = (6262.520, 6338.073, 6424.056), stdev = 72.776
[info]   CI (99.9%): [6057.839, 6618.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.681 ±(99.9%) 4.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 2.905), stdev = 1.258
[info]   CI (99.9%): [≈ 0, 5.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.148 ±(99.9%) 15.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.148, 9.146), stdev = 3.960
[info]   CI (99.9%): [≈ 0, 17.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64746.569 ops/s
[info] # Warmup Iteration   2: 829773.277 ops/s
[info] # Warmup Iteration   3: 1758799.573 ops/s
[info] # Warmup Iteration   4: 1950175.614 ops/s
[info] # Warmup Iteration   5: 1948148.011 ops/s
[info] Iteration   1: 1971035.399 ops/s
[info]                  ·gc.alloc.rate:                   2014.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1585.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1913258.530 ops/s
[info]                  ·gc.alloc.rate:               2022.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          1663.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1637.666 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1943319.887 ops/s
[info]                  ·gc.alloc.rate:                   1989.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              1611.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1616.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1911251.108 ops/s
[info]                  ·gc.alloc.rate:                   1947.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              1603.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1649.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1910651.438 ops/s
[info]                  ·gc.alloc.rate:                   1930.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              1590.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1102.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1929903.272 ±(99.9%) 103098.093 ops/s [Average]
[info]   (min, avg, max) = (1910651.438, 1929903.272, 1971035.399), stdev = 26774.247
[info]   CI (99.9%): [1826805.180, 2033001.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1981.024 ±(99.9%) 156.491 MB/sec [Average]
[info]   (min, avg, max) = (1930.779, 1981.024, 2022.752), stdev = 40.640
[info]   CI (99.9%): [1824.533, 2137.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1615.599 ±(99.9%) 108.503 B/op [Average]
[info]   (min, avg, max) = (1590.426, 1615.599, 1663.902), stdev = 28.178
[info]   CI (99.9%): [1507.096, 1724.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1862.599 ±(99.9%) 1128.948 MB/sec [Average]
[info]   (min, avg, max) = (1338.264, 1862.599, 2002.717), stdev = 293.184
[info]   CI (99.9%): [733.651, 2991.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1518.186 ±(99.9%) 900.006 B/op [Average]
[info]   (min, avg, max) = (1102.358, 1518.186, 1649.183), stdev = 233.729
[info]   CI (99.9%): [618.179, 2418.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.229), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.185), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170523.518 ops/s
[info] # Warmup Iteration   2: 2337213.348 ops/s
[info] # Warmup Iteration   3: 2899457.543 ops/s
[info] # Warmup Iteration   4: 2991183.984 ops/s
[info] # Warmup Iteration   5: 2974171.991 ops/s
[info] Iteration   1: 3000186.470 ops/s
[info]                  ·gc.alloc.rate:                   1187.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              622.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2998338.548 ops/s
[info]                  ·gc.alloc.rate:               1162.689 MB/sec
[info]                  ·gc.alloc.rate.norm:          610.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 348.095 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2984025.238 ops/s
[info]                  ·gc.alloc.rate:                   1173.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              618.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     700.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2998515.291 ops/s
[info]                  ·gc.alloc.rate:                   1183.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              621.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     698.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2999232.805 ops/s
[info]                  ·gc.alloc.rate:               1158.189 MB/sec
[info]                  ·gc.alloc.rate.norm:          607.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 349.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2996059.671 ±(99.9%) 26055.958 ops/s [Average]
[info]   (min, avg, max) = (2984025.238, 2996059.671, 3000186.470), stdev = 6766.650
[info]   CI (99.9%): [2970003.712, 3022115.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1172.982 ±(99.9%) 48.668 MB/sec [Average]
[info]   (min, avg, max) = (1158.189, 1172.982, 1187.149), stdev = 12.639
[info]   CI (99.9%): [1124.315, 1221.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   616.161 ±(99.9%) 26.053 B/op [Average]
[info]   (min, avg, max) = (607.664, 616.161, 622.760), stdev = 6.766
[info]   CI (99.9%): [590.108, 642.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1062.137 ±(99.9%) 1397.604 MB/sec [Average]
[info]   (min, avg, max) = (663.150, 1062.137, 1330.238), stdev = 362.953
[info]   CI (99.9%): [≈ 0, 2459.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   558.068 ±(99.9%) 735.834 B/op [Average]
[info]   (min, avg, max) = (348.095, 558.068, 700.224), stdev = 191.094
[info]   CI (99.9%): [≈ 0, 1293.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 827370.032 ops/s
[info] # Warmup Iteration   2: 7423007.438 ops/s
[info] # Warmup Iteration   3: 8963032.113 ops/s
[info] # Warmup Iteration   4: 8879822.186 ops/s
[info] # Warmup Iteration   5: 9148205.477 ops/s
[info] Iteration   1: 9170476.970 ops/s
[info]                  ·gc.alloc.rate:               761.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          130.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 9160983.048 ops/s
[info]                  ·gc.alloc.rate:               769.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          132.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9044873.911 ops/s
[info]                  ·gc.alloc.rate:               752.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          130.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 8702451.654 ops/s
[info]                  ·gc.alloc.rate:                   747.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              135.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8880335.769 ops/s
[info]                  ·gc.alloc.rate:               751.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          133.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   8991824.271 ±(99.9%) 768953.300 ops/s [Average]
[info]   (min, avg, max) = (8702451.654, 8991824.271, 9170476.970), stdev = 199694.730
[info]   CI (99.9%): [8222870.971, 9760777.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   756.569 ±(99.9%) 34.902 MB/sec [Average]
[info]   (min, avg, max) = (747.701, 756.569, 769.877), stdev = 9.064
[info]   CI (99.9%): [721.667, 791.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   132.436 ±(99.9%) 7.079 B/op [Average]
[info]   (min, avg, max) = (130.681, 132.436, 135.228), stdev = 1.838
[info]   CI (99.9%): [125.358, 139.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.233 ±(99.9%) 1.363 MB/sec [Average]
[info]   (min, avg, max) = (667.682, 668.233, 668.609), stdev = 0.354
[info]   CI (99.9%): [666.870, 669.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   116.995 ±(99.9%) 10.326 B/op [Average]
[info]   (min, avg, max) = (114.555, 116.995, 120.895), stdev = 2.682
[info]   CI (99.9%): [106.669, 127.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 872134.250 ops/s
[info] # Warmup Iteration   2: 8009959.299 ops/s
[info] # Warmup Iteration   3: 8823274.578 ops/s
[info] # Warmup Iteration   4: 9069350.947 ops/s
[info] # Warmup Iteration   5: 9031470.082 ops/s
[info] Iteration   1: 9079883.904 ops/s
[info]                  ·gc.alloc.rate:      284.193 MB/sec
[info]                  ·gc.alloc.rate.norm: 49.262 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9035676.064 ops/s
[info]                  ·gc.alloc.rate:                   278.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9026418.539 ops/s
[info]                  ·gc.alloc.rate:                   286.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9096613.807 ops/s
[info]                  ·gc.alloc.rate:      277.549 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9098542.928 ops/s
[info]                  ·gc.alloc.rate:      277.552 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   9067427.049 ±(99.9%) 131501.899 ops/s [Average]
[info]   (min, avg, max) = (9026418.539, 9067427.049, 9098542.928), stdev = 34150.626
[info]   CI (99.9%): [8935925.150, 9198928.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   280.882 ±(99.9%) 16.484 MB/sec [Average]
[info]   (min, avg, max) = (277.549, 280.882, 286.712), stdev = 4.281
[info]   CI (99.9%): [264.398, 297.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   48.745 ±(99.9%) 3.315 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.745, 49.978), stdev = 0.861
[info]   CI (99.9%): [45.430, 52.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.684 ±(99.9%) 1079.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.684, 511.740), stdev = 280.275
[info]   CI (99.9%): [≈ 0, 1283.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   35.663 ±(99.9%) 188.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.663, 89.204), stdev = 48.834
[info]   CI (99.9%): [≈ 0, 223.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.302
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8703.592 ops/s
[info] # Warmup Iteration   2: 286945.426 ops/s
[info] # Warmup Iteration   3: 487615.761 ops/s
[info] # Warmup Iteration   4: 504030.510 ops/s
[info] # Warmup Iteration   5: 514312.240 ops/s
[info] Iteration   1: 511351.032 ops/s
[info]                  ·gc.alloc.rate:                   2616.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              8051.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8240.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.215 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 512426.207 ops/s
[info]                  ·gc.alloc.rate:                   2634.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              8089.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8226.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 514075.197 ops/s
[info]                  ·gc.alloc.rate:                   2632.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              8058.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8211.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 515357.384 ops/s
[info]                  ·gc.alloc.rate:               2679.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          8182.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8213.631 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 514163.890 ops/s
[info]                  ·gc.alloc.rate:                   2673.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8254.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   513474.742 ±(99.9%) 6085.170 ops/s [Average]
[info]   (min, avg, max) = (511351.032, 513474.742, 515357.384), stdev = 1580.299
[info]   CI (99.9%): [507389.572, 519559.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2647.280 ±(99.9%) 107.611 MB/sec [Average]
[info]   (min, avg, max) = (2616.077, 2647.280, 2679.909), stdev = 27.946
[info]   CI (99.9%): [2539.669, 2754.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8113.478 ±(99.9%) 252.633 B/op [Average]
[info]   (min, avg, max) = (8051.629, 8113.478, 8184.695), stdev = 65.608
[info]   CI (99.9%): [7860.845, 8366.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2685.034 ±(99.9%) 31.041 MB/sec [Average]
[info]   (min, avg, max) = (2677.440, 2685.034, 2696.486), stdev = 8.061
[info]   CI (99.9%): [2653.993, 2716.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8229.326 ±(99.9%) 70.031 B/op [Average]
[info]   (min, avg, max) = (8211.805, 8229.326, 8254.529), stdev = 18.187
[info]   CI (99.9%): [8159.295, 8299.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.441 ±(99.9%) 3.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 2.019), stdev = 0.884
[info]   CI (99.9%): [≈ 0, 3.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.358 ±(99.9%) 10.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.358, 6.215), stdev = 2.721
[info]   CI (99.9%): [≈ 0, 11.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7788.418 ops/s
[info] # Warmup Iteration   2: 62539.338 ops/s
[info] # Warmup Iteration   3: 97864.101 ops/s
[info] # Warmup Iteration   4: 92449.571 ops/s
[info] # Warmup Iteration   5: 97124.547 ops/s
[info] Iteration   1: 97797.957 ops/s
[info]                  ·gc.alloc.rate:                   2722.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              43798.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2574.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41423.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.700 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         32.000 ms
[info] Iteration   2: 99420.532 ops/s
[info]                  ·gc.alloc.rate:                   2738.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              43339.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2590.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41001.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   3: 100441.262 ops/s
[info]                  ·gc.alloc.rate:                   2783.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              43606.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2591.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40605.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.686 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 100848.288 ops/s
[info]                  ·gc.alloc.rate:                   2792.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              43578.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2579.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40253.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 100713.357 ops/s
[info]                  ·gc.alloc.rate:               2828.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          44199.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3233.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50531.525 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   99844.279 ±(99.9%) 4903.608 ops/s [Average]
[info]   (min, avg, max) = (97797.957, 99844.279, 100848.288), stdev = 1273.452
[info]   CI (99.9%): [94940.671, 104747.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2772.941 ±(99.9%) 165.138 MB/sec [Average]
[info]   (min, avg, max) = (2722.010, 2772.941, 2828.359), stdev = 42.886
[info]   CI (99.9%): [2607.803, 2938.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   43704.256 ±(99.9%) 1236.427 B/op [Average]
[info]   (min, avg, max) = (43339.366, 43704.256, 44199.179), stdev = 321.096
[info]   CI (99.9%): [42467.829, 44940.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2714.004 ±(99.9%) 1118.777 MB/sec [Average]
[info]   (min, avg, max) = (2574.436, 2714.004, 3233.574), stdev = 290.543
[info]   CI (99.9%): [1595.227, 3832.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42763.102 ±(99.9%) 16806.573 B/op [Average]
[info]   (min, avg, max) = (40253.874, 42763.102, 50531.525), stdev = 4364.614
[info]   CI (99.9%): [25956.529, 59569.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.401 ±(99.9%) 11.921 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.401, 6.172), stdev = 3.096
[info]   CI (99.9%): [≈ 0, 14.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   37.824 ±(99.9%) 187.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.824, 96.686), stdev = 48.681
[info]   CI (99.9%): [≈ 0, 225.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   87.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 17.400, 32.000), stdev = 11.992
[info]   CI (99.9%): [87.000, 87.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14916.832 ops/s
[info] # Warmup Iteration   2: 75855.325 ops/s
[info] # Warmup Iteration   3: 132455.239 ops/s
[info] # Warmup Iteration   4: 139872.554 ops/s
[info] # Warmup Iteration   5: 139449.066 ops/s
[info] Iteration   1: 141011.882 ops/s
[info]                  ·gc.alloc.rate:                   2197.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              24528.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22308.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 143746.875 ops/s
[info]                  ·gc.alloc.rate:                   2259.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              24723.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21943.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 147108.221 ops/s
[info]                  ·gc.alloc.rate:               2297.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          24574.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21492.091 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 146715.120 ops/s
[info]                  ·gc.alloc.rate:                   2317.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              24855.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28805.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 145691.097 ops/s
[info]                  ·gc.alloc.rate:                   2302.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              24871.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21808.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   144854.639 ±(99.9%) 9671.482 ops/s [Average]
[info]   (min, avg, max) = (141011.882, 144854.639, 147108.221), stdev = 2511.653
[info]   CI (99.9%): [135183.156, 154526.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2274.733 ±(99.9%) 185.249 MB/sec [Average]
[info]   (min, avg, max) = (2197.611, 2274.733, 2317.058), stdev = 48.108
[info]   CI (99.9%): [2089.484, 2459.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24710.625 ±(99.9%) 604.890 B/op [Average]
[info]   (min, avg, max) = (24528.727, 24710.625, 24871.308), stdev = 157.088
[info]   CI (99.9%): [24105.735, 25315.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2143.458 ±(99.9%) 1166.684 MB/sec [Average]
[info]   (min, avg, max) = (1998.718, 2143.458, 2685.292), stdev = 302.984
[info]   CI (99.9%): [976.773, 3310.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23271.643 ±(99.9%) 11965.423 B/op [Average]
[info]   (min, avg, max) = (21492.091, 23271.643, 28805.541), stdev = 3107.382
[info]   CI (99.9%): [11306.220, 35237.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.624), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.350 ±(99.9%) 12.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.350, 6.970), stdev = 3.156
[info]   CI (99.9%): [≈ 0, 14.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44135.341 ops/s
[info] # Warmup Iteration   2: 137256.890 ops/s
[info] # Warmup Iteration   3: 167318.976 ops/s
[info] # Warmup Iteration   4: 172425.559 ops/s
[info] # Warmup Iteration   5: 176170.299 ops/s
[info] Iteration   1: 176546.305 ops/s
[info]                  ·gc.alloc.rate:                   2653.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              23651.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23679.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 175325.067 ops/s
[info]                  ·gc.alloc.rate:                   2642.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              23721.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23818.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.165 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 173462.985 ops/s
[info]                  ·gc.alloc.rate:               2627.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          23838.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2647.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24016.444 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 172716.724 ops/s
[info]                  ·gc.alloc.rate:                   2643.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              24083.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24153.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 176489.404 ops/s
[info]                  ·gc.alloc.rate:               2671.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          23826.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17782.996 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   174908.097 ±(99.9%) 6738.238 ops/s [Average]
[info]   (min, avg, max) = (172716.724, 174908.097, 176546.305), stdev = 1749.899
[info]   CI (99.9%): [168169.859, 181646.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2647.714 ±(99.9%) 62.874 MB/sec [Average]
[info]   (min, avg, max) = (2627.617, 2647.714, 2671.957), stdev = 16.328
[info]   CI (99.9%): [2584.840, 2710.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23824.474 ±(99.9%) 632.093 B/op [Average]
[info]   (min, avg, max) = (23651.882, 23824.474, 24083.706), stdev = 164.153
[info]   CI (99.9%): [23192.380, 24456.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2520.398 ±(99.9%) 1132.650 MB/sec [Average]
[info]   (min, avg, max) = (1994.247, 2520.398, 2656.221), stdev = 294.146
[info]   CI (99.9%): [1387.748, 3653.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22690.210 ±(99.9%) 10586.229 B/op [Average]
[info]   (min, avg, max) = (17782.996, 22690.210, 24153.268), stdev = 2749.210
[info]   CI (99.9%): [12103.981, 33276.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.066 ±(99.9%) 5.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.138), stdev = 1.482
[info]   CI (99.9%): [≈ 0, 6.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.542 ±(99.9%) 51.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.542, 28.165), stdev = 13.281
[info]   CI (99.9%): [≈ 0, 60.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 15.000), stdev = 4.438
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4985.882 ops/s
[info] # Warmup Iteration   2: 49095.855 ops/s
[info] # Warmup Iteration   3: 81892.164 ops/s
[info] # Warmup Iteration   4: 82071.873 ops/s
[info] # Warmup Iteration   5: 84168.092 ops/s
[info] Iteration   1: 85015.433 ops/s
[info]                  ·gc.alloc.rate:                   3702.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              68539.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61914.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 84891.557 ops/s
[info]                  ·gc.alloc.rate:                   3721.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              68993.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4032.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74755.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 84412.244 ops/s
[info]                  ·gc.alloc.rate:                   3728.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              69510.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62903.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 83108.447 ops/s
[info]                  ·gc.alloc.rate:                   3673.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              69560.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64093.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.788 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 82239.839 ops/s
[info]                  ·gc.alloc.rate:                   3664.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              70125.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77894.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   83933.504 ±(99.9%) 4663.434 ops/s [Average]
[info]   (min, avg, max) = (82239.839, 83933.504, 85015.433), stdev = 1211.079
[info]   CI (99.9%): [79270.070, 88596.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3698.016 ±(99.9%) 108.884 MB/sec [Average]
[info]   (min, avg, max) = (3664.698, 3698.016, 3728.218), stdev = 28.277
[info]   CI (99.9%): [3589.133, 3806.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69346.124 ±(99.9%) 2322.670 B/op [Average]
[info]   (min, avg, max) = (68539.605, 69346.124, 70125.590), stdev = 603.190
[info]   CI (99.9%): [67023.454, 71668.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3641.176 ±(99.9%) 1444.376 MB/sec [Average]
[info]   (min, avg, max) = (3344.404, 3641.176, 4070.715), stdev = 375.100
[info]   CI (99.9%): [2196.800, 5085.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68312.264 ±(99.9%) 28643.326 B/op [Average]
[info]   (min, avg, max) = (61914.166, 68312.264, 77894.909), stdev = 7438.581
[info]   CI (99.9%): [39668.939, 96955.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.934 ±(99.9%) 3.067 B/op [Average]
[info]   (min, avg, max) = (0.386, 0.934, 2.312), stdev = 0.797
[info]   CI (99.9%): [≈ 0, 4.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 10.000), stdev = 1.483
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59891.150 ops/s
[info] # Warmup Iteration   2: 222737.952 ops/s
[info] # Warmup Iteration   3: 246082.417 ops/s
[info] # Warmup Iteration   4: 254483.260 ops/s
[info] # Warmup Iteration   5: 258039.023 ops/s
[info] Iteration   1: 255619.348 ops/s
[info]                  ·gc.alloc.rate:               1746.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          10749.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8227.857 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 252083.048 ops/s
[info]                  ·gc.alloc.rate:                   1730.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              10802.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12519.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 256743.234 ops/s
[info]                  ·gc.alloc.rate:                   1753.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              10750.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8175.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 260770.595 ops/s
[info]                  ·gc.alloc.rate:                   1794.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              10827.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12061.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.628 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 262389.137 ops/s
[info]                  ·gc.alloc.rate:                   1807.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              10842.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11997.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   257521.073 ±(99.9%) 15882.581 ops/s [Average]
[info]   (min, avg, max) = (252083.048, 257521.073, 262389.137), stdev = 4124.656
[info]   CI (99.9%): [241638.491, 273403.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1766.478 ±(99.9%) 126.718 MB/sec [Average]
[info]   (min, avg, max) = (1730.342, 1766.478, 1807.787), stdev = 32.908
[info]   CI (99.9%): [1639.760, 1893.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10794.487 ±(99.9%) 165.625 B/op [Average]
[info]   (min, avg, max) = (10749.058, 10794.487, 10842.156), stdev = 43.012
[info]   CI (99.9%): [10628.862, 10960.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1734.930 ±(99.9%) 1404.967 MB/sec [Average]
[info]   (min, avg, max) = (1333.704, 1734.930, 2005.267), stdev = 364.865
[info]   CI (99.9%): [329.963, 3139.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10596.321 ±(99.9%) 8453.452 B/op [Average]
[info]   (min, avg, max) = (8175.474, 10596.321, 12519.342), stdev = 2195.335
[info]   CI (99.9%): [2142.869, 19049.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.877 ±(99.9%) 7.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.877, 4.177), stdev = 1.845
[info]   CI (99.9%): [≈ 0, 7.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.467 ±(99.9%) 44.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.467, 26.077), stdev = 11.523
[info]   CI (99.9%): [≈ 0, 49.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138050.913 ops/s
[info] # Warmup Iteration   2: 676018.351 ops/s
[info] # Warmup Iteration   3: 796588.793 ops/s
[info] # Warmup Iteration   4: 809607.411 ops/s
[info] # Warmup Iteration   5: 814116.857 ops/s
[info] Iteration   1: 814268.905 ops/s
[info]                  ·gc.alloc.rate:      471.820 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 783122.467 ops/s
[info]                  ·gc.alloc.rate:                   478.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1327.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 778526.241 ops/s
[info]                  ·gc.alloc.rate:                   467.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1335.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 786407.256 ops/s
[info]                  ·gc.alloc.rate:      468.254 MB/sec
[info]                  ·gc.alloc.rate.norm: 937.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 789195.854 ops/s
[info]                  ·gc.alloc.rate:               466.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          930.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1321.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   790304.145 ±(99.9%) 53806.439 ops/s [Average]
[info]   (min, avg, max) = (778526.241, 790304.145, 814268.905), stdev = 13973.361
[info]   CI (99.9%): [736497.706, 844110.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   470.377 ±(99.9%) 18.247 MB/sec [Average]
[info]   (min, avg, max) = (466.342, 470.377, 478.018), stdev = 4.739
[info]   CI (99.9%): [452.130, 488.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   936.933 ±(99.9%) 69.285 B/op [Average]
[info]   (min, avg, max) = (912.001, 936.933, 960.624), stdev = 17.993
[info]   CI (99.9%): [867.648, 1006.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.686 ±(99.9%) 1394.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.686, 662.423), stdev = 362.124
[info]   CI (99.9%): [≈ 0, 1791.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   796.731 ±(99.9%) 2800.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 796.731, 1335.181), stdev = 727.330
[info]   CI (99.9%): [≈ 0, 3597.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326308.099 ops/s
[info] # Warmup Iteration   2: 726743.890 ops/s
[info] # Warmup Iteration   3: 820701.790 ops/s
[info] # Warmup Iteration   4: 810608.233 ops/s
[info] # Warmup Iteration   5: 819173.022 ops/s
[info] Iteration   1: 819214.334 ops/s
[info]                  ·gc.alloc.rate:               452.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1279.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 823238.594 ops/s
[info]                  ·gc.alloc.rate:      443.654 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 799698.660 ops/s
[info]                  ·gc.alloc.rate:                   454.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              894.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1311.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 789607.712 ops/s
[info]                  ·gc.alloc.rate:               443.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1328.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 798428.201 ops/s
[info]                  ·gc.alloc.rate:      430.316 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.260 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   806037.500 ±(99.9%) 55718.926 ops/s [Average]
[info]   (min, avg, max) = (789607.712, 806037.500, 823238.594), stdev = 14470.028
[info]   CI (99.9%): [750318.575, 861756.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   444.938 ±(99.9%) 37.077 MB/sec [Average]
[info]   (min, avg, max) = (430.316, 444.938, 454.822), stdev = 9.629
[info]   CI (99.9%): [407.861, 482.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   868.876 ±(99.9%) 81.036 B/op [Average]
[info]   (min, avg, max) = (848.001, 868.876, 894.987), stdev = 21.045
[info]   CI (99.9%): [787.840, 949.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   399.777 ±(99.9%) 1405.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.777, 666.469), stdev = 364.945
[info]   CI (99.9%): [≈ 0, 1805.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   783.857 ±(99.9%) 2756.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 783.857, 1328.443), stdev = 715.772
[info]   CI (99.9%): [≈ 0, 3540.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282247.673 ops/s
[info] # Warmup Iteration   2: 612859.206 ops/s
[info] # Warmup Iteration   3: 844349.571 ops/s
[info] # Warmup Iteration   4: 839226.175 ops/s
[info] # Warmup Iteration   5: 841614.313 ops/s
[info] Iteration   1: 831746.675 ops/s
[info]                  ·gc.alloc.rate:      8.456 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 832270.139 ops/s
[info]                  ·gc.alloc.rate:      8.462 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 832558.929 ops/s
[info]                  ·gc.alloc.rate:      8.465 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 833321.045 ops/s
[info]                  ·gc.alloc.rate:      8.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 843746.894 ops/s
[info]                  ·gc.alloc.rate:      8.577 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   834728.736 ±(99.9%) 19535.540 ops/s [Average]
[info]   (min, avg, max) = (831746.675, 834728.736, 843746.894), stdev = 5073.318
[info]   CI (99.9%): [815193.196, 854264.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   8.487 ±(99.9%) 0.197 MB/sec [Average]
[info]   (min, avg, max) = (8.456, 8.487, 8.577), stdev = 0.051
[info]   CI (99.9%): [8.290, 8.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6008.548 ops/s
[info] # Warmup Iteration   2: 25474.141 ops/s
[info] # Warmup Iteration   3: 31931.772 ops/s
[info] # Warmup Iteration   4: 38498.592 ops/s
[info] # Warmup Iteration   5: 36823.877 ops/s
[info] Iteration   1: 38273.719 ops/s
[info]                  ·gc.alloc.rate:                   2016.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              82926.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54785.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 38309.174 ops/s
[info]                  ·gc.alloc.rate:                   1736.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              71308.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81939.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 39551.117 ops/s
[info]                  ·gc.alloc.rate:                   1802.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              71714.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79126.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 39498.865 ops/s
[info]                  ·gc.alloc.rate:                   1781.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              70993.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52818.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 39244.068 ops/s
[info]                  ·gc.alloc.rate:                   1786.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              71634.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79821.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.504 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   38975.389 ±(99.9%) 2445.888 ops/s [Average]
[info]   (min, avg, max) = (38273.719, 38975.389, 39551.117), stdev = 635.189
[info]   CI (99.9%): [36529.500, 41421.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1824.680 ±(99.9%) 423.951 MB/sec [Average]
[info]   (min, avg, max) = (1736.014, 1824.680, 2016.574), stdev = 110.099
[info]   CI (99.9%): [1400.730, 2248.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   73715.717 ±(99.9%) 19858.481 B/op [Average]
[info]   (min, avg, max) = (70993.326, 73715.717, 82926.965), stdev = 5157.184
[info]   CI (99.9%): [53857.236, 93574.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1726.446 ±(99.9%) 1397.406 MB/sec [Average]
[info]   (min, avg, max) = (1325.588, 1726.446, 1994.828), stdev = 362.902
[info]   CI (99.9%): [329.040, 3123.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69698.440 ±(99.9%) 56082.841 B/op [Average]
[info]   (min, avg, max) = (52818.970, 69698.440, 81939.671), stdev = 14564.536
[info]   CI (99.9%): [13615.599, 125781.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.987 ±(99.9%) 4.341 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.987, 2.292), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 5.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   40.432 ±(99.9%) 178.844 B/op [Average]
[info]   (min, avg, max) = (2.504, 40.432, 94.272), stdev = 46.445
[info]   CI (99.9%): [≈ 0, 219.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 2.646
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1046090.620 ops/s
[info] # Warmup Iteration   2: 3495171.429 ops/s
[info] # Warmup Iteration   3: 3752463.156 ops/s
[info] # Warmup Iteration   4: 4494406.832 ops/s
[info] # Warmup Iteration   5: 4573013.711 ops/s
[info] Iteration   1: 4546045.264 ops/s
[info]                  ·gc.alloc.rate:                   3498.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              1211.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1153.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4473878.225 ops/s
[info]                  ·gc.alloc.rate:                   3485.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              1226.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1176.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4490502.237 ops/s
[info]                  ·gc.alloc.rate:                   3513.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              1230.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1176.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4479267.224 ops/s
[info]                  ·gc.alloc.rate:                   3505.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              1231.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1184.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4481998.950 ops/s
[info]                  ·gc.alloc.rate:                   3506.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1231.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1187.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4494338.380 ±(99.9%) 113681.044 ops/s [Average]
[info]   (min, avg, max) = (4473878.225, 4494338.380, 4546045.264), stdev = 29522.606
[info]   CI (99.9%): [4380657.336, 4608019.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3501.624 ±(99.9%) 40.684 MB/sec [Average]
[info]   (min, avg, max) = (3485.232, 3501.624, 3513.209), stdev = 10.566
[info]   CI (99.9%): [3460.940, 3542.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1226.141 ±(99.9%) 33.295 B/op [Average]
[info]   (min, avg, max) = (1211.195, 1226.141, 1231.372), stdev = 8.647
[info]   CI (99.9%): [1192.846, 1259.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3358.005 ±(99.9%) 77.752 MB/sec [Average]
[info]   (min, avg, max) = (3332.623, 3358.005, 3382.058), stdev = 20.192
[info]   CI (99.9%): [3280.253, 3435.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1175.875 ±(99.9%) 51.175 B/op [Average]
[info]   (min, avg, max) = (1153.808, 1175.875, 1187.637), stdev = 13.290
[info]   CI (99.9%): [1124.700, 1227.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.010, 0.015), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 5398147.800 ops/s
[info] # Warmup Iteration   3: 5838908.803 ops/s
[info] # Warmup Iteration   4: 6439831.364 ops/s
[info] # Warmup Iteration   5: 6632010.494 ops/s
[info] Iteration   1: 6601287.430 ops/s
[info]                  ·gc.alloc.rate:               1283.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 317.182 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 6603283.199 ops/s
[info]                  ·gc.alloc.rate:                   1286.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6602296.232 ops/s
[info]                  ·gc.alloc.rate:                   1275.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 6607565.446 ops/s
[info]                  ·gc.alloc.rate:                   1270.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6641705.205 ops/s
[info]                  ·gc.alloc.rate:                   1276.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6611227.502 ±(99.9%) 66248.581 ops/s [Average]
[info]   (min, avg, max) = (6601287.430, 6611227.502, 6641705.205), stdev = 17204.546
[info]   CI (99.9%): [6544978.922, 6677476.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1278.649 ±(99.9%) 23.689 MB/sec [Average]
[info]   (min, avg, max) = (1270.945, 1278.649, 1286.392), stdev = 6.152
[info]   CI (99.9%): [1254.960, 1302.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.372 ±(99.9%) 6.967 B/op [Average]
[info]   (min, avg, max) = (302.582, 304.372, 306.577), stdev = 1.809
[info]   CI (99.9%): [297.405, 311.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1332.031 ±(99.9%) 4.481 MB/sec [Average]
[info]   (min, avg, max) = (1330.651, 1332.031, 1333.573), stdev = 1.164
[info]   CI (99.9%): [1327.550, 1336.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   317.078 ±(99.9%) 3.058 B/op [Average]
[info]   (min, avg, max) = (315.709, 317.078, 317.651), stdev = 0.794
[info]   CI (99.9%): [314.020, 320.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.988 ±(99.9%) 8.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.988, 4.748), stdev = 2.102
[info]   CI (99.9%): [≈ 0, 9.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.235 ±(99.9%) 1.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.235, 1.131), stdev = 0.501
[info]   CI (99.9%): [≈ 0, 2.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 735282.745 ops/s
[info] # Warmup Iteration   2: 4457138.629 ops/s
[info] # Warmup Iteration   3: 4981176.362 ops/s
[info] # Warmup Iteration   4: 5186172.658 ops/s
[info] # Warmup Iteration   5: 5233154.110 ops/s
[info] Iteration   1: 5225271.273 ops/s
[info]                  ·gc.alloc.rate:                   1069.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5222799.958 ops/s
[info]                  ·gc.alloc.rate:                   1056.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5113246.699 ops/s
[info]                  ·gc.alloc.rate:                   1058.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5112396.581 ops/s
[info]                  ·gc.alloc.rate:               1028.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 5215757.287 ops/s
[info]                  ·gc.alloc.rate:                   1074.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5177894.360 ±(99.9%) 229137.298 ops/s [Average]
[info]   (min, avg, max) = (5112396.581, 5177894.360, 5225271.273), stdev = 59506.229
[info]   CI (99.9%): [4948757.062, 5407031.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1057.497 ±(99.9%) 68.694 MB/sec [Average]
[info]   (min, avg, max) = (1028.530, 1057.497, 1074.615), stdev = 17.840
[info]   CI (99.9%): [988.803, 1126.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   321.393 ±(99.9%) 15.094 B/op [Average]
[info]   (min, avg, max) = (316.559, 321.393, 325.820), stdev = 3.920
[info]   CI (99.9%): [306.299, 336.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1063.263 ±(99.9%) 1401.298 MB/sec [Average]
[info]   (min, avg, max) = (663.323, 1063.263, 1332.881), stdev = 363.913
[info]   CI (99.9%): [≈ 0, 2464.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   323.032 ±(99.9%) 424.337 B/op [Average]
[info]   (min, avg, max) = (199.832, 323.032, 409.056), stdev = 110.199
[info]   CI (99.9%): [≈ 0, 747.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2572175.103 ops/s
[info] # Warmup Iteration   2: 5574019.074 ops/s
[info] # Warmup Iteration   3: 6456188.886 ops/s
[info] # Warmup Iteration   4: 6656843.900 ops/s
[info] # Warmup Iteration   5: 6532629.492 ops/s
[info] Iteration   1: 6552175.713 ops/s
[info]                  ·gc.alloc.rate:               1270.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 321.783 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 6688794.877 ops/s
[info]                  ·gc.alloc.rate:               1302.330 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 315.368 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 6523017.906 ops/s
[info]                  ·gc.alloc.rate:                   1268.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 6693846.889 ops/s
[info]                  ·gc.alloc.rate:                   1287.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6777955.005 ops/s
[info]                  ·gc.alloc.rate:                   1314.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6647158.078 ±(99.9%) 410476.368 ops/s [Average]
[info]   (min, avg, max) = (6523017.906, 6647158.078, 6777955.005), stdev = 106599.409
[info]   CI (99.9%): [6236681.710, 7057634.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1288.656 ±(99.9%) 77.054 MB/sec [Average]
[info]   (min, avg, max) = (1268.360, 1288.656, 1314.688), stdev = 20.011
[info]   CI (99.9%): [1211.602, 1365.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305.088 ±(99.9%) 5.555 B/op [Average]
[info]   (min, avg, max) = (302.648, 305.088, 306.373), stdev = 1.443
[info]   CI (99.9%): [299.532, 310.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1340.440 ±(99.9%) 4.527 MB/sec [Average]
[info]   (min, avg, max) = (1338.939, 1340.440, 1341.603), stdev = 1.176
[info]   CI (99.9%): [1335.914, 1344.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   317.409 ±(99.9%) 19.916 B/op [Average]
[info]   (min, avg, max) = (310.915, 317.409, 323.544), stdev = 5.172
[info]   CI (99.9%): [297.493, 337.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.793 ±(99.9%) 6.674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.893), stdev = 1.733
[info]   CI (99.9%): [≈ 0, 7.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.186 ±(99.9%) 1.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.915), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 1.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1440161.087 ops/s
[info] # Warmup Iteration   2: 5415271.223 ops/s
[info] # Warmup Iteration   3: 5368898.455 ops/s
[info] # Warmup Iteration   4: 5491804.910 ops/s
[info] # Warmup Iteration   5: 5459465.702 ops/s
[info] Iteration   1: 5459951.839 ops/s
[info]                  ·gc.alloc.rate:                   1063.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 5438752.358 ops/s
[info]                  ·gc.alloc.rate:               1046.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193.247 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5426154.437 ops/s
[info]                  ·gc.alloc.rate:                   1102.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              319.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     387.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5502941.000 ops/s
[info]                  ·gc.alloc.rate:               1059.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 191.094 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5494495.507 ops/s
[info]                  ·gc.alloc.rate:                   1073.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     383.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5464459.028 ±(99.9%) 129604.940 ops/s [Average]
[info]   (min, avg, max) = (5426154.437, 5464459.028, 5502941.000), stdev = 33657.991
[info]   CI (99.9%): [5334854.088, 5594063.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1069.118 ±(99.9%) 80.949 MB/sec [Average]
[info]   (min, avg, max) = (1046.849, 1069.118, 1102.714), stdev = 21.022
[info]   CI (99.9%): [988.169, 1150.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   307.948 ±(99.9%) 26.804 B/op [Average]
[info]   (min, avg, max) = (302.927, 307.948, 319.843), stdev = 6.961
[info]   CI (99.9%): [281.143, 334.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.753 ±(99.9%) 1408.769 MB/sec [Average]
[info]   (min, avg, max) = (667.819, 1068.753, 1337.543), stdev = 365.853
[info]   CI (99.9%): [≈ 0, 2477.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   307.923 ±(99.9%) 406.941 B/op [Average]
[info]   (min, avg, max) = (191.094, 307.923, 387.505), stdev = 105.681
[info]   CI (99.9%): [≈ 0, 714.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.769 ±(99.9%) 6.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 3.781), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.220 ±(99.9%) 1.857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.220, 1.083), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 699155.414 ops/s
[info] # Warmup Iteration   2: 2742430.772 ops/s
[info] # Warmup Iteration   3: 3316352.552 ops/s
[info] # Warmup Iteration   4: 3318139.417 ops/s
[info] # Warmup Iteration   5: 3324996.302 ops/s
[info] Iteration   1: 3268341.519 ops/s
[info]                  ·gc.alloc.rate:                   1834.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              883.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3329063.684 ops/s
[info]                  ·gc.alloc.rate:                   1840.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              870.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3339697.225 ops/s
[info]                  ·gc.alloc.rate:                   1834.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     628.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3336277.740 ops/s
[info]                  ·gc.alloc.rate:                   1833.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              865.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3333318.006 ops/s
[info]                  ·gc.alloc.rate:               1845.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          871.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.995 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3321339.635 ±(99.9%) 115070.661 ops/s [Average]
[info]   (min, avg, max) = (3268341.519, 3321339.635, 3339697.225), stdev = 29883.485
[info]   CI (99.9%): [3206268.974, 3436410.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1837.651 ±(99.9%) 20.336 MB/sec [Average]
[info]   (min, avg, max) = (1833.623, 1837.651, 1845.506), stdev = 5.281
[info]   CI (99.9%): [1817.316, 1857.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   870.851 ±(99.9%) 29.232 B/op [Average]
[info]   (min, avg, max) = (864.378, 870.851, 883.249), stdev = 7.591
[info]   CI (99.9%): [841.620, 900.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1869.490 ±(99.9%) 1152.060 MB/sec [Average]
[info]   (min, avg, max) = (1334.308, 1869.490, 2005.825), stdev = 299.186
[info]   CI (99.9%): [717.431, 3021.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   886.304 ±(99.9%) 555.363 B/op [Average]
[info]   (min, avg, max) = (628.797, 886.304, 965.831), stdev = 144.226
[info]   CI (99.9%): [330.940, 1441.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.846 ±(99.9%) 7.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.846, 4.166), stdev = 1.856
[info]   CI (99.9%): [≈ 0, 7.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.400 ±(99.9%) 3.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.970), stdev = 0.878
[info]   CI (99.9%): [≈ 0, 3.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.844 ops/s
[info] # Warmup Iteration   2: 6467499.510 ops/s
[info] # Warmup Iteration   3: 6579874.803 ops/s
[info] # Warmup Iteration   4: 6855309.446 ops/s
[info] # Warmup Iteration   5: 6881094.107 ops/s
[info] Iteration   1: 6877723.379 ops/s
[info]                  ·gc.alloc.rate:               681.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151.973 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6879198.264 ops/s
[info]                  ·gc.alloc.rate:               687.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6826428.707 ops/s
[info]                  ·gc.alloc.rate:                   683.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6819943.516 ops/s
[info]                  ·gc.alloc.rate:               684.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6832173.145 ops/s
[info]                  ·gc.alloc.rate:                   682.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6847093.402 ±(99.9%) 111530.457 ops/s [Average]
[info]   (min, avg, max) = (6819943.516, 6847093.402, 6879198.264), stdev = 28964.106
[info]   CI (99.9%): [6735562.945, 6958623.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   684.122 ±(99.9%) 9.387 MB/sec [Average]
[info]   (min, avg, max) = (681.620, 684.122, 687.934), stdev = 2.438
[info]   CI (99.9%): [674.735, 693.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.231 ±(99.9%) 3.092 B/op [Average]
[info]   (min, avg, max) = (155.902, 157.231, 157.992), stdev = 0.803
[info]   CI (99.9%): [154.139, 160.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.040 ±(99.9%) 1.920 MB/sec [Average]
[info]   (min, avg, max) = (664.442, 665.040, 665.616), stdev = 0.499
[info]   CI (99.9%): [663.120, 666.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   152.846 ±(99.9%) 2.888 B/op [Average]
[info]   (min, avg, max) = (151.973, 152.846, 153.580), stdev = 0.750
[info]   CI (99.9%): [149.959, 155.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.035), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1808738.214 ops/s
[info] # Warmup Iteration   2: 5732183.515 ops/s
[info] # Warmup Iteration   3: 6105547.796 ops/s
[info] # Warmup Iteration   4: 6140881.334 ops/s
[info] # Warmup Iteration   5: 6443140.089 ops/s
[info] Iteration   1: 6449757.200 ops/s
[info]                  ·gc.alloc.rate:                   639.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6478721.965 ops/s
[info]                  ·gc.alloc.rate:      625.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6235610.887 ops/s
[info]                  ·gc.alloc.rate:               617.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 6241102.844 ops/s
[info]                  ·gc.alloc.rate:                   619.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6255387.887 ops/s
[info]                  ·gc.alloc.rate:               628.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   6332116.157 ±(99.9%) 466931.643 ops/s [Average]
[info]   (min, avg, max) = (6235610.887, 6332116.157, 6478721.965), stdev = 121260.665
[info]   CI (99.9%): [5865184.513, 6799047.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   626.148 ±(99.9%) 33.410 MB/sec [Average]
[info]   (min, avg, max) = (617.038, 626.148, 639.245), stdev = 8.677
[info]   CI (99.9%): [592.738, 659.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   155.653 ±(99.9%) 8.716 B/op [Average]
[info]   (min, avg, max) = (152.000, 155.653, 158.220), stdev = 2.264
[info]   CI (99.9%): [146.936, 164.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.915 ±(99.9%) 1144.990 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.915, 665.812), stdev = 297.350
[info]   CI (99.9%): [≈ 0, 1676.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   133.004 ±(99.9%) 286.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.004, 167.798), stdev = 74.391
[info]   CI (99.9%): [≈ 0, 419.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.049), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3187376.608 ops/s
[info] # Warmup Iteration   2: 6558684.546 ops/s
[info] # Warmup Iteration   3: 7149426.309 ops/s
[info] # Warmup Iteration   4: 6930647.070 ops/s
[info] # Warmup Iteration   5: 7186444.322 ops/s
[info] Iteration   1: 7179971.560 ops/s
[info]                  ·gc.alloc.rate:                   710.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7186927.563 ops/s
[info]                  ·gc.alloc.rate:               714.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 7178304.114 ops/s
[info]                  ·gc.alloc.rate:                   718.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6836926.925 ops/s
[info]                  ·gc.alloc.rate:               704.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          162.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.119 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6963726.001 ops/s
[info]                  ·gc.alloc.rate:                   692.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   7069171.233 ±(99.9%) 618233.346 ops/s [Average]
[info]   (min, avg, max) = (6836926.925, 7069171.233, 7186927.563), stdev = 160553.237
[info]   CI (99.9%): [6450937.887, 7687404.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   708.108 ±(99.9%) 38.805 MB/sec [Average]
[info]   (min, avg, max) = (692.517, 708.108, 718.630), stdev = 10.078
[info]   CI (99.9%): [669.303, 746.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157.662 ±(99.9%) 10.240 B/op [Average]
[info]   (min, avg, max) = (155.646, 157.662, 162.264), stdev = 2.659
[info]   CI (99.9%): [147.422, 167.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.140 ±(99.9%) 1.619 MB/sec [Average]
[info]   (min, avg, max) = (668.525, 669.140, 669.593), stdev = 0.421
[info]   CI (99.9%): [667.520, 670.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   149.014 ±(99.9%) 13.547 B/op [Average]
[info]   (min, avg, max) = (146.471, 149.014, 154.119), stdev = 3.518
[info]   CI (99.9%): [135.467, 162.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.039 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.075), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2177118.579 ops/s
[info] # Warmup Iteration   2: 6809419.770 ops/s
[info] # Warmup Iteration   3: 7381159.871 ops/s
[info] # Warmup Iteration   4: 6776983.649 ops/s
[info] # Warmup Iteration   5: 6564829.762 ops/s
[info] Iteration   1: 7168743.386 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6765151.868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6800004.193 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7387717.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7382081.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7100739.700 ±(99.9%) 1169852.986 ops/s [Average]
[info]   (min, avg, max) = (6765151.868, 7100739.700, 7387717.170), stdev = 303807.105
[info]   CI (99.9%): [5930886.714, 8270592.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1384309.553 ops/s
[info] # Warmup Iteration   2: 4111099.644 ops/s
[info] # Warmup Iteration   3: 6250434.739 ops/s
[info] # Warmup Iteration   4: 6324407.475 ops/s
[info] # Warmup Iteration   5: 6184007.892 ops/s
[info] Iteration   1: 6115990.758 ops/s
[info]                  ·gc.alloc.rate:               611.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171.603 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6140009.921 ops/s
[info]                  ·gc.alloc.rate:               615.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170.933 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 6126737.644 ops/s
[info]                  ·gc.alloc.rate:               606.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6087773.177 ops/s
[info]                  ·gc.alloc.rate:                   610.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6194960.873 ops/s
[info]                  ·gc.alloc.rate:      611.564 MB/sec
[info]                  ·gc.alloc.rate.norm: 155.359 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   6133094.475 ±(99.9%) 152359.050 ops/s [Average]
[info]   (min, avg, max) = (6087773.177, 6133094.475, 6194960.873), stdev = 39567.161
[info]   CI (99.9%): [5980735.425, 6285453.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   611.079 ±(99.9%) 12.479 MB/sec [Average]
[info]   (min, avg, max) = (606.076, 611.079, 615.080), stdev = 3.241
[info]   CI (99.9%): [598.600, 623.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   156.798 ±(99.9%) 4.540 B/op [Average]
[info]   (min, avg, max) = (155.359, 156.798, 157.844), stdev = 1.179
[info]   CI (99.9%): [152.258, 161.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   533.684 ±(99.9%) 1148.795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.684, 667.431), stdev = 298.338
[info]   CI (99.9%): [≈ 0, 1682.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   137.281 ±(99.9%) 295.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.281, 172.482), stdev = 76.744
[info]   CI (99.9%): [≈ 0, 432.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342446.300 ops/s
[info] # Warmup Iteration   2: 1585311.716 ops/s
[info] # Warmup Iteration   3: 1759246.979 ops/s
[info] # Warmup Iteration   4: 1775346.518 ops/s
[info] # Warmup Iteration   5: 1766113.715 ops/s
[info] Iteration   1: 1782484.401 ops/s
[info]                  ·gc.alloc.rate:                   2318.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              2047.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2363.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.926 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1780196.489 ops/s
[info]                  ·gc.alloc.rate:                   2301.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              2034.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1768.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1675838.456 ops/s
[info]                  ·gc.alloc.rate:                   2261.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              2123.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1879.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.929 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1784765.997 ops/s
[info]                  ·gc.alloc.rate:               2311.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2356.872 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1791696.089 ops/s
[info]                  ·gc.alloc.rate:                   2292.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              2013.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1765.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1762996.286 ±(99.9%) 188344.517 ops/s [Average]
[info]   (min, avg, max) = (1675838.456, 1762996.286, 1791696.089), stdev = 48912.473
[info]   CI (99.9%): [1574651.769, 1951340.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2297.128 ±(99.9%) 85.721 MB/sec [Average]
[info]   (min, avg, max) = (2261.652, 2297.128, 2318.848), stdev = 22.261
[info]   CI (99.9%): [2211.407, 2382.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2051.411 ±(99.9%) 162.607 B/op [Average]
[info]   (min, avg, max) = (2013.524, 2051.411, 2123.615), stdev = 42.229
[info]   CI (99.9%): [1888.804, 2214.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2272.244 ±(99.9%) 1414.497 MB/sec [Average]
[info]   (min, avg, max) = (2001.022, 2272.244, 2676.569), stdev = 367.340
[info]   CI (99.9%): [857.747, 3686.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2026.645 ±(99.9%) 1185.273 B/op [Average]
[info]   (min, avg, max) = (1765.157, 2026.645, 2363.223), stdev = 307.812
[info]   CI (99.9%): [841.372, 3211.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.096 ±(99.9%) 7.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.096, 4.447), stdev = 1.921
[info]   CI (99.9%): [≈ 0, 8.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.978 ±(99.9%) 6.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.978, 3.926), stdev = 1.695
[info]   CI (99.9%): [≈ 0, 7.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.685 ops/s
[info] # Warmup Iteration   2: 2703905.108 ops/s
[info] # Warmup Iteration   3: 2901748.271 ops/s
[info] # Warmup Iteration   4: 3005993.782 ops/s
[info] # Warmup Iteration   5: 2968391.232 ops/s
[info] Iteration   1: 3006121.925 ops/s
[info]                  ·gc.alloc.rate:               583.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 347.370 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3021768.718 ops/s
[info]                  ·gc.alloc.rate:      568.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3002073.151 ops/s
[info]                  ·gc.alloc.rate:               587.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 348.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2992770.351 ops/s
[info]                  ·gc.alloc.rate:               580.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 349.269 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2992285.365 ops/s
[info]                  ·gc.alloc.rate:                   580.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   3003003.902 ±(99.9%) 46460.507 ops/s [Average]
[info]   (min, avg, max) = (2992285.365, 3003003.902, 3021768.718), stdev = 12065.646
[info]   CI (99.9%): [2956543.395, 3049464.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   580.089 ±(99.9%) 27.838 MB/sec [Average]
[info]   (min, avg, max) = (568.323, 580.089, 587.625), stdev = 7.229
[info]   CI (99.9%): [552.251, 607.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.025 ±(99.9%) 17.858 B/op [Average]
[info]   (min, avg, max) = (296.000, 304.025, 308.045), stdev = 4.638
[info]   CI (99.9%): [286.167, 321.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.337 ±(99.9%) 1143.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.337, 664.871), stdev = 297.027
[info]   CI (99.9%): [≈ 0, 1675.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   278.900 ±(99.9%) 600.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 278.900, 349.676), stdev = 155.913
[info]   CI (99.9%): [≈ 0, 879.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162962.000 ops/s
[info] # Warmup Iteration   2: 1427435.110 ops/s
[info] # Warmup Iteration   3: 1685045.176 ops/s
[info] # Warmup Iteration   4: 1849193.188 ops/s
[info] # Warmup Iteration   5: 1848264.890 ops/s
[info] Iteration   1: 1854908.479 ops/s
[info]                  ·gc.alloc.rate:      367.709 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1849993.545 ops/s
[info]                  ·gc.alloc.rate:               382.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          325.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 562.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1851205.541 ops/s
[info]                  ·gc.alloc.rate:      366.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1845832.249 ops/s
[info]                  ·gc.alloc.rate:                   382.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1845274.657 ops/s
[info]                  ·gc.alloc.rate:               389.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          332.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 564.739 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1849442.894 ±(99.9%) 15365.675 ops/s [Average]
[info]   (min, avg, max) = (1845274.657, 1849442.894, 1854908.479), stdev = 3990.417
[info]   CI (99.9%): [1834077.219, 1864808.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   377.706 ±(99.9%) 38.230 MB/sec [Average]
[info]   (min, avg, max) = (366.987, 377.706, 389.538), stdev = 9.928
[info]   CI (99.9%): [339.476, 415.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   321.427 ±(99.9%) 34.783 B/op [Average]
[info]   (min, avg, max) = (312.000, 321.427, 332.174), stdev = 9.033
[info]   CI (99.9%): [286.644, 356.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.043 ±(99.9%) 1395.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.043, 662.266), stdev = 362.449
[info]   CI (99.9%): [≈ 0, 1792.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   338.302 ±(99.9%) 1189.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 338.302, 564.739), stdev = 308.827
[info]   CI (99.9%): [≈ 0, 1527.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 893407.137 ops/s
[info] # Warmup Iteration   2: 2087740.221 ops/s
[info] # Warmup Iteration   3: 2302409.372 ops/s
[info] # Warmup Iteration   4: 2302163.160 ops/s
[info] # Warmup Iteration   5: 2265770.920 ops/s
[info] Iteration   1: 2272012.610 ops/s
[info]                  ·gc.alloc.rate:                   437.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2285917.616 ops/s
[info]                  ·gc.alloc.rate:      429.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2276370.151 ops/s
[info]                  ·gc.alloc.rate:               448.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          310.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2266617.206 ops/s
[info]                  ·gc.alloc.rate:                   440.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2270913.484 ops/s
[info]                  ·gc.alloc.rate:      427.093 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2274366.213 ±(99.9%) 28228.042 ops/s [Average]
[info]   (min, avg, max) = (2266617.206, 2274366.213, 2285917.616), stdev = 7330.733
[info]   CI (99.9%): [2246138.171, 2302594.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   436.689 ±(99.9%) 33.244 MB/sec [Average]
[info]   (min, avg, max) = (427.093, 436.689, 448.785), stdev = 8.633
[info]   CI (99.9%): [403.445, 469.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   302.189 ±(99.9%) 23.993 B/op [Average]
[info]   (min, avg, max) = (296.000, 302.189, 310.284), stdev = 6.231
[info]   CI (99.9%): [278.196, 326.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.998 ±(99.9%) 1323.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.998, 669.207), stdev = 343.832
[info]   CI (99.9%): [≈ 0, 1693.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   256.338 ±(99.9%) 917.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 256.338, 464.635), stdev = 238.216
[info]   CI (99.9%): [≈ 0, 1173.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134579.688 ops/s
[info] # Warmup Iteration   2: 1604343.061 ops/s
[info] # Warmup Iteration   3: 1759453.522 ops/s
[info] # Warmup Iteration   4: 1700907.059 ops/s
[info] # Warmup Iteration   5: 1905911.014 ops/s
[info] Iteration   1: 1904098.151 ops/s
[info]                  ·gc.alloc.rate:      358.111 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1897417.404 ops/s
[info]                  ·gc.alloc.rate:               374.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          310.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 550.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1895500.742 ops/s
[info]                  ·gc.alloc.rate:      356.491 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1868360.273 ops/s
[info]                  ·gc.alloc.rate:               368.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1871142.602 ops/s
[info]                  ·gc.alloc.rate:      351.916 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1887303.834 ±(99.9%) 63025.015 ops/s [Average]
[info]   (min, avg, max) = (1868360.273, 1887303.834, 1904098.151), stdev = 16367.396
[info]   CI (99.9%): [1824278.820, 1950328.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   361.887 ±(99.9%) 35.946 MB/sec [Average]
[info]   (min, avg, max) = (351.916, 361.887, 374.816), stdev = 9.335
[info]   CI (99.9%): [325.941, 397.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   301.776 ±(99.9%) 30.479 B/op [Average]
[info]   (min, avg, max) = (296.000, 301.776, 310.889), stdev = 7.915
[info]   CI (99.9%): [271.297, 332.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   265.433 ±(99.9%) 1399.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.433, 663.678), stdev = 363.459
[info]   CI (99.9%): [≈ 0, 1664.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   221.846 ±(99.9%) 1169.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 221.846, 558.907), stdev = 303.791
[info]   CI (99.9%): [≈ 0, 1391.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266982.799 ops/s
[info] # Warmup Iteration   2: 2145856.972 ops/s
[info] # Warmup Iteration   3: 2507664.907 ops/s
[info] # Warmup Iteration   4: 2525247.266 ops/s
[info] # Warmup Iteration   5: 2509146.967 ops/s
[info] Iteration   1: 2507288.623 ops/s
[info]                  ·gc.alloc.rate:                   1802.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              1131.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 2490940.264 ops/s
[info]                  ·gc.alloc.rate:                   1841.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              1163.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2513235.050 ops/s
[info]                  ·gc.alloc.rate:                   1812.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              1134.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1253.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2500089.145 ops/s
[info]                  ·gc.alloc.rate:                   1790.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              1127.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2538053.094 ops/s
[info]                  ·gc.alloc.rate:                   1796.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1113.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     826.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2509921.235 ±(99.9%) 68511.731 ops/s [Average]
[info]   (min, avg, max) = (2490940.264, 2509921.235, 2538053.094), stdev = 17792.279
[info]   CI (99.9%): [2441409.504, 2578432.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1808.601 ±(99.9%) 77.407 MB/sec [Average]
[info]   (min, avg, max) = (1790.689, 1808.601, 1841.543), stdev = 20.102
[info]   CI (99.9%): [1731.194, 1886.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1134.112 ±(99.9%) 70.109 B/op [Average]
[info]   (min, avg, max) = (1113.749, 1134.112, 1163.358), stdev = 18.207
[info]   CI (99.9%): [1064.004, 1204.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1736.284 ±(99.9%) 1405.598 MB/sec [Average]
[info]   (min, avg, max) = (1333.634, 1736.284, 2006.034), stdev = 365.029
[info]   CI (99.9%): [330.686, 3141.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1089.036 ±(99.9%) 888.108 B/op [Average]
[info]   (min, avg, max) = (826.984, 1089.036, 1259.362), stdev = 230.639
[info]   CI (99.9%): [200.928, 1977.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.868 ±(99.9%) 7.118 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.868, 4.175), stdev = 1.849
[info]   CI (99.9%): [≈ 0, 7.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.548 ±(99.9%) 4.497 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.548, 2.637), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.062
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.632 ops/s
[info] # Warmup Iteration   2: 3061533.051 ops/s
[info] # Warmup Iteration   3: 3419136.628 ops/s
[info] # Warmup Iteration   4: 3645643.709 ops/s
[info] # Warmup Iteration   5: 3666178.149 ops/s
[info] Iteration   1: 3610927.502 ops/s
[info]                  ·gc.alloc.rate:               959.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.624 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3539932.933 ops/s
[info]                  ·gc.alloc.rate:                   935.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              415.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     295.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3652324.170 ops/s
[info]                  ·gc.alloc.rate:                   986.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              425.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3679882.476 ops/s
[info]                  ·gc.alloc.rate:               978.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 284.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3666675.542 ops/s
[info]                  ·gc.alloc.rate:                   981.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              421.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3629948.525 ±(99.9%) 217889.536 ops/s [Average]
[info]   (min, avg, max) = (3539932.933, 3629948.525, 3679882.476), stdev = 56585.221
[info]   CI (99.9%): [3412058.988, 3847838.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   968.515 ±(99.9%) 81.259 MB/sec [Average]
[info]   (min, avg, max) = (935.512, 968.515, 986.971), stdev = 21.103
[info]   CI (99.9%): [887.256, 1049.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   419.859 ±(99.9%) 14.049 B/op [Average]
[info]   (min, avg, max) = (415.745, 419.859, 425.313), stdev = 3.649
[info]   CI (99.9%): [405.809, 433.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   931.971 ±(99.9%) 1406.240 MB/sec [Average]
[info]   (min, avg, max) = (664.473, 931.971, 1333.060), stdev = 365.196
[info]   CI (99.9%): [≈ 0, 2338.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   403.175 ±(99.9%) 596.687 B/op [Average]
[info]   (min, avg, max) = (284.771, 403.175, 573.557), stdev = 154.958
[info]   CI (99.9%): [≈ 0, 999.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429147.796 ops/s
[info] # Warmup Iteration   2: 3161886.419 ops/s
[info] # Warmup Iteration   3: 3374793.509 ops/s
[info] # Warmup Iteration   4: 3361825.613 ops/s
[info] # Warmup Iteration   5: 3225199.037 ops/s
[info] Iteration   1: 3391582.027 ops/s
[info]                  ·gc.alloc.rate:                   896.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3374674.388 ops/s
[info]                  ·gc.alloc.rate:                   907.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3386268.990 ops/s
[info]                  ·gc.alloc.rate:                   899.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3345812.948 ops/s
[info]                  ·gc.alloc.rate:                   887.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3347081.554 ops/s
[info]                  ·gc.alloc.rate:                   910.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3369083.981 ±(99.9%) 82998.730 ops/s [Average]
[info]   (min, avg, max) = (3345812.948, 3369083.981, 3391582.027), stdev = 21554.507
[info]   CI (99.9%): [3286085.251, 3452082.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   900.071 ±(99.9%) 35.166 MB/sec [Average]
[info]   (min, avg, max) = (887.123, 900.071, 910.220), stdev = 9.133
[info]   CI (99.9%): [864.905, 935.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   420.477 ±(99.9%) 19.164 B/op [Average]
[info]   (min, avg, max) = (416.021, 420.477, 427.985), stdev = 4.977
[info]   CI (99.9%): [401.313, 439.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   933.756 ±(99.9%) 1407.432 MB/sec [Average]
[info]   (min, avg, max) = (666.167, 933.756, 1335.352), stdev = 365.506
[info]   CI (99.9%): [≈ 0, 2341.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   436.518 ±(99.9%) 661.826 B/op [Average]
[info]   (min, avg, max) = (309.131, 436.518, 627.881), stdev = 171.874
[info]   CI (99.9%): [≈ 0, 1098.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.019, 0.042), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.009, 0.020), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.408
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1293705.447 ops/s
[info] # Warmup Iteration   2: 3485585.624 ops/s
[info] # Warmup Iteration   3: 3620536.610 ops/s
[info] # Warmup Iteration   4: 3665757.052 ops/s
[info] # Warmup Iteration   5: 3665303.860 ops/s
[info] Iteration   1: 3639248.612 ops/s
[info]                  ·gc.alloc.rate:                   985.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3608581.796 ops/s
[info]                  ·gc.alloc.rate:               985.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 291.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3641801.202 ops/s
[info]                  ·gc.alloc.rate:               988.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          426.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 578.968 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 3651713.665 ops/s
[info]                  ·gc.alloc.rate:               963.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 288.835 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3638747.753 ops/s
[info]                  ·gc.alloc.rate:                   971.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     580.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3636018.606 ±(99.9%) 62400.425 ops/s [Average]
[info]   (min, avg, max) = (3608581.796, 3636018.606, 3651713.665), stdev = 16205.192
[info]   CI (99.9%): [3573618.181, 3698419.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   979.009 ±(99.9%) 41.361 MB/sec [Average]
[info]   (min, avg, max) = (963.721, 979.009, 988.271), stdev = 10.741
[info]   CI (99.9%): [937.647, 1020.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   423.743 ±(99.9%) 22.693 B/op [Average]
[info]   (min, avg, max) = (415.265, 423.743, 429.932), stdev = 5.893
[info]   CI (99.9%): [401.051, 446.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.818 ±(99.9%) 1412.819 MB/sec [Average]
[info]   (min, avg, max) = (669.482, 1071.818, 1341.012), stdev = 366.905
[info]   CI (99.9%): [≈ 0, 2484.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   463.716 ±(99.9%) 609.203 B/op [Average]
[info]   (min, avg, max) = (288.835, 463.716, 580.017), stdev = 158.208
[info]   CI (99.9%): [≈ 0, 1072.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1220421.762 ops/s
[info] # Warmup Iteration   2: 3520295.907 ops/s
[info] # Warmup Iteration   3: 3903385.313 ops/s
[info] # Warmup Iteration   4: 3906281.793 ops/s
[info] # Warmup Iteration   5: 3887145.040 ops/s
[info] Iteration   1: 3905400.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3905100.828 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3907012.401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3893045.047 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3895999.558 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3901311.680 ±(99.9%) 24363.556 ops/s [Average]
[info]   (min, avg, max) = (3893045.047, 3901311.680, 3907012.401), stdev = 6327.138
[info]   CI (99.9%): [3876948.124, 3925675.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451920.291 ops/s
[info] # Warmup Iteration   2: 2776222.038 ops/s
[info] # Warmup Iteration   3: 3393930.515 ops/s
[info] # Warmup Iteration   4: 3370231.822 ops/s
[info] # Warmup Iteration   5: 3386394.095 ops/s
[info] Iteration   1: 3379831.945 ops/s
[info]                  ·gc.alloc.rate:                   891.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3325255.636 ops/s
[info]                  ·gc.alloc.rate:               931.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 632.150 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 3323200.571 ops/s
[info]                  ·gc.alloc.rate:               896.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.433 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3406795.938 ops/s
[info]                  ·gc.alloc.rate:               906.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 308.668 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3351441.014 ops/s
[info]                  ·gc.alloc.rate:                   890.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   3357305.021 ±(99.9%) 138589.435 ops/s [Average]
[info]   (min, avg, max) = (3323200.571, 3357305.021, 3406795.938), stdev = 35991.236
[info]   CI (99.9%): [3218715.585, 3495894.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   903.330 ±(99.9%) 65.809 MB/sec [Average]
[info]   (min, avg, max) = (890.518, 903.330, 931.658), stdev = 17.090
[info]   CI (99.9%): [837.521, 969.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   423.513 ±(99.9%) 39.869 B/op [Average]
[info]   (min, avg, max) = (414.999, 423.513, 440.949), stdev = 10.354
[info]   CI (99.9%): [383.645, 463.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   801.598 ±(99.9%) 1149.560 MB/sec [Average]
[info]   (min, avg, max) = (667.125, 801.598, 1335.636), stdev = 298.537
[info]   CI (99.9%): [≈ 0, 1951.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   376.399 ±(99.9%) 550.646 B/op [Average]
[info]   (min, avg, max) = (308.668, 376.399, 632.150), stdev = 143.001
[info]   CI (99.9%): [≈ 0, 927.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 782.468 ops/s
[info] # Warmup Iteration   2: 4591.212 ops/s
[info] # Warmup Iteration   3: 10847.676 ops/s
[info] # Warmup Iteration   4: 12668.886 ops/s
[info] # Warmup Iteration   5: 12573.854 ops/s
[info] Iteration   1: 12554.323 ops/s
[info]                  ·gc.alloc.rate:                   1601.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              200797.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250599.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 11188.071 ops/s
[info]                  ·gc.alloc.rate:                        1749.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                   246036.489 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.016 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.272 B/op
[info]                  ·gc.churn.Metaspace:                   0.045 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              6.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1505.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          211813.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      738.232 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              54.000 ms
[info] Iteration   3: 12029.187 ops/s
[info]                  ·gc.alloc.rate:                   1508.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              197403.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174050.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12168.383 ops/s
[info]                  ·gc.alloc.rate:                   1537.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              198873.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257771.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.880 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12115.850 ops/s
[info]                  ·gc.alloc.rate:                   1684.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              218789.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172541.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12011.163 ±(99.9%) 1933.492 ops/s [Average]
[info]   (min, avg, max) = (11188.071, 12011.163, 12554.323), stdev = 502.122
[info]   CI (99.9%): [10077.671, 13944.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1616.377 ±(99.9%) 385.800 MB/sec [Average]
[info]   (min, avg, max) = (1508.851, 1616.377, 1749.098), stdev = 100.191
[info]   CI (99.9%): [1230.576, 2002.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   212379.992 ±(99.9%) 79726.031 B/op [Average]
[info]   (min, avg, max) = (197403.339, 212379.992, 246036.489), stdev = 20704.597
[info]   CI (99.9%): [132653.961, 292106.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   0.454 ±(99.9%) 3.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.454, 2.272), stdev = 1.016
[info]   CI (99.9%): [≈ 0, 4.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace.norm":
[info]   1.256 ±(99.9%) 10.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.256, 6.282), stdev = 2.809
[info]   CI (99.9%): [≈ 0, 12.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1631.363 ±(99.9%) 1312.176 MB/sec [Average]
[info]   (min, avg, max) = (1328.241, 1631.363, 1999.012), stdev = 340.768
[info]   CI (99.9%): [319.187, 2943.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   213355.425 ±(99.9%) 156092.463 B/op [Average]
[info]   (min, avg, max) = (172541.718, 213355.425, 257771.703), stdev = 40536.717
[info]   CI (99.9%): [57262.962, 369447.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.695 ±(99.9%) 9.071 MB/sec [Average]
[info]   (min, avg, max) = (0.022, 1.695, 5.248), stdev = 2.356
[info]   CI (99.9%): [≈ 0, 10.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   231.872 ±(99.9%) 1263.126 B/op [Average]
[info]   (min, avg, max) = (2.880, 231.872, 738.232), stdev = 328.030
[info]   CI (99.9%): [≈ 0, 1494.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   79.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 15.800, 54.000), stdev = 22.118
[info]   CI (99.9%): [79.000, 79.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 507.750 ops/s
[info] # Warmup Iteration   2: 11574.313 ops/s
[info] # Warmup Iteration   3: 22632.013 ops/s
[info] # Warmup Iteration   4: 23093.415 ops/s
[info] # Warmup Iteration   5: 23246.765 ops/s
[info] Iteration   1: 22606.937 ops/s
[info]                  ·gc.alloc.rate:                   408.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              28446.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35615.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.449 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21366.260 ops/s
[info]                  ·gc.alloc.rate:               447.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          32980.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48652.866 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 22266.595 ops/s
[info]                  ·gc.alloc.rate:      389.236 MB/sec
[info]                  ·gc.alloc.rate.norm: 27510.704 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23222.371 ops/s
[info]                  ·gc.alloc.rate:                   342.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              23237.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44762.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.788 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23340.388 ops/s
[info]                  ·gc.alloc.rate:      332.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 22424.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22560.510 ±(99.9%) 3081.144 ops/s [Average]
[info]   (min, avg, max) = (21366.260, 22560.510, 23340.388), stdev = 800.163
[info]   CI (99.9%): [19479.366, 25641.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   384.206 ±(99.9%) 183.034 MB/sec [Average]
[info]   (min, avg, max) = (332.553, 384.206, 447.757), stdev = 47.533
[info]   CI (99.9%): [201.173, 567.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26919.775 ±(99.9%) 16470.138 B/op [Average]
[info]   (min, avg, max) = (22424.019, 26919.775, 32980.117), stdev = 4277.243
[info]   CI (99.9%): [10449.636, 43389.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.522 ±(99.9%) 1309.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.522, 660.540), stdev = 340.064
[info]   CI (99.9%): [≈ 0, 1675.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25806.291 ±(99.9%) 92525.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25806.291, 48652.866), stdev = 24028.486
[info]   CI (99.9%): [≈ 0, 118331.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.853), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.848 ±(99.9%) 98.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.848, 57.788), stdev = 25.689
[info]   CI (99.9%): [≈ 0, 110.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11540.532 ops/s
[info] # Warmup Iteration   2: 14772.203 ops/s
[info] # Warmup Iteration   3: 21853.737 ops/s
[info] # Warmup Iteration   4: 21714.204 ops/s
[info] # Warmup Iteration   5: 21634.191 ops/s
[info] Iteration   1: 21085.941 ops/s
[info]                  ·gc.alloc.rate:               389.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          29055.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38186.086 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 21650.871 ops/s
[info]                  ·gc.alloc.rate:      232.657 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21825.182 ops/s
[info]                  ·gc.alloc.rate:               247.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          17844.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36893.273 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 21978.084 ops/s
[info]                  ·gc.alloc.rate:      236.168 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21906.357 ops/s
[info]                  ·gc.alloc.rate:      235.401 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   21689.287 ±(99.9%) 1380.998 ops/s [Average]
[info]   (min, avg, max) = (21085.941, 21689.287, 21978.084), stdev = 358.641
[info]   CI (99.9%): [20308.289, 23070.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   268.200 ±(99.9%) 261.526 MB/sec [Average]
[info]   (min, avg, max) = (232.657, 268.200, 389.269), stdev = 67.918
[info]   CI (99.9%): [6.673, 529.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19527.087 ±(99.9%) 20569.030 B/op [Average]
[info]   (min, avg, max) = (16912.016, 19527.087, 29055.319), stdev = 5341.712
[info]   CI (99.9%): [≈ 0, 40096.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.664 ±(99.9%) 1079.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.664, 511.723), stdev = 280.248
[info]   CI (99.9%): [≈ 0, 1283.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15015.872 ±(99.9%) 79193.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15015.872, 38186.086), stdev = 20566.409
[info]   CI (99.9%): [≈ 0, 94209.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71.867 ops/s
[info] # Warmup Iteration   2: 1492.760 ops/s
[info] # Warmup Iteration   3: 5953.150 ops/s
[info] # Warmup Iteration   4: 8253.372 ops/s
[info] # Warmup Iteration   5: 8504.144 ops/s
[info] Iteration   1: 8521.388 ops/s
[info]                  ·gc.alloc.rate:                   1867.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              344738.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368902.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8539.986 ops/s
[info]                  ·gc.alloc.rate:                   1873.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              345091.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368677.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.508 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 8770.807 ops/s
[info]                  ·gc.alloc.rate:                   1894.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              339952.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239192.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8759.062 ops/s
[info]                  ·gc.alloc.rate:                   1903.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              342006.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359060.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8805.585 ops/s
[info]                  ·gc.alloc.rate:               1949.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          348336.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 357442.035 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   8679.366 ±(99.9%) 527.368 ops/s [Average]
[info]   (min, avg, max) = (8521.388, 8679.366, 8805.585), stdev = 136.956
[info]   CI (99.9%): [8151.997, 9206.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1897.654 ±(99.9%) 126.026 MB/sec [Average]
[info]   (min, avg, max) = (1867.315, 1897.654, 1949.800), stdev = 32.729
[info]   CI (99.9%): [1771.628, 2023.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   344025.389 ±(99.9%) 12312.295 B/op [Average]
[info]   (min, avg, max) = (339952.845, 344025.389, 348336.827), stdev = 3197.464
[info]   CI (99.9%): [331713.094, 356337.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1866.302 ±(99.9%) 1147.878 MB/sec [Average]
[info]   (min, avg, max) = (1333.049, 1866.302, 2001.135), stdev = 298.100
[info]   CI (99.9%): [718.423, 3014.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   338655.034 ±(99.9%) 215070.453 B/op [Average]
[info]   (min, avg, max) = (239192.952, 338655.034, 368902.398), stdev = 55853.114
[info]   CI (99.9%): [123584.582, 553725.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 4.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 2.874), stdev = 1.212
[info]   CI (99.9%): [≈ 0, 5.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   133.622 ±(99.9%) 860.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.622, 529.508), stdev = 223.470
[info]   CI (99.9%): [≈ 0, 994.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 12.000), stdev = 3.962
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8097.687 ops/s
[info] # Warmup Iteration   2: 48398.474 ops/s
[info] # Warmup Iteration   3: 60847.962 ops/s
[info] # Warmup Iteration   4: 63359.050 ops/s
[info] # Warmup Iteration   5: 66744.857 ops/s
[info] Iteration   1: 66303.647 ops/s
[info]                  ·gc.alloc.rate:               866.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          20558.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15709.270 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 64005.313 ops/s
[info]                  ·gc.alloc.rate:               859.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          21122.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32611.372 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 66520.124 ops/s
[info]                  ·gc.alloc.rate:                   867.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              20524.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15721.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 66476.206 ops/s
[info]                  ·gc.alloc.rate:               867.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          20531.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15731.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 65131.286 ops/s
[info]                  ·gc.alloc.rate:               858.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          20729.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16087.984 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   65687.315 ±(99.9%) 4233.119 ops/s [Average]
[info]   (min, avg, max) = (64005.313, 65687.315, 66520.124), stdev = 1099.327
[info]   CI (99.9%): [61454.196, 69920.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   863.623 ±(99.9%) 17.697 MB/sec [Average]
[info]   (min, avg, max) = (858.214, 863.623, 867.511), stdev = 4.596
[info]   CI (99.9%): [845.926, 881.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20693.489 ±(99.9%) 978.456 B/op [Average]
[info]   (min, avg, max) = (20524.800, 20693.489, 21122.779), stdev = 254.102
[info]   CI (99.9%): [19715.033, 21671.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.622 ±(99.9%) 1140.164 MB/sec [Average]
[info]   (min, avg, max) = (661.784, 796.622, 1326.289), stdev = 296.097
[info]   CI (99.9%): [≈ 0, 1936.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19172.283 ±(99.9%) 28935.150 B/op [Average]
[info]   (min, avg, max) = (15709.270, 19172.283, 32611.372), stdev = 7514.366
[info]   CI (99.9%): [≈ 0, 48107.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.197 ±(99.9%) 1.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.985), stdev = 0.441
[info]   CI (99.9%): [≈ 0, 1.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33049.626 ops/s
[info] # Warmup Iteration   2: 88776.887 ops/s
[info] # Warmup Iteration   3: 106639.791 ops/s
[info] # Warmup Iteration   4: 110528.810 ops/s
[info] # Warmup Iteration   5: 110149.856 ops/s
[info] Iteration   1: 110538.846 ops/s
[info]                  ·gc.alloc.rate:                   722.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              10286.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9513.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 110321.141 ops/s
[info]                  ·gc.alloc.rate:               724.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          10341.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9541.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 110485.181 ops/s
[info]                  ·gc.alloc.rate:                   722.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              10287.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9527.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 110944.372 ops/s
[info]                  ·gc.alloc.rate:                   728.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              10337.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9487.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 110489.879 ops/s
[info]                  ·gc.alloc.rate:               752.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          10721.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19061.395 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   110555.884 ±(99.9%) 894.132 ops/s [Average]
[info]   (min, avg, max) = (110321.141, 110555.884, 110944.372), stdev = 232.203
[info]   CI (99.9%): [109661.752, 111450.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   730.284 ±(99.9%) 49.595 MB/sec [Average]
[info]   (min, avg, max) = (722.191, 730.284, 752.846), stdev = 12.880
[info]   CI (99.9%): [680.688, 779.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10394.968 ±(99.9%) 710.967 B/op [Average]
[info]   (min, avg, max) = (10286.824, 10394.968, 10721.892), stdev = 184.636
[info]   CI (99.9%): [9684.001, 11105.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.656 ±(99.9%) 1153.253 MB/sec [Average]
[info]   (min, avg, max) = (668.311, 802.656, 1338.410), stdev = 299.496
[info]   CI (99.9%): [≈ 0, 1955.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11426.147 ±(99.9%) 16435.624 B/op [Average]
[info]   (min, avg, max) = (9487.836, 11426.147, 19061.395), stdev = 4268.279
[info]   CI (99.9%): [≈ 0, 27861.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 0.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.297), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33607.708 ops/s
[info] # Warmup Iteration   2: 113880.004 ops/s
[info] # Warmup Iteration   3: 117082.394 ops/s
[info] # Warmup Iteration   4: 119825.605 ops/s
[info] # Warmup Iteration   5: 119907.516 ops/s
[info] Iteration   1: 120168.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 120008.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 114657.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 120323.760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 120601.120 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   119151.920 ±(99.9%) 9710.789 ops/s [Average]
[info]   (min, avg, max) = (114657.639, 119151.920, 120601.120), stdev = 2521.861
[info]   CI (99.9%): [109441.131, 128862.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73726.183 ops/s
[info] # Warmup Iteration   2: 343482.242 ops/s
[info] # Warmup Iteration   3: 422773.009 ops/s
[info] # Warmup Iteration   4: 431977.377 ops/s
[info] # Warmup Iteration   5: 432004.019 ops/s
[info] Iteration   1: 429331.743 ops/s
[info]                  ·gc.alloc.rate:                   2450.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              8983.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7333.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 433815.699 ops/s
[info]                  ·gc.alloc.rate:                   2500.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              9071.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9662.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.776 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 414089.922 ops/s
[info]                  ·gc.alloc.rate:                   2547.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              9683.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10124.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 390196.583 ops/s
[info]                  ·gc.alloc.rate:                   2240.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              9037.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8074.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 390324.292 ops/s
[info]                  ·gc.alloc.rate:                   2227.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              8981.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8090.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   411551.648 ±(99.9%) 79962.356 ops/s [Average]
[info]   (min, avg, max) = (390196.583, 411551.648, 433815.699), stdev = 20765.970
[info]   CI (99.9%): [331589.292, 491514.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2393.382 ±(99.9%) 575.646 MB/sec [Average]
[info]   (min, avg, max) = (2227.512, 2393.382, 2547.749), stdev = 149.493
[info]   CI (99.9%): [1817.736, 2969.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9151.438 ±(99.9%) 1153.984 B/op [Average]
[info]   (min, avg, max) = (8981.796, 9151.438, 9683.186), stdev = 299.686
[info]   CI (99.9%): [7997.453, 10305.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2267.200 ±(99.9%) 1393.505 MB/sec [Average]
[info]   (min, avg, max) = (2000.415, 2267.200, 2663.987), stdev = 361.889
[info]   CI (99.9%): [873.695, 3660.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8657.024 ±(99.9%) 4547.243 B/op [Average]
[info]   (min, avg, max) = (7333.280, 8657.024, 10124.968), stdev = 1180.905
[info]   CI (99.9%): [4109.780, 13204.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.998 ±(99.9%) 3.857 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.998, 2.326), stdev = 1.002
[info]   CI (99.9%): [≈ 0, 4.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.695 ±(99.9%) 14.246 B/op [Average]
[info]   (min, avg, max) = (0.084, 3.695, 8.525), stdev = 3.700
[info]   CI (99.9%): [≈ 0, 17.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74307.679 ops/s
[info] # Warmup Iteration   2: 544991.658 ops/s
[info] # Warmup Iteration   3: 874171.772 ops/s
[info] # Warmup Iteration   4: 954126.792 ops/s
[info] # Warmup Iteration   5: 887310.839 ops/s
[info] Iteration   1: 951267.162 ops/s
[info]                  ·gc.alloc.rate:               664.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          1098.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1094.454 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 951640.556 ops/s
[info]                  ·gc.alloc.rate:               671.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          1110.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1094.048 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 953223.564 ops/s
[info]                  ·gc.alloc.rate:               680.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          1123.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1093.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 954830.563 ops/s
[info]                  ·gc.alloc.rate:               680.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          1122.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1091.450 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 936187.794 ops/s
[info]                  ·gc.alloc.rate:                   660.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1110.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1114.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   949429.928 ±(99.9%) 29019.076 ops/s [Average]
[info]   (min, avg, max) = (936187.794, 949429.928, 954830.563), stdev = 7536.162
[info]   CI (99.9%): [920410.851, 978449.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   671.534 ±(99.9%) 35.600 MB/sec [Average]
[info]   (min, avg, max) = (660.724, 671.534, 680.936), stdev = 9.245
[info]   CI (99.9%): [635.934, 707.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1113.093 ±(99.9%) 39.350 B/op [Average]
[info]   (min, avg, max) = (1098.754, 1113.093, 1123.553), stdev = 10.219
[info]   CI (99.9%): [1073.743, 1152.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.083 ±(99.9%) 2.030 MB/sec [Average]
[info]   (min, avg, max) = (661.521, 662.083, 662.853), stdev = 0.527
[info]   CI (99.9%): [660.053, 664.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1097.506 ±(99.9%) 36.374 B/op [Average]
[info]   (min, avg, max) = (1091.450, 1097.506, 1114.278), stdev = 9.446
[info]   CI (99.9%): [1061.132, 1133.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641802.811 ops/s
[info] # Warmup Iteration   2: 1936505.769 ops/s
[info] # Warmup Iteration   3: 1968437.427 ops/s
[info] # Warmup Iteration   4: 1975287.696 ops/s
[info] # Warmup Iteration   5: 1965493.684 ops/s
[info] Iteration   1: 2019318.388 ops/s
[info]                  ·gc.alloc.rate:                   1012.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              788.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     521.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2014001.274 ops/s
[info]                  ·gc.alloc.rate:                   1038.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              811.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1045.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1960544.190 ops/s
[info]                  ·gc.alloc.rate:               997.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          800.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.449 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1933625.549 ops/s
[info]                  ·gc.alloc.rate:                   995.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              810.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1090.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1988083.700 ops/s
[info]                  ·gc.alloc.rate:               1007.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          797.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 530.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1983114.620 ±(99.9%) 139476.023 ops/s [Average]
[info]   (min, avg, max) = (1933625.549, 1983114.620, 2019318.388), stdev = 36221.480
[info]   CI (99.9%): [1843638.598, 2122590.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1010.080 ±(99.9%) 66.288 MB/sec [Average]
[info]   (min, avg, max) = (995.480, 1010.080, 1038.233), stdev = 17.215
[info]   CI (99.9%): [943.792, 1076.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   801.576 ±(99.9%) 35.826 B/op [Average]
[info]   (min, avg, max) = (788.852, 801.576, 811.078), stdev = 9.304
[info]   CI (99.9%): [765.750, 837.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.420 ±(99.9%) 1412.233 MB/sec [Average]
[info]   (min, avg, max) = (668.813, 937.420, 1339.595), stdev = 366.752
[info]   CI (99.9%): [≈ 0, 2349.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   745.098 ±(99.9%) 1137.299 B/op [Average]
[info]   (min, avg, max) = (521.276, 745.098, 1090.388), stdev = 295.353
[info]   CI (99.9%): [≈ 0, 1882.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.020 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.033), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4904.152 ops/s
[info] # Warmup Iteration   2: 123730.209 ops/s
[info] # Warmup Iteration   3: 176978.230 ops/s
[info] # Warmup Iteration   4: 193772.898 ops/s
[info] # Warmup Iteration   5: 194836.891 ops/s
[info] Iteration   1: 192831.379 ops/s
[info]                  ·gc.alloc.rate:                   4735.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              38648.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4700.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38366.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 188676.854 ops/s
[info]                  ·gc.alloc.rate:                   4637.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              38684.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4048.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33774.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 195233.260 ops/s
[info]                  ·gc.alloc.rate:                   4821.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              38864.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4741.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38218.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 184519.173 ops/s
[info]                  ·gc.alloc.rate:                   4623.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              39432.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4748.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40499.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.475 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 194603.219 ops/s
[info]                  ·gc.alloc.rate:                   4730.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              38258.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4753.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38445.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   191172.777 ±(99.9%) 17381.989 ops/s [Average]
[info]   (min, avg, max) = (184519.173, 191172.777, 195233.260), stdev = 4514.047
[info]   CI (99.9%): [173790.788, 208554.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4709.564 ±(99.9%) 311.865 MB/sec [Average]
[info]   (min, avg, max) = (4623.040, 4709.564, 4821.184), stdev = 80.990
[info]   CI (99.9%): [4397.698, 5021.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   38777.664 ±(99.9%) 1647.366 B/op [Average]
[info]   (min, avg, max) = (38258.155, 38777.664, 39432.744), stdev = 427.816
[info]   CI (99.9%): [37130.298, 40425.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4598.566 ±(99.9%) 1185.727 MB/sec [Average]
[info]   (min, avg, max) = (4048.979, 4598.566, 4753.832), stdev = 307.930
[info]   CI (99.9%): [3412.839, 5784.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37861.043 ±(99.9%) 9507.960 B/op [Average]
[info]   (min, avg, max) = (33774.483, 37861.043, 40499.644), stdev = 2469.187
[info]   CI (99.9%): [28353.082, 47369.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.279 ±(99.9%) 2.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.279, 1.228), stdev = 0.531
[info]   CI (99.9%): [≈ 0, 2.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.367 ±(99.9%) 17.458 B/op [Average]
[info]   (min, avg, max) = (0.168, 2.367, 10.475), stdev = 4.534
[info]   CI (99.9%): [≈ 0, 19.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72281.152 ops/s
[info] # Warmup Iteration   2: 363300.044 ops/s
[info] # Warmup Iteration   3: 463765.071 ops/s
[info] # Warmup Iteration   4: 458173.112 ops/s
[info] # Warmup Iteration   5: 462381.918 ops/s
[info] Iteration   1: 472131.871 ops/s
[info]                  ·gc.alloc.rate:                   1542.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              5140.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4452.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 469404.641 ops/s
[info]                  ·gc.alloc.rate:               1537.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          5154.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4480.502 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 467512.323 ops/s
[info]                  ·gc.alloc.rate:                   1527.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              5143.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4503.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 472788.844 ops/s
[info]                  ·gc.alloc.rate:                   1551.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              5165.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6656.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 474666.382 ops/s
[info]                  ·gc.alloc.rate:                   1551.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              5143.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4417.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   471300.812 ±(99.9%) 10921.867 ops/s [Average]
[info]   (min, avg, max) = (467512.323, 471300.812, 474666.382), stdev = 2836.374
[info]   CI (99.9%): [460378.946, 482222.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1542.111 ±(99.9%) 38.347 MB/sec [Average]
[info]   (min, avg, max) = (1527.862, 1542.111, 1551.517), stdev = 9.959
[info]   CI (99.9%): [1503.764, 1580.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5149.474 ±(99.9%) 38.740 B/op [Average]
[info]   (min, avg, max) = (5140.940, 5149.474, 5165.031), stdev = 10.061
[info]   CI (99.9%): [5110.734, 5188.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.383 ±(99.9%) 1143.684 MB/sec [Average]
[info]   (min, avg, max) = (1332.252, 1468.383, 1999.681), stdev = 297.011
[info]   CI (99.9%): [324.699, 2612.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4902.082 ±(99.9%) 3779.557 B/op [Average]
[info]   (min, avg, max) = (4417.345, 4902.082, 6656.978), stdev = 981.539
[info]   CI (99.9%): [1122.526, 8681.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.330), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 8.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.012 ±(99.9%) 24.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.012, 14.577), stdev = 6.465
[info]   CI (99.9%): [≈ 0, 27.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 2.864
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239751.552 ops/s
[info] # Warmup Iteration   2: 824256.845 ops/s
[info] # Warmup Iteration   3: 868808.504 ops/s
[info] # Warmup Iteration   4: 925079.915 ops/s
[info] # Warmup Iteration   5: 930241.961 ops/s
[info] Iteration   1: 928187.228 ops/s
[info]                  ·gc.alloc.rate:                   450.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              763.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1118.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 929427.625 ops/s
[info]                  ·gc.alloc.rate:      441.748 MB/sec
[info]                  ·gc.alloc.rate.norm: 747.993 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 928240.002 ops/s
[info]                  ·gc.alloc.rate:               438.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1118.234 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 927632.006 ops/s
[info]                  ·gc.alloc.rate:                   450.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              764.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 928798.893 ops/s
[info]                  ·gc.alloc.rate:      429.636 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   928457.151 ±(99.9%) 2625.424 ops/s [Average]
[info]   (min, avg, max) = (927632.006, 928457.151, 929427.625), stdev = 681.814
[info]   CI (99.9%): [925831.727, 931082.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   442.176 ±(99.9%) 33.482 MB/sec [Average]
[info]   (min, avg, max) = (429.636, 442.176, 450.400), stdev = 8.695
[info]   CI (99.9%): [408.694, 475.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   749.531 ±(99.9%) 57.984 B/op [Average]
[info]   (min, avg, max) = (728.000, 749.531, 764.172), stdev = 15.058
[info]   CI (99.9%): [691.547, 807.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   395.914 ±(99.9%) 1391.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 395.914, 660.493), stdev = 361.418
[info]   CI (99.9%): [≈ 0, 1787.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   671.431 ±(99.9%) 2360.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 671.431, 1120.626), stdev = 612.931
[info]   CI (99.9%): [≈ 0, 3031.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.035), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 703720.420 ops/s
[info] # Warmup Iteration   2: 1626099.621 ops/s
[info] # Warmup Iteration   3: 1616729.939 ops/s
[info] # Warmup Iteration   4: 1622279.041 ops/s
[info] # Warmup Iteration   5: 1560266.808 ops/s
[info] Iteration   1: 1624901.193 ops/s
[info]                  ·gc.alloc.rate:               768.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 647.156 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1612722.795 ops/s
[info]                  ·gc.alloc.rate:                   775.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1304.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1617540.176 ops/s
[info]                  ·gc.alloc.rate:               769.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 651.095 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1534928.371 ops/s
[info]                  ·gc.alloc.rate:               738.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          757.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 686.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1617011.127 ops/s
[info]                  ·gc.alloc.rate:               764.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 651.627 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1601420.732 ±(99.9%) 144119.058 ops/s [Average]
[info]   (min, avg, max) = (1534928.371, 1601420.732, 1624901.193), stdev = 37427.262
[info]   CI (99.9%): [1457301.674, 1745539.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   763.417 ±(99.9%) 54.496 MB/sec [Average]
[info]   (min, avg, max) = (738.934, 763.417, 775.024), stdev = 14.152
[info]   CI (99.9%): [708.922, 817.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.277 ±(99.9%) 24.433 B/op [Average]
[info]   (min, avg, max) = (744.280, 750.277, 757.690), stdev = 6.345
[info]   CI (99.9%): [725.844, 774.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.700 ±(99.9%) 1150.793 MB/sec [Average]
[info]   (min, avg, max) = (668.118, 802.700, 1337.312), stdev = 298.857
[info]   CI (99.9%): [≈ 0, 1953.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   788.155 ±(99.9%) 1113.663 B/op [Average]
[info]   (min, avg, max) = (647.156, 788.155, 1304.749), stdev = 289.215
[info]   CI (99.9%): [≈ 0, 1901.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452990.673 ops/s
[info] # Warmup Iteration   2: 1507267.261 ops/s
[info] # Warmup Iteration   3: 1708483.969 ops/s
[info] # Warmup Iteration   4: 1708112.054 ops/s
[info] # Warmup Iteration   5: 1712870.689 ops/s
[info] Iteration   1: 1713556.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1711539.444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1706553.954 ops/s
[info]                  ·gc.alloc.rate:      0.261 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.241 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1708152.628 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1706705.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1709301.596 ±(99.9%) 11980.469 ops/s [Average]
[info]   (min, avg, max) = (1706553.954, 1709301.596, 1713556.405), stdev = 3111.290
[info]   CI (99.9%): [1697321.127, 1721282.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.052 ±(99.9%) 0.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.052, 0.261), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.048 ±(99.9%) 0.414 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.048, 0.241), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67116.064 ops/s
[info] # Warmup Iteration   2: 493723.674 ops/s
[info] # Warmup Iteration   3: 529573.727 ops/s
[info] # Warmup Iteration   4: 588431.383 ops/s
[info] # Warmup Iteration   5: 652248.441 ops/s
[info] Iteration   1: 663776.119 ops/s
[info]                  ·gc.alloc.rate:                   927.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              2199.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3130.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 665497.201 ops/s
[info]                  ·gc.alloc.rate:               930.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          2201.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1562.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 654926.646 ops/s
[info]                  ·gc.alloc.rate:               912.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          2192.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1588.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 662872.430 ops/s
[info]                  ·gc.alloc.rate:               931.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          2211.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3138.047 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   5: 642759.968 ops/s
[info]                  ·gc.alloc.rate:                   889.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              2179.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1620.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   657966.473 ±(99.9%) 36276.388 ops/s [Average]
[info]   (min, avg, max) = (642759.968, 657966.473, 665497.201), stdev = 9420.863
[info]   CI (99.9%): [621690.085, 694242.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   918.490 ±(99.9%) 68.372 MB/sec [Average]
[info]   (min, avg, max) = (889.905, 918.490, 931.414), stdev = 17.756
[info]   CI (99.9%): [850.118, 986.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2196.789 ±(99.9%) 46.394 B/op [Average]
[info]   (min, avg, max) = (2179.005, 2196.789, 2211.492), stdev = 12.048
[info]   CI (99.9%): [2150.395, 2243.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   925.124 ±(99.9%) 1391.747 MB/sec [Average]
[info]   (min, avg, max) = (660.841, 925.124, 1321.652), stdev = 361.432
[info]   CI (99.9%): [≈ 0, 2316.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2207.946 ±(99.9%) 3257.025 B/op [Average]
[info]   (min, avg, max) = (1562.805, 2207.946, 3138.047), stdev = 845.839
[info]   CI (99.9%): [≈ 0, 5464.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 6.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.906), stdev = 1.744
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.922 ±(99.9%) 16.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.922, 9.563), stdev = 4.271
[info]   CI (99.9%): [≈ 0, 18.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 11.000), stdev = 3.286
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:14
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                      N/A  thrpt    5   1009313.120 ±  105186.253   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      2215.464 ±     241.222  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      3454.462 ±      63.564    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2127.797 ±    1142.875  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      3322.581 ±    1924.885    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         1.033 ±       7.650  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.549 ±      11.370    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.readJacksonScala                                                               N/A  thrpt    5   2009130.997 ±  143348.842   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1296.615 ±      74.045  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5      1015.652 ±      32.781    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1201.594 ±    1144.753  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       942.109 ±     908.935    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.187 ±       1.391  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.146 ±       1.079    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                      N/A  thrpt    5        16.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                              N/A  thrpt    5   5329787.844 ±   95448.442   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       359.372 ±      28.573  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       106.113 ±       7.930    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       338.467 ±    1215.247  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        99.890 ±     358.640    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                     N/A  thrpt    5        12.000                    ms
[info] AdtBenchmark.readPlayJson                                                                   N/A  thrpt    5    476787.260 ±   30040.119   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2371.365 ±     154.494  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      7827.137 ±     285.890    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2411.509 ±    1414.957  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      7954.212 ±    4486.973    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.495 ±       3.788  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         1.610 ±      12.299    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                          N/A  thrpt    5        31.000                    ms
[info] AdtBenchmark.writeCirce                                                                     N/A  thrpt    5   1074646.969 ±   40029.198   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2983.222 ±      77.366  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4369.164 ±     103.265    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2914.278 ±    1371.682  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4268.886 ±    2034.857    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.706 ±       3.859  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         1.026 ±       5.593    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        22.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        38.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                              N/A  thrpt    5   1889642.697 ±   47977.887   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       756.002 ±      47.741  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       629.556 ±      48.916    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       796.002 ±    1145.485  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       663.918 ±     974.722    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.003 ±       0.030    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        11.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  18768535.428 ± 2386393.202   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       983.306 ±     157.960  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        82.424 ±       3.600    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       936.865 ±    1411.854  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        78.136 ±     111.870    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.009 ±       0.071  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.001 ±       0.006    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        26.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  19934363.873 ±   33793.299   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                  N/A  thrpt    5   1102303.573 ±   66714.707   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      2487.867 ±     155.911  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5      3552.055 ±     106.458    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2408.140 ±    1414.996  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      3437.113 ±    1977.534    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.523 ±       4.142  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.747 ±       5.914    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                  N/A  thrpt    5   3844203.927 ±   85630.185   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3517.934 ±      33.437  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      1440.144 ±      36.664    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3341.626 ±      95.196  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1368.009 ±      67.902    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.071 ±       0.395  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.029 ±       0.161    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                            N/A  thrpt    5  11262107.220 ± 1193460.620   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5      1416.784 ±     142.932  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       197.977 ±       4.279    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1464.112 ±    1148.786  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       204.346 ±     150.880    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.957 ±       8.149  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.131 ±       1.117    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                           N/A  thrpt    5   3886231.628 ±  102688.485   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      2357.016 ±      80.987  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5       954.433 ±      15.614    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2281.916 ±    1387.921  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5       924.832 ±     586.887    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.037 ±       0.164  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.015 ±       0.067    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        17.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                          N/A  thrpt    5  15234796.743 ±  900523.702   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5      2000.015 ±     131.269  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5       206.594 ±       4.246    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      2010.833 ±      11.867  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       207.754 ±      12.852    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.769 ±       4.691  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.080 ±       0.490    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                               N/A  thrpt    5   1775198.351 ±  146320.229   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      3011.528 ±     183.949  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      2669.502 ±      57.623    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2821.032 ±    1134.573  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      2498.972 ±     897.066    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.067 ±       0.486  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.058 ±       0.420    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                 N/A  thrpt    5   5344818.083 ±  518415.191   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      2688.147 ±     296.050  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5       791.304 ±      25.760    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2625.507 ±      33.053  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       773.335 ±      83.017    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         1.851 ±       9.758  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.551 ±       2.891    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        45.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                           N/A  thrpt    5  24353897.700 ± 1703733.827   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       761.675 ±      58.797  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5        49.217 ±       1.443    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       664.769 ±       1.999  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        42.967 ±       2.974    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.014 ±       0.120  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.001 ±       0.008    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5        19.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                          N/A  thrpt    5  10777869.014 ±  907878.847   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       351.004 ±      93.570  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        51.241 ±      12.460    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       366.446 ±    1309.126  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        53.216 ±     190.678    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         3.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         6.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                         N/A  thrpt    5  33823404.290 ± 4046022.238   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5      1060.330 ±     134.123  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5        49.332 ±       2.051    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       937.070 ±    1411.641  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        43.492 ±      63.875    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.012 ±       0.066  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.001 ±       0.003    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         7.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5  37432738.388 ±  222224.479   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5         0.022 ±       0.182  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.001 ±       0.008    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                              N/A  thrpt    5   2457025.525 ±  190485.022   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      3503.261 ±     230.345  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5      2243.965 ±      62.407    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      3501.211 ±    1133.600  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      2242.530 ±     700.029    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.050 ±       0.343  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.032 ±       0.216    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        26.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        39.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                    128  thrpt    5    375949.989 ±   19450.243   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2227.993 ±     133.189  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      9325.683 ±     211.097    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2132.600 ±    1138.996  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      8926.555 ±    4737.296    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.275 ±       1.783  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.172 ±       7.648    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                          128  thrpt    5        16.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                             128  thrpt    5    897879.032 ±   97824.605   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       797.250 ±     223.948  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5      1398.690 ±     460.144    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       793.665 ±    1140.817  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1398.712 ±    2134.694    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.303 ±       2.567  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.547 ±       4.634    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         6.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                            128  thrpt    5   1659135.572 ±  146852.962   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      1139.563 ±     100.905  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1080.787 ±      37.804    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1206.325 ±    1153.514  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1145.991 ±    1118.321    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.827 ±       7.033  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.767 ±       6.517    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        34.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                 128  thrpt    5    220769.101 ±   17312.058   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      4066.116 ±     186.013  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5     28991.030 ±    1461.978    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      3892.960 ±    1187.378  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     27725.838 ±    6593.310    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.045 ±       7.545  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         7.663 ±      55.764    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        29.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        43.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                   128  thrpt    5    481881.155 ±   24140.134   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1589.598 ±      25.338  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      5191.585 ±     193.533    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1602.453 ±    1406.742  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5229.456 ±    4500.971    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.939 ±       5.885  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3.115 ±      19.670    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                          128  thrpt    5        33.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                            128  thrpt    5   1001649.070 ±  100537.342   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       473.394 ±      74.084  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       743.582 ±      58.058    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       264.635 ±    1395.349  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       409.619 ±    2159.808    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         2.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5         3.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                           128  thrpt    5   2785945.582 ±   50954.803   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1328.976 ±      15.165  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       750.690 ±      20.091    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1339.934 ±       5.478  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       756.876 ±      15.492    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.820 ±       6.706  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.462 ±       3.778    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        30.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   2801211.128 ±    6699.196   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                128  thrpt    5    661520.464 ±   46205.643   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       971.671 ±     404.151  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5      2314.475 ±    1104.471    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       927.134 ±    1397.315  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2211.816 ±    3411.993    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.129 ±       6.295  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.669 ±      14.866    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        37.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                       128  thrpt    5     21559.984 ±    1721.958   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1795.793 ±     442.141  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    131234.508 ±   41447.335    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1819.907 ±    1121.763  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    132885.749 ±   82800.825    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.573 ±       3.390  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        42.039 ±     247.591    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                128  thrpt    5     41829.479 ±     527.486   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1145.855 ±      31.852  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     43108.721 ±    1373.842    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1062.506 ±    1399.740  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     39988.893 ±   52859.612    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.388 ±       8.597  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        52.153 ±     323.231    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        15.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                               128  thrpt    5     51443.688 ±    5195.264   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       742.862 ±     221.627  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5     22771.724 ±    9288.551    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       764.451 ±    1089.834  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     23579.571 ±   36918.542    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.064 ±       0.507  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         2.045 ±      16.257    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                    128  thrpt    5     39070.618 ±    1419.750   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1644.975 ±      70.805  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     66260.495 ±    2197.995    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1601.395 ±    1410.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     64570.172 ±   58296.785    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.291 ±       2.190  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        11.659 ±      87.737    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                      128  thrpt    5     35752.318 ±    2187.493   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2346.309 ±     147.175  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5    103272.920 ±    1353.910    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2245.356 ±    1385.990  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     98769.544 ±   58724.097    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.490 ±       2.954  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        21.956 ±     133.670    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        17.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                               128  thrpt    5     33873.793 ±    1472.505   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1894.970 ±     287.214  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     88076.878 ±   17415.257    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1844.088 ±    1150.729  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     85727.497 ±   54698.882    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.690 ±       2.207  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        32.068 ±     102.206    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        68.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                              128  thrpt    5     40578.115 ±    2884.569   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2095.836 ±     157.192  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     81279.345 ±    1437.451    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1974.283 ±      28.762  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     76590.185 ±    6394.045    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         1.018 ±       4.791  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        40.208 ±     192.313    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        44.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5     40575.310 ±    2938.380   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      2015.289 ±     148.761  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5     78156.960 ±     192.428    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1850.938 ±    1153.125  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5     71691.681 ±   42321.999    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.104 ±       0.240  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         4.052 ±       9.397    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                   128  thrpt    5      9373.700 ±     777.698   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1272.911 ±     121.471  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5    213672.383 ±    3590.401    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1197.318 ±    1146.047  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    201289.671 ±  196149.589    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.010 ±       7.379  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       168.076 ±    1222.246    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        38.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                           128  thrpt    5     22425.470 ±    1883.510   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1817.270 ±     375.386  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    127663.548 ±   35754.543    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1774.959 ±    1092.017  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    124519.627 ±   75536.347    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         3.429 ±      16.512  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       238.838 ±    1146.758    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                  128  thrpt    5       101.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                    128  thrpt    5     47580.332 ±    5877.790   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1354.638 ±     122.319  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     44824.840 ±    4277.999    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1319.984 ±      16.637  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     43693.371 ±    5137.454    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.002 ±       6.937  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        34.197 ±     239.468    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        40.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                   128  thrpt    5     67923.173 ±    5656.265   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       775.633 ±      52.829  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     17971.129 ±     411.666    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       776.571 ±    1106.178  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     18115.937 ±   27926.711    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.019 ±       0.100  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.443 ±       2.368    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                        128  thrpt    5     42062.852 ±    3548.741   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2412.115 ±     168.747  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     90243.134 ±    2679.403    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2409.291 ±    1398.851  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     90226.869 ±   54752.462    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.543 ±       3.881  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20.478 ±     146.574    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        30.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                   128  thrpt    5     43601.032 ±    2632.153   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1894.517 ±     154.778  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     68365.924 ±    1825.667    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1862.791 ±    1141.660  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     67144.002 ±   39097.287    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.476 ±       3.426  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        16.983 ±     121.921    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                  128  thrpt    5     57315.545 ±     358.650   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1797.597 ±      24.242  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     49352.391 ±     659.149    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1739.826 ±    1415.289  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     47776.995 ±   39079.674    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.158 ±       0.615  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         4.347 ±      16.902    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        19.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     55476.202 ±    4271.375   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5      1647.776 ±     151.070  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     46737.238 ±    1610.512    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5      1597.156 ±    1402.232  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     45199.524 ±   37148.075    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.856 ±       5.291  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5        23.992 ±     148.290    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        31.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                          128  thrpt    5    394933.777 ±   22787.576   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2141.676 ±     123.401  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8534.065 ±     123.448    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2131.014 ±    1135.294  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8491.709 ±    4491.553    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.969 ±       7.500  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.948 ±      30.665    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        16.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        30.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                    128  thrpt    5   1855017.858 ±  193004.581   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       599.541 ±      75.066  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       508.632 ±      31.490    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       530.281 ±    1141.471  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       447.180 ±     963.881    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.001 ±       0.008  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.001 ±       0.006    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    829834.372 ±   43089.091   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       342.317 ±      43.808  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       649.288 ±      90.148    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       264.020 ±    1392.101  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       503.175 ±    2653.602    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.942 ±       7.755  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.818 ±      14.993    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         2.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   2155593.461 ±   75229.248   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       428.496 ±      37.220  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       312.886 ±      33.008    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       368.914 ±    1319.449  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       270.430 ±     968.752    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.003 ±       0.026    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    157197.745 ±   43444.647   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4149.953 ±    1020.663  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     41561.142 ±    2018.506    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4058.093 ±    1880.815  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40559.647 ±   11575.399    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.246 ±       1.761  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2.528 ±      18.143    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        30.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        43.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    449040.361 ±    5265.109   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1477.010 ±      65.243  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5175.195 ±     228.026    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1468.173 ±    1138.465  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5143.666 ±    3971.496    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.902 ±       7.215  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.162 ±      25.290    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                   128  thrpt    5   2586148.500 ±  182914.782   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5      1232.259 ±     108.527  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       749.773 ±      19.427    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5      1197.101 ±    1146.270  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       727.028 ±     678.746    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.091 ±       8.949  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.669 ±       5.485    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5        30.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5   1167732.565 ±   70525.003   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       554.045 ±      22.520  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       746.825 ±      51.881    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       531.704 ±    1144.534  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       718.308 ±    1547.195    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.017 ±       0.096    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3007020.172 ±  115523.076   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1439.384 ±      68.469  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       753.212 ±      19.556    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1472.924 ±    1158.774  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       770.463 ±     596.052    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.806 ±       6.824  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.420 ±       3.553    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        28.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3203593.662 ±  100039.454   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         0.007 ±       0.061  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.004 ±       0.030    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5   1017639.595 ±   23847.911   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1089.774 ±      33.492  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      1685.324 ±      75.529    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1060.074 ±    1397.268  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1641.214 ±    2183.823    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.883 ±       6.453  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.377 ±      10.082    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        32.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                             128  thrpt    5    219170.204 ±   20679.656   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2726.120 ±     312.052  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19570.215 ±     484.239    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2659.859 ±      28.157  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19104.777 ±    1652.908    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.451 ±       2.900  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3.324 ±      21.464    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        20.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                    128  thrpt    5        34.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                      128  thrpt    5    431574.245 ±   13407.941   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       286.779 ±      30.724  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      1045.772 ±     111.909    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       396.657 ±    1394.308  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1449.450 ±    5095.241    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.009 ±       8.665  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         3.712 ±      31.880    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                     128  thrpt    5   1322352.236 ±   24003.081   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       260.943 ±      26.358  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       310.556 ±      34.703    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.639 ±    1079.003  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       244.371 ±    1288.502    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.003 ±       0.022  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.003 ±       0.027    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                          128  thrpt    5    118028.018 ±   20095.007   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3877.313 ±     612.178  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     51700.564 ±    2217.664    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3784.424 ±    1455.172  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     50486.107 ±   19356.176    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.288 ±       2.252  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.896 ±      30.611    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        28.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        38.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                            128  thrpt    5    351539.400 ±   11970.051   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1912.323 ±      45.580  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      8560.930 ±     203.083    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1864.072 ±    1141.656  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8351.723 ±    5271.245    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.908 ±       5.879  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.024 ±      26.029    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                     128  thrpt    5   2262989.141 ±  151251.364   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       625.159 ±      45.263  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       434.726 ±      25.627    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       531.139 ±    1143.321  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       371.193 ±     799.432    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.011 ±       0.060  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.008 ±       0.042    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                    128  thrpt    5   3462640.863 ±  287733.951   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       955.965 ±     107.428  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       434.357 ±      16.149    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       803.426 ±    1152.266  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       364.465 ±     509.549    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.084  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.005 ±       0.038    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   3613440.553 ±   43328.323   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                         128  thrpt    5     61001.052 ±    3029.582   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2160.128 ±     108.449  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     55723.118 ±     383.447    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2124.235 ±    1154.845  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     54882.715 ±   32966.460    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.990 ±       7.205  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        25.399 ±     184.922    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        16.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                             128  thrpt    5    337830.589 ±   18994.646   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3643.232 ±     173.790  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     16970.983 ±     233.059    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3488.991 ±    1086.882  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16246.808 ±    4594.283    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.058 ±       0.323  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.269 ±       1.478    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        26.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        32.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                      128  thrpt    5    732890.570 ±   19243.886   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2017.460 ±      73.318  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      4331.969 ±      68.770    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2005.221 ±      17.131  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4305.861 ±      93.989    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.436 ±       3.622  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.934 ±       7.754    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   2933986.453 ±   85677.486   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1046.613 ±      53.869  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       561.328 ±      41.184    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       937.195 ±    1411.722  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       503.493 ±     769.498    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.002 ±       0.019    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                          128  thrpt    5    133908.426 ±    6654.961   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4150.868 ±     272.298  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     48779.785 ±    1305.699    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4052.123 ±      81.982  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     47625.243 ±    1793.568    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.442 ±       1.037    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        30.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        52.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                            128  thrpt    5    331764.586 ±    2878.915   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      2629.297 ±      80.221  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     12472.561 ±     370.525    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2540.962 ±    1165.579  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12052.409 ±    5490.902    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.178 ±       0.682    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   1984869.888 ±  131115.136   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       695.389 ±      39.270  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       551.397 ±       8.719    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.567 ±       2.655  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       527.854 ±      34.710    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.031 ±       0.112  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.024 ±       0.088    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        21.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   2835078.467 ±   27245.193   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       995.089 ±      62.359  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       552.179 ±      32.666    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       936.652 ±    1409.263  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       519.621 ±     780.090    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.002 ±       0.020    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   2943751.854 ±   28035.769   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                         128  thrpt    5    775557.335 ±   10222.165   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4745.478 ±      93.907  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9628.085 ±      92.440    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4608.152 ±    1158.954  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9348.652 ±    2290.890    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.084 ±       0.198    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        34.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        51.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                           128  thrpt    5     28189.358 ±    1083.477   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1725.881 ±     238.857  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     96361.562 ±   15108.285    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1729.092 ±    1406.448  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     96617.294 ±   80375.859    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.197 ±       6.858  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        67.188 ±     384.807    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        33.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                     128  thrpt    5     99372.579 ±    9285.107   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       956.844 ±     312.427  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5     15178.243 ±    6120.170    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       918.770 ±    1384.739  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     14586.734 ±   22414.723    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.629 ±       5.303  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         9.809 ±      82.628    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                            128  thrpt    5        44.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                    128  thrpt    5     76542.606 ±   15588.561   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1359.773 ±     867.985  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     27878.345 ±   14421.718    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1333.012 ±    1811.418  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     27221.071 ±   33903.057    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.295 ±       4.878  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        26.220 ±     100.965    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        19.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                   128  thrpt    5    139868.473 ±    4411.973   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       850.745 ±      35.894  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      9572.369 ±     500.803    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       885.057 ±    1334.208  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      9975.165 ±   15248.534    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.262 ±       2.119  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         2.908 ±      23.536    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        81.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                        128  thrpt    5     49804.418 ±    4067.260   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2095.554 ±     186.430  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     66212.101 ±    1264.643    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1987.654 ±      28.098  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     62825.848 ±    4938.278    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.529 ±       2.109    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                          128  thrpt    5     43809.011 ±    4009.034   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5       839.798 ±     302.249  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     30159.139 ±   10017.056    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5       795.908 ±    1141.857  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     28480.652 ±   38680.050    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.555 ±       3.276  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        19.855 ±     118.024    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                   128  thrpt    5     43006.436 ±    4809.353   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       564.497 ±     285.767  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     20721.120 ±   12247.746    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       530.798 ±    1142.583  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     19664.406 ±   42340.814    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.192 ±       1.652  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         6.988 ±      60.169    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                  128  thrpt    5     49251.630 ±    2234.830   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       532.831 ±     202.475  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     17043.038 ±    7351.479    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       534.704 ±    1150.991  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     17113.348 ±   36849.509    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.397 ±       3.418    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     49212.677 ±    3901.228   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5       534.442 ±     215.415  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     17076.105 ±    6098.028    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5       529.752 ±    1140.331  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     16831.217 ±   36248.151    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.195 ±       1.681  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         6.067 ±      52.241    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        20.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                         128  thrpt    5     15612.091 ±    3264.587   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1303.801 ±     905.228  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    131032.957 ±   72586.715    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1329.583 ±    1808.225  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    133095.699 ±  162239.457    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.600 ±       3.802  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       159.898 ±     371.382    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                128  thrpt    5        46.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                  128  thrpt    5     15462.761 ±    1174.790   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1239.860 ±     947.457  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    126494.843 ±  104109.625    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1176.112 ±    1129.967  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    119989.289 ±  118850.084    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         2.618 ±      13.845  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       266.235 ±    1408.201    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        75.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                 128  thrpt    5    162017.775 ±    3284.470   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       436.426 ±      28.636  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      4238.858 ±     333.031    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       533.592 ±    1148.601  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5192.482 ±   11177.521    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.802 ±       6.864  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         7.792 ±      66.660    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        11.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                      128  thrpt    5     15753.384 ±    1612.032   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1552.845 ±     398.721  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    155377.868 ±   52436.871    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1456.904 ±    1136.466  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    145800.325 ±  119659.688    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         2.233 ±       9.685  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       218.888 ±     941.825    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        30.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                        128  thrpt    5     71115.362 ±    2054.392   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1652.920 ±      65.469  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     36576.661 ±    1015.030    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1595.515 ±    1404.679  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     35280.946 ±   30480.571    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.909 ±       7.409  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20.102 ±     163.769    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                 128  thrpt    5    107159.618 ±    8009.447   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1428.571 ±     103.140  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     20980.794 ±      70.061    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1327.680 ±      20.204  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     19503.813 ±    1247.852    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.205 ±       1.419  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         2.958 ±      20.445    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                128  thrpt    5    269631.006 ±   30230.470   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       441.304 ±      44.518  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2576.144 ±     182.834    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       503.528 ±    1114.972  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2942.868 ±    6442.760    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.074 ±       0.417    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    288018.004 ±    7625.993   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.012 ±      23.970  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.606 ±     132.170    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                     128  thrpt    5     97953.385 ±   14171.037   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1728.667 ±     348.414  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     27826.676 ±    8692.782    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1703.430 ±     105.652  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     27387.457 ±    2877.518    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5        10.514 ±      67.224  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       172.543 ±    1092.627    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5       122.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                             128  thrpt    5    126841.164 ±    3765.750   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1591.625 ±      66.234  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19748.054 ±     602.676    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1593.770 ±    1402.084  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19772.114 ±   17327.317    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         1.049 ±       7.988  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        13.055 ±      99.524    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        34.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                      128  thrpt    5    147083.047 ±    3974.153   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       879.830 ±      50.712  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9412.918 ±     352.537    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       788.429 ±    1128.069  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      8427.100 ±   11904.653    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.134 ±       0.764    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                     128  thrpt    5    226009.890 ±    4912.917   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       151.391 ±      20.678  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1054.102 ±     160.071    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.665 ±    1079.137  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1432.227 ±    7551.765    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.117 ±       0.733    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                          128  thrpt    5     84659.935 ±    1424.988   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2665.535 ±     105.022  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49547.251 ±    1564.200    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2544.868 ±    1158.598  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     47297.896 ±   21296.175    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.100 ±       0.515  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.854 ±       9.511    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                            128  thrpt    5    232716.903 ±   19528.731   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1513.521 ±     127.781  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10232.774 ±     156.444    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1465.464 ±    1150.210  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9908.987 ±    7735.327    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.213 ±       7.145  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         8.138 ±      48.125    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        39.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                     128  thrpt    5    763655.939 ±   37111.707   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       605.754 ±      32.909  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1248.269 ±      29.809    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       664.842 ±       3.168  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1370.218 ±      71.280    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.007 ±       0.058  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.014 ±       0.119    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        20.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                    128  thrpt    5    688658.128 ±    9385.150   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       542.433 ±      30.485  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1239.539 ±      75.301    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       535.089 ±    1151.821  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1222.959 ±    2632.605    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.006 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.014 ±       0.082    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    679299.408 ±    9488.129   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         3.217 ±      16.971  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         7.481 ±      39.474    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                         128  thrpt    5    591508.049 ±   33072.788   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1462.059 ±     107.887  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      3889.819 ±      92.682    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1335.186 ±       8.060  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3553.017 ±     193.213    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.502 ±       3.704  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.342 ±       9.906    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        23.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                            128  thrpt    5     42608.672 ±    2318.888   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1966.787 ±      92.614  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     72636.934 ±    1013.207    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2002.362 ±    1079.895  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     73913.484 ±   38110.226    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         3.671 ±      27.559  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       136.795 ±    1026.220    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        60.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                      128  thrpt    5    302241.096 ±    4235.479   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       323.717 ±      35.002  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1685.628 ±     205.644    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       367.218 ±    1312.339  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1915.936 ±    6843.294    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.001 ±       0.006    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                     128  thrpt    5    124763.114 ±    1563.883   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1154.608 ±      44.192  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     14563.803 ±     562.117    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1064.449 ±    1403.802  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     13426.696 ±   17708.887    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.558 ±       4.673  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         7.011 ±      58.677    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        23.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                    128  thrpt    5    549789.213 ±    6474.966   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       369.360 ±      39.794  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1057.284 ±     121.689    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.631 ±    1322.381  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1059.680 ±    3789.337    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.036 ±       0.308    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                         128  thrpt    5     53505.945 ±    2272.418   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      2295.469 ±     132.416  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     67507.682 ±    1643.073    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2247.268 ±    1387.271  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     66139.657 ±   42226.723    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.522 ±       4.314  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        15.591 ±     128.989    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                           128  thrpt    5     95076.513 ±    5392.559   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       761.359 ±      30.289  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     12600.955 ±     582.449    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5       800.555 ±    1149.924  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     13279.946 ±   19608.311    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.137 ±       0.724    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                     128  thrpt    5    120101.098 ±   11041.327   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       455.890 ±      51.193  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5      5972.686 ±     338.144    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       531.314 ±    1143.694  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      6960.241 ±   15004.295    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.011 ±       0.070  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.150 ±       0.923    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                    128  thrpt    5    108031.018 ±    1994.990   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       410.804 ±      34.801  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      5984.014 ±     599.009    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       398.982 ±    1402.477  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5828.877 ±   20489.561    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.005 ±       0.040  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.068 ±       0.588    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                   128  thrpt    5    119371.410 ±    8103.956   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       457.551 ±      45.736  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      6034.157 ±     873.386    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       401.053 ±    1409.759  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5317.414 ±   18697.556    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.006 ±       0.049  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.076 ±       0.654    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    123536.369 ±    1220.997   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5       368.969 ±      29.832  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5      4699.842 ±     422.964    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   128  thrpt    5       369.653 ±    1322.502  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      4716.296 ±   16869.516    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.213 ±       1.121    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  128  thrpt    5        14.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                          128  thrpt    5     13121.576 ±    1144.826   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2046.159 ±     396.424  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    245658.304 ±   67481.352    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2020.140 ±    1093.021  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    242878.422 ±  152867.476    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         3.053 ±      15.645  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       360.742 ±    1844.270    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                128  thrpt    5        16.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                 128  thrpt    5        98.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                   128  thrpt    5     13289.657 ±    1727.259   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1995.924 ±     303.073  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    236671.658 ±   58077.962    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1856.985 ±    1146.195  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    220492.092 ±  148340.328    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.704 ±       4.926  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        87.290 ±     618.987    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                  128  thrpt    5    228089.128 ±    1005.599   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       610.194 ±       8.348  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      4209.950 ±      60.544    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       662.871 ±       2.729  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      4573.382 ±      20.078    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.007 ±       0.025  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.047 ±       0.173    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                       128  thrpt    5      6884.833 ±     594.388   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1752.620 ±     178.566  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    400553.165 ±    9854.043    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1735.711 ±    1407.876  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    395978.553 ±  303675.005    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.291 ±       1.933  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        66.644 ±     437.763    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                         128  thrpt    5     34832.267 ±    4798.038   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      2156.342 ±     487.092  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     97670.872 ±   35960.108    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2066.007 ±    1064.281  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     93345.989 ±   46050.922    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         2.173 ±       7.963  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        98.142 ±     354.519    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        16.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                128  thrpt    5        91.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                  128  thrpt    5     41599.238 ±   12865.096   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      2070.499 ±     597.104  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     78671.797 ±   32017.378    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      2080.389 ±    1188.837  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     78625.154 ±   31894.556    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.937 ±       5.475  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        37.907 ±     228.863    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        16.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                 128  thrpt    5    317901.765 ±   14289.572   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       724.867 ±      21.812  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      3588.453 ±     113.737    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       669.833 ±       1.102  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3316.173 ±     148.402    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.019 ±       0.074  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.095 ±       0.362    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        16.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    353910.617 ±    1662.041   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         0.600 ±       5.160  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         2.669 ±      22.970    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                      128  thrpt    5     41246.581 ±   16415.804   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      2571.840 ±    1088.993  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     99741.303 ±   79547.917    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2518.233 ±    1192.945  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     97806.512 ±   84126.607    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5        27.317 ±      65.648  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1095.044 ±    2791.606    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5       198.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                              128  thrpt    5    180449.869 ±   17131.530   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2517.919 ±     219.491  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     21961.515 ±     437.017    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2389.454 ±    1409.633  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20846.453 ±   12373.300    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.782 ±       4.077  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         6.939 ±      36.210    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        18.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                     128  thrpt    5        30.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                        128  thrpt    5    554942.386 ±   48277.837   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       589.622 ±      65.920  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5      1672.026 ±      97.569    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       531.142 ±    1143.324  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1510.201 ±    3254.891    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.014 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.038 ±       0.201    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                               128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                       128  thrpt    5    528780.084 ±   12232.472   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       535.838 ±      39.174  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1594.537 ±      97.939    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       529.435 ±    1139.650  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1574.963 ±    3390.576    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.013 ±       0.108    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        19.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                      128  thrpt    5    681352.445 ±   41059.536   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       459.928 ±      55.430  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1062.689 ±     170.189    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       400.916 ±    1409.279  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       933.960 ±    3283.692    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.773 ±       6.612  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.818 ±      15.550    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                           128  thrpt    5    109183.351 ±   13859.083   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      3742.555 ±     446.566  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     53946.280 ±    2369.560    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      3624.515 ±    1381.223  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     52235.619 ±   18354.934    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.631 ±       5.034  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         9.539 ±      76.399    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        27.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        37.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                             128  thrpt    5    250526.873 ±    6657.119   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1788.241 ±      37.819  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     11233.483 ±     217.187    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1732.937 ±    1402.618  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     10888.434 ±    8861.967    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.889 ±       7.317  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.576 ±      45.864    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                       128  thrpt    5   1253876.298 ±   45407.318   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       707.415 ±      40.428  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       887.748 ±      44.730    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       797.949 ±    1144.641  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1001.277 ±    1434.141    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.015 ±       0.061  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.019 ±       0.076    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                      128  thrpt    5   1240470.147 ±   16138.271   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       693.674 ±      13.242  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       880.060 ±      17.029    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       664.515 ±       3.216  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       843.067 ±       8.536    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.005 ±       0.046    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1128081.291 ±   49230.768   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       637.453 ±      30.500  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       889.129 ±      30.785    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       667.545 ±       2.121  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       931.180 ±      41.851    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.010 ±       0.053  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.014 ±       0.074    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1156152.619 ±   34849.752   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         0.984 ±       6.789  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5         1.334 ±       9.201    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                          128  thrpt    5     39786.320 ±    3050.551   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1907.665 ±     123.146  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     75445.530 ±    1596.170    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1852.416 ±    1134.400  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     73383.580 ±   47607.415    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.632 ±      10.421  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        64.510 ±     413.747    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                         128  thrpt    5    145951.198 ±    4482.339   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1836.201 ±      55.206  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     19798.519 ±     553.529    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1863.730 ±    1139.574  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     20105.185 ±   12526.548    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.071 ±       0.231  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.763 ±       2.486    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                               128  thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                  128  thrpt    5    190720.760 ±   17076.991   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1138.076 ±      82.734  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      9391.380 ±     380.039    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1047.573 ±    1380.083  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      8665.802 ±   11643.161    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.548 ±       4.537  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         4.392 ±      36.326    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        44.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                 128  thrpt    5    251448.241 ±   14147.242   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1344.235 ±      85.285  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      8411.504 ±     148.117    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1337.306 ±       5.317  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      8369.629 ±     446.971    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.800 ±       4.839  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         4.975 ±      30.081    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        31.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                      128  thrpt    5    105081.350 ±    8307.261   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3351.500 ±     343.162  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     50185.099 ±    1836.938    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3227.231 ±    1159.670  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     48321.519 ±   16745.101    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.058 ±       0.243  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.876 ±       3.685    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        24.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        37.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                        128  thrpt    5    233421.937 ±    6940.857   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1518.404 ±      55.203  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10237.459 ±     304.615    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1597.351 ±    1399.742  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10783.855 ±    9752.822    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.213 ±       5.390  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         8.162 ±      36.124    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        37.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                 128  thrpt    5    816404.837 ±    7961.264   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       646.643 ±      21.690  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      1246.442 ±      31.084    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       662.018 ±       4.508  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      1276.095 ±       4.334    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.008 ±       0.069    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         8.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                128  thrpt    5    668039.953 ±   14177.450   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       526.022 ±      35.838  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      1239.064 ±      70.392    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       534.883 ±    1151.376  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1258.531 ±    2709.244    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.010 ±       0.084    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    686370.854 ±    2853.077   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.170 ±       1.459  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.389 ±       3.347    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                     128  thrpt    5    615325.677 ±   23767.210   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1528.300 ±      51.240  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      3908.472 ±      65.009    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1471.010 ±    1154.009  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3756.823 ±    2790.411    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.410 ±       3.443  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.033 ±       8.666    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                    128  thrpt    5     12140.782 ±    1803.690   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1658.167 ±     568.996  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5    215774.131 ±  108619.755    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1585.845 ±    1393.301  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    206680.381 ±  203435.884    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.498 ±       4.061  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        63.166 ±     514.107    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        76.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                             128  thrpt    5     11934.934 ±    1171.788   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1496.337 ±     427.668  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5    197634.162 ±   73998.064    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1460.646 ±    1162.812  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5    193145.585 ±  167915.585    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.484 ±       3.900  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5        62.672 ±     504.005    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        18.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5    349677.587 ±    5815.252   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      2345.146 ±      84.991  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     10554.013 ±     304.034    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      2269.818 ±    1406.259  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     10215.024 ±    6324.476    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.229 ±       1.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1.029 ±       8.464    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5        17.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                 128  thrpt    5      9862.941 ±    1356.680   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1728.907 ±     102.894  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5    276024.857 ±   27659.710    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1597.259 ±    1407.387  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    255392.584 ±  233400.879    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.894 ±       7.521  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       145.080 ±    1220.495    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                   128  thrpt    5     26924.420 ±    1641.984   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1496.382 ±     906.040  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5     87556.993 ±   56128.040    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1445.935 ±    1136.614  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     84537.829 ±   67272.910    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         2.861 ±      10.390  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       166.899 ±     609.940    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        47.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     31077.486 ±    7075.458   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1237.589 ±     263.107  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5     63029.230 ±   29659.113    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1182.115 ±    1136.320  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     60291.201 ±   63014.578    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.066 ±       7.466  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        53.478 ±     372.452    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        51.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    789562.210 ±   68557.940   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1472.035 ±      96.906  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      2934.163 ±      92.529    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1473.285 ±    1144.572  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      2947.957 ±    2599.170    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.802 ±       6.820  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         1.597 ±      13.569    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    907595.621 ±   53087.529   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.026 ±       0.218  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.044 ±       0.377    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                128  thrpt    5     30664.996 ±    2378.583   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1343.445 ±     438.917  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5     69010.024 ±   26010.273    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1316.098 ±       8.963  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     67560.631 ±    5576.454    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.151 ±       6.647  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        58.057 ±     333.867    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        54.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                        128  thrpt    5     43943.679 ±    6554.429   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1962.119 ±     771.042  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     70567.780 ±   39580.928    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1978.436 ±    1785.637  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     71381.253 ±   75032.472    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.528 ±      14.405  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        94.487 ±     549.040    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                               128  thrpt    5        34.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                 128  thrpt    5     45963.462 ±     278.659   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1597.681 ±      43.916  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     54697.310 ±    1522.445    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1588.250 ±    1397.720  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     54384.992 ±   48092.522    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.979 ±       8.246  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        33.475 ±     282.102    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                128  thrpt    5    552743.030 ±   13847.894   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1481.987 ±      53.481  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4219.260 ±      97.525    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1469.428 ±    1155.124  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4183.054 ±    3271.863    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.806 ±       4.845  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.296 ±      13.774    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                     128  thrpt    5     21809.907 ±    3056.276   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2066.587 ±     400.854  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    149434.061 ±   47997.680    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      2112.023 ±    1126.072  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    153163.550 ±  106546.377    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.496 ±      10.111  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       113.657 ±     778.615    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        16.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                       128  thrpt    5     72572.823 ±    4007.315   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1918.249 ±     142.422  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     41592.817 ±    1244.953    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1862.652 ±    1143.635  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40433.647 ±   25787.906    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.996 ±       4.787  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        21.771 ±     105.326    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        37.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                128  thrpt    5    208478.338 ±    4625.591   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1620.029 ±      53.763  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     12229.129 ±     449.985    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1599.522 ±    1399.092  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     12078.581 ±   10660.519    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.157 ±       0.429    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                               128  thrpt    5    791092.058 ±  162823.795   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       875.545 ±     204.691  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1741.275 ±      90.673    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.170 ±    1412.866  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1855.118 ±    2640.339    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±       0.052  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.024 ±       0.098    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5    914007.466 ±   33534.133   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         4.823 ±      39.814  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         8.424 ±      69.568    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                    128  thrpt    5     90926.084 ±    2400.468   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      1897.239 ±      42.348  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     32838.623 ±     831.000    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1867.832 ±    1157.187  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     32324.383 ±   19908.791    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.079 ±       0.373  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.369 ±       6.450    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                        128  thrpt    5     19262.351 ±    2506.614   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1770.285 ±     212.357  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5    144780.154 ±   27357.156    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1721.179 ±    1392.675  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    141201.220 ±  124394.338    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.678 ±       6.604  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       137.308 ±     539.955    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                               128  thrpt    5        41.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                 128  thrpt    5     18313.037 ±    2549.903   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1558.233 ±     272.589  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5    134097.925 ±   35903.400    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1599.826 ±    1402.943  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    137206.221 ±  113024.841    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.125 ±       8.098  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        93.387 ±     662.616    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                128  thrpt    5    797346.322 ±   18218.572   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      2139.245 ±      60.919  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4222.464 ±     124.539    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      2006.313 ±      10.996  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3960.125 ±      88.544    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.795 ±       6.669  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.567 ±      13.139    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                     128  thrpt    5     13828.629 ±     773.964   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      1952.429 ±     440.049  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    222117.128 ±   43084.573    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                    128  thrpt    5         0.004 ±       0.033  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm               128  thrpt    5         0.426 ±       3.671    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Metaspace                                 128  thrpt    5         0.011 ±       0.092  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.Metaspace.norm                            128  thrpt    5         1.193 ±      10.269    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1901.672 ±    1264.255  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    216075.155 ±  135307.752    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.337 ±      10.333  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       148.974 ±    1148.514    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        16.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5       115.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                       128  thrpt    5     47175.823 ±    7785.192   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1730.548 ±     305.934  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     57849.802 ±   18444.102    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1662.250 ±    1338.336  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     55838.356 ±   52070.425    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         2.337 ±      10.395  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        75.988 ±     336.414    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                              128  thrpt    5       103.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                128  thrpt    5     56905.681 ±    3221.143   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1539.708 ±     103.408  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     42567.302 ±    1299.728    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1571.203 ±    1374.086  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     43398.234 ±   36988.947    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.917 ±       2.686  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        25.376 ±      75.037    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        55.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                               128  thrpt    5   1035686.456 ±   65492.419   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       971.355 ±      40.642  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1476.180 ±      84.803    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.306 ±    1413.763  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1431.775 ±    2230.663    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.018 ±       0.078  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.027 ±       0.119    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1017408.244 ±    1394.399   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                    128  thrpt    5      3935.712 ±     438.542   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5       523.500 ±      51.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5    209337.804 ±    9045.328    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       489.406 ±    1054.372  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    196037.188 ±  422763.011    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.622 ±      13.811  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       636.111 ±    5416.099    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        50.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                             128  thrpt    5    152658.640 ±    8733.056   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2374.023 ±     110.401  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     24472.561 ±     501.412    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2266.349 ±    1397.921  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     23355.790 ±   14150.807    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.337 ±       2.164  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3.532 ±      22.851    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        17.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                       128  thrpt    5    399332.757 ±    4411.201   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       820.447 ±      33.336  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5      3233.549 ±     148.441    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       798.732 ±    1145.876  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3149.680 ±    4549.835    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.007 ±       0.063  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.029 ±       0.248    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                      128  thrpt    5    281104.806 ±    3970.388   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       589.487 ±      26.489  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      3300.056 ±     171.201    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       529.019 ±    1138.753  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2963.818 ±    6380.041    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.116 ±       0.634    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                     128  thrpt    5    483432.351 ±   37365.453   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       629.114 ±      46.438  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      2047.943 ±      45.636    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       668.898 ±       1.795  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2178.104 ±     170.885    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.014 ±       0.118    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                          128  thrpt    5    100470.455 ±    5150.221   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3498.993 ±     131.318  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     54812.792 ±    1411.161    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3363.289 ±      72.694  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     52692.726 ±    3246.351    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.037 ±       0.154  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.587 ±       2.400    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        25.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                            128  thrpt    5    218500.866 ±    5767.093   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1879.767 ±      69.127  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     13539.629 ±     176.159    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1865.624 ±    1150.956  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     13430.238 ±    8102.221    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.921 ±       5.545  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.630 ±      40.008    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                      128  thrpt    5    928605.448 ±   91854.053   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       753.826 ±      70.431  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1277.622 ±      34.385    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       797.409 ±    1141.300  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1348.596 ±    1869.297    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.002 ±       0.019  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.004 ±       0.031    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5        20.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                     128  thrpt    5    616243.291 ±   51787.566   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       495.310 ±      38.583  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1265.165 ±      82.665    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       529.336 ±    1139.435  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1354.151 ±    2918.552    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.022 ±       0.190    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         5.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                    128  thrpt    5    790782.361 ±   33685.154   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       638.443 ±      26.258  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1270.578 ±      26.498    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       668.195 ±       1.395  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1329.896 ±      55.853    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.023  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.008 ±       0.046    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        16.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    823644.060 ±    1382.778   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.170 ±       1.459  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.325 ±       2.790    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                         128  thrpt    5     35916.219 ±    2261.471   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1628.941 ±      67.125  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     71380.056 ±    2305.780    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1594.161 ±    1401.937  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     70007.218 ±   64750.646    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.218 ±       6.227  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        53.792 ±     277.239    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                   128  thrpt    5      8915.859 ±    1323.122   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                    128  thrpt    5      1306.160 ±     424.405  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                               128  thrpt    5    231442.374 ±  114873.275    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1319.961 ±    1801.861  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    235474.141 ±  357995.808    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.631 ±      13.253  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       307.838 ±    2513.146    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                          128  thrpt    5        65.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                            128  thrpt    5      8989.669 ±     517.886   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                             128  thrpt    5      1198.695 ±      88.745  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    209924.851 ±   27594.464    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1191.332 ±    1144.179  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    208782.137 ±  203209.320    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.124 ±       0.966  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        22.291 ±     173.745    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                   128  thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                           128  thrpt    5    200111.909 ±   13254.380   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1736.391 ±     119.133  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5     13655.223 ±     288.304    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1590.514 ±    1399.414  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     12487.393 ±   10484.995    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.351 ±       6.715  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        10.528 ±      52.242    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                 128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                  128  thrpt    5        36.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                128  thrpt    5      9041.913 ±     379.340   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                 128  thrpt    5      1421.036 ±      68.795  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            128  thrpt    5    247316.835 ±    8257.950    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1461.790 ±    1140.311  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    254555.673 ±  202492.384    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.798 ±       6.759  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       137.528 ±    1164.407    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                      128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                       128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                  128  thrpt    5     22429.602 ±    3761.509   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                   128  thrpt    5      1388.052 ±     604.179  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                              128  thrpt    5     97885.864 ±   58285.031    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          128  thrpt    5      1431.664 ±    1172.233  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    101095.806 ±   97559.035    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1.926 ±       7.523  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       136.221 ±     537.775    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                         128  thrpt    5        84.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                           128  thrpt    5     25532.552 ±    3535.670   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                            128  thrpt    5      1115.363 ±     546.433  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                       128  thrpt    5     69036.919 ±   43734.778    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1054.777 ±    1389.373  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     65484.682 ±   91125.078    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.447 ±       6.030  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        87.059 ±     362.675    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                 128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                  128  thrpt    5        37.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                          128  thrpt    5    527184.632 ±   49949.082   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           128  thrpt    5      1236.994 ±     108.611  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      128  thrpt    5      3692.853 ±     135.405    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  128  thrpt    5      1206.246 ±    1156.923  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             128  thrpt    5      3609.532 ±    3561.500    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.810 ±       6.635  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         2.340 ±      19.146    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                 128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                  128  thrpt    5    612714.632 ±   15489.089   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   128  thrpt    5         0.683 ±       5.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              128  thrpt    5         1.764 ±      15.183    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                               128  thrpt    5     24952.415 ±    3250.455   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                128  thrpt    5      1273.563 ±     541.078  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                           128  thrpt    5     80494.787 ±   39875.481    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       128  thrpt    5      1301.935 ±    1771.441  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     82529.256 ±  114965.760    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   128  thrpt    5         2.489 ±       8.784  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5       158.310 ±     558.690    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                      128  thrpt    5        57.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                       128  thrpt    5     13435.831 ±    1296.396   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1467.856 ±     413.128  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    172109.642 ±   57069.030    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1322.714 ±      11.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    155013.377 ±   15906.440    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.728 ±       8.331  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       205.376 ±     991.121    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                              128  thrpt    5        40.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                128  thrpt    5     13766.963 ±    1417.164   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1298.020 ±     238.651  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5    148585.586 ±   40962.787    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1331.703 ±       5.210  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    152316.824 ±   16223.076    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.214 ±       6.454  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       142.864 ±     761.186    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        42.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                               128  thrpt    5    355861.639 ±   28164.281   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1703.062 ±     121.291  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      7531.469 ±      90.112    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1592.393 ±    1398.683  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      7034.086 ±    5971.854    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.829 ±       6.757  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.643 ±      29.706    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                    128  thrpt    5     12881.116 ±     444.428   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1624.215 ±     235.476  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5    198441.246 ±   30371.502    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1601.883 ±    1403.085  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    195838.811 ±  174598.418    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.748 ±       2.253  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        91.132 ±     274.568    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                      128  thrpt    5     36115.190 ±    4057.191   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1527.043 ±     594.419  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5     66724.985 ±   34006.645    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1588.710 ±    1394.078  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     69528.526 ±   67113.383    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         2.433 ±      13.609  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       107.766 ±     597.150    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                             128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                               128  thrpt    5    131506.000 ±    3576.732   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      2474.177 ±      77.037  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     29609.112 ±     932.858    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      2279.577 ±    1416.257  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     27288.939 ±   17211.230    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.046 ±       0.215  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.549 ±       2.587    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        17.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                              128  thrpt    5    869721.263 ±   37029.437   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1234.261 ±      53.188  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      2233.400 ±      60.251    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1206.341 ±    1152.729  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      2185.336 ±    2117.515    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.831 ±       5.254  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.499 ±       9.420    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    963333.959 ±    3657.014   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         0.028 ±       0.235    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                   128  thrpt    5    124721.742 ±    3406.262   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      2800.200 ±      86.008  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35335.271 ±    1282.023    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2686.469 ±      43.563  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     33900.556 ±    1124.368    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.058 ±       0.369  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.739 ±       4.692    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        20.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        30.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                           128  thrpt    5     18092.414 ±    2166.091   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1055.787 ±     472.829  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     92070.853 ±   48705.959    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1063.994 ±    1405.217  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     92901.265 ±  125997.434    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.594 ±       4.394  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        52.287 ±     387.600    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        49.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                    128  thrpt    5     18776.519 ±    2481.597   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5       933.733 ±     688.063  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     78709.229 ±   68158.904    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       898.164 ±    1364.397  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     75741.375 ±  120396.929    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.573 ±      10.426  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       134.175 ±     898.471    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        58.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                   128  thrpt    5    165023.872 ±    9877.688   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       423.884 ±      36.078  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      4042.409 ±     317.869    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       396.679 ±    1394.383  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3803.872 ±   13375.371    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.039 ±       0.340    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                        128  thrpt    5     17744.636 ±    1842.436   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1288.480 ±     248.066  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    114375.180 ±   28209.632    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                       128  thrpt    5         0.003 ±       0.024  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                  128  thrpt    5         0.252 ±       2.166    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace                                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace.norm                               128  thrpt    5         0.746 ±       6.419    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1183.704 ±    1136.640  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    105153.004 ±  103037.328    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.247 ±       9.016  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       198.276 ±     797.515    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        68.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                          128  thrpt    5     63747.915 ±    1170.206   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1829.104 ±      38.089  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     45140.846 ±    1291.128    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1730.503 ±    1398.707  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     42701.114 ±   34394.655    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.933 ±       5.714  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        23.074 ±     141.558    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        13.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                   128  thrpt    5    101433.487 ±    8576.703   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1929.127 ±     158.850  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     29929.490 ±     275.567    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1997.126 ±      12.205  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     30996.682 ±    2769.332    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.969 ±       6.043  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        15.389 ±      97.165    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        15.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        31.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                  128  thrpt    5    347565.684 ±   23820.870   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       689.145 ±      42.510  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3120.467 ±      29.884    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       669.527 ±       1.796  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3032.336 ±     211.096    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.056 ±       0.482    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        20.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    377906.761 ±    2143.768   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.170 ±       1.460  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.709 ±       6.093    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                       128  thrpt    5     87258.103 ±    4802.535   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1810.504 ±     137.730  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     32652.649 ±     861.548    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1720.007 ±    1390.015  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     30978.678 ±   24092.361    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.954 ±       7.413  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        17.390 ±     135.494    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                            128  thrpt    5    219845.598 ±   19339.909   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2837.593 ±     260.484  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     20312.768 ±     393.244    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2668.183 ±      21.524  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19108.417 ±    1732.155    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.702 ±       4.043  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.143 ±      30.021    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                      128  thrpt    5    826218.476 ±    7469.876   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       469.913 ±      23.569  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       894.987 ±      50.924    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       530.882 ±    1142.764  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1011.828 ±    2178.049    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.005 ±       0.031  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.010 ±       0.059    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                     128  thrpt    5    419397.140 ±    4765.674   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       375.333 ±      28.565  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1408.473 ±     118.175    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       398.194 ±    1399.708  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1496.854 ±    5261.660    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                    128  thrpt    5   1103105.881 ±   31513.070   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       396.337 ±      59.367  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       565.503 ±      91.510    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.609 ±    1322.358  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       528.188 ±    1889.770    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.011 ±       0.074  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.016 ±       0.105    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                         128  thrpt    5    109326.325 ±    5818.922   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3616.086 ±     178.751  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     52054.983 ±     483.499    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3369.583 ±      66.554  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     48513.029 ±    2685.323    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.599 ±       1.416    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        25.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                           128  thrpt    5    316726.422 ±    4365.484   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1862.433 ±      41.098  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      9253.697 ±     108.152    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1869.145 ±    1145.171  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9286.538 ±    5676.662    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.894 ±       5.279  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.456 ±      26.348    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2023073.348 ±   31384.022   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       709.320 ±      25.797  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       551.715 ±      17.814    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       664.142 ±       1.761  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       516.583 ±       8.949    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.042  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.009 ±       0.033    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                    128  thrpt    5   1857715.830 ±  152379.728   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       653.617 ±      73.066  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       553.615 ±      39.175    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       532.835 ±    1146.969  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       450.494 ±     970.638    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.011 ±       0.061    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                   128  thrpt    5   2227709.618 ±  160808.118   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       781.527 ±      74.900  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       551.976 ±      19.990    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       802.734 ±    1149.189  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       566.320 ±     796.355    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.009 ±       0.050    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2351176.686 ±    4619.213   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                        128  thrpt    5     48866.685 ±    1383.042   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1913.627 ±      58.243  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61620.670 ±    1624.731    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1858.676 ±    1142.793  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     59876.554 ±   37403.940    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.116 ±       7.160  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        36.295 ±     233.668    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        32.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                             128  thrpt    5     17499.457 ±    3718.704   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2290.730 ±     594.641  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    206614.363 ±   76842.695    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2221.981 ±    1382.329  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    199831.475 ±  116998.959    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         2.566 ±       9.827  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       226.143 ±     866.430    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                    128  thrpt    5       112.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                      128  thrpt    5    109523.526 ±    2410.666   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1205.148 ±      39.284  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     17317.408 ±     463.391    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1198.119 ±    1144.450  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     17220.022 ±   16494.509    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.142 ±       1.000  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.048 ±      14.490    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                     128  thrpt    5    279275.013 ±    6852.292   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       936.225 ±      49.093  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      5276.108 ±     236.749    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       930.135 ±    1404.261  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      5242.774 ±    7925.663    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.007 ±       0.037  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.038 ±       0.210    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                          128  thrpt    5     16348.700 ±    2129.490   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2193.591 ±     465.526  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    211324.133 ±   51355.317    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                         128  thrpt    5         0.006 ±       0.048  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                    128  thrpt    5         0.572 ±       4.925    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Metaspace                                      128  thrpt    5         0.015 ±       0.131  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.Metaspace.norm                                 128  thrpt    5         1.549 ±      13.340    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2142.461 ±    1094.019  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    206452.670 ±  108614.339    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen                                     128  thrpt    5         3.936 ±      33.892  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm                                128  thrpt    5       401.524 ±    3457.247    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         3.612 ±      15.652  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       354.079 ±    1546.353    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5       124.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                            128  thrpt    5     41522.526 ±     738.679   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      3262.720 ±     128.920  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    123651.434 ±    3362.148    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3085.819 ±    1415.238  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    116939.887 ±   53257.351    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.050 ±       0.298  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.901 ±      11.355    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        23.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        33.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                     128  thrpt    5    146677.807 ±    5055.339   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      2027.320 ±      63.562  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     21745.573 ±     100.122    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      2012.424 ±      27.124  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     21587.253 ±     899.416    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.152 ±       1.177  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.626 ±      12.577    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                    128  thrpt    5    251933.971 ±    7205.029   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       831.259 ±      23.576  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      5192.526 ±     273.000    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       803.623 ±    1155.549  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5019.413 ±    7212.702    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.078 ±       0.275    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    277122.134 ±    4032.132   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.046 ±       0.391  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.259 ±       2.217    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                         128  thrpt    5     61513.449 ±    1124.602   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4026.460 ±     146.799  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    103001.685 ±    3701.418    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3901.697 ±    1190.661  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     99803.604 ±   30124.170    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.058 ±       0.191  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.486 ±       4.834    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        29.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        38.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                        128  thrpt    5     36512.270 ±    2313.275   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1711.450 ±     813.144  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     73833.254 ±   37309.101    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1661.477 ±    1349.061  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     71702.610 ±   59851.217    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         5.377 ±      14.020  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       232.142 ±     610.612    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                               128  thrpt    5        80.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                 128  thrpt    5     36876.461 ±    2695.239   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1160.595 ±      98.415  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     49523.288 ±    1242.287    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1190.798 ±    1139.867  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     50700.823 ±   47118.802    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.710 ±       5.043  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        29.927 ±     211.568    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        16.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                128  thrpt    5    650107.329 ±   47582.420   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1737.195 ±     135.817  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4205.126 ±     100.229    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1727.035 ±    1398.707  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4182.025 ±    3409.158    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.838 ±       6.681  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.047 ±      16.318    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                     128  thrpt    5     35764.961 ±    7121.668   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2165.066 ±     101.532  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     95450.574 ±   18000.702    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      2116.902 ±    1127.287  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     93139.773 ±   44281.384    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         2.017 ±       8.031  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        92.013 ±     375.594    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        16.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        42.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                       128  thrpt    5     96212.079 ±    3915.028   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      2145.824 ±      58.406  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     35099.971 ±     728.564    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1992.844 ±      14.912  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     32599.930 ±    1589.405    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.908 ±       7.415  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.885 ±     121.647    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                              128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                128  thrpt    5    250737.912 ±   13774.661   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1719.091 ±     115.757  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10789.312 ±     349.901    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1601.346 ±    1406.886  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     10058.588 ±    9000.213    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.237 ±       1.565  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.511 ±      10.036    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        20.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                               128  thrpt    5   1096218.608 ±  104860.459   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       938.859 ±     103.535  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1347.705 ±      72.286    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.121 ±    1413.637  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1342.000 ±    1957.072    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.018 ±       0.102    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1189760.197 ±    1571.230   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                    128  thrpt    5    242271.516 ±   10651.428   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      2561.941 ±     110.514  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     16642.358 ±     589.197    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      2411.388 ±    1403.570  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     15680.314 ±    9582.328    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.137 ±       1.094  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.885 ±       7.043    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        18.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                      128  thrpt    5     27158.133 ±     337.574   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       743.349 ±      11.872  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     43076.602 ±     783.740    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       654.190 ±       5.198  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     37909.995 ±     609.048    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.482 ±       4.152    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                     128  thrpt    5    790630.172 ±   76400.878   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1595.165 ±     159.158  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3174.916 ±     140.968    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1472.965 ±    1156.371  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2926.982 ±    2130.773    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.784 ±       4.848  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.589 ±       9.949    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                          128  thrpt    5     45157.005 ±    3835.195   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2493.837 ±     168.342  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     86944.422 ±    9451.158    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2540.064 ±    1147.186  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     88619.155 ±   42796.685    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.092 ±       5.470  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        38.362 ±     191.624    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        46.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                     128  thrpt    5    411241.158 ±   19637.075   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1080.081 ±      45.283  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      4133.263 ±     131.556    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1066.965 ±    1406.362  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4089.733 ±    5462.920    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.716 ±       6.104  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.736 ±      23.325    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        34.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1616388.950 ±   48764.201   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       975.991 ±      59.382  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       950.148 ±      35.660    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.674 ±    1414.226  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       912.014 ±    1364.496    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.056  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.012 ±       0.055    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1757477.296 ±    7800.599   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                         128  thrpt    5    366731.850 ±    7956.688   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2321.253 ±      38.652  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9961.552 ±     136.748    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2281.616 ±    1404.424  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9789.683 ±    5968.594    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.434 ±       3.511  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.863 ±      15.088    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                           128  thrpt    5     84088.391 ±    4854.191   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1703.182 ±     119.811  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     31875.018 ±    1295.058    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1587.602 ±    1395.452  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     29705.569 ±   25889.648    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.998 ±       7.832  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        18.544 ±     145.535    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                    128  thrpt    5     94766.068 ±    4840.103   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1232.649 ±      80.253  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     20473.584 ±     422.491    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1188.672 ±    1132.218  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     19694.407 ±   18130.477    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.233 ±       1.740  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.847 ±      28.638    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                   128  thrpt    5     97872.004 ±   10350.924   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1207.896 ±     151.571  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     19420.753 ±     615.268    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1191.392 ±    1137.780  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     19070.783 ±   17055.541    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.914 ±       5.478  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        15.174 ±      92.315    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        32.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                        128  thrpt    5     52909.765 ±     354.893   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2062.882 ±      31.742  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61352.372 ±     555.004    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2133.986 ±    1150.245  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     63458.440 ±   33843.056    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.497 ±       3.313  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        14.786 ±      98.469    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        16.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                          128  thrpt    5    156920.193 ±    2743.885   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1474.349 ±      24.047  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     14787.488 ±     274.920    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1465.621 ±    1140.988  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     14698.677 ±   11404.221    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.970 ±       7.778  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         9.724 ±      77.977    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        33.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                   128  thrpt    5    394243.867 ±   16656.911   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       510.645 ±      58.602  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2038.618 ±     263.163    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       528.595 ±    1137.842  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2114.160 ±    4551.998    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.007 ±       0.039  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.029 ±       0.154    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         7.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                  128  thrpt    5    949941.464 ±   38354.036   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1208.116 ±      64.477  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      2001.547 ±      99.571    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1071.938 ±    1415.815  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1775.448 ±    2339.404    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.885 ±       6.986  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.451 ±      11.453    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    975355.865 ±   18613.683   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         1.003 ±       8.633  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         1.626 ±      14.000    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                       128  thrpt    5    305444.810 ±   18966.001   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       934.310 ±      58.447  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      4814.059 ±     195.986    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       925.750 ±    1396.046  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4774.878 ±    7259.732    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.882 ±       7.342  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4.489 ±      37.343    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        29.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                       128  thrpt    5    145232.168 ±    2261.424   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1812.621 ±      53.657  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     19643.110 ±     564.870    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1723.088 ±    1394.450  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     18672.091 ±   15094.110    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.225 ±       8.595  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        13.343 ±      93.650    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                              128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                128  thrpt    5    220608.443 ±    6189.034   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       813.462 ±      57.305  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      5802.612 ±     283.438    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       796.574 ±    1142.034  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      5673.652 ±    7973.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.089 ±       0.511    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                               128  thrpt    5    570294.274 ±   13955.614   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1141.019 ±      40.873  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      3148.917 ±     159.711    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1063.106 ±    1401.043  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      2937.095 ±    3906.717    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.785 ±       5.350  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         2.163 ±      14.764    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        44.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                    128  thrpt    5    100827.966 ±    5084.373   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      3202.533 ±     146.209  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     49982.652 ±    1424.663    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      3091.728 ±    1430.110  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     48243.109 ±   21895.230    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.067 ±       0.318  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.047 ±       5.030    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        23.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        35.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                      128  thrpt    5    240388.162 ±    7017.573   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1523.276 ±      79.705  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5      9972.304 ±     427.482    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1464.199 ±    1148.184  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9587.521 ±    7567.282    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.894 ±       5.384  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.832 ±      35.168    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        32.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                               128  thrpt    5    786179.006 ±    9527.239   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       597.908 ±      31.860  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      1196.926 ±      65.221    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       530.809 ±    1142.609  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1062.882 ±    2287.964    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.079 ±       0.596  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.158 ±       1.191    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                              128  thrpt    5   1383157.027 ±  101461.339   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1053.086 ±      62.162  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      1198.174 ±      58.725    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       937.669 ±    1412.341  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1070.516 ±    1658.768    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.014 ±       0.121    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        23.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   1492226.180 ±    8000.383   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                   128  thrpt    5    627429.762 ±   21485.801   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1537.750 ±      81.911  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5      3857.072 ±      74.620    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1471.775 ±    1147.485  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3690.756 ±    2844.848    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.385 ±       3.094  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.961 ±       7.710    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                    128  thrpt    5       890.242 ±     195.713   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1983.004 ±     432.064  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5   3511456.695 ±  924483.629    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space                   128  thrpt    5         0.003 ±       0.025  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm              128  thrpt    5         5.700 ±      49.079    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace.norm                           128  thrpt    5        16.180 ±     139.318    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2008.685 ±     171.463  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5   3562956.908 ± 1085161.906    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen                               128  thrpt    5         0.493 ±       4.241  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm                          128  thrpt    5       950.284 ±    8182.235    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.448 ±       8.593  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      4231.829 ±   14633.828    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        88.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                             128  thrpt    5       914.212 ±      84.816   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1975.262 ±      76.017  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5   3400922.898 ±  270355.442    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1995.866 ±      40.110  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5   3436758.229 ±  328692.273    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.318 ±       1.741  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5       547.154 ±    2969.568    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        27.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5     45306.341 ±    3691.700   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       754.539 ±      69.405  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     26205.594 ±     316.995    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       658.519 ±       3.039  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     22880.505 ±    1981.065    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.143 ±       1.228    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        25.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                 128  thrpt    5       879.034 ±     129.713   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1944.884 ±     208.873  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5   3481670.197 ±  187910.282    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      2003.937 ±      30.636  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5   3590091.066 ±  504636.918    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.797 ±       2.529  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      1415.663 ±    4429.391    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        25.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                   128  thrpt    5     15925.746 ±    1074.306   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1372.802 ±     675.149  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5    135844.816 ±   74504.874    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1403.069 ±    1101.201  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    138984.704 ±  118823.053    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         2.484 ±       9.240  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       245.458 ±     906.932    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        97.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     19527.871 ±    2582.743   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1331.822 ±     466.941  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    107564.073 ±   46861.096    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1301.610 ±      44.038  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    104954.334 ±   11796.179    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.194 ±       6.716  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        96.574 ±     539.937    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        75.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    326832.347 ±   10890.795   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1183.982 ±      63.771  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      5700.375 ±     178.276    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1202.135 ±    1149.328  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      5784.903 ±    5494.023    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.193 ±       8.258  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         5.726 ±      39.552    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        35.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    390673.108 ±     719.338   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                128  thrpt    5     19034.248 ±    2486.117   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1356.914 ±     605.784  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5    112497.882 ±   60457.761    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1386.564 ±    1101.519  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    115019.026 ±  100375.422    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         4.197 ±      16.413  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       356.534 ±    1405.793    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        11.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        93.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                           128  thrpt    5   1385594.349 ±   62617.641   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5        56.381 ±       2.535  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5        64.035 ±       0.184    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                128  thrpt    5    124220.521 ±   16021.382   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4386.308 ±     213.538  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     55605.502 ±    4749.678    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4316.821 ±    1409.188  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     54667.971 ±   14774.506    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.046 ±       0.132  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.571 ±       1.614    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        32.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        61.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                           128  thrpt    5   2236904.280 ±   21740.003   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       620.386 ±      33.851  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       436.495 ±      27.741    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       531.799 ±    1144.739  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       374.562 ±     806.277    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.048  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.005 ±       0.034    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        17.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                          128  thrpt    5   1924385.596 ±  111585.798   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       532.620 ±      21.687  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       435.616 ±      25.692    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       534.311 ±    1150.146  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       438.898 ±     945.062    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.003 ±       0.029    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1956499.221 ±   30234.408   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.662 ±       5.698  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.535 ±       4.605    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                               128  thrpt    5     57070.963 ±    1918.150   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1996.629 ±      59.823  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     55056.027 ±     648.270    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1996.534 ±      26.069  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     55056.062 ±    1907.971    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         1.082 ±       5.304  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        29.689 ±     144.988    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        15.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        45.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                            N/A  thrpt    5   1193807.661 ±   75387.561   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      3454.498 ±     145.991  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5      4554.513 ±     133.681    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      3348.224 ±      84.768  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      4415.104 ±     330.154    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.046 ±       0.183  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.060 ±       0.235    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        25.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        31.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                      N/A  thrpt    5   4998900.781 ±  583254.645   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       312.478 ±      46.242  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5        98.371 ±       8.575    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       367.190 ±    1312.246  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       115.619 ±     414.948    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.004 ±       0.025  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.001 ±       0.008    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                     N/A  thrpt    5   1122753.458 ±   16063.123   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5      1261.087 ±      45.576  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5      1767.735 ±      68.837    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1201.415 ±    1148.694  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5      1684.891 ±    1620.719    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.283 ±       2.349  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.399 ±       3.311    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                    N/A  thrpt    5  10470343.016 ±  142157.737   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       494.715 ±      22.427  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5        74.362 ±       4.239    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       503.892 ±    1116.080  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        75.832 ±     168.098    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.021 ±       0.139  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.003 ±       0.021    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        14.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                         N/A  thrpt    5    792896.980 ±   57252.140   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2957.098 ±     237.113  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5      5869.607 ±     154.376    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2948.831 ±    1424.805  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      5848.044 ±    2569.424    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.142 ±       1.043  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.278 ±       2.045    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        22.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        34.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                  N/A  thrpt    5      5334.281 ±      74.838   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2373.319 ±      94.237  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    700177.584 ±   21247.689    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2275.891 ±    1412.124  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    671341.794 ±  413324.393    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.354 ±       1.191  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       104.600 ±     353.152    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                           N/A  thrpt    5      7886.846 ±     418.661   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      3243.832 ±     119.993  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5    647255.981 ±   24094.997    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      3091.048 ±    1412.296  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    616674.914 ±  278020.030    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.108 ±       0.755  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        21.410 ±     148.916    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        23.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        37.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                          N/A  thrpt    5     55661.281 ±    6672.559   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       935.071 ±      58.325  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     26469.386 ±    4793.107    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       937.579 ±    1413.436  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     26705.199 ±   42592.180    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.199 ±       1.711  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         5.951 ±      51.237    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        28.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                 N/A  thrpt    5      5485.271 ±      28.667   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5       984.010 ±      24.638  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    282318.509 ±    8143.566    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       931.621 ±    1404.123  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    267331.370 ±  403482.449    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.732 ±       6.051  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       210.321 ±    1739.267    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        37.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                          N/A  thrpt    5      5393.343 ±      69.324   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       590.379 ±      23.801  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5    172258.041 ±    6987.611    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       529.960 ±    1140.783  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5    154534.902 ±  332660.839    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         1.208 ±      10.403    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                         N/A  thrpt    5      6982.656 ±     127.135   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       230.513 ±      25.894  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     51952.388 ±    6372.603    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.654 ±    1079.083  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     46275.422 ±  243997.362    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.008 ±       0.069  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         1.809 ±      15.572    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5      6907.994 ±     119.490   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5       176.710 ±      20.294  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5     40253.530 ±    5307.206    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         N/A  thrpt    5       204.619 ±    1078.896  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    N/A  thrpt    5     46830.378 ±  246923.196    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                N/A  thrpt    5         0.954 ±       8.210    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                            N/A  thrpt    5      9163.526 ±     916.400   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      2136.189 ±     114.873  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5    367074.890 ±   43726.458    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1989.849 ±      12.058  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    341923.984 ±   35125.061    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.391 ±       7.182  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       241.369 ±    1239.272    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        15.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        32.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                      N/A  thrpt    5     17663.644 ±     808.847   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       482.624 ±     181.789  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5     43004.745 ±   16432.988    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       397.482 ±    1397.207  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     35538.101 ±  124943.586    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                     N/A  thrpt    5     14706.275 ±    1381.922   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5       438.030 ±     192.096  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5     46987.707 ±   24680.455    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       397.276 ±    1396.482  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     43013.892 ±  151296.974    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.879 ±       7.565    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                    N/A  thrpt    5     23031.055 ±    3049.288   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       461.746 ±     224.955  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5     31680.632 ±   19918.805    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       401.167 ±    1410.157  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     27891.703 ±   98160.417    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.157 ±       1.311  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        10.562 ±      87.872    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                         N/A  thrpt    5      6342.870 ±     261.581   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2514.732 ±      77.883  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5    623991.335 ±   23263.300    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2407.331 ±    1410.953  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5    597873.241 ±  365996.619    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.658 ±       4.504  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5       161.761 ±    1104.256    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        32.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                           N/A  thrpt    5     11901.332 ±     984.105   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                            N/A  thrpt    5      2348.525 ±     543.281  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                       N/A  thrpt    5    310910.711 ±   96448.895    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2253.222 ±    1409.477  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    298629.739 ±  206079.112    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.228 ±       1.156  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        29.802 ±     151.573    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                 N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                  N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                     N/A  thrpt    5     64575.016 ±     882.543   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                      N/A  thrpt    5       629.342 ±      32.793  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 N/A  thrpt    5     15337.258 ±     918.723    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       661.713 ±       2.213  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     16125.865 ±     236.854    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.017 ±       0.099  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.410 ±       2.414    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                           N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                            N/A  thrpt    5        18.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                    N/A  thrpt    5     44563.542 ±     837.985   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     N/A  thrpt    5       659.110 ±      14.264  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                N/A  thrpt    5     23277.184 ±     464.967    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       661.166 ±       1.438  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     23350.051 ±     418.102    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.025 ±       0.143  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.887 ±       5.102    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                          N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                           N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                   N/A  thrpt    5    118785.665 ±   11815.942   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    N/A  thrpt    5       924.689 ±      69.943  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               N/A  thrpt    5     12254.339 ±    1211.421    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       802.840 ±    1152.789  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5     10695.176 ±   16336.975    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.006 ±       0.038  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.077 ±       0.520    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                         N/A  thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                          N/A  thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                           N/A  thrpt    5    136969.737 ±     477.947   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       N/A  thrpt    5         0.003 ±       0.002    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                        N/A  thrpt    5      9395.882 ±     352.122   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                         N/A  thrpt    5      2463.284 ±     131.912  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                    N/A  thrpt    5    412560.066 ±    7905.751    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      2414.025 ±    1400.097  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5    404568.197 ±  241430.441    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.433 ±       2.648  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        73.344 ±     450.244    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                              N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                               N/A  thrpt    5        30.000                    ms
[info] IntBenchmark.readCirce                                                                      N/A  thrpt    5  13624615.408 ±  411809.538   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      6031.016 ±     133.065  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5       696.687 ±      13.739    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      5831.381 ±    1412.328  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       673.664 ±     165.826    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.058 ±       0.119  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.007 ±       0.014    B/op
[info] IntBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        43.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        55.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                N/A  thrpt    5  42888692.377 ±  453927.618   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                 N/A  thrpt    5         0.049 ±       0.418  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.002 ±       0.015    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                               N/A  thrpt    5  26775261.916 ±  172178.515   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5         0.086 ±       0.738  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5         0.005 ±       0.044    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJsoniterScala                                                              N/A  thrpt    5  47691790.266 ±   50325.220   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                 N/A  thrpt    5  31401194.132 ±  300673.238   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                  N/A  thrpt    5       821.784 ±      47.696  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        41.187 ±       2.502    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       804.364 ±    1152.373  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40.323 ±      57.933    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.004    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                        N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.readPlayJson                                                                   N/A  thrpt    5  23572707.276 ± 1504298.555   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5         0.551 ±       4.745  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5         0.037 ±       0.315    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeCirce                                                                     N/A  thrpt    5  22293647.594 ±  680598.201   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1754.787 ±      68.524  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5       123.869 ±       1.609    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1736.891 ±    1410.825  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       122.518 ±      97.609    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.824 ±       6.902  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.058 ±       0.487    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                               N/A  thrpt    5  58953938.120 ±  410683.504   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                N/A  thrpt    5      1237.139 ±      24.387  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           N/A  thrpt    5        33.025 ±       0.862    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1199.557 ±    1145.929  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        32.031 ±      30.717    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.947 ±       7.967  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.025 ±       0.213    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                      N/A  thrpt    5        30.000                    ms
[info] IntBenchmark.writeJacksonScala                                                              N/A  thrpt    5  27815793.264 ± 1237810.675   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       587.515 ±      81.204  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        33.241 ±       4.509    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       532.708 ±    1146.694  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        30.023 ±      64.636    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        17.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  50236007.214 ± 3678677.013   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1060.952 ±      42.411  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        33.248 ±       3.446    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1070.747 ±    1412.256  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        33.649 ±      45.518    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.797 ±       6.819  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.025 ±       0.211    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        31.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  65850443.541 ± 1550341.264   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5         7.072 ±      60.713  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5         0.171 ±       1.467    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                N/A  thrpt    5  26605211.461 ± 1050257.739   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                 N/A  thrpt    5      2094.840 ±     112.264  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       123.906 ±       2.026    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2014.915 ±       9.501  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       119.192 ±       4.891    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.644 ±       5.277  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.038 ±       0.315    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                      N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                       N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.writePlayJson                                                                  N/A  thrpt    5   3765932.033 ±  186440.909   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1560.068 ±      81.998  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5       651.881 ±      21.688    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1464.346 ±    1152.341  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       611.846 ±     479.121    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.908 ±       7.098  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.378 ±       2.961    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        11.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        32.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    207319.546 ±    7759.004   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      3949.759 ±      74.510  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     29982.960 ±    1025.572    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      3772.667 ±    1449.835  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     28657.764 ±   11895.203    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.025 ±       0.067  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.190 ±       0.514    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        28.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        35.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     45066.883 ±    2041.600   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2897.486 ±     166.177  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    101178.904 ±    2204.722    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2817.736 ±    1133.552  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     98435.022 ±   41294.838    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.125 ±       0.765  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.415 ±      27.172    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        21.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        32.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    224653.223 ±   10235.307   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       821.461 ±      50.723  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      5753.740 ±     341.370    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       796.756 ±    1137.232  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5583.286 ±    8011.695    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.017 ±       0.084  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.117 ±       0.584    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         6.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        11.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    517410.791 ±   11490.264   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       948.555 ±      26.558  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2885.153 ±      99.588    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       935.356 ±    1407.661  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2848.250 ±    4327.726    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.654 ±       5.433  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.980 ±      16.454    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        27.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    571008.303 ±   25870.604   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5       408.079 ±      44.434  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5      1124.781 ±     113.658    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                128  thrpt    5       401.038 ±    1409.705  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      1108.417 ±    3896.714    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.002 ±       0.018  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.006 ±       0.050    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5         3.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                               128  thrpt    5        12.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     84289.819 ±    3241.773   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1401.351 ±      40.798  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     26166.034 ±     773.308    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1333.341 ±       2.689  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     24897.163 ±     976.555    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.596 ±       3.301  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        11.236 ±      62.565    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                           128  thrpt    5    387618.058 ±   16448.896   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      2819.425 ±     117.514  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     11447.475 ±     234.743    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2666.037 ±      33.262  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10825.591 ±     475.037    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.345 ±       1.758  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.408 ±       7.181    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                  128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                    128  thrpt    5    862541.181 ±   64019.518   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1882.004 ±     133.902  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      3433.431 ±      74.454    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1872.681 ±    1144.643  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      3421.150 ±    2190.904    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.104 ±       0.810  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.192 ±       1.499    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        14.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        22.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                   128  thrpt    5   1631056.032 ±   37598.101   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      3303.706 ±     115.474  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      3187.710 ±      92.705    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      3224.269 ±    1136.802  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3110.043 ±    1047.550    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.024 ±       0.065    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        24.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                        128  thrpt    5    174769.921 ±    9909.518   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      4581.453 ±     226.336  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     41249.262 ±     479.614    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      4331.667 ±    1440.764  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     39032.372 ±   14563.682    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.262 ±       0.641    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        32.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        43.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                          128  thrpt    5    477713.759 ±   20755.215   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1564.475 ±      71.083  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5      5154.473 ±     172.945    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1469.124 ±    1157.423  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4842.044 ±    3858.647    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.871 ±       5.628  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.870 ±      18.598    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                   128  thrpt    5    968123.213 ±   14369.588   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       459.099 ±      40.351  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       746.271 ±      66.170    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       395.632 ±    1390.704  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       643.181 ±    2260.893    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.007 ±       0.058    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         5.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                  128  thrpt    5   2767266.038 ±   45527.668   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1324.958 ±      48.779  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       753.505 ±      17.696    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1338.844 ±       5.715  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       761.426 ±      15.107    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.813 ±       5.250  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.463 ±       2.990    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        10.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5   2924755.068 ±  107091.868   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         4.427 ±      38.116  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         2.419 ±      20.830    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                       128  thrpt    5    675777.395 ±   33133.811   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       944.826 ±      36.297  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      2200.621 ±     138.231    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       925.758 ±    1396.937  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2163.968 ±    3362.871    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.917 ±       7.849  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2.169 ±      18.572    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        43.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                      128  thrpt    5     76977.674 ±    3330.567   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                       128  thrpt    5      2241.960 ±      97.701  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                  128  thrpt    5     45831.887 ±    1459.889    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2130.626 ±    1137.246  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     43577.656 ±   24067.684    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.936 ±       7.297  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        19.417 ±     151.693    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                            128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                             128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                               128  thrpt    5    105617.745 ±    5444.378   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                128  thrpt    5      1916.727 ±     118.694  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     28562.122 ±     875.183    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1867.756 ±    1154.138  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     27843.016 ±   17429.203    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.288 ±       1.844  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         4.281 ±      27.402    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                              128  thrpt    5    163789.434 ±    1325.243   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2595.252 ±      54.930  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     24935.487 ±     466.925    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      2539.343 ±    1141.406  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     24396.787 ±   10912.855    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.058 ±       0.373  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.560 ±       3.593    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                    128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                     128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                   128  thrpt    5     44822.225 ±    3395.896   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                    128  thrpt    5      2520.578 ±     134.270  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                               128  thrpt    5     88505.151 ±    2400.762    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2541.803 ±    1156.346  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     89362.486 ±   44159.820    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.577 ±       4.302  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        20.624 ±     154.049    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                         128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                          128  thrpt    5        32.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                              128  thrpt    5    228364.323 ±   17943.048   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                               128  thrpt    5      1034.400 ±      84.457  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7128.807 ±     288.784    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       930.745 ±    1402.473  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      6418.516 ±    9711.019    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.021 ±       0.080  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.144 ±       0.557    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                    128  thrpt    5         7.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                     128  thrpt    5        13.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                             128  thrpt    5    575171.506 ±   42171.618   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                              128  thrpt    5       653.655 ±      44.534  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      1788.507 ±      36.759    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       667.677 ±       0.846  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1827.347 ±     134.354    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.034 ±       0.121    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                   128  thrpt    5         5.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                    128  thrpt    5        22.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                     128  thrpt    5    613807.281 ±   17950.688   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      128  thrpt    5         9.796 ±      30.021  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 128  thrpt    5        25.199 ±      77.987    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                           128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                  128  thrpt    5     93270.049 ±    5306.464   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                   128  thrpt    5      1471.094 ±     104.370  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                              128  thrpt    5     24821.508 ±     643.875    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1466.367 ±    1149.037  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     24731.191 ±   18958.922    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.458 ±       3.194  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         7.698 ±      53.486    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                        128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                         128  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                          N/A  thrpt    5   8416314.241 ±  222894.358   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                           N/A  thrpt    5      7416.536 ±     283.432  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                      N/A  thrpt    5      1386.831 ±      33.937    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      7203.088 ±    1408.985  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1346.979 ±     266.184    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.125 ±       0.204  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.023 ±       0.039    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                N/A  thrpt    5        53.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                 N/A  thrpt    5        70.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                    N/A  thrpt    5    977320.196 ±   66126.534   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                     N/A  thrpt    5       625.550 ±      62.578  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                N/A  thrpt    5      1007.246 ±      51.807    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       661.977 ±       2.078  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5      1066.247 ±      73.811    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.008 ±       0.046  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.013 ±       0.073    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                          N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                           N/A  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                   N/A  thrpt    5    446596.898 ±   17051.656   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                    N/A  thrpt    5      1004.029 ±      67.971  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                               N/A  thrpt    5      3538.839 ±     323.273    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       932.089 ±    1404.554  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5      3290.986 ±    5034.975    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.015 ±       0.125    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                         N/A  thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                          N/A  thrpt    5        16.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                  N/A  thrpt    5    786782.783 ±  179439.804   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                   N/A  thrpt    5       716.887 ±     115.410  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              N/A  thrpt    5      1435.324 ±     142.350    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5       670.340 ±       2.108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5      1344.519 ±     298.838    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.017 ±       0.148    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                        N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                         N/A  thrpt    5        18.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                              N/A  thrpt    5   5874471.135 ± 8610615.926   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                               N/A  thrpt    5      3489.757 ±    4928.451  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                          N/A  thrpt    5       938.702 ±      53.577    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                      N/A  thrpt    5      3360.765 ±    4878.524  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       904.053 ±     409.683    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.258 ±       1.688  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.092 ±       0.636    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                    N/A  thrpt    5        25.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                     N/A  thrpt    5        34.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                        N/A  thrpt    5  26408296.365 ±  557126.135   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                         N/A  thrpt    5      2358.550 ±     109.492  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                    N/A  thrpt    5       140.548 ±       4.352    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                N/A  thrpt    5      2279.278 ±    1409.706  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm           N/A  thrpt    5       135.772 ±      82.190    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space            N/A  thrpt    5         0.733 ±       5.996  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm       N/A  thrpt    5         0.044 ±       0.360    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                              N/A  thrpt    5        17.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                               N/A  thrpt    5        27.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                       N/A  thrpt    5    399140.306 ±    6786.545   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                        N/A  thrpt    5      2825.744 ±     101.380  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                   N/A  thrpt    5     11140.703 ±     311.635    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      2816.861 ±    1167.481  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     11106.246 ±    4624.180    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.500 ±       3.729  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         1.979 ±      14.782    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                             N/A  thrpt    5        21.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                              N/A  thrpt    5        36.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                    128  thrpt    5   1472814.129 ±   11569.949   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5        44.923 ±       0.357  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5        48.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                         128  thrpt    5    109331.950 ±    4514.469   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      4043.634 ±     154.249  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     58199.489 ±    1490.088    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3912.586 ±    1135.402  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     56327.519 ±   17119.353    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.025 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.359 ±       0.510    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        29.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        44.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                    128  thrpt    5   2091537.279 ±   17419.474   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       587.223 ±      30.111  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       441.810 ±      24.515    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       664.331 ±       2.613  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       499.818 ±       4.082    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.006 ±       0.054  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.005 ±       0.040    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                   128  thrpt    5   1980082.570 ±  147167.317   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       550.550 ±      66.335  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       437.482 ±      26.157    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       534.673 ±    1150.925  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       422.719 ±     910.433    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.002 ±       0.013  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.001 ±       0.010    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        15.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2013586.607 ±   23454.744   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.897 ±       7.720  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.705 ±       6.064    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                        128  thrpt    5     57397.859 ±    2781.696   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1998.103 ±      92.748  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     54780.985 ±    1159.517    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1871.771 ±    1153.897  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     51303.693 ±   31281.728    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.450 ±       2.263  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        12.471 ±      63.164    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                         128  thrpt    5    275685.821 ±    2830.602   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                          128  thrpt    5      1108.509 ±      35.778  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     128  thrpt    5      6327.812 ±     249.106    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1072.489 ±    1413.479  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5      6125.800 ±    8113.804    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.644 ±       5.319  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         3.673 ±      30.349    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                               128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                128  thrpt    5        32.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                              128  thrpt    5     52566.038 ±     958.695   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                               128  thrpt    5      2104.801 ±      54.011  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                          128  thrpt    5     63015.173 ±    1163.803    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      128  thrpt    5      2134.396 ±    1151.301  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     63883.422 ±   33710.376    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.587 ±       3.850  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        17.648 ±     115.809    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                    128  thrpt    5        16.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                     128  thrpt    5        31.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                         128  thrpt    5    158670.918 ±    6411.233   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                          128  thrpt    5      1593.654 ±      78.778  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     128  thrpt    5     15806.052 ±     490.021    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1602.480 ±    1401.511  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5     15896.851 ±   13957.165    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.171 ±       1.089  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         1.679 ±      10.692    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                               128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                128  thrpt    5        20.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                        128  thrpt    5    528124.805 ±   28955.903   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                         128  thrpt    5       727.197 ±      40.259  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    128  thrpt    5      2167.154 ±      45.990    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                128  thrpt    5       669.332 ±       1.148  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      1995.019 ±     111.777    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.037 ±       0.211    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                              128  thrpt    5         5.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                               128  thrpt    5        19.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                128  thrpt    5    582062.818 ±    4401.283   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                      128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                             128  thrpt    5     87192.437 ±    2761.604   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                              128  thrpt    5      1611.463 ±      65.697  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                         128  thrpt    5     29085.650 ±     713.160    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     128  thrpt    5      1466.639 ±    1150.001  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     26458.588 ±   20330.047    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.466 ±       2.325  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         8.426 ±      42.144    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                   128  thrpt    5        11.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                    128  thrpt    5        21.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                               128  thrpt    5    104482.524 ±    1610.229   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                128  thrpt    5      1642.010 ±      46.795  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                           128  thrpt    5     24733.315 ±     855.164    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                       128  thrpt    5      1602.716 ±    1408.995  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     24152.978 ±   21490.617    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.895 ±       5.818  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        13.531 ±      88.078    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                     128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                      128  thrpt    5        31.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                        128  thrpt    5    159489.400 ±    1590.512   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                         128  thrpt    5       774.035 ±      22.367  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                    128  thrpt    5      7637.164 ±     253.537    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                128  thrpt    5       796.837 ±    1148.464  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      7866.968 ±   11425.337    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.123 ±       0.707    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                              128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                               128  thrpt    5        11.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                       128  thrpt    5    341263.091 ±    6499.405   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                        128  thrpt    5      1446.094 ±      73.102  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   128  thrpt    5      6668.994 ±     275.005    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               128  thrpt    5      1471.541 ±    1151.524  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      6785.788 ±    5288.044    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.851 ±       6.331  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         3.939 ±      29.305    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                             128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                              128  thrpt    5        34.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                            128  thrpt    5     47306.925 ±   11335.387   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                             128  thrpt    5      2437.193 ±     383.073  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                        128  thrpt    5     81438.153 ±   28693.786    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                    128  thrpt    5      2405.389 ±    1402.189  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     80634.134 ±   59303.034    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.981 ±       6.333  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        66.516 ±     218.294    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                  128  thrpt    5        18.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                   128  thrpt    5        42.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                       128  thrpt    5    254653.436 ±   14529.623   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                        128  thrpt    5       904.934 ±      68.524  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   128  thrpt    5      5591.431 ±     274.264    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               128  thrpt    5       797.539 ±    1143.937  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      4924.513 ±    6992.054    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         0.078 ±       0.273    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                             128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                              128  thrpt    5        11.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                      128  thrpt    5    657658.280 ±   46873.831   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                       128  thrpt    5       744.377 ±      44.761  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  128  thrpt    5      1781.444 ±      65.370    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              128  thrpt    5       803.211 ±    1151.857  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      1927.095 ±    2845.560    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.012 ±       0.081  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.030 ±       0.197    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                            128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                             128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                              128  thrpt    5    761480.479 ±    5254.079   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                    128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                           128  thrpt    5     90637.125 ±   11626.049   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                            128  thrpt    5      1509.525 ±     508.192  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                       128  thrpt    5     26277.077 ±   12381.525    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   128  thrpt    5      1469.076 ±    1144.465  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     25650.282 ±   23887.780    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.098 ±       7.295  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        18.999 ±     125.221    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                 128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                  128  thrpt    5        25.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                         128  thrpt    5    119916.614 ±   16558.324   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2023.456 ±     399.134  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     26619.714 ±    9333.693    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2007.340 ±    1820.599  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26526.777 ±   27829.218    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.652 ±       3.615  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8.381 ±      46.338    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                               128  thrpt    5        15.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                128  thrpt    5        34.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                  128  thrpt    5    210444.097 ±   12167.140   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       881.347 ±      58.677  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      6591.402 ±     238.804    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       795.043 ±    1139.305  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      5936.320 ±    8318.729    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.017 ±       0.105  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.124 ±       0.774    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        14.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                 128  thrpt    5    275994.423 ±   16853.154   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1036.240 ±     153.100  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5912.673 ±    1218.586    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       931.447 ±    1402.929  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5299.443 ±    7820.541    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.594 ±       4.979  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.475 ±      29.165    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        28.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                      128  thrpt    5    100716.109 ±    4180.100   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3271.086 ±     191.709  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     51109.272 ±    1310.933    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3084.137 ±    1397.485  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     48178.386 ±   21296.441    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.137 ±       1.005  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.143 ±      15.673    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        23.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        32.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                        128  thrpt    5    247976.834 ±   13905.055   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1692.733 ±     129.716  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10742.996 ±     505.277    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1601.591 ±    1408.184  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10160.440 ±    8813.442    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.902 ±       7.144  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.772 ±      45.715    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        30.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                 128  thrpt    5    749367.342 ±   18145.652   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       406.571 ±      32.978  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       853.934 ±      69.565    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       396.614 ±    1394.156  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       833.731 ±    2930.820    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.018 ±       0.092    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                128  thrpt    5    863085.967 ±   22192.499   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       471.298 ±      30.574  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       859.391 ±      60.781    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       502.921 ±    1113.416  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       918.229 ±    2038.090    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.015 ±       0.080    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        15.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    914980.401 ±   27432.350   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        10.901 ±      93.855  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        19.007 ±     163.651    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                     128  thrpt    5     38832.679 ±    4331.420   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1855.348 ±     120.719  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     75246.527 ±   10957.167    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1856.857 ±    1143.251  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     75332.494 ±   48026.294    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.284 ±       9.187  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        54.180 ±     392.226    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        45.000                    ms
[info] PrimitivesBenchmark.readCirce                                                               N/A  thrpt    5   1134722.222 ±   50611.190   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      2604.681 ±     169.671  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5      3612.443 ±      90.053    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2529.343 ±    1142.550  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      3508.408 ±    1589.723    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.973 ±       7.801  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.348 ±      10.802    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                        N/A  thrpt    5   1855462.017 ±   28465.437   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5      1157.177 ±      40.817  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5       981.431 ±      46.747    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      1200.283 ±    1149.119  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1018.643 ±     983.314    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.258 ±       2.133  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.219 ±       1.811    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                       N/A  thrpt    5   9697056.953 ±  246174.131   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       304.743 ±      30.612  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5        49.463 ±       5.558    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       338.492 ±    1215.354  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5        55.069 ±     197.972    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.001 ±       0.006    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                            N/A  thrpt    5    497592.214 ±   21990.198   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      2157.581 ±      92.805  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5      6823.842 ±     222.622    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2003.840 ±       6.351  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      6338.073 ±     280.234    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.681 ±       4.844  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         2.148 ±      15.248    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                              N/A  thrpt    5   1929903.272 ±  103098.093   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                               N/A  thrpt    5      1981.024 ±     156.491  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                          N/A  thrpt    5      1615.599 ±     108.503    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1862.599 ±    1128.948  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1518.186 ±     900.006    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.075 ±       0.348  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.061 ±       0.281    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                    N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                     N/A  thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                       N/A  thrpt    5   2996059.671 ±   26055.958   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5      1172.982 ±      48.668  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5       616.161 ±      26.053    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1062.137 ±    1397.604  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       558.068 ±     735.834    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.010 ±       0.040  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.005 ±       0.021    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                      N/A  thrpt    5   8991824.271 ±  768953.300   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       756.569 ±      34.902  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5       132.436 ±       7.079    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       668.233 ±       1.363  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       116.995 ±      10.326    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.011 ±       0.094  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.002 ±       0.017    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        20.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5   9067427.049 ±  131501.899   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5       280.882 ±      16.484  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5        48.745 ±       3.315    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       204.684 ±    1079.241  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5        35.663 ±     188.042    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.012 ±       0.092  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.002 ±       0.016    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                           N/A  thrpt    5    513474.742 ±    6085.170   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                            N/A  thrpt    5      2647.280 ±     107.611  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       N/A  thrpt    5      8113.478 ±     252.633    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2685.034 ±      31.041  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      8229.326 ±      70.031    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.441 ±       3.404  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         1.358 ±      10.478    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                 N/A  thrpt    5        20.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                  N/A  thrpt    5        32.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                128  thrpt    5     99844.279 ±    4903.608   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2772.941 ±     165.138  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     43704.256 ±    1236.427    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2714.004 ±    1118.777  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42763.102 ±   16806.573    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         2.401 ±      11.921  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.824 ±     187.453    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        21.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        87.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                         128  thrpt    5    144854.639 ±    9671.482   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2274.733 ±     185.249  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     24710.625 ±     604.890    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2143.458 ±    1166.684  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     23271.643 ±   11965.423    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.212 ±       1.092  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.350 ±      12.151    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                        128  thrpt    5    174908.097 ±    6738.238   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2647.714 ±      62.874  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     23824.474 ±     632.093    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2520.398 ±    1132.650  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     22690.210 ±   10586.229    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.066 ±       5.708  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         9.542 ±      51.139    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        39.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                             128  thrpt    5     83933.504 ±    4663.434   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3698.016 ±     108.884  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     69346.124 ±    2322.670    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3641.176 ±    1444.376  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     68312.264 ±   28643.326    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.050 ±       0.166  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.934 ±       3.067    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        27.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        39.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                               128  thrpt    5    257521.073 ±   15882.581   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1766.478 ±     126.718  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     10794.487 ±     165.625    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1734.930 ±    1404.967  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10596.321 ±    8453.452    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.877 ±       7.105  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5.467 ±      44.371    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                        128  thrpt    5    790304.145 ±   53806.439   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       470.377 ±      18.247  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       936.933 ±      69.285    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       396.686 ±    1394.410  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       796.731 ±    2800.687    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.017 ±       0.088    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         5.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                       128  thrpt    5    806037.500 ±   55718.926   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       444.938 ±      37.077  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       868.876 ±      81.036    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       399.777 ±    1405.273  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       783.857 ±    2756.184    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.003 ±       0.022  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.005 ±       0.044    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        12.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    834728.736 ±   19535.540   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         8.487 ±       0.197  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                            128  thrpt    5     38975.389 ±    2445.888   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1824.680 ±     423.951  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     73715.717 ±   19858.481    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1726.446 ±    1397.406  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     69698.440 ±   56082.841    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.987 ±       4.341  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        40.432 ±     178.844    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                       128  thrpt    5   4494338.380 ±  113681.044   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      3501.624 ±      40.684  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5      1226.141 ±      33.295    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      3358.005 ±      77.752  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1175.875 ±      51.175    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.029 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.010 ±       0.015    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                             128  thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                              128  thrpt    5        34.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                 128  thrpt    5   6611227.502 ±   66248.581   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                  128  thrpt    5      1278.649 ±      23.689  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                             128  thrpt    5       304.372 ±       6.967    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                         128  thrpt    5      1332.031 ±       4.481  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       317.078 ±       3.058    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.988 ±       8.095  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.235 ±       1.928    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                       128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                        128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                128  thrpt    5   5177894.360 ±  229137.298   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1057.497 ±      68.694  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5       321.393 ±      15.094    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1063.263 ±    1401.298  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       323.032 ±     424.337    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.021 ±       0.070  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.006 ±       0.021    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                               128  thrpt    5   6647158.078 ±  410476.368   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1288.656 ±      77.054  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5       305.088 ±       5.555    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1340.440 ±       4.527  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       317.409 ±      19.916    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.793 ±       6.674  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.186 ±       1.569    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                    128  thrpt    5   5464459.028 ±  129604.940   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1069.118 ±      80.949  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5       307.948 ±      26.804    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1068.753 ±    1408.769  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       307.923 ±     406.941    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.769 ±       6.484  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.220 ±       1.857    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        32.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                      128  thrpt    5   3321339.635 ±  115070.661   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1837.651 ±      20.336  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5       870.851 ±      29.232    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1869.490 ±    1152.060  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       886.304 ±     555.363    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.846 ±       7.148  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.400 ±       3.379    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        14.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                128  thrpt    5   6847093.402 ±  111530.457   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                 128  thrpt    5       684.122 ±       9.387  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                            128  thrpt    5       157.231 ±       3.092    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                        128  thrpt    5       665.040 ±       1.920  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       152.846 ±       2.888    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.013 ±       0.068  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.003 ±       0.016    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                      128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                       128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                               128  thrpt    5   6332116.157 ±  466931.643   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       626.148 ±      33.410  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5       155.653 ±       8.716    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       531.915 ±    1144.990  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       133.004 ±     286.454    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.018 ±       0.097  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.005 ±       0.024    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                              128  thrpt    5   7069171.233 ±  618233.346   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5       708.108 ±      38.805  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5       157.662 ±      10.240    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       669.140 ±       1.619  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       149.014 ±      13.547    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.039 ±       0.138  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.009 ±       0.031    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   7100739.700 ± 1169852.986   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                   128  thrpt    5   6133094.475 ±  152359.050   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       611.079 ±      12.479  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5       156.798 ±       4.540    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       533.684 ±    1148.795  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       137.281 ±     295.516    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.001 ±       0.009    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                    128  thrpt    5   1762996.286 ±  188344.517   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2297.128 ±      85.721  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      2051.411 ±     162.607    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2272.244 ±    1414.497  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2026.645 ±    1185.273    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.096 ±       7.395  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.978 ±       6.527    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                           128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                              128  thrpt    5   3003003.902 ±   46460.507   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                               128  thrpt    5       580.089 ±      27.838  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                          128  thrpt    5       304.025 ±      17.858    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                      128  thrpt    5       531.337 ±    1143.745  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       278.900 ±     600.364    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.003 ±       0.028  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.002 ±       0.015    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                    128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                     128  thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                             128  thrpt    5   1849442.894 ±   15365.675   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       377.706 ±      38.230  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5       321.427 ±      34.783    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       397.043 ±    1395.661  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       338.302 ±    1189.183    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.004 ±       0.031    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                            128  thrpt    5   2274366.213 ±   28228.042   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       436.689 ±      33.244  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5       302.189 ±      23.993    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       369.998 ±    1323.973  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       256.338 ±     917.286    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.009 ±       0.050    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                 128  thrpt    5   1887303.834 ±   63025.015   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5       361.887 ±      35.946  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5       301.776 ±      30.479    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       265.433 ±    1399.550  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       221.846 ±    1169.789    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                       128  thrpt    5         2.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                        128  thrpt    5         3.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                   128  thrpt    5   2509921.235 ±   68511.731   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1808.601 ±      77.407  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      1134.112 ±      70.109    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1736.284 ±    1405.598  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1089.036 ±     888.108    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.868 ±       7.118  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.548 ±       4.497    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                         128  thrpt    5        13.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                          128  thrpt    5        30.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                             128  thrpt    5   3629948.525 ±  217889.536   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                              128  thrpt    5       968.515 ±      81.259  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                         128  thrpt    5       419.859 ±      14.049    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                     128  thrpt    5       931.971 ±    1406.240  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       403.175 ±     596.687    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.009 ±       0.042  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.004 ±       0.018    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                   128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                    128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                            128  thrpt    5   3369083.981 ±   82998.730   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       900.071 ±      35.166  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       420.477 ±      19.164    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       933.756 ±    1407.432  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       436.518 ±     661.826    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.019 ±       0.052  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.009 ±       0.025    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                           128  thrpt    5   3636018.606 ±   62400.425   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5       979.009 ±      41.361  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       423.743 ±      22.693    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1071.818 ±    1412.819  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       463.716 ±     609.203    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.017 ±       0.117  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.007 ±       0.051    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   3901311.680 ±   24363.556   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                128  thrpt    5   3357305.021 ±  138589.435   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       903.330 ±      65.809  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5       423.513 ±      39.869    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       801.598 ±    1149.560  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       376.399 ±     550.646    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.006 ±       0.033    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                               N/A  thrpt    5     12011.163 ±    1933.492   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      1616.377 ±     385.800  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5    212379.992 ±   79726.031    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space                              N/A  thrpt    5         0.003 ±       0.028  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm                         N/A  thrpt    5         0.454 ±       3.913    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace                                           N/A  thrpt    5         0.009 ±       0.077  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace.norm                                      N/A  thrpt    5         1.256 ±      10.818    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1631.363 ±    1312.176  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    213355.425 ±  156092.463    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.695 ±       9.071  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       231.872 ±    1263.126    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        79.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                        N/A  thrpt    5     22560.510 ±    3081.144   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5       384.206 ±     183.034  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5     26919.775 ±   16470.138    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       366.522 ±    1309.465  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5     25806.291 ±   92525.145    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.175 ±       1.460  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        11.848 ±      98.921    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                       N/A  thrpt    5     21689.287 ±    1380.998   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       268.200 ±     261.526  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     19527.087 ±   20569.030    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.664 ±    1079.136  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     15015.872 ±   79193.918    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                            N/A  thrpt    5      8679.366 ±     527.368   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      1897.654 ±     126.026  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5    344025.389 ±   12312.295    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1866.302 ±    1147.878  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    338655.034 ±  215070.453    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.729 ±       4.666  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       133.622 ±     860.503    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        36.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                       N/A  thrpt    5     65687.315 ±    4233.119   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5       863.623 ±      17.697  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     20693.489 ±     978.456    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       796.622 ±    1140.164  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     19172.283 ±   28935.150    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.197 ±       1.696    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        17.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                      N/A  thrpt    5    110555.884 ±     894.132   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       730.284 ±      49.595  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5     10394.968 ±     710.967    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       802.656 ±    1153.253  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     11426.147 ±   16435.624    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.178 ±       0.624    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5    119151.920 ±    9710.789   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5         0.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                         128  thrpt    5    411551.648 ±   79962.356   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2393.382 ±     575.646  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5      9151.438 ±    1153.984    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2267.200 ±    1393.505  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8657.024 ±    4547.243    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.998 ±       3.857  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.695 ±      14.246    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                               128  thrpt    5        17.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                128  thrpt    5        31.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                  128  thrpt    5    949429.928 ±   29019.076   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       671.534 ±      35.600  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1113.093 ±      39.350    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       662.083 ±       2.030  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1097.506 ±      36.374    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.002 ±       0.013  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.003 ±       0.023    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        25.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5   1983114.620 ±  139476.023   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1010.080 ±      66.288  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       801.576 ±      35.826    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       937.420 ±    1412.233  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       745.098 ±    1137.299    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.020 ±       0.078  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.016 ±       0.061    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        26.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5    191172.777 ±   17381.989   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      4709.564 ±     311.865  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     38777.664 ±    1647.366    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      4598.566 ±    1185.727  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     37861.043 ±    9507.960    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.279 ±       2.044  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.367 ±      17.458    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        34.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        46.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                        128  thrpt    5    471300.812 ±   10921.867   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1542.111 ±      38.347  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5      5149.474 ±      38.740    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1468.383 ±    1143.684  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4902.082 ±    3779.557    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.895 ±       7.395  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3.012 ±      24.896    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                               128  thrpt    5        29.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    928457.151 ±    2625.424   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       442.176 ±      33.482  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       749.531 ±      57.984    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       395.914 ±    1391.693  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       671.431 ±    2360.178    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.014 ±       0.074    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5   1601420.732 ±  144119.058   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       763.417 ±      54.496  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       750.277 ±      24.433    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.700 ±    1150.793  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       788.155 ±    1113.663    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.004 ±       0.035    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        19.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5   1709301.596 ±   11980.469   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.052 ±       0.449  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.048 ±       0.414    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5    657966.473 ±   36276.388   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       918.490 ±      68.372  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      2196.789 ±      46.394    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       925.124 ±    1391.747  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2207.946 ±    3257.025    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.785 ±       6.717  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.922 ±      16.447    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        37.000                    ms
[info] Benchmark result is saved to graalvmee1.json
[success] Total time: 7196 s, completed May 6, 2018 10:37:59 PM
